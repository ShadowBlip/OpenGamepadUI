[gd_resource type="Resource" script_class="HandheldPlatform" load_steps=22 format=3 uid="uid://cyeeptbigdvby"]

[ext_resource type="Script" path="res://core/systems/input/sysfs_device.gd" id="1_huulp"]
[ext_resource type="Script" path="res://core/systems/input/events/evdev_key_event.gd" id="2_ghbd5"]
[ext_resource type="Script" path="res://core/platform/handheld/handheld_platform.gd" id="4_epau8"]

[sub_resource type="Resource" id="Resource_gba37"]
script = ExtResource("1_huulp")
phys_path = "usb-0000:04:00.3-4/input0"
name = "Microsoft X-Box 360 pad"

[sub_resource type="Resource" id="Resource_efbap"]
script = ExtResource("2_ghbd5")
code = "KEY_VOLUMEUP"

[sub_resource type="Resource" id="Resource_skaxw"]
script = ExtResource("2_ghbd5")
code = "KEY_VOLUMEUP"

[sub_resource type="GDScript" id="GDScript_5auqi"]
script/source = "@icon(\"res://assets/editor-icons/mind-map.svg\")
extends MappableEvent
class_name HandheldEventMapping

## Name of the event to emit
@export var name: String
## List of events that will trigger this MappedEvent.
@export var activation_keys: Array[EvdevEvent]
## Emits this event when the activation keys are triggered
@export var emits: MappableEvent

## Will show logger statements in the event log with the prefix [HandheldEventMapping].
var logger := Log.get_logger(\"HandheldEventMapping\", Log.LEVEL.INFO)


## Checks if the given Array of EvdevEvents matches the activation_keys array.
func output_events_match(active_event: Array[EvdevEvent]) -> bool:
#	logger.debug(\"Checking active events against event list.\")
	if active_event.size() != activation_keys.size() or active_event.size() == 0:
#		logger.debug(\"Event list too short\")
		return false
	for i in active_event.size():
		if not active_event[i].matches(activation_keys[i]):
#			logger.debug(\"Event list doesn't match active event\")
			return false
	return true


## Checks if the given Array of EvdevEvents matches the activation_keys array.
func trigger_events_match(active_keys: Array[EvdevEvent]) -> bool:
#	logger.debug(\"Checking active keys against key actvation keys.\")
	if active_keys.size() != activation_keys.size() or active_keys.size() == 0:
#		logger.debug(\"Event list too short. Active_keys.size():\" + str(active_keys.size()) + \" Activation_keys.size(): \" + str(activation_keys.size()))
		return false
	for i in active_keys.size():
#		logger.debug(\"Checking event \" + str(active_keys[i].get_event_type()) + \" \" + str(active_keys[i].get_event_code()))
#		logger.debug(\"Against event \" + str(activation_keys[i].get_event_type()) + \" \" + str(activation_keys[i].get_event_code()))
		if not activation_keys[i].matches(active_keys[i]):
#			logger.debug(\"Activation list doesn't match active keys.\")
			return false
	return true
"

[sub_resource type="Resource" id="Resource_gmed6"]
script = SubResource("GDScript_5auqi")
name = "Volume Up"
activation_keys = Array[Resource("res://core/systems/input/events/evdev_event.gd")]([SubResource("Resource_efbap")])
emits = SubResource("Resource_skaxw")

[sub_resource type="Resource" id="Resource_l8u3c"]
script = ExtResource("2_ghbd5")
code = "KEY_VOLUMEDOWN"

[sub_resource type="Resource" id="Resource_d2nwm"]
script = ExtResource("2_ghbd5")
code = "KEY_VOLUMEDOWN"

[sub_resource type="Resource" id="Resource_2pekw"]
script = SubResource("GDScript_5auqi")
name = "Volume Down"
activation_keys = Array[Resource("res://core/systems/input/events/evdev_event.gd")]([SubResource("Resource_l8u3c")])
emits = SubResource("Resource_d2nwm")

[sub_resource type="Resource" id="Resource_281wj"]
script = ExtResource("2_ghbd5")
code = "KEY_T"

[sub_resource type="Resource" id="Resource_gc4ci"]
script = ExtResource("2_ghbd5")
code = "KEY_LEFTCTRL"

[sub_resource type="Resource" id="Resource_txukw"]
script = ExtResource("2_ghbd5")
code = "KEY_LEFTSHIFT"

[sub_resource type="Resource" id="Resource_pymwp"]
script = ExtResource("2_ghbd5")
code = "KEY_LEFTALT"

[sub_resource type="Resource" id="Resource_14g7q"]
script = ExtResource("2_ghbd5")
code = "BTN_BASE"

[sub_resource type="Resource" id="Resource_yo3b5"]
script = SubResource("GDScript_5auqi")
name = "Turbo"
activation_keys = Array[Resource("res://core/systems/input/events/evdev_event.gd")]([SubResource("Resource_281wj"), SubResource("Resource_gc4ci"), SubResource("Resource_txukw"), SubResource("Resource_pymwp")])
emits = SubResource("Resource_14g7q")

[sub_resource type="Resource" id="Resource_hsfpc"]
script = ExtResource("2_ghbd5")
code = "KEY_DELETE"

[sub_resource type="Resource" id="Resource_617l0"]
script = ExtResource("2_ghbd5")
code = "BTN_BASE2"

[sub_resource type="Resource" id="Resource_q1xca"]
script = SubResource("GDScript_5auqi")
name = "Home + Turbo"
activation_keys = Array[Resource("res://core/systems/input/events/evdev_event.gd")]([SubResource("Resource_hsfpc")])
emits = SubResource("Resource_617l0")

[sub_resource type="Resource" id="Resource_14far"]
script = ExtResource("1_huulp")
phys_path = "isa0060/serio0/input0"
name = "AT Translated Set 2 keyboard"

[resource]
script = ExtResource("4_epau8")
key_map = Array[SubResource("GDScript_5auqi")]([SubResource("Resource_gmed6"), SubResource("Resource_2pekw"), SubResource("Resource_yo3b5"), SubResource("Resource_q1xca")])
filtered_events = Array[Resource("res://core/systems/input/events/evdev_event.gd")]([])
keypads = Array[ExtResource("1_huulp")]([SubResource("Resource_14far")])
gamepad = SubResource("Resource_gba37")
icon_mappings = Array[Resource("res://core/platform/handheld/handheld_icon_mapping.gd")]([])
thermal_policy_path = ""
name = ""
startup_actions = Array[Resource("res://core/platform/actions/platform_action.gd")]([])
shutdown_actions = Array[Resource("res://core/platform/actions/platform_action.gd")]([])
