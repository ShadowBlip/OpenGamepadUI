#
#                               ,;               :      L.                                             ,;
#           .    .            f#i       ittttttttEf     EW:        ,ft         .Gt            i      f#i
#  GEEEEEEELDi   Dt         .E#t        fDDK##DDiE#t    E##;       t#E        j#W:           LE    .E#t
#  ,;;L#K;;.E#i  E#i       i#W,            t#E   E#t    E###t      t#E      ;K#f            L#E   i#W,
#     t#E   E#t  E#t      L#D.             t#E   E#t    E#fE#f     t#E    .G#D.            G#W.  L#D.
#     t#E   E#t  E#t    :K#Wfff;           t#E   E#t fi E#t D#G    t#E   j#K;             D#K. :K#Wfff;
#     t#E   E########f. i##WLLLLt          t#E   E#t L#jE#t  f#E.  t#E ,K#f   ,GD;       E#K.  i##WLLLLt
#     t#E   E#j..K#j...  .E#L              t#E   E#t L#LE#t   t#K: t#E  j#Wi   E#t     .E#E.    .E#L
#     t#E   E#t  E#t       f#E:          jfL#E   E#tf#E:E#t    ;#W,t#E   .G#D: E#t    .K#E        f#E:
#     t#E   E#t  E#t        ,WW;         :K##E   E###f  E#t     :K#D#E     ,K#fK#t   .K#D          ,WW;
#     t#E   f#t  f#t         .D#;          G#E   E#K,   E#t      .E##E       j###t  .W#G            .D#;
#      fE    ii   ii           tt           tE   EL     ..         G#E        .G#t :W##########Wt     tt
#       :                                    .   :                  fE          ;; :,,,,,,,,,,,,,.
#                                                                    ,
#
# The following is pretty verbose, here is the tl;dr:
# - Utility functions exposed as nice inline function
# - Builtins structure definition with both Cython and C in `cdef extern from *`
# - Builtins' constructors/destructor/methods/operators exposed as nice inline function
# - Builtins&global constants as #define


cimport cython
from libc.stdint cimport *
from libc.string cimport memset

from .gdextension_interface cimport *
from .gdnative_ptrs cimport *


##############################################################################
#                         String operation helpers                           #
##############################################################################


cdef extern from "Python.h":
    const char* PyUnicode_AsUTF8AndSize(object, ssize_t*)
    object PyUnicode_DecodeUTF32(const char *s, ssize_t size, const char *errors, int *byteorder)


cdef inline gd_string_t gd_string_from_utf8(const char *cstr, ssize_t cstr_size):
    cdef gd_string_t gdstr
    pythonscript_gdextension.string_new_with_utf8_chars_and_len(&gdstr, cstr, cstr_size)
    return gdstr


cdef inline gd_string_t gd_string_from_unchecked_pystr(object pystr):
    cdef ssize_t buffsize
    cdef const char *buff = PyUnicode_AsUTF8AndSize(pystr, &buffsize)
    return gd_string_from_utf8(buff, buffsize)


cdef inline object gd_string_to_pystr(gd_string_t *gdstr):
    cdef GDExtensionInt l = pythonscript_gdextension.string_to_utf32_chars(gdstr, NULL, 0)
    cdef const char32_t *gdbuff = pythonscript_gdextension.string_operator_index_const(gdstr, 0)
    return PyUnicode_DecodeUTF32(<char *>gdbuff, l * cython.sizeof(char32_t), NULL, NULL)


##############################################################################
#                        Builtins stucts                                     #
##############################################################################


# Renames to stay consistent with other builtins naming convention we use
ctypedef GDExtensionBool gd_bool_t
ctypedef uint64_t gd_int_t
ctypedef double gd_float_t
# Note we don't really care this is a pointer as we always treat it as an opaque structure
ctypedef GDExtensionObjectPtr gd_object_t

# Declare builtins structures in `cdef extern` to also provide a C struct definition
# so that they can be used in exported to C functions (i.e. `cdef api` functions)


cdef extern from * nogil:
    """
    typedef struct gd_variant_t {
        char _gd_opaque[24];
    } gd_variant_t;
    """
    struct gd_variant_t:
        char _gd_opaque[24]




cdef extern from * nogil:
    """
    typedef struct gd_string_t {
        char _gd_opaque[8];
    } gd_string_t;
    """
    struct gd_string_t:
        char _gd_opaque[8]



cdef extern from * nogil:
    """
    typedef struct gd_vector2_t {
        float x;
        float y;
    } gd_vector2_t;
    """
    struct gd_vector2_t:
        float x
        float y



cdef extern from * nogil:
    """
    typedef struct gd_vector2i_t {
        int32_t x;
        int32_t y;
    } gd_vector2i_t;
    """
    struct gd_vector2i_t:
        int32_t x
        int32_t y



cdef extern from * nogil:
    """
    typedef struct gd_rect2_t {
        gd_vector2_t position;
        gd_vector2_t size;
    } gd_rect2_t;
    """
    struct gd_rect2_t:
        gd_vector2_t position
        gd_vector2_t size



cdef extern from * nogil:
    """
    typedef struct gd_rect2i_t {
        gd_vector2i_t position;
        gd_vector2i_t size;
    } gd_rect2i_t;
    """
    struct gd_rect2i_t:
        gd_vector2i_t position
        gd_vector2i_t size



cdef extern from * nogil:
    """
    typedef struct gd_vector3_t {
        float x;
        float y;
        float z;
    } gd_vector3_t;
    """
    struct gd_vector3_t:
        float x
        float y
        float z



cdef extern from * nogil:
    """
    typedef struct gd_vector3i_t {
        int32_t x;
        int32_t y;
        int32_t z;
    } gd_vector3i_t;
    """
    struct gd_vector3i_t:
        int32_t x
        int32_t y
        int32_t z



cdef extern from * nogil:
    """
    typedef struct gd_transform2d_t {
        gd_vector2_t x;
        gd_vector2_t y;
        gd_vector2_t origin;
    } gd_transform2d_t;
    """
    struct gd_transform2d_t:
        gd_vector2_t x
        gd_vector2_t y
        gd_vector2_t origin



cdef extern from * nogil:
    """
    typedef struct gd_vector4_t {
        float x;
        float y;
        float z;
        float w;
    } gd_vector4_t;
    """
    struct gd_vector4_t:
        float x
        float y
        float z
        float w



cdef extern from * nogil:
    """
    typedef struct gd_vector4i_t {
        int32_t x;
        int32_t y;
        int32_t z;
        int32_t w;
    } gd_vector4i_t;
    """
    struct gd_vector4i_t:
        int32_t x
        int32_t y
        int32_t z
        int32_t w



cdef extern from * nogil:
    """
    typedef struct gd_plane_t {
        float d;
        gd_vector3_t normal;
    } gd_plane_t;
    """
    struct gd_plane_t:
        float d
        gd_vector3_t normal



cdef extern from * nogil:
    """
    typedef struct gd_quaternion_t {
        float x;
        float y;
        float z;
        float w;
    } gd_quaternion_t;
    """
    struct gd_quaternion_t:
        float x
        float y
        float z
        float w



cdef extern from * nogil:
    """
    typedef struct gd_aabb_t {
        gd_vector3_t position;
        gd_vector3_t size;
    } gd_aabb_t;
    """
    struct gd_aabb_t:
        gd_vector3_t position
        gd_vector3_t size



cdef extern from * nogil:
    """
    typedef struct gd_basis_t {
        gd_vector3_t x;
        gd_vector3_t y;
        gd_vector3_t z;
    } gd_basis_t;
    """
    struct gd_basis_t:
        gd_vector3_t x
        gd_vector3_t y
        gd_vector3_t z



cdef extern from * nogil:
    """
    typedef struct gd_transform3d_t {
        gd_basis_t basis;
        gd_vector3_t origin;
    } gd_transform3d_t;
    """
    struct gd_transform3d_t:
        gd_basis_t basis
        gd_vector3_t origin



cdef extern from * nogil:
    """
    typedef struct gd_projection_t {
        gd_vector4_t x;
        gd_vector4_t y;
        gd_vector4_t z;
        gd_vector4_t w;
    } gd_projection_t;
    """
    struct gd_projection_t:
        gd_vector4_t x
        gd_vector4_t y
        gd_vector4_t z
        gd_vector4_t w



cdef extern from * nogil:
    """
    typedef struct gd_color_t {
        float r;
        float g;
        float b;
        float a;
    } gd_color_t;
    """
    struct gd_color_t:
        float r
        float g
        float b
        float a



cdef extern from * nogil:
    """
    typedef struct gd_string_name_t {
        char _gd_opaque[8];
    } gd_string_name_t;
    """
    struct gd_string_name_t:
        char _gd_opaque[8]



cdef extern from * nogil:
    """
    typedef struct gd_node_path_t {
        char _gd_opaque[8];
    } gd_node_path_t;
    """
    struct gd_node_path_t:
        char _gd_opaque[8]



cdef extern from * nogil:
    """
    typedef struct gd_rid_t {
        char _gd_opaque[8];
    } gd_rid_t;
    """
    struct gd_rid_t:
        char _gd_opaque[8]



cdef extern from * nogil:
    """
    typedef struct gd_callable_t {
        char _gd_opaque[16];
    } gd_callable_t;
    """
    struct gd_callable_t:
        char _gd_opaque[16]



cdef extern from * nogil:
    """
    typedef struct gd_signal_t {
        char _gd_opaque[16];
    } gd_signal_t;
    """
    struct gd_signal_t:
        char _gd_opaque[16]



cdef extern from * nogil:
    """
    typedef struct gd_dictionary_t {
        char _gd_opaque[8];
    } gd_dictionary_t;
    """
    struct gd_dictionary_t:
        char _gd_opaque[8]



cdef extern from * nogil:
    """
    typedef struct gd_array_t {
        char _gd_opaque[8];
    } gd_array_t;
    """
    struct gd_array_t:
        char _gd_opaque[8]



cdef extern from * nogil:
    """
    typedef struct gd_packed_byte_array_t {
        char _gd_opaque[16];
    } gd_packed_byte_array_t;
    """
    struct gd_packed_byte_array_t:
        char _gd_opaque[16]



cdef extern from * nogil:
    """
    typedef struct gd_packed_int32_array_t {
        char _gd_opaque[16];
    } gd_packed_int32_array_t;
    """
    struct gd_packed_int32_array_t:
        char _gd_opaque[16]



cdef extern from * nogil:
    """
    typedef struct gd_packed_int64_array_t {
        char _gd_opaque[16];
    } gd_packed_int64_array_t;
    """
    struct gd_packed_int64_array_t:
        char _gd_opaque[16]



cdef extern from * nogil:
    """
    typedef struct gd_packed_float32_array_t {
        char _gd_opaque[16];
    } gd_packed_float32_array_t;
    """
    struct gd_packed_float32_array_t:
        char _gd_opaque[16]



cdef extern from * nogil:
    """
    typedef struct gd_packed_float64_array_t {
        char _gd_opaque[16];
    } gd_packed_float64_array_t;
    """
    struct gd_packed_float64_array_t:
        char _gd_opaque[16]



cdef extern from * nogil:
    """
    typedef struct gd_packed_string_array_t {
        char _gd_opaque[16];
    } gd_packed_string_array_t;
    """
    struct gd_packed_string_array_t:
        char _gd_opaque[16]



cdef extern from * nogil:
    """
    typedef struct gd_packed_vector2_array_t {
        char _gd_opaque[16];
    } gd_packed_vector2_array_t;
    """
    struct gd_packed_vector2_array_t:
        char _gd_opaque[16]



cdef extern from * nogil:
    """
    typedef struct gd_packed_vector3_array_t {
        char _gd_opaque[16];
    } gd_packed_vector3_array_t;
    """
    struct gd_packed_vector3_array_t:
        char _gd_opaque[16]



cdef extern from * nogil:
    """
    typedef struct gd_packed_color_array_t {
        char _gd_opaque[16];
    } gd_packed_color_array_t;
    """
    struct gd_packed_color_array_t:
        char _gd_opaque[16]




##############################################################################
#                        Builtins methods                                    #
##############################################################################


cdef inline gd_variant_t gd_variant_new():
    cdef gd_variant_t variant
    # Zero-init is a fast way to represent a Nil variant
    variant._gd_opaque[0] = 0
    variant._gd_opaque[1] = 0
    variant._gd_opaque[2] = 0
    variant._gd_opaque[3] = 0
    variant._gd_opaque[4] = 0
    variant._gd_opaque[5] = 0
    variant._gd_opaque[6] = 0
    variant._gd_opaque[7] = 0
    variant._gd_opaque[8] = 0
    variant._gd_opaque[9] = 0
    variant._gd_opaque[10] = 0
    variant._gd_opaque[11] = 0
    variant._gd_opaque[12] = 0
    variant._gd_opaque[13] = 0
    variant._gd_opaque[14] = 0
    variant._gd_opaque[15] = 0
    variant._gd_opaque[16] = 0
    variant._gd_opaque[17] = 0
    variant._gd_opaque[18] = 0
    variant._gd_opaque[19] = 0
    variant._gd_opaque[20] = 0
    variant._gd_opaque[21] = 0
    variant._gd_opaque[22] = 0
    variant._gd_opaque[23] = 0
    return variant


cdef inline void gd_variant_del(gd_variant_t *variant):
    pythonscript_gdextension.variant_destroy(variant)


cdef inline GDExtensionObjectPtr gd_object_from_variant(gd_variant_t *val):
    cdef GDExtensionObjectPtr ret
    gd_object_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_object_into_variant(GDExtensionObjectPtr val):
    cdef gd_variant_t ret
    gd_object_into_variant_ptr(&ret, &val)
    return ret



cdef inline uint8_t gd_bool_from_variant(gd_variant_t *val):
    cdef uint8_t ret
    gd_bool_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_bool_into_variant(uint8_t val):
    cdef gd_variant_t ret
    gd_bool_into_variant_ptr(&ret, &val)
    return ret



cdef inline uint64_t gd_int_from_variant(gd_variant_t *val):
    cdef uint64_t ret
    gd_int_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_int_into_variant(uint64_t val):
    cdef gd_variant_t ret
    gd_int_into_variant_ptr(&ret, &val)
    return ret



cdef inline double gd_float_from_variant(gd_variant_t *val):
    cdef double ret
    gd_float_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_float_into_variant(double val):
    cdef gd_variant_t ret
    gd_float_into_variant_ptr(&ret, &val)
    return ret



cdef inline gd_string_t gd_string_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_string_t ret = gd_string_new()
    gd_string_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_string_into_variant(gd_string_t *val):
    cdef gd_variant_t ret
    gd_string_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_string_t gd_string_new():
    cdef gd_string_t obj
    gd_string_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_string_t gd_string_new_from_string(gd_string_t* from_):
    cdef gd_string_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_string_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_string_t gd_string_new_from_string_name(gd_string_name_t* from_):
    cdef gd_string_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_string_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_string_t gd_string_new_from_node_path(gd_node_path_t* from_):
    cdef gd_string_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_string_constructor_3_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline void gd_string_del(gd_string_t* self):
    gd_string_destructor_ptr(self)

cdef inline uint64_t gd_string_casecmp_to(gd_string_t *self, gd_string_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_casecmp_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_string_nocasecmp_to(gd_string_t *self, gd_string_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_nocasecmp_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_string_naturalcasecmp_to(gd_string_t *self, gd_string_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_naturalcasecmp_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_string_naturalnocasecmp_to(gd_string_t *self, gd_string_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_naturalnocasecmp_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_string_length(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_length_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_substr(gd_string_t *self, uint64_t from_, uint64_t len):
    cdef GDExtensionTypePtr[2] __args = [&from_, &len]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_substr_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_get_slice(gd_string_t *self, gd_string_t* delimiter, uint64_t slice):
    cdef GDExtensionTypePtr[2] __args = [delimiter, &slice]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_get_slice_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_get_slicec(gd_string_t *self, uint64_t delimiter, uint64_t slice):
    cdef GDExtensionTypePtr[2] __args = [&delimiter, &slice]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_get_slicec_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_string_get_slice_count(gd_string_t *self, gd_string_t* delimiter):
    cdef GDExtensionTypePtr[1] __args = [delimiter]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_get_slice_count_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_string_find(gd_string_t *self, gd_string_t* what, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [what, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_find_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_string_count(gd_string_t *self, gd_string_t* what, uint64_t from_, uint64_t to):
    cdef GDExtensionTypePtr[3] __args = [what, &from_, &to]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_count_ptr(
                self,
                <const void **>__args,
                &__ret,
                3
    )
    return __ret

cdef inline uint64_t gd_string_countn(gd_string_t *self, gd_string_t* what, uint64_t from_, uint64_t to):
    cdef GDExtensionTypePtr[3] __args = [what, &from_, &to]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_countn_ptr(
                self,
                <const void **>__args,
                &__ret,
                3
    )
    return __ret

cdef inline uint64_t gd_string_findn(gd_string_t *self, gd_string_t* what, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [what, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_findn_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_string_rfind(gd_string_t *self, gd_string_t* what, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [what, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_rfind_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_string_rfindn(gd_string_t *self, gd_string_t* what, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [what, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_rfindn_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint8_t gd_string_match(gd_string_t *self, gd_string_t* expr):
    cdef GDExtensionTypePtr[1] __args = [expr]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_match_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_string_matchn(gd_string_t *self, gd_string_t* expr):
    cdef GDExtensionTypePtr[1] __args = [expr]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_matchn_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_string_begins_with(gd_string_t *self, gd_string_t* text):
    cdef GDExtensionTypePtr[1] __args = [text]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_begins_with_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_string_ends_with(gd_string_t *self, gd_string_t* text):
    cdef GDExtensionTypePtr[1] __args = [text]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_ends_with_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_string_is_subsequence_of(gd_string_t *self, gd_string_t* text):
    cdef GDExtensionTypePtr[1] __args = [text]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_is_subsequence_of_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_string_is_subsequence_ofn(gd_string_t *self, gd_string_t* text):
    cdef GDExtensionTypePtr[1] __args = [text]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_is_subsequence_ofn_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_packed_string_array_t gd_string_bigrams(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_string_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_string_array_new()
    gd_string_meth_bigrams_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_string_similarity(gd_string_t *self, gd_string_t* text):
    cdef GDExtensionTypePtr[1] __args = [text]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_similarity_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_format(gd_string_t *self, gd_variant_t* values, gd_string_t* placeholder):
    cdef GDExtensionTypePtr[2] __args = [values, placeholder]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_format_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_replace(gd_string_t *self, gd_string_t* what, gd_string_t* forwhat):
    cdef GDExtensionTypePtr[2] __args = [what, forwhat]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_replace_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_replacen(gd_string_t *self, gd_string_t* what, gd_string_t* forwhat):
    cdef GDExtensionTypePtr[2] __args = [what, forwhat]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_replacen_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_repeat(gd_string_t *self, uint64_t count):
    cdef GDExtensionTypePtr[1] __args = [&count]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_repeat_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_insert(gd_string_t *self, uint64_t position, gd_string_t* what):
    cdef GDExtensionTypePtr[2] __args = [&position, what]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_insert_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_erase(gd_string_t *self, uint64_t position, uint64_t chars):
    cdef GDExtensionTypePtr[2] __args = [&position, &chars]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_erase_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_capitalize(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_capitalize_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_to_camel_case(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_to_camel_case_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_to_pascal_case(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_to_pascal_case_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_to_snake_case(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_to_snake_case_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_string_array_t gd_string_split(gd_string_t *self, gd_string_t* delimiter, uint8_t allow_empty, uint64_t maxsplit):
    cdef GDExtensionTypePtr[3] __args = [delimiter, &allow_empty, &maxsplit]
    cdef gd_packed_string_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_string_array_new()
    gd_string_meth_split_ptr(
                self,
                <const void **>__args,
                &__ret,
                3
    )
    return __ret

cdef inline gd_packed_string_array_t gd_string_rsplit(gd_string_t *self, gd_string_t* delimiter, uint8_t allow_empty, uint64_t maxsplit):
    cdef GDExtensionTypePtr[3] __args = [delimiter, &allow_empty, &maxsplit]
    cdef gd_packed_string_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_string_array_new()
    gd_string_meth_rsplit_ptr(
                self,
                <const void **>__args,
                &__ret,
                3
    )
    return __ret

cdef inline gd_packed_float64_array_t gd_string_split_floats(gd_string_t *self, gd_string_t* delimiter, uint8_t allow_empty):
    cdef GDExtensionTypePtr[2] __args = [delimiter, &allow_empty]
    cdef gd_packed_float64_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_float64_array_new()
    gd_string_meth_split_floats_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_join(gd_string_t *self, gd_packed_string_array_t* parts):
    cdef GDExtensionTypePtr[1] __args = [parts]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_join_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_to_upper(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_to_upper_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_to_lower(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_to_lower_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_left(gd_string_t *self, uint64_t length):
    cdef GDExtensionTypePtr[1] __args = [&length]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_left_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_right(gd_string_t *self, uint64_t length):
    cdef GDExtensionTypePtr[1] __args = [&length]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_right_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_strip_edges(gd_string_t *self, uint8_t left, uint8_t right):
    cdef GDExtensionTypePtr[2] __args = [&left, &right]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_strip_edges_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_strip_escapes(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_strip_escapes_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_lstrip(gd_string_t *self, gd_string_t* chars):
    cdef GDExtensionTypePtr[1] __args = [chars]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_lstrip_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_rstrip(gd_string_t *self, gd_string_t* chars):
    cdef GDExtensionTypePtr[1] __args = [chars]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_rstrip_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_get_extension(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_get_extension_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_get_basename(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_get_basename_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_path_join(gd_string_t *self, gd_string_t* file):
    cdef GDExtensionTypePtr[1] __args = [file]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_path_join_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_string_unicode_at(gd_string_t *self, uint64_t at):
    cdef GDExtensionTypePtr[1] __args = [&at]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_unicode_at_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_indent(gd_string_t *self, gd_string_t* prefix):
    cdef GDExtensionTypePtr[1] __args = [prefix]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_indent_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_dedent(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_dedent_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_string_hash(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_hash_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_md5_text(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_md5_text_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_sha1_text(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_sha1_text_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_sha256_text(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_sha256_text_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_md5_buffer(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_meth_md5_buffer_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_sha1_buffer(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_meth_sha1_buffer_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_sha256_buffer(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_meth_sha256_buffer_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_is_empty(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_is_empty_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_contains(gd_string_t *self, gd_string_t* what):
    cdef GDExtensionTypePtr[1] __args = [what]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_contains_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_string_is_absolute_path(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_is_absolute_path_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_is_relative_path(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_is_relative_path_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_simplify_path(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_simplify_path_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_get_base_dir(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_get_base_dir_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_get_file(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_get_file_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_xml_escape(gd_string_t *self, uint8_t escape_quotes):
    cdef GDExtensionTypePtr[1] __args = [&escape_quotes]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_xml_escape_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_xml_unescape(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_xml_unescape_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_uri_encode(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_uri_encode_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_uri_decode(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_uri_decode_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_c_escape(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_c_escape_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_c_unescape(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_c_unescape_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_json_escape(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_json_escape_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_validate_node_name(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_validate_node_name_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_validate_filename(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_validate_filename_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_is_valid_identifier(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_is_valid_identifier_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_is_valid_int(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_is_valid_int_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_is_valid_float(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_is_valid_float_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_is_valid_hex_number(gd_string_t *self, uint8_t with_prefix):
    cdef GDExtensionTypePtr[1] __args = [&with_prefix]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_is_valid_hex_number_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_string_is_valid_html_color(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_is_valid_html_color_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_is_valid_ip_address(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_is_valid_ip_address_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_is_valid_filename(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_is_valid_filename_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_string_to_int(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_to_int_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_string_to_float(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_to_float_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_string_hex_to_int(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_hex_to_int_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_string_bin_to_int(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_meth_bin_to_int_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_lpad(gd_string_t *self, uint64_t min_length, gd_string_t* character):
    cdef GDExtensionTypePtr[2] __args = [&min_length, character]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_lpad_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_rpad(gd_string_t *self, uint64_t min_length, gd_string_t* character):
    cdef GDExtensionTypePtr[2] __args = [&min_length, character]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_rpad_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_pad_decimals(gd_string_t *self, uint64_t digits):
    cdef GDExtensionTypePtr[1] __args = [&digits]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_pad_decimals_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_pad_zeros(gd_string_t *self, uint64_t digits):
    cdef GDExtensionTypePtr[1] __args = [&digits]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_pad_zeros_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_trim_prefix(gd_string_t *self, gd_string_t* prefix):
    cdef GDExtensionTypePtr[1] __args = [prefix]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_trim_prefix_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_trim_suffix(gd_string_t *self, gd_string_t* suffix):
    cdef GDExtensionTypePtr[1] __args = [suffix]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_trim_suffix_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_to_ascii_buffer(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_meth_to_ascii_buffer_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_to_utf8_buffer(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_meth_to_utf8_buffer_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_to_utf16_buffer(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_meth_to_utf16_buffer_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_to_utf32_buffer(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_meth_to_utf32_buffer_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_hex_decode(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_meth_hex_decode_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_to_wchar_buffer(gd_string_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_meth_to_wchar_buffer_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_num_scientific(gd_string_t *self, double number):
    cdef GDExtensionTypePtr[1] __args = [&number]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_num_scientific_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_num(gd_string_t *self, double number, uint64_t decimals):
    cdef GDExtensionTypePtr[2] __args = [&number, &decimals]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_num_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_num_int64(gd_string_t *self, uint64_t number, uint64_t base, uint8_t capitalize_hex):
    cdef GDExtensionTypePtr[3] __args = [&number, &base, &capitalize_hex]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_num_int64_ptr(
                self,
                <const void **>__args,
                &__ret,
                3
    )
    return __ret

cdef inline gd_string_t gd_string_num_uint64(gd_string_t *self, uint64_t number, uint64_t base, uint8_t capitalize_hex):
    cdef GDExtensionTypePtr[3] __args = [&number, &base, &capitalize_hex]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_num_uint64_ptr(
                self,
                <const void **>__args,
                &__ret,
                3
    )
    return __ret

cdef inline gd_string_t gd_string_chr(gd_string_t *self, uint64_t char_):
    cdef GDExtensionTypePtr[1] __args = [&char_]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_chr_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_humanize_size(gd_string_t *self, uint64_t size):
    cdef GDExtensionTypePtr[1] __args = [&size]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_meth_humanize_size_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_indexed_getter(const gd_string_t *self, GDExtensionInt index):
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_string_indexed_setter(
    gd_string_t *self,
    GDExtensionInt index,
    gd_string_t *value
):
    gd_string_indexed_setter_ptr(self, index, value)




cdef inline gd_vector2_t gd_vector2_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_vector2_t ret = gd_vector2_new()
    gd_vector2_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_vector2_into_variant(gd_vector2_t *val):
    cdef gd_variant_t ret
    gd_vector2_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_vector2_t gd_vector2_new():
    cdef gd_vector2_t obj
    gd_vector2_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_vector2_t gd_vector2_new_from_vector2(gd_vector2_t* from_):
    cdef gd_vector2_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_vector2_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_vector2_t gd_vector2_new_from_vector2i(gd_vector2i_t* from_):
    cdef gd_vector2_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_vector2_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_vector2_t gd_vector2_new_from_float_float(double x, double y):
    cdef gd_vector2_t obj
    cdef GDExtensionTypePtr[2] p_args = [&x, &y]
    gd_vector2_constructor_3_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline double gd_vector2_angle(gd_vector2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_angle_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_vector2_angle_to(gd_vector2_t *self, gd_vector2_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_angle_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_vector2_angle_to_point(gd_vector2_t *self, gd_vector2_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_angle_to_point_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_direction_to(gd_vector2_t *self, gd_vector2_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_direction_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_vector2_distance_to(gd_vector2_t *self, gd_vector2_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_distance_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_vector2_distance_squared_to(gd_vector2_t *self, gd_vector2_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_distance_squared_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_vector2_length(gd_vector2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_length_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_vector2_length_squared(gd_vector2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_length_squared_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_limit_length(gd_vector2_t *self, double length):
    cdef GDExtensionTypePtr[1] __args = [&length]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_limit_length_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_normalized(gd_vector2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_normalized_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_vector2_is_normalized(gd_vector2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_is_normalized_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_vector2_is_equal_approx(gd_vector2_t *self, gd_vector2_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_is_equal_approx_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_vector2_is_zero_approx(gd_vector2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_is_zero_approx_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_vector2_is_finite(gd_vector2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_is_finite_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_posmod(gd_vector2_t *self, double mod):
    cdef GDExtensionTypePtr[1] __args = [&mod]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_posmod_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_posmodv(gd_vector2_t *self, gd_vector2_t* modv):
    cdef GDExtensionTypePtr[1] __args = [modv]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_posmodv_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_project(gd_vector2_t *self, gd_vector2_t* b):
    cdef GDExtensionTypePtr[1] __args = [b]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_project_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_lerp(gd_vector2_t *self, gd_vector2_t* to, double weight):
    cdef GDExtensionTypePtr[2] __args = [to, &weight]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_lerp_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_slerp(gd_vector2_t *self, gd_vector2_t* to, double weight):
    cdef GDExtensionTypePtr[2] __args = [to, &weight]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_slerp_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_cubic_interpolate(gd_vector2_t *self, gd_vector2_t* b, gd_vector2_t* pre_a, gd_vector2_t* post_b, double weight):
    cdef GDExtensionTypePtr[4] __args = [b, pre_a, post_b, &weight]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_cubic_interpolate_ptr(
                self,
                <const void **>__args,
                &__ret,
                4
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_cubic_interpolate_in_time(gd_vector2_t *self, gd_vector2_t* b, gd_vector2_t* pre_a, gd_vector2_t* post_b, double weight, double b_t, double pre_a_t, double post_b_t):
    cdef GDExtensionTypePtr[7] __args = [b, pre_a, post_b, &weight, &b_t, &pre_a_t, &post_b_t]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_cubic_interpolate_in_time_ptr(
                self,
                <const void **>__args,
                &__ret,
                7
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_bezier_interpolate(gd_vector2_t *self, gd_vector2_t* control_1, gd_vector2_t* control_2, gd_vector2_t* end, double t):
    cdef GDExtensionTypePtr[4] __args = [control_1, control_2, end, &t]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_bezier_interpolate_ptr(
                self,
                <const void **>__args,
                &__ret,
                4
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_bezier_derivative(gd_vector2_t *self, gd_vector2_t* control_1, gd_vector2_t* control_2, gd_vector2_t* end, double t):
    cdef GDExtensionTypePtr[4] __args = [control_1, control_2, end, &t]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_bezier_derivative_ptr(
                self,
                <const void **>__args,
                &__ret,
                4
    )
    return __ret

cdef inline uint64_t gd_vector2_max_axis_index(gd_vector2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_max_axis_index_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_vector2_min_axis_index(gd_vector2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_min_axis_index_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_move_toward(gd_vector2_t *self, gd_vector2_t* to, double delta):
    cdef GDExtensionTypePtr[2] __args = [to, &delta]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_move_toward_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_rotated(gd_vector2_t *self, double angle):
    cdef GDExtensionTypePtr[1] __args = [&angle]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_rotated_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_orthogonal(gd_vector2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_orthogonal_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_floor(gd_vector2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_floor_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_ceil(gd_vector2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_ceil_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_round(gd_vector2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_round_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_vector2_aspect(gd_vector2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_aspect_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_vector2_dot(gd_vector2_t *self, gd_vector2_t* with_):
    cdef GDExtensionTypePtr[1] __args = [with_]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_dot_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_slide(gd_vector2_t *self, gd_vector2_t* n):
    cdef GDExtensionTypePtr[1] __args = [n]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_slide_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_bounce(gd_vector2_t *self, gd_vector2_t* n):
    cdef GDExtensionTypePtr[1] __args = [n]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_bounce_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_reflect(gd_vector2_t *self, gd_vector2_t* n):
    cdef GDExtensionTypePtr[1] __args = [n]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_reflect_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_vector2_cross(gd_vector2_t *self, gd_vector2_t* with_):
    cdef GDExtensionTypePtr[1] __args = [with_]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_cross_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_abs(gd_vector2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_abs_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_sign(gd_vector2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_sign_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_clamp(gd_vector2_t *self, gd_vector2_t* min, gd_vector2_t* max):
    cdef GDExtensionTypePtr[2] __args = [min, max]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_clamp_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_snapped(gd_vector2_t *self, gd_vector2_t* step):
    cdef GDExtensionTypePtr[1] __args = [step]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_snapped_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector2_t gd_vector2_from_angle(gd_vector2_t *self, double angle):
    cdef GDExtensionTypePtr[1] __args = [&angle]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_meth_from_angle_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_vector2_indexed_getter(const gd_vector2_t *self, GDExtensionInt index):
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_vector2_indexed_setter(
    gd_vector2_t *self,
    GDExtensionInt index,
    double value
):
    gd_vector2_indexed_setter_ptr(self, index, &value)




cdef inline gd_vector2i_t gd_vector2i_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_vector2i_t ret = gd_vector2i_new()
    gd_vector2i_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_vector2i_into_variant(gd_vector2i_t *val):
    cdef gd_variant_t ret
    gd_vector2i_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_vector2i_t gd_vector2i_new():
    cdef gd_vector2i_t obj
    gd_vector2i_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_vector2i_t gd_vector2i_new_from_vector2i(gd_vector2i_t* from_):
    cdef gd_vector2i_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_vector2i_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_vector2i_t gd_vector2i_new_from_vector2(gd_vector2_t* from_):
    cdef gd_vector2i_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_vector2i_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_vector2i_t gd_vector2i_new_from_int_int(uint64_t x, uint64_t y):
    cdef gd_vector2i_t obj
    cdef GDExtensionTypePtr[2] p_args = [&x, &y]
    gd_vector2i_constructor_3_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline double gd_vector2i_aspect(gd_vector2i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2i_meth_aspect_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_vector2i_max_axis_index(gd_vector2i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2i_meth_max_axis_index_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_vector2i_min_axis_index(gd_vector2i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2i_meth_min_axis_index_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_vector2i_length(gd_vector2i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2i_meth_length_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_vector2i_length_squared(gd_vector2i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2i_meth_length_squared_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2i_t gd_vector2i_sign(gd_vector2i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector2i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2i_meth_sign_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2i_t gd_vector2i_abs(gd_vector2i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector2i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2i_meth_abs_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2i_t gd_vector2i_clamp(gd_vector2i_t *self, gd_vector2i_t* min, gd_vector2i_t* max):
    cdef GDExtensionTypePtr[2] __args = [min, max]
    cdef gd_vector2i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2i_meth_clamp_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_vector2i_t gd_vector2i_snapped(gd_vector2i_t *self, gd_vector2i_t* step):
    cdef GDExtensionTypePtr[1] __args = [step]
    cdef gd_vector2i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2i_meth_snapped_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_vector2i_indexed_getter(const gd_vector2i_t *self, GDExtensionInt index):
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector2i_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_vector2i_indexed_setter(
    gd_vector2i_t *self,
    GDExtensionInt index,
    uint64_t value
):
    gd_vector2i_indexed_setter_ptr(self, index, &value)




cdef inline gd_rect2_t gd_rect2_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_rect2_t ret = gd_rect2_new()
    gd_rect2_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_rect2_into_variant(gd_rect2_t *val):
    cdef gd_variant_t ret
    gd_rect2_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_rect2_t gd_rect2_new():
    cdef gd_rect2_t obj
    gd_rect2_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_rect2_t gd_rect2_new_from_rect2(gd_rect2_t* from_):
    cdef gd_rect2_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_rect2_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_rect2_t gd_rect2_new_from_rect2i(gd_rect2i_t* from_):
    cdef gd_rect2_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_rect2_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_rect2_t gd_rect2_new_from_vector2_vector2(gd_vector2_t* position, gd_vector2_t* size):
    cdef gd_rect2_t obj
    cdef GDExtensionTypePtr[2] p_args = [position, size]
    gd_rect2_constructor_3_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_rect2_t gd_rect2_new_from_float_float_float_float(double x, double y, double width, double height):
    cdef gd_rect2_t obj
    cdef GDExtensionTypePtr[4] p_args = [&x, &y, &width, &height]
    gd_rect2_constructor_4_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_vector2_t gd_rect2_get_center(gd_rect2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2_meth_get_center_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_rect2_get_area(gd_rect2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2_meth_get_area_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_rect2_has_area(gd_rect2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2_meth_has_area_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_rect2_has_point(gd_rect2_t *self, gd_vector2_t* point):
    cdef GDExtensionTypePtr[1] __args = [point]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2_meth_has_point_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_rect2_is_equal_approx(gd_rect2_t *self, gd_rect2_t* rect):
    cdef GDExtensionTypePtr[1] __args = [rect]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2_meth_is_equal_approx_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_rect2_is_finite(gd_rect2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2_meth_is_finite_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_rect2_intersects(gd_rect2_t *self, gd_rect2_t* b, uint8_t include_borders):
    cdef GDExtensionTypePtr[2] __args = [b, &include_borders]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2_meth_intersects_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint8_t gd_rect2_encloses(gd_rect2_t *self, gd_rect2_t* b):
    cdef GDExtensionTypePtr[1] __args = [b]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2_meth_encloses_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_rect2_t gd_rect2_intersection(gd_rect2_t *self, gd_rect2_t* b):
    cdef GDExtensionTypePtr[1] __args = [b]
    cdef gd_rect2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2_meth_intersection_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_rect2_t gd_rect2_merge(gd_rect2_t *self, gd_rect2_t* b):
    cdef GDExtensionTypePtr[1] __args = [b]
    cdef gd_rect2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2_meth_merge_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_rect2_t gd_rect2_expand(gd_rect2_t *self, gd_vector2_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef gd_rect2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2_meth_expand_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_rect2_t gd_rect2_grow(gd_rect2_t *self, double amount):
    cdef GDExtensionTypePtr[1] __args = [&amount]
    cdef gd_rect2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2_meth_grow_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_rect2_t gd_rect2_grow_side(gd_rect2_t *self, uint64_t side, double amount):
    cdef GDExtensionTypePtr[2] __args = [&side, &amount]
    cdef gd_rect2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2_meth_grow_side_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_rect2_t gd_rect2_grow_individual(gd_rect2_t *self, double left, double top, double right, double bottom):
    cdef GDExtensionTypePtr[4] __args = [&left, &top, &right, &bottom]
    cdef gd_rect2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2_meth_grow_individual_ptr(
                self,
                <const void **>__args,
                &__ret,
                4
    )
    return __ret

cdef inline gd_rect2_t gd_rect2_abs(gd_rect2_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_rect2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2_meth_abs_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2_t gd_rect2_get_end(gd_rect2_t *self):
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2_get_end_ptr(self, &__ret)
    return __ret

cdef inline void gd_rect2_set_end(
    gd_rect2_t *self,
    gd_vector2_t *val
):
    gd_rect2_set_end_ptr(self, val)




cdef inline gd_rect2i_t gd_rect2i_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_rect2i_t ret = gd_rect2i_new()
    gd_rect2i_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_rect2i_into_variant(gd_rect2i_t *val):
    cdef gd_variant_t ret
    gd_rect2i_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_rect2i_t gd_rect2i_new():
    cdef gd_rect2i_t obj
    gd_rect2i_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_rect2i_t gd_rect2i_new_from_rect2i(gd_rect2i_t* from_):
    cdef gd_rect2i_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_rect2i_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_rect2i_t gd_rect2i_new_from_rect2(gd_rect2_t* from_):
    cdef gd_rect2i_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_rect2i_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_rect2i_t gd_rect2i_new_from_vector2i_vector2i(gd_vector2i_t* position, gd_vector2i_t* size):
    cdef gd_rect2i_t obj
    cdef GDExtensionTypePtr[2] p_args = [position, size]
    gd_rect2i_constructor_3_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_rect2i_t gd_rect2i_new_from_int_int_int_int(uint64_t x, uint64_t y, uint64_t width, uint64_t height):
    cdef gd_rect2i_t obj
    cdef GDExtensionTypePtr[4] p_args = [&x, &y, &width, &height]
    gd_rect2i_constructor_4_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_vector2i_t gd_rect2i_get_center(gd_rect2i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector2i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2i_meth_get_center_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_rect2i_get_area(gd_rect2i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2i_meth_get_area_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_rect2i_has_area(gd_rect2i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2i_meth_has_area_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_rect2i_has_point(gd_rect2i_t *self, gd_vector2i_t* point):
    cdef GDExtensionTypePtr[1] __args = [point]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2i_meth_has_point_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_rect2i_intersects(gd_rect2i_t *self, gd_rect2i_t* b):
    cdef GDExtensionTypePtr[1] __args = [b]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2i_meth_intersects_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_rect2i_encloses(gd_rect2i_t *self, gd_rect2i_t* b):
    cdef GDExtensionTypePtr[1] __args = [b]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2i_meth_encloses_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_rect2i_t gd_rect2i_intersection(gd_rect2i_t *self, gd_rect2i_t* b):
    cdef GDExtensionTypePtr[1] __args = [b]
    cdef gd_rect2i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2i_meth_intersection_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_rect2i_t gd_rect2i_merge(gd_rect2i_t *self, gd_rect2i_t* b):
    cdef GDExtensionTypePtr[1] __args = [b]
    cdef gd_rect2i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2i_meth_merge_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_rect2i_t gd_rect2i_expand(gd_rect2i_t *self, gd_vector2i_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef gd_rect2i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2i_meth_expand_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_rect2i_t gd_rect2i_grow(gd_rect2i_t *self, uint64_t amount):
    cdef GDExtensionTypePtr[1] __args = [&amount]
    cdef gd_rect2i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2i_meth_grow_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_rect2i_t gd_rect2i_grow_side(gd_rect2i_t *self, uint64_t side, uint64_t amount):
    cdef GDExtensionTypePtr[2] __args = [&side, &amount]
    cdef gd_rect2i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2i_meth_grow_side_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_rect2i_t gd_rect2i_grow_individual(gd_rect2i_t *self, uint64_t left, uint64_t top, uint64_t right, uint64_t bottom):
    cdef GDExtensionTypePtr[4] __args = [&left, &top, &right, &bottom]
    cdef gd_rect2i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2i_meth_grow_individual_ptr(
                self,
                <const void **>__args,
                &__ret,
                4
    )
    return __ret

cdef inline gd_rect2i_t gd_rect2i_abs(gd_rect2i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_rect2i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2i_meth_abs_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2i_t gd_rect2i_get_end(gd_rect2i_t *self):
    cdef gd_vector2i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rect2i_get_end_ptr(self, &__ret)
    return __ret

cdef inline void gd_rect2i_set_end(
    gd_rect2i_t *self,
    gd_vector2i_t *val
):
    gd_rect2i_set_end_ptr(self, val)




cdef inline gd_vector3_t gd_vector3_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_vector3_t ret = gd_vector3_new()
    gd_vector3_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_vector3_into_variant(gd_vector3_t *val):
    cdef gd_variant_t ret
    gd_vector3_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_vector3_t gd_vector3_new():
    cdef gd_vector3_t obj
    gd_vector3_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_vector3_t gd_vector3_new_from_vector3(gd_vector3_t* from_):
    cdef gd_vector3_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_vector3_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_vector3_t gd_vector3_new_from_vector3i(gd_vector3i_t* from_):
    cdef gd_vector3_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_vector3_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_vector3_t gd_vector3_new_from_float_float_float(double x, double y, double z):
    cdef gd_vector3_t obj
    cdef GDExtensionTypePtr[3] p_args = [&x, &y, &z]
    gd_vector3_constructor_3_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline uint64_t gd_vector3_min_axis_index(gd_vector3_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_min_axis_index_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_vector3_max_axis_index(gd_vector3_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_max_axis_index_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_vector3_angle_to(gd_vector3_t *self, gd_vector3_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_angle_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_vector3_signed_angle_to(gd_vector3_t *self, gd_vector3_t* to, gd_vector3_t* axis):
    cdef GDExtensionTypePtr[2] __args = [to, axis]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_signed_angle_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_direction_to(gd_vector3_t *self, gd_vector3_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_direction_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_vector3_distance_to(gd_vector3_t *self, gd_vector3_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_distance_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_vector3_distance_squared_to(gd_vector3_t *self, gd_vector3_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_distance_squared_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_vector3_length(gd_vector3_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_length_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_vector3_length_squared(gd_vector3_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_length_squared_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_limit_length(gd_vector3_t *self, double length):
    cdef GDExtensionTypePtr[1] __args = [&length]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_limit_length_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_normalized(gd_vector3_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_normalized_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_vector3_is_normalized(gd_vector3_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_is_normalized_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_vector3_is_equal_approx(gd_vector3_t *self, gd_vector3_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_is_equal_approx_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_vector3_is_zero_approx(gd_vector3_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_is_zero_approx_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_vector3_is_finite(gd_vector3_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_is_finite_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_inverse(gd_vector3_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_inverse_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_clamp(gd_vector3_t *self, gd_vector3_t* min, gd_vector3_t* max):
    cdef GDExtensionTypePtr[2] __args = [min, max]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_clamp_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_snapped(gd_vector3_t *self, gd_vector3_t* step):
    cdef GDExtensionTypePtr[1] __args = [step]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_snapped_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_rotated(gd_vector3_t *self, gd_vector3_t* axis, double angle):
    cdef GDExtensionTypePtr[2] __args = [axis, &angle]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_rotated_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_lerp(gd_vector3_t *self, gd_vector3_t* to, double weight):
    cdef GDExtensionTypePtr[2] __args = [to, &weight]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_lerp_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_slerp(gd_vector3_t *self, gd_vector3_t* to, double weight):
    cdef GDExtensionTypePtr[2] __args = [to, &weight]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_slerp_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_cubic_interpolate(gd_vector3_t *self, gd_vector3_t* b, gd_vector3_t* pre_a, gd_vector3_t* post_b, double weight):
    cdef GDExtensionTypePtr[4] __args = [b, pre_a, post_b, &weight]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_cubic_interpolate_ptr(
                self,
                <const void **>__args,
                &__ret,
                4
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_cubic_interpolate_in_time(gd_vector3_t *self, gd_vector3_t* b, gd_vector3_t* pre_a, gd_vector3_t* post_b, double weight, double b_t, double pre_a_t, double post_b_t):
    cdef GDExtensionTypePtr[7] __args = [b, pre_a, post_b, &weight, &b_t, &pre_a_t, &post_b_t]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_cubic_interpolate_in_time_ptr(
                self,
                <const void **>__args,
                &__ret,
                7
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_bezier_interpolate(gd_vector3_t *self, gd_vector3_t* control_1, gd_vector3_t* control_2, gd_vector3_t* end, double t):
    cdef GDExtensionTypePtr[4] __args = [control_1, control_2, end, &t]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_bezier_interpolate_ptr(
                self,
                <const void **>__args,
                &__ret,
                4
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_bezier_derivative(gd_vector3_t *self, gd_vector3_t* control_1, gd_vector3_t* control_2, gd_vector3_t* end, double t):
    cdef GDExtensionTypePtr[4] __args = [control_1, control_2, end, &t]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_bezier_derivative_ptr(
                self,
                <const void **>__args,
                &__ret,
                4
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_move_toward(gd_vector3_t *self, gd_vector3_t* to, double delta):
    cdef GDExtensionTypePtr[2] __args = [to, &delta]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_move_toward_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline double gd_vector3_dot(gd_vector3_t *self, gd_vector3_t* with_):
    cdef GDExtensionTypePtr[1] __args = [with_]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_dot_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_cross(gd_vector3_t *self, gd_vector3_t* with_):
    cdef GDExtensionTypePtr[1] __args = [with_]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_cross_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_basis_t gd_vector3_outer(gd_vector3_t *self, gd_vector3_t* with_):
    cdef GDExtensionTypePtr[1] __args = [with_]
    cdef gd_basis_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_outer_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_abs(gd_vector3_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_abs_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_floor(gd_vector3_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_floor_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_ceil(gd_vector3_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_ceil_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_round(gd_vector3_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_round_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_posmod(gd_vector3_t *self, double mod):
    cdef GDExtensionTypePtr[1] __args = [&mod]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_posmod_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_posmodv(gd_vector3_t *self, gd_vector3_t* modv):
    cdef GDExtensionTypePtr[1] __args = [modv]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_posmodv_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_project(gd_vector3_t *self, gd_vector3_t* b):
    cdef GDExtensionTypePtr[1] __args = [b]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_project_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_slide(gd_vector3_t *self, gd_vector3_t* n):
    cdef GDExtensionTypePtr[1] __args = [n]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_slide_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_bounce(gd_vector3_t *self, gd_vector3_t* n):
    cdef GDExtensionTypePtr[1] __args = [n]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_bounce_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_reflect(gd_vector3_t *self, gd_vector3_t* n):
    cdef GDExtensionTypePtr[1] __args = [n]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_reflect_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_sign(gd_vector3_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_sign_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2_t gd_vector3_octahedron_encode(gd_vector3_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_octahedron_encode_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector3_t gd_vector3_octahedron_decode(gd_vector3_t *self, gd_vector2_t* uv):
    cdef GDExtensionTypePtr[1] __args = [uv]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_meth_octahedron_decode_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_vector3_indexed_getter(const gd_vector3_t *self, GDExtensionInt index):
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_vector3_indexed_setter(
    gd_vector3_t *self,
    GDExtensionInt index,
    double value
):
    gd_vector3_indexed_setter_ptr(self, index, &value)




cdef inline gd_vector3i_t gd_vector3i_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_vector3i_t ret = gd_vector3i_new()
    gd_vector3i_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_vector3i_into_variant(gd_vector3i_t *val):
    cdef gd_variant_t ret
    gd_vector3i_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_vector3i_t gd_vector3i_new():
    cdef gd_vector3i_t obj
    gd_vector3i_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_vector3i_t gd_vector3i_new_from_vector3i(gd_vector3i_t* from_):
    cdef gd_vector3i_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_vector3i_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_vector3i_t gd_vector3i_new_from_vector3(gd_vector3_t* from_):
    cdef gd_vector3i_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_vector3i_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_vector3i_t gd_vector3i_new_from_int_int_int(uint64_t x, uint64_t y, uint64_t z):
    cdef gd_vector3i_t obj
    cdef GDExtensionTypePtr[3] p_args = [&x, &y, &z]
    gd_vector3i_constructor_3_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline uint64_t gd_vector3i_min_axis_index(gd_vector3i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3i_meth_min_axis_index_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_vector3i_max_axis_index(gd_vector3i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3i_meth_max_axis_index_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_vector3i_length(gd_vector3i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3i_meth_length_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_vector3i_length_squared(gd_vector3i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3i_meth_length_squared_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector3i_t gd_vector3i_sign(gd_vector3i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector3i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3i_meth_sign_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector3i_t gd_vector3i_abs(gd_vector3i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector3i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3i_meth_abs_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector3i_t gd_vector3i_clamp(gd_vector3i_t *self, gd_vector3i_t* min, gd_vector3i_t* max):
    cdef GDExtensionTypePtr[2] __args = [min, max]
    cdef gd_vector3i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3i_meth_clamp_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_vector3i_t gd_vector3i_snapped(gd_vector3i_t *self, gd_vector3i_t* step):
    cdef GDExtensionTypePtr[1] __args = [step]
    cdef gd_vector3i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3i_meth_snapped_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_vector3i_indexed_getter(const gd_vector3i_t *self, GDExtensionInt index):
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector3i_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_vector3i_indexed_setter(
    gd_vector3i_t *self,
    GDExtensionInt index,
    uint64_t value
):
    gd_vector3i_indexed_setter_ptr(self, index, &value)




cdef inline gd_transform2d_t gd_transform2d_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_transform2d_t ret = gd_transform2d_new()
    gd_transform2d_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_transform2d_into_variant(gd_transform2d_t *val):
    cdef gd_variant_t ret
    gd_transform2d_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_transform2d_t gd_transform2d_new():
    cdef gd_transform2d_t obj
    gd_transform2d_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_transform2d_t gd_transform2d_new_from_transform2d(gd_transform2d_t* from_):
    cdef gd_transform2d_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_transform2d_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_transform2d_t gd_transform2d_new_from_float_vector2(double rotation, gd_vector2_t* position):
    cdef gd_transform2d_t obj
    cdef GDExtensionTypePtr[2] p_args = [&rotation, position]
    gd_transform2d_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_transform2d_t gd_transform2d_new_from_float_vector2_float_vector2(double rotation, gd_vector2_t* scale, double skew, gd_vector2_t* position):
    cdef gd_transform2d_t obj
    cdef GDExtensionTypePtr[4] p_args = [&rotation, scale, &skew, position]
    gd_transform2d_constructor_3_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_transform2d_t gd_transform2d_new_from_vector2_vector2_vector2(gd_vector2_t* x_axis, gd_vector2_t* y_axis, gd_vector2_t* origin):
    cdef gd_transform2d_t obj
    cdef GDExtensionTypePtr[3] p_args = [x_axis, y_axis, origin]
    gd_transform2d_constructor_4_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_transform2d_t gd_transform2d_inverse(gd_transform2d_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_transform2d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_inverse_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_transform2d_t gd_transform2d_affine_inverse(gd_transform2d_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_transform2d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_affine_inverse_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_transform2d_get_rotation(gd_transform2d_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_get_rotation_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2_t gd_transform2d_get_origin(gd_transform2d_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_get_origin_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2_t gd_transform2d_get_scale(gd_transform2d_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_get_scale_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_transform2d_get_skew(gd_transform2d_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_get_skew_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_transform2d_t gd_transform2d_orthonormalized(gd_transform2d_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_transform2d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_orthonormalized_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_transform2d_t gd_transform2d_rotated(gd_transform2d_t *self, double angle):
    cdef GDExtensionTypePtr[1] __args = [&angle]
    cdef gd_transform2d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_rotated_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_transform2d_t gd_transform2d_rotated_local(gd_transform2d_t *self, double angle):
    cdef GDExtensionTypePtr[1] __args = [&angle]
    cdef gd_transform2d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_rotated_local_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_transform2d_t gd_transform2d_scaled(gd_transform2d_t *self, gd_vector2_t* scale):
    cdef GDExtensionTypePtr[1] __args = [scale]
    cdef gd_transform2d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_scaled_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_transform2d_t gd_transform2d_scaled_local(gd_transform2d_t *self, gd_vector2_t* scale):
    cdef GDExtensionTypePtr[1] __args = [scale]
    cdef gd_transform2d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_scaled_local_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_transform2d_t gd_transform2d_translated(gd_transform2d_t *self, gd_vector2_t* offset):
    cdef GDExtensionTypePtr[1] __args = [offset]
    cdef gd_transform2d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_translated_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_transform2d_t gd_transform2d_translated_local(gd_transform2d_t *self, gd_vector2_t* offset):
    cdef GDExtensionTypePtr[1] __args = [offset]
    cdef gd_transform2d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_translated_local_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_transform2d_determinant(gd_transform2d_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_determinant_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2_t gd_transform2d_basis_xform(gd_transform2d_t *self, gd_vector2_t* v):
    cdef GDExtensionTypePtr[1] __args = [v]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_basis_xform_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector2_t gd_transform2d_basis_xform_inv(gd_transform2d_t *self, gd_vector2_t* v):
    cdef GDExtensionTypePtr[1] __args = [v]
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_basis_xform_inv_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_transform2d_t gd_transform2d_interpolate_with(gd_transform2d_t *self, gd_transform2d_t* xform, double weight):
    cdef GDExtensionTypePtr[2] __args = [xform, &weight]
    cdef gd_transform2d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_interpolate_with_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint8_t gd_transform2d_is_equal_approx(gd_transform2d_t *self, gd_transform2d_t* xform):
    cdef GDExtensionTypePtr[1] __args = [xform]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_is_equal_approx_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_transform2d_is_finite(gd_transform2d_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_is_finite_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_transform2d_t gd_transform2d_looking_at(gd_transform2d_t *self, gd_vector2_t* target):
    cdef GDExtensionTypePtr[1] __args = [target]
    cdef gd_transform2d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_meth_looking_at_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector2_t gd_transform2d_indexed_getter(const gd_transform2d_t *self, GDExtensionInt index):
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform2d_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_transform2d_indexed_setter(
    gd_transform2d_t *self,
    GDExtensionInt index,
    gd_vector2_t *value
):
    gd_transform2d_indexed_setter_ptr(self, index, value)




cdef inline gd_vector4_t gd_vector4_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_vector4_t ret = gd_vector4_new()
    gd_vector4_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_vector4_into_variant(gd_vector4_t *val):
    cdef gd_variant_t ret
    gd_vector4_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_vector4_t gd_vector4_new():
    cdef gd_vector4_t obj
    gd_vector4_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_vector4_t gd_vector4_new_from_vector4(gd_vector4_t* from_):
    cdef gd_vector4_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_vector4_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_vector4_t gd_vector4_new_from_vector4i(gd_vector4i_t* from_):
    cdef gd_vector4_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_vector4_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_vector4_t gd_vector4_new_from_float_float_float_float(double x, double y, double z, double w):
    cdef gd_vector4_t obj
    cdef GDExtensionTypePtr[4] p_args = [&x, &y, &z, &w]
    gd_vector4_constructor_3_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline uint64_t gd_vector4_min_axis_index(gd_vector4_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_min_axis_index_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_vector4_max_axis_index(gd_vector4_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_max_axis_index_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_vector4_length(gd_vector4_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_length_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_vector4_length_squared(gd_vector4_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_length_squared_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector4_t gd_vector4_abs(gd_vector4_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector4_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_abs_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector4_t gd_vector4_sign(gd_vector4_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector4_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_sign_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector4_t gd_vector4_floor(gd_vector4_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector4_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_floor_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector4_t gd_vector4_ceil(gd_vector4_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector4_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_ceil_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector4_t gd_vector4_round(gd_vector4_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector4_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_round_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector4_t gd_vector4_lerp(gd_vector4_t *self, gd_vector4_t* to, double weight):
    cdef GDExtensionTypePtr[2] __args = [to, &weight]
    cdef gd_vector4_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_lerp_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_vector4_t gd_vector4_cubic_interpolate(gd_vector4_t *self, gd_vector4_t* b, gd_vector4_t* pre_a, gd_vector4_t* post_b, double weight):
    cdef GDExtensionTypePtr[4] __args = [b, pre_a, post_b, &weight]
    cdef gd_vector4_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_cubic_interpolate_ptr(
                self,
                <const void **>__args,
                &__ret,
                4
    )
    return __ret

cdef inline gd_vector4_t gd_vector4_cubic_interpolate_in_time(gd_vector4_t *self, gd_vector4_t* b, gd_vector4_t* pre_a, gd_vector4_t* post_b, double weight, double b_t, double pre_a_t, double post_b_t):
    cdef GDExtensionTypePtr[7] __args = [b, pre_a, post_b, &weight, &b_t, &pre_a_t, &post_b_t]
    cdef gd_vector4_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_cubic_interpolate_in_time_ptr(
                self,
                <const void **>__args,
                &__ret,
                7
    )
    return __ret

cdef inline gd_vector4_t gd_vector4_posmod(gd_vector4_t *self, double mod):
    cdef GDExtensionTypePtr[1] __args = [&mod]
    cdef gd_vector4_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_posmod_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector4_t gd_vector4_posmodv(gd_vector4_t *self, gd_vector4_t* modv):
    cdef GDExtensionTypePtr[1] __args = [modv]
    cdef gd_vector4_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_posmodv_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector4_t gd_vector4_snapped(gd_vector4_t *self, gd_vector4_t* step):
    cdef GDExtensionTypePtr[1] __args = [step]
    cdef gd_vector4_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_snapped_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector4_t gd_vector4_clamp(gd_vector4_t *self, gd_vector4_t* min, gd_vector4_t* max):
    cdef GDExtensionTypePtr[2] __args = [min, max]
    cdef gd_vector4_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_clamp_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_vector4_t gd_vector4_normalized(gd_vector4_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector4_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_normalized_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_vector4_is_normalized(gd_vector4_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_is_normalized_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector4_t gd_vector4_direction_to(gd_vector4_t *self, gd_vector4_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef gd_vector4_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_direction_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_vector4_distance_to(gd_vector4_t *self, gd_vector4_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_distance_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_vector4_distance_squared_to(gd_vector4_t *self, gd_vector4_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_distance_squared_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_vector4_dot(gd_vector4_t *self, gd_vector4_t* with_):
    cdef GDExtensionTypePtr[1] __args = [with_]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_dot_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector4_t gd_vector4_inverse(gd_vector4_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector4_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_inverse_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_vector4_is_equal_approx(gd_vector4_t *self, gd_vector4_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_is_equal_approx_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_vector4_is_zero_approx(gd_vector4_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_is_zero_approx_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_vector4_is_finite(gd_vector4_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_meth_is_finite_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_vector4_indexed_getter(const gd_vector4_t *self, GDExtensionInt index):
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_vector4_indexed_setter(
    gd_vector4_t *self,
    GDExtensionInt index,
    double value
):
    gd_vector4_indexed_setter_ptr(self, index, &value)




cdef inline gd_vector4i_t gd_vector4i_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_vector4i_t ret = gd_vector4i_new()
    gd_vector4i_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_vector4i_into_variant(gd_vector4i_t *val):
    cdef gd_variant_t ret
    gd_vector4i_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_vector4i_t gd_vector4i_new():
    cdef gd_vector4i_t obj
    gd_vector4i_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_vector4i_t gd_vector4i_new_from_vector4i(gd_vector4i_t* from_):
    cdef gd_vector4i_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_vector4i_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_vector4i_t gd_vector4i_new_from_vector4(gd_vector4_t* from_):
    cdef gd_vector4i_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_vector4i_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_vector4i_t gd_vector4i_new_from_int_int_int_int(uint64_t x, uint64_t y, uint64_t z, uint64_t w):
    cdef gd_vector4i_t obj
    cdef GDExtensionTypePtr[4] p_args = [&x, &y, &z, &w]
    gd_vector4i_constructor_3_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline uint64_t gd_vector4i_min_axis_index(gd_vector4i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4i_meth_min_axis_index_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_vector4i_max_axis_index(gd_vector4i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4i_meth_max_axis_index_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_vector4i_length(gd_vector4i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4i_meth_length_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_vector4i_length_squared(gd_vector4i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4i_meth_length_squared_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector4i_t gd_vector4i_sign(gd_vector4i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector4i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4i_meth_sign_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector4i_t gd_vector4i_abs(gd_vector4i_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector4i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4i_meth_abs_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector4i_t gd_vector4i_clamp(gd_vector4i_t *self, gd_vector4i_t* min, gd_vector4i_t* max):
    cdef GDExtensionTypePtr[2] __args = [min, max]
    cdef gd_vector4i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4i_meth_clamp_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_vector4i_t gd_vector4i_snapped(gd_vector4i_t *self, gd_vector4i_t* step):
    cdef GDExtensionTypePtr[1] __args = [step]
    cdef gd_vector4i_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4i_meth_snapped_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_vector4i_indexed_getter(const gd_vector4i_t *self, GDExtensionInt index):
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_vector4i_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_vector4i_indexed_setter(
    gd_vector4i_t *self,
    GDExtensionInt index,
    uint64_t value
):
    gd_vector4i_indexed_setter_ptr(self, index, &value)




cdef inline gd_plane_t gd_plane_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_plane_t ret = gd_plane_new()
    gd_plane_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_plane_into_variant(gd_plane_t *val):
    cdef gd_variant_t ret
    gd_plane_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_plane_t gd_plane_new():
    cdef gd_plane_t obj
    gd_plane_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_plane_t gd_plane_new_from_plane(gd_plane_t* from_):
    cdef gd_plane_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_plane_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_plane_t gd_plane_new_from_vector3(gd_vector3_t* normal):
    cdef gd_plane_t obj
    cdef GDExtensionTypePtr[1] p_args = [normal]
    gd_plane_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_plane_t gd_plane_new_from_vector3_float(gd_vector3_t* normal, double d):
    cdef gd_plane_t obj
    cdef GDExtensionTypePtr[2] p_args = [normal, &d]
    gd_plane_constructor_3_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_plane_t gd_plane_new_from_vector3_vector3(gd_vector3_t* normal, gd_vector3_t* point):
    cdef gd_plane_t obj
    cdef GDExtensionTypePtr[2] p_args = [normal, point]
    gd_plane_constructor_4_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_plane_t gd_plane_new_from_vector3_vector3_vector3(gd_vector3_t* point1, gd_vector3_t* point2, gd_vector3_t* point3):
    cdef gd_plane_t obj
    cdef GDExtensionTypePtr[3] p_args = [point1, point2, point3]
    gd_plane_constructor_5_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_plane_t gd_plane_new_from_float_float_float_float(double a, double b, double c, double d):
    cdef gd_plane_t obj
    cdef GDExtensionTypePtr[4] p_args = [&a, &b, &c, &d]
    gd_plane_constructor_6_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_plane_t gd_plane_normalized(gd_plane_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_plane_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_plane_meth_normalized_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector3_t gd_plane_get_center(gd_plane_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_plane_meth_get_center_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_plane_is_equal_approx(gd_plane_t *self, gd_plane_t* to_plane):
    cdef GDExtensionTypePtr[1] __args = [to_plane]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_plane_meth_is_equal_approx_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_plane_is_finite(gd_plane_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_plane_meth_is_finite_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_plane_is_point_over(gd_plane_t *self, gd_vector3_t* point):
    cdef GDExtensionTypePtr[1] __args = [point]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_plane_meth_is_point_over_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_plane_distance_to(gd_plane_t *self, gd_vector3_t* point):
    cdef GDExtensionTypePtr[1] __args = [point]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_plane_meth_distance_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_plane_has_point(gd_plane_t *self, gd_vector3_t* point, double tolerance):
    cdef GDExtensionTypePtr[2] __args = [point, &tolerance]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_plane_meth_has_point_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_vector3_t gd_plane_project(gd_plane_t *self, gd_vector3_t* point):
    cdef GDExtensionTypePtr[1] __args = [point]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_plane_meth_project_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_variant_t gd_plane_intersect_3(gd_plane_t *self, gd_plane_t* b, gd_plane_t* c):
    cdef GDExtensionTypePtr[2] __args = [b, c]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_plane_meth_intersect_3_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_variant_t gd_plane_intersects_ray(gd_plane_t *self, gd_vector3_t* from_, gd_vector3_t* dir):
    cdef GDExtensionTypePtr[2] __args = [from_, dir]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_plane_meth_intersects_ray_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_variant_t gd_plane_intersects_segment(gd_plane_t *self, gd_vector3_t* from_, gd_vector3_t* to):
    cdef GDExtensionTypePtr[2] __args = [from_, to]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_plane_meth_intersects_segment_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline double gd_plane_get_x(gd_plane_t *self):
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_plane_get_x_ptr(self, &__ret)
    return __ret

cdef inline void gd_plane_set_x(
    gd_plane_t *self,
    double val
):
    gd_plane_set_x_ptr(self, &val)

cdef inline double gd_plane_get_y(gd_plane_t *self):
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_plane_get_y_ptr(self, &__ret)
    return __ret

cdef inline void gd_plane_set_y(
    gd_plane_t *self,
    double val
):
    gd_plane_set_y_ptr(self, &val)

cdef inline double gd_plane_get_z(gd_plane_t *self):
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_plane_get_z_ptr(self, &__ret)
    return __ret

cdef inline void gd_plane_set_z(
    gd_plane_t *self,
    double val
):
    gd_plane_set_z_ptr(self, &val)




cdef inline gd_quaternion_t gd_quaternion_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_quaternion_t ret = gd_quaternion_new()
    gd_quaternion_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_quaternion_into_variant(gd_quaternion_t *val):
    cdef gd_variant_t ret
    gd_quaternion_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_quaternion_t gd_quaternion_new():
    cdef gd_quaternion_t obj
    gd_quaternion_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_quaternion_t gd_quaternion_new_from_quaternion(gd_quaternion_t* from_):
    cdef gd_quaternion_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_quaternion_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_quaternion_t gd_quaternion_new_from_basis(gd_basis_t* from_):
    cdef gd_quaternion_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_quaternion_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_quaternion_t gd_quaternion_new_from_vector3_float(gd_vector3_t* axis, double angle):
    cdef gd_quaternion_t obj
    cdef GDExtensionTypePtr[2] p_args = [axis, &angle]
    gd_quaternion_constructor_3_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_quaternion_t gd_quaternion_new_from_vector3_vector3(gd_vector3_t* arc_from, gd_vector3_t* arc_to):
    cdef gd_quaternion_t obj
    cdef GDExtensionTypePtr[2] p_args = [arc_from, arc_to]
    gd_quaternion_constructor_4_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_quaternion_t gd_quaternion_new_from_float_float_float_float(double x, double y, double z, double w):
    cdef gd_quaternion_t obj
    cdef GDExtensionTypePtr[4] p_args = [&x, &y, &z, &w]
    gd_quaternion_constructor_5_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline double gd_quaternion_length(gd_quaternion_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_length_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_quaternion_length_squared(gd_quaternion_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_length_squared_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_quaternion_t gd_quaternion_normalized(gd_quaternion_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_quaternion_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_normalized_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_quaternion_is_normalized(gd_quaternion_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_is_normalized_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_quaternion_is_equal_approx(gd_quaternion_t *self, gd_quaternion_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_is_equal_approx_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_quaternion_is_finite(gd_quaternion_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_is_finite_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_quaternion_t gd_quaternion_inverse(gd_quaternion_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_quaternion_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_inverse_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_quaternion_t gd_quaternion_log(gd_quaternion_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_quaternion_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_log_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_quaternion_t gd_quaternion_exp(gd_quaternion_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_quaternion_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_exp_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_quaternion_angle_to(gd_quaternion_t *self, gd_quaternion_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_angle_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_quaternion_dot(gd_quaternion_t *self, gd_quaternion_t* with_):
    cdef GDExtensionTypePtr[1] __args = [with_]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_dot_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_quaternion_t gd_quaternion_slerp(gd_quaternion_t *self, gd_quaternion_t* to, double weight):
    cdef GDExtensionTypePtr[2] __args = [to, &weight]
    cdef gd_quaternion_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_slerp_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_quaternion_t gd_quaternion_slerpni(gd_quaternion_t *self, gd_quaternion_t* to, double weight):
    cdef GDExtensionTypePtr[2] __args = [to, &weight]
    cdef gd_quaternion_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_slerpni_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_quaternion_t gd_quaternion_spherical_cubic_interpolate(gd_quaternion_t *self, gd_quaternion_t* b, gd_quaternion_t* pre_a, gd_quaternion_t* post_b, double weight):
    cdef GDExtensionTypePtr[4] __args = [b, pre_a, post_b, &weight]
    cdef gd_quaternion_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_spherical_cubic_interpolate_ptr(
                self,
                <const void **>__args,
                &__ret,
                4
    )
    return __ret

cdef inline gd_quaternion_t gd_quaternion_spherical_cubic_interpolate_in_time(gd_quaternion_t *self, gd_quaternion_t* b, gd_quaternion_t* pre_a, gd_quaternion_t* post_b, double weight, double b_t, double pre_a_t, double post_b_t):
    cdef GDExtensionTypePtr[7] __args = [b, pre_a, post_b, &weight, &b_t, &pre_a_t, &post_b_t]
    cdef gd_quaternion_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_spherical_cubic_interpolate_in_time_ptr(
                self,
                <const void **>__args,
                &__ret,
                7
    )
    return __ret

cdef inline gd_vector3_t gd_quaternion_get_euler(gd_quaternion_t *self, uint64_t order):
    cdef GDExtensionTypePtr[1] __args = [&order]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_get_euler_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_quaternion_t gd_quaternion_from_euler(gd_quaternion_t *self, gd_vector3_t* euler):
    cdef GDExtensionTypePtr[1] __args = [euler]
    cdef gd_quaternion_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_from_euler_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector3_t gd_quaternion_get_axis(gd_quaternion_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_get_axis_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_quaternion_get_angle(gd_quaternion_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_meth_get_angle_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_quaternion_indexed_getter(const gd_quaternion_t *self, GDExtensionInt index):
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_quaternion_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_quaternion_indexed_setter(
    gd_quaternion_t *self,
    GDExtensionInt index,
    double value
):
    gd_quaternion_indexed_setter_ptr(self, index, &value)




cdef inline gd_aabb_t gd_aabb_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_aabb_t ret = gd_aabb_new()
    gd_aabb_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_aabb_into_variant(gd_aabb_t *val):
    cdef gd_variant_t ret
    gd_aabb_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_aabb_t gd_aabb_new():
    cdef gd_aabb_t obj
    gd_aabb_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_aabb_t gd_aabb_new_from_aabb(gd_aabb_t* from_):
    cdef gd_aabb_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_aabb_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_aabb_t gd_aabb_new_from_vector3_vector3(gd_vector3_t* position, gd_vector3_t* size):
    cdef gd_aabb_t obj
    cdef GDExtensionTypePtr[2] p_args = [position, size]
    gd_aabb_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_aabb_t gd_aabb_abs(gd_aabb_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_aabb_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_abs_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector3_t gd_aabb_get_center(gd_aabb_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_get_center_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_aabb_get_volume(gd_aabb_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_get_volume_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_aabb_has_volume(gd_aabb_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_has_volume_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_aabb_has_surface(gd_aabb_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_has_surface_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_aabb_has_point(gd_aabb_t *self, gd_vector3_t* point):
    cdef GDExtensionTypePtr[1] __args = [point]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_has_point_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_aabb_is_equal_approx(gd_aabb_t *self, gd_aabb_t* aabb):
    cdef GDExtensionTypePtr[1] __args = [aabb]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_is_equal_approx_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_aabb_is_finite(gd_aabb_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_is_finite_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_aabb_intersects(gd_aabb_t *self, gd_aabb_t* with_):
    cdef GDExtensionTypePtr[1] __args = [with_]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_intersects_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_aabb_encloses(gd_aabb_t *self, gd_aabb_t* with_):
    cdef GDExtensionTypePtr[1] __args = [with_]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_encloses_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_aabb_intersects_plane(gd_aabb_t *self, gd_plane_t* plane):
    cdef GDExtensionTypePtr[1] __args = [plane]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_intersects_plane_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_aabb_t gd_aabb_intersection(gd_aabb_t *self, gd_aabb_t* with_):
    cdef GDExtensionTypePtr[1] __args = [with_]
    cdef gd_aabb_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_intersection_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_aabb_t gd_aabb_merge(gd_aabb_t *self, gd_aabb_t* with_):
    cdef GDExtensionTypePtr[1] __args = [with_]
    cdef gd_aabb_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_merge_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_aabb_t gd_aabb_expand(gd_aabb_t *self, gd_vector3_t* to_point):
    cdef GDExtensionTypePtr[1] __args = [to_point]
    cdef gd_aabb_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_expand_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_aabb_t gd_aabb_grow(gd_aabb_t *self, double by):
    cdef GDExtensionTypePtr[1] __args = [&by]
    cdef gd_aabb_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_grow_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector3_t gd_aabb_get_support(gd_aabb_t *self, gd_vector3_t* dir):
    cdef GDExtensionTypePtr[1] __args = [dir]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_get_support_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector3_t gd_aabb_get_longest_axis(gd_aabb_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_get_longest_axis_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_aabb_get_longest_axis_index(gd_aabb_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_get_longest_axis_index_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_aabb_get_longest_axis_size(gd_aabb_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_get_longest_axis_size_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector3_t gd_aabb_get_shortest_axis(gd_aabb_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_get_shortest_axis_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_aabb_get_shortest_axis_index(gd_aabb_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_get_shortest_axis_index_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_aabb_get_shortest_axis_size(gd_aabb_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_get_shortest_axis_size_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector3_t gd_aabb_get_endpoint(gd_aabb_t *self, uint64_t idx):
    cdef GDExtensionTypePtr[1] __args = [&idx]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_meth_get_endpoint_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_variant_t gd_aabb_intersects_segment(gd_aabb_t *self, gd_vector3_t* from_, gd_vector3_t* to):
    cdef GDExtensionTypePtr[2] __args = [from_, to]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_aabb_meth_intersects_segment_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_variant_t gd_aabb_intersects_ray(gd_aabb_t *self, gd_vector3_t* from_, gd_vector3_t* dir):
    cdef GDExtensionTypePtr[2] __args = [from_, dir]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_aabb_meth_intersects_ray_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_vector3_t gd_aabb_get_end(gd_aabb_t *self):
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_aabb_get_end_ptr(self, &__ret)
    return __ret

cdef inline void gd_aabb_set_end(
    gd_aabb_t *self,
    gd_vector3_t *val
):
    gd_aabb_set_end_ptr(self, val)




cdef inline gd_basis_t gd_basis_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_basis_t ret = gd_basis_new()
    gd_basis_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_basis_into_variant(gd_basis_t *val):
    cdef gd_variant_t ret
    gd_basis_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_basis_t gd_basis_new():
    cdef gd_basis_t obj
    gd_basis_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_basis_t gd_basis_new_from_basis(gd_basis_t* from_):
    cdef gd_basis_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_basis_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_basis_t gd_basis_new_from_quaternion(gd_quaternion_t* from_):
    cdef gd_basis_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_basis_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_basis_t gd_basis_new_from_vector3_float(gd_vector3_t* axis, double angle):
    cdef gd_basis_t obj
    cdef GDExtensionTypePtr[2] p_args = [axis, &angle]
    gd_basis_constructor_3_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_basis_t gd_basis_new_from_vector3_vector3_vector3(gd_vector3_t* x_axis, gd_vector3_t* y_axis, gd_vector3_t* z_axis):
    cdef gd_basis_t obj
    cdef GDExtensionTypePtr[3] p_args = [x_axis, y_axis, z_axis]
    gd_basis_constructor_4_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_basis_t gd_basis_inverse(gd_basis_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_basis_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_inverse_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_basis_t gd_basis_transposed(gd_basis_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_basis_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_transposed_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_basis_t gd_basis_orthonormalized(gd_basis_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_basis_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_orthonormalized_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_basis_determinant(gd_basis_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_determinant_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_basis_t gd_basis_rotated(gd_basis_t *self, gd_vector3_t* axis, double angle):
    cdef GDExtensionTypePtr[2] __args = [axis, &angle]
    cdef gd_basis_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_rotated_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_basis_t gd_basis_scaled(gd_basis_t *self, gd_vector3_t* scale):
    cdef GDExtensionTypePtr[1] __args = [scale]
    cdef gd_basis_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_scaled_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector3_t gd_basis_get_scale(gd_basis_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_get_scale_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector3_t gd_basis_get_euler(gd_basis_t *self, uint64_t order):
    cdef GDExtensionTypePtr[1] __args = [&order]
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_get_euler_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_basis_tdotx(gd_basis_t *self, gd_vector3_t* with_):
    cdef GDExtensionTypePtr[1] __args = [with_]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_tdotx_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_basis_tdoty(gd_basis_t *self, gd_vector3_t* with_):
    cdef GDExtensionTypePtr[1] __args = [with_]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_tdoty_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_basis_tdotz(gd_basis_t *self, gd_vector3_t* with_):
    cdef GDExtensionTypePtr[1] __args = [with_]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_tdotz_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_basis_t gd_basis_slerp(gd_basis_t *self, gd_basis_t* to, double weight):
    cdef GDExtensionTypePtr[2] __args = [to, &weight]
    cdef gd_basis_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_slerp_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint8_t gd_basis_is_equal_approx(gd_basis_t *self, gd_basis_t* b):
    cdef GDExtensionTypePtr[1] __args = [b]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_is_equal_approx_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_basis_is_finite(gd_basis_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_is_finite_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_quaternion_t gd_basis_get_rotation_quaternion(gd_basis_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_quaternion_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_get_rotation_quaternion_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_basis_t gd_basis_looking_at(gd_basis_t *self, gd_vector3_t* target, gd_vector3_t* up, uint8_t use_model_front):
    cdef GDExtensionTypePtr[3] __args = [target, up, &use_model_front]
    cdef gd_basis_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_looking_at_ptr(
                self,
                <const void **>__args,
                &__ret,
                3
    )
    return __ret

cdef inline gd_basis_t gd_basis_from_scale(gd_basis_t *self, gd_vector3_t* scale):
    cdef GDExtensionTypePtr[1] __args = [scale]
    cdef gd_basis_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_from_scale_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_basis_t gd_basis_from_euler(gd_basis_t *self, gd_vector3_t* euler, uint64_t order):
    cdef GDExtensionTypePtr[2] __args = [euler, &order]
    cdef gd_basis_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_meth_from_euler_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_vector3_t gd_basis_indexed_getter(const gd_basis_t *self, GDExtensionInt index):
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_basis_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_basis_indexed_setter(
    gd_basis_t *self,
    GDExtensionInt index,
    gd_vector3_t *value
):
    gd_basis_indexed_setter_ptr(self, index, value)




cdef inline gd_transform3d_t gd_transform3d_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_transform3d_t ret = gd_transform3d_new()
    gd_transform3d_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_transform3d_into_variant(gd_transform3d_t *val):
    cdef gd_variant_t ret
    gd_transform3d_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_transform3d_t gd_transform3d_new():
    cdef gd_transform3d_t obj
    gd_transform3d_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_transform3d_t gd_transform3d_new_from_transform3d(gd_transform3d_t* from_):
    cdef gd_transform3d_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_transform3d_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_transform3d_t gd_transform3d_new_from_basis_vector3(gd_basis_t* basis, gd_vector3_t* origin):
    cdef gd_transform3d_t obj
    cdef GDExtensionTypePtr[2] p_args = [basis, origin]
    gd_transform3d_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_transform3d_t gd_transform3d_new_from_vector3_vector3_vector3_vector3(gd_vector3_t* x_axis, gd_vector3_t* y_axis, gd_vector3_t* z_axis, gd_vector3_t* origin):
    cdef gd_transform3d_t obj
    cdef GDExtensionTypePtr[4] p_args = [x_axis, y_axis, z_axis, origin]
    gd_transform3d_constructor_3_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_transform3d_t gd_transform3d_new_from_projection(gd_projection_t* from_):
    cdef gd_transform3d_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_transform3d_constructor_4_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_transform3d_t gd_transform3d_inverse(gd_transform3d_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_transform3d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform3d_meth_inverse_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_transform3d_t gd_transform3d_affine_inverse(gd_transform3d_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_transform3d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform3d_meth_affine_inverse_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_transform3d_t gd_transform3d_orthonormalized(gd_transform3d_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_transform3d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform3d_meth_orthonormalized_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_transform3d_t gd_transform3d_rotated(gd_transform3d_t *self, gd_vector3_t* axis, double angle):
    cdef GDExtensionTypePtr[2] __args = [axis, &angle]
    cdef gd_transform3d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform3d_meth_rotated_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_transform3d_t gd_transform3d_rotated_local(gd_transform3d_t *self, gd_vector3_t* axis, double angle):
    cdef GDExtensionTypePtr[2] __args = [axis, &angle]
    cdef gd_transform3d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform3d_meth_rotated_local_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_transform3d_t gd_transform3d_scaled(gd_transform3d_t *self, gd_vector3_t* scale):
    cdef GDExtensionTypePtr[1] __args = [scale]
    cdef gd_transform3d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform3d_meth_scaled_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_transform3d_t gd_transform3d_scaled_local(gd_transform3d_t *self, gd_vector3_t* scale):
    cdef GDExtensionTypePtr[1] __args = [scale]
    cdef gd_transform3d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform3d_meth_scaled_local_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_transform3d_t gd_transform3d_translated(gd_transform3d_t *self, gd_vector3_t* offset):
    cdef GDExtensionTypePtr[1] __args = [offset]
    cdef gd_transform3d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform3d_meth_translated_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_transform3d_t gd_transform3d_translated_local(gd_transform3d_t *self, gd_vector3_t* offset):
    cdef GDExtensionTypePtr[1] __args = [offset]
    cdef gd_transform3d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform3d_meth_translated_local_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_transform3d_t gd_transform3d_looking_at(gd_transform3d_t *self, gd_vector3_t* target, gd_vector3_t* up, uint8_t use_model_front):
    cdef GDExtensionTypePtr[3] __args = [target, up, &use_model_front]
    cdef gd_transform3d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform3d_meth_looking_at_ptr(
                self,
                <const void **>__args,
                &__ret,
                3
    )
    return __ret

cdef inline gd_transform3d_t gd_transform3d_interpolate_with(gd_transform3d_t *self, gd_transform3d_t* xform, double weight):
    cdef GDExtensionTypePtr[2] __args = [xform, &weight]
    cdef gd_transform3d_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform3d_meth_interpolate_with_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint8_t gd_transform3d_is_equal_approx(gd_transform3d_t *self, gd_transform3d_t* xform):
    cdef GDExtensionTypePtr[1] __args = [xform]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform3d_meth_is_equal_approx_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_transform3d_is_finite(gd_transform3d_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_transform3d_meth_is_finite_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret




cdef inline gd_projection_t gd_projection_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_projection_t ret = gd_projection_new()
    gd_projection_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_projection_into_variant(gd_projection_t *val):
    cdef gd_variant_t ret
    gd_projection_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_projection_t gd_projection_new():
    cdef gd_projection_t obj
    gd_projection_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_projection_t gd_projection_new_from_projection(gd_projection_t* from_):
    cdef gd_projection_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_projection_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_projection_t gd_projection_new_from_transform3d(gd_transform3d_t* from_):
    cdef gd_projection_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_projection_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_projection_t gd_projection_new_from_vector4_vector4_vector4_vector4(gd_vector4_t* x_axis, gd_vector4_t* y_axis, gd_vector4_t* z_axis, gd_vector4_t* w_axis):
    cdef gd_projection_t obj
    cdef GDExtensionTypePtr[4] p_args = [x_axis, y_axis, z_axis, w_axis]
    gd_projection_constructor_3_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_projection_t gd_projection_create_depth_correction(gd_projection_t *self, uint8_t flip_y):
    cdef GDExtensionTypePtr[1] __args = [&flip_y]
    cdef gd_projection_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_create_depth_correction_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_projection_t gd_projection_create_light_atlas_rect(gd_projection_t *self, gd_rect2_t* rect):
    cdef GDExtensionTypePtr[1] __args = [rect]
    cdef gd_projection_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_create_light_atlas_rect_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_projection_t gd_projection_create_perspective(gd_projection_t *self, double fovy, double aspect, double z_near, double z_far, uint8_t flip_fov):
    cdef GDExtensionTypePtr[5] __args = [&fovy, &aspect, &z_near, &z_far, &flip_fov]
    cdef gd_projection_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_create_perspective_ptr(
                self,
                <const void **>__args,
                &__ret,
                5
    )
    return __ret

cdef inline gd_projection_t gd_projection_create_perspective_hmd(gd_projection_t *self, double fovy, double aspect, double z_near, double z_far, uint8_t flip_fov, uint64_t eye, double intraocular_dist, double convergence_dist):
    cdef GDExtensionTypePtr[8] __args = [&fovy, &aspect, &z_near, &z_far, &flip_fov, &eye, &intraocular_dist, &convergence_dist]
    cdef gd_projection_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_create_perspective_hmd_ptr(
                self,
                <const void **>__args,
                &__ret,
                8
    )
    return __ret

cdef inline gd_projection_t gd_projection_create_for_hmd(gd_projection_t *self, uint64_t eye, double aspect, double intraocular_dist, double display_width, double display_to_lens, double oversample, double z_near, double z_far):
    cdef GDExtensionTypePtr[8] __args = [&eye, &aspect, &intraocular_dist, &display_width, &display_to_lens, &oversample, &z_near, &z_far]
    cdef gd_projection_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_create_for_hmd_ptr(
                self,
                <const void **>__args,
                &__ret,
                8
    )
    return __ret

cdef inline gd_projection_t gd_projection_create_orthogonal(gd_projection_t *self, double left, double right, double bottom, double top, double z_near, double z_far):
    cdef GDExtensionTypePtr[6] __args = [&left, &right, &bottom, &top, &z_near, &z_far]
    cdef gd_projection_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_create_orthogonal_ptr(
                self,
                <const void **>__args,
                &__ret,
                6
    )
    return __ret

cdef inline gd_projection_t gd_projection_create_orthogonal_aspect(gd_projection_t *self, double size, double aspect, double z_near, double z_far, uint8_t flip_fov):
    cdef GDExtensionTypePtr[5] __args = [&size, &aspect, &z_near, &z_far, &flip_fov]
    cdef gd_projection_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_create_orthogonal_aspect_ptr(
                self,
                <const void **>__args,
                &__ret,
                5
    )
    return __ret

cdef inline gd_projection_t gd_projection_create_frustum(gd_projection_t *self, double left, double right, double bottom, double top, double z_near, double z_far):
    cdef GDExtensionTypePtr[6] __args = [&left, &right, &bottom, &top, &z_near, &z_far]
    cdef gd_projection_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_create_frustum_ptr(
                self,
                <const void **>__args,
                &__ret,
                6
    )
    return __ret

cdef inline gd_projection_t gd_projection_create_frustum_aspect(gd_projection_t *self, double size, double aspect, gd_vector2_t* offset, double z_near, double z_far, uint8_t flip_fov):
    cdef GDExtensionTypePtr[6] __args = [&size, &aspect, offset, &z_near, &z_far, &flip_fov]
    cdef gd_projection_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_create_frustum_aspect_ptr(
                self,
                <const void **>__args,
                &__ret,
                6
    )
    return __ret

cdef inline gd_projection_t gd_projection_create_fit_aabb(gd_projection_t *self, gd_aabb_t* aabb):
    cdef GDExtensionTypePtr[1] __args = [aabb]
    cdef gd_projection_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_create_fit_aabb_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_projection_determinant(gd_projection_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_determinant_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_projection_t gd_projection_perspective_znear_adjusted(gd_projection_t *self, double new_znear):
    cdef GDExtensionTypePtr[1] __args = [&new_znear]
    cdef gd_projection_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_perspective_znear_adjusted_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_plane_t gd_projection_get_projection_plane(gd_projection_t *self, uint64_t plane):
    cdef GDExtensionTypePtr[1] __args = [&plane]
    cdef gd_plane_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_get_projection_plane_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_projection_t gd_projection_flipped_y(gd_projection_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_projection_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_flipped_y_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_projection_t gd_projection_jitter_offseted(gd_projection_t *self, gd_vector2_t* offset):
    cdef GDExtensionTypePtr[1] __args = [offset]
    cdef gd_projection_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_jitter_offseted_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_projection_get_fovy(gd_projection_t *self, double fovx, double aspect):
    cdef GDExtensionTypePtr[2] __args = [&fovx, &aspect]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_get_fovy_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline double gd_projection_get_z_far(gd_projection_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_get_z_far_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_projection_get_z_near(gd_projection_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_get_z_near_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_projection_get_aspect(gd_projection_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_get_aspect_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_projection_get_fov(gd_projection_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_get_fov_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_projection_is_orthogonal(gd_projection_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_is_orthogonal_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2_t gd_projection_get_viewport_half_extents(gd_projection_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_get_viewport_half_extents_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector2_t gd_projection_get_far_plane_half_extents(gd_projection_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_get_far_plane_half_extents_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_projection_t gd_projection_inverse(gd_projection_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_projection_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_inverse_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_projection_get_pixels_per_meter(gd_projection_t *self, uint64_t for_pixel_width):
    cdef GDExtensionTypePtr[1] __args = [&for_pixel_width]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_get_pixels_per_meter_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_projection_get_lod_multiplier(gd_projection_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_meth_get_lod_multiplier_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_vector4_t gd_projection_indexed_getter(const gd_projection_t *self, GDExtensionInt index):
    cdef gd_vector4_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_projection_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_projection_indexed_setter(
    gd_projection_t *self,
    GDExtensionInt index,
    gd_vector4_t *value
):
    gd_projection_indexed_setter_ptr(self, index, value)




cdef inline gd_color_t gd_color_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_color_t ret = gd_color_new()
    gd_color_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_color_into_variant(gd_color_t *val):
    cdef gd_variant_t ret
    gd_color_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_color_t gd_color_new():
    cdef gd_color_t obj
    gd_color_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_color_t gd_color_new_from_color(gd_color_t* from_):
    cdef gd_color_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_color_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_color_t gd_color_new_from_color_float(gd_color_t* from_, double alpha):
    cdef gd_color_t obj
    cdef GDExtensionTypePtr[2] p_args = [from_, &alpha]
    gd_color_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_color_t gd_color_new_from_float_float_float(double r, double g, double b):
    cdef gd_color_t obj
    cdef GDExtensionTypePtr[3] p_args = [&r, &g, &b]
    gd_color_constructor_3_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_color_t gd_color_new_from_float_float_float_float(double r, double g, double b, double a):
    cdef gd_color_t obj
    cdef GDExtensionTypePtr[4] p_args = [&r, &g, &b, &a]
    gd_color_constructor_4_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_color_t gd_color_new_from_string(gd_string_t* code):
    cdef gd_color_t obj
    cdef GDExtensionTypePtr[1] p_args = [code]
    gd_color_constructor_5_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_color_t gd_color_new_from_string_float(gd_string_t* code, double alpha):
    cdef gd_color_t obj
    cdef GDExtensionTypePtr[2] p_args = [code, &alpha]
    gd_color_constructor_6_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline uint64_t gd_color_to_argb32(gd_color_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_to_argb32_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_color_to_abgr32(gd_color_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_to_abgr32_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_color_to_rgba32(gd_color_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_to_rgba32_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_color_to_argb64(gd_color_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_to_argb64_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_color_to_abgr64(gd_color_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_to_abgr64_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_color_to_rgba64(gd_color_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_to_rgba64_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_color_to_html(gd_color_t *self, uint8_t with_alpha):
    cdef GDExtensionTypePtr[1] __args = [&with_alpha]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_color_meth_to_html_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_color_t gd_color_clamp(gd_color_t *self, gd_color_t* min, gd_color_t* max):
    cdef GDExtensionTypePtr[2] __args = [min, max]
    cdef gd_color_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_clamp_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_color_t gd_color_inverted(gd_color_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_color_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_inverted_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_color_t gd_color_lerp(gd_color_t *self, gd_color_t* to, double weight):
    cdef GDExtensionTypePtr[2] __args = [to, &weight]
    cdef gd_color_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_lerp_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_color_t gd_color_lightened(gd_color_t *self, double amount):
    cdef GDExtensionTypePtr[1] __args = [&amount]
    cdef gd_color_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_lightened_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_color_t gd_color_darkened(gd_color_t *self, double amount):
    cdef GDExtensionTypePtr[1] __args = [&amount]
    cdef gd_color_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_darkened_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_color_t gd_color_blend(gd_color_t *self, gd_color_t* over):
    cdef GDExtensionTypePtr[1] __args = [over]
    cdef gd_color_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_blend_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_color_get_luminance(gd_color_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_get_luminance_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_color_t gd_color_srgb_to_linear(gd_color_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_color_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_srgb_to_linear_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_color_t gd_color_linear_to_srgb(gd_color_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_color_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_linear_to_srgb_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_color_is_equal_approx(gd_color_t *self, gd_color_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_is_equal_approx_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_color_t gd_color_hex(gd_color_t *self, uint64_t hex):
    cdef GDExtensionTypePtr[1] __args = [&hex]
    cdef gd_color_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_hex_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_color_t gd_color_hex64(gd_color_t *self, uint64_t hex):
    cdef GDExtensionTypePtr[1] __args = [&hex]
    cdef gd_color_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_hex64_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_color_t gd_color_html(gd_color_t *self, gd_string_t* rgba):
    cdef GDExtensionTypePtr[1] __args = [rgba]
    cdef gd_color_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_html_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_color_html_is_valid(gd_color_t *self, gd_string_t* color):
    cdef GDExtensionTypePtr[1] __args = [color]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_html_is_valid_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_color_t gd_color_from_string(gd_color_t *self, gd_string_t* str, gd_color_t* default):
    cdef GDExtensionTypePtr[2] __args = [str, default]
    cdef gd_color_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_from_string_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_color_t gd_color_from_hsv(gd_color_t *self, double h, double s, double v, double alpha):
    cdef GDExtensionTypePtr[4] __args = [&h, &s, &v, &alpha]
    cdef gd_color_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_from_hsv_ptr(
                self,
                <const void **>__args,
                &__ret,
                4
    )
    return __ret

cdef inline gd_color_t gd_color_from_ok_hsl(gd_color_t *self, double h, double s, double l, double alpha):
    cdef GDExtensionTypePtr[4] __args = [&h, &s, &l, &alpha]
    cdef gd_color_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_from_ok_hsl_ptr(
                self,
                <const void **>__args,
                &__ret,
                4
    )
    return __ret

cdef inline gd_color_t gd_color_from_rgbe9995(gd_color_t *self, uint64_t rgbe):
    cdef GDExtensionTypePtr[1] __args = [&rgbe]
    cdef gd_color_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_meth_from_rgbe9995_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_color_indexed_getter(const gd_color_t *self, GDExtensionInt index):
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_color_indexed_setter(
    gd_color_t *self,
    GDExtensionInt index,
    double value
):
    gd_color_indexed_setter_ptr(self, index, &value)

cdef inline uint64_t gd_color_get_r8(gd_color_t *self):
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_get_r8_ptr(self, &__ret)
    return __ret

cdef inline void gd_color_set_r8(
    gd_color_t *self,
    uint64_t val
):
    gd_color_set_r8_ptr(self, &val)

cdef inline uint64_t gd_color_get_g8(gd_color_t *self):
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_get_g8_ptr(self, &__ret)
    return __ret

cdef inline void gd_color_set_g8(
    gd_color_t *self,
    uint64_t val
):
    gd_color_set_g8_ptr(self, &val)

cdef inline uint64_t gd_color_get_b8(gd_color_t *self):
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_get_b8_ptr(self, &__ret)
    return __ret

cdef inline void gd_color_set_b8(
    gd_color_t *self,
    uint64_t val
):
    gd_color_set_b8_ptr(self, &val)

cdef inline uint64_t gd_color_get_a8(gd_color_t *self):
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_get_a8_ptr(self, &__ret)
    return __ret

cdef inline void gd_color_set_a8(
    gd_color_t *self,
    uint64_t val
):
    gd_color_set_a8_ptr(self, &val)

cdef inline double gd_color_get_h(gd_color_t *self):
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_get_h_ptr(self, &__ret)
    return __ret

cdef inline void gd_color_set_h(
    gd_color_t *self,
    double val
):
    gd_color_set_h_ptr(self, &val)

cdef inline double gd_color_get_s(gd_color_t *self):
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_get_s_ptr(self, &__ret)
    return __ret

cdef inline void gd_color_set_s(
    gd_color_t *self,
    double val
):
    gd_color_set_s_ptr(self, &val)

cdef inline double gd_color_get_v(gd_color_t *self):
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_color_get_v_ptr(self, &__ret)
    return __ret

cdef inline void gd_color_set_v(
    gd_color_t *self,
    double val
):
    gd_color_set_v_ptr(self, &val)




cdef inline gd_string_name_t gd_string_name_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_string_name_t ret = gd_string_name_new()
    gd_string_name_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_string_name_into_variant(gd_string_name_t *val):
    cdef gd_variant_t ret
    gd_string_name_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_string_name_t gd_string_name_new():
    cdef gd_string_name_t obj
    gd_string_name_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_string_name_t gd_string_name_new_from_string_name(gd_string_name_t* from_):
    cdef gd_string_name_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_string_name_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_string_name_t gd_string_name_new_from_string(gd_string_t* from_):
    cdef gd_string_name_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_string_name_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline void gd_string_name_del(gd_string_name_t* self):
    gd_string_name_destructor_ptr(self)

cdef inline uint64_t gd_string_name_casecmp_to(gd_string_name_t *self, gd_string_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_casecmp_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_string_name_nocasecmp_to(gd_string_name_t *self, gd_string_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_nocasecmp_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_string_name_naturalcasecmp_to(gd_string_name_t *self, gd_string_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_naturalcasecmp_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_string_name_naturalnocasecmp_to(gd_string_name_t *self, gd_string_t* to):
    cdef GDExtensionTypePtr[1] __args = [to]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_naturalnocasecmp_to_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_string_name_length(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_length_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_substr(gd_string_name_t *self, uint64_t from_, uint64_t len):
    cdef GDExtensionTypePtr[2] __args = [&from_, &len]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_substr_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_name_get_slice(gd_string_name_t *self, gd_string_t* delimiter, uint64_t slice):
    cdef GDExtensionTypePtr[2] __args = [delimiter, &slice]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_get_slice_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_name_get_slicec(gd_string_name_t *self, uint64_t delimiter, uint64_t slice):
    cdef GDExtensionTypePtr[2] __args = [&delimiter, &slice]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_get_slicec_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_string_name_get_slice_count(gd_string_name_t *self, gd_string_t* delimiter):
    cdef GDExtensionTypePtr[1] __args = [delimiter]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_get_slice_count_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_string_name_find(gd_string_name_t *self, gd_string_t* what, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [what, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_find_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_string_name_count(gd_string_name_t *self, gd_string_t* what, uint64_t from_, uint64_t to):
    cdef GDExtensionTypePtr[3] __args = [what, &from_, &to]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_count_ptr(
                self,
                <const void **>__args,
                &__ret,
                3
    )
    return __ret

cdef inline uint64_t gd_string_name_countn(gd_string_name_t *self, gd_string_t* what, uint64_t from_, uint64_t to):
    cdef GDExtensionTypePtr[3] __args = [what, &from_, &to]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_countn_ptr(
                self,
                <const void **>__args,
                &__ret,
                3
    )
    return __ret

cdef inline uint64_t gd_string_name_findn(gd_string_name_t *self, gd_string_t* what, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [what, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_findn_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_string_name_rfind(gd_string_name_t *self, gd_string_t* what, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [what, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_rfind_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_string_name_rfindn(gd_string_name_t *self, gd_string_t* what, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [what, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_rfindn_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint8_t gd_string_name_match(gd_string_name_t *self, gd_string_t* expr):
    cdef GDExtensionTypePtr[1] __args = [expr]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_match_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_string_name_matchn(gd_string_name_t *self, gd_string_t* expr):
    cdef GDExtensionTypePtr[1] __args = [expr]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_matchn_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_string_name_begins_with(gd_string_name_t *self, gd_string_t* text):
    cdef GDExtensionTypePtr[1] __args = [text]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_begins_with_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_string_name_ends_with(gd_string_name_t *self, gd_string_t* text):
    cdef GDExtensionTypePtr[1] __args = [text]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_ends_with_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_string_name_is_subsequence_of(gd_string_name_t *self, gd_string_t* text):
    cdef GDExtensionTypePtr[1] __args = [text]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_is_subsequence_of_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_string_name_is_subsequence_ofn(gd_string_name_t *self, gd_string_t* text):
    cdef GDExtensionTypePtr[1] __args = [text]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_is_subsequence_ofn_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_packed_string_array_t gd_string_name_bigrams(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_string_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_string_array_new()
    gd_string_name_meth_bigrams_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_string_name_similarity(gd_string_name_t *self, gd_string_t* text):
    cdef GDExtensionTypePtr[1] __args = [text]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_similarity_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_name_format(gd_string_name_t *self, gd_variant_t* values, gd_string_t* placeholder):
    cdef GDExtensionTypePtr[2] __args = [values, placeholder]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_format_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_name_replace(gd_string_name_t *self, gd_string_t* what, gd_string_t* forwhat):
    cdef GDExtensionTypePtr[2] __args = [what, forwhat]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_replace_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_name_replacen(gd_string_name_t *self, gd_string_t* what, gd_string_t* forwhat):
    cdef GDExtensionTypePtr[2] __args = [what, forwhat]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_replacen_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_name_repeat(gd_string_name_t *self, uint64_t count):
    cdef GDExtensionTypePtr[1] __args = [&count]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_repeat_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_name_insert(gd_string_name_t *self, uint64_t position, gd_string_t* what):
    cdef GDExtensionTypePtr[2] __args = [&position, what]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_insert_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_name_erase(gd_string_name_t *self, uint64_t position, uint64_t chars):
    cdef GDExtensionTypePtr[2] __args = [&position, &chars]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_erase_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_name_capitalize(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_capitalize_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_to_camel_case(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_to_camel_case_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_to_pascal_case(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_to_pascal_case_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_to_snake_case(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_to_snake_case_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_string_array_t gd_string_name_split(gd_string_name_t *self, gd_string_t* delimiter, uint8_t allow_empty, uint64_t maxsplit):
    cdef GDExtensionTypePtr[3] __args = [delimiter, &allow_empty, &maxsplit]
    cdef gd_packed_string_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_string_array_new()
    gd_string_name_meth_split_ptr(
                self,
                <const void **>__args,
                &__ret,
                3
    )
    return __ret

cdef inline gd_packed_string_array_t gd_string_name_rsplit(gd_string_name_t *self, gd_string_t* delimiter, uint8_t allow_empty, uint64_t maxsplit):
    cdef GDExtensionTypePtr[3] __args = [delimiter, &allow_empty, &maxsplit]
    cdef gd_packed_string_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_string_array_new()
    gd_string_name_meth_rsplit_ptr(
                self,
                <const void **>__args,
                &__ret,
                3
    )
    return __ret

cdef inline gd_packed_float64_array_t gd_string_name_split_floats(gd_string_name_t *self, gd_string_t* delimiter, uint8_t allow_empty):
    cdef GDExtensionTypePtr[2] __args = [delimiter, &allow_empty]
    cdef gd_packed_float64_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_float64_array_new()
    gd_string_name_meth_split_floats_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_name_join(gd_string_name_t *self, gd_packed_string_array_t* parts):
    cdef GDExtensionTypePtr[1] __args = [parts]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_join_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_name_to_upper(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_to_upper_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_to_lower(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_to_lower_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_left(gd_string_name_t *self, uint64_t length):
    cdef GDExtensionTypePtr[1] __args = [&length]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_left_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_name_right(gd_string_name_t *self, uint64_t length):
    cdef GDExtensionTypePtr[1] __args = [&length]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_right_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_name_strip_edges(gd_string_name_t *self, uint8_t left, uint8_t right):
    cdef GDExtensionTypePtr[2] __args = [&left, &right]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_strip_edges_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_name_strip_escapes(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_strip_escapes_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_lstrip(gd_string_name_t *self, gd_string_t* chars):
    cdef GDExtensionTypePtr[1] __args = [chars]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_lstrip_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_name_rstrip(gd_string_name_t *self, gd_string_t* chars):
    cdef GDExtensionTypePtr[1] __args = [chars]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_rstrip_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_name_get_extension(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_get_extension_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_get_basename(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_get_basename_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_path_join(gd_string_name_t *self, gd_string_t* file):
    cdef GDExtensionTypePtr[1] __args = [file]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_path_join_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_string_name_unicode_at(gd_string_name_t *self, uint64_t at):
    cdef GDExtensionTypePtr[1] __args = [&at]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_unicode_at_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_name_indent(gd_string_name_t *self, gd_string_t* prefix):
    cdef GDExtensionTypePtr[1] __args = [prefix]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_indent_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_name_dedent(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_dedent_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_md5_text(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_md5_text_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_sha1_text(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_sha1_text_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_sha256_text(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_sha256_text_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_name_md5_buffer(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_name_meth_md5_buffer_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_name_sha1_buffer(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_name_meth_sha1_buffer_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_name_sha256_buffer(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_name_meth_sha256_buffer_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_name_is_empty(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_is_empty_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_name_contains(gd_string_name_t *self, gd_string_t* what):
    cdef GDExtensionTypePtr[1] __args = [what]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_contains_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_string_name_is_absolute_path(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_is_absolute_path_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_name_is_relative_path(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_is_relative_path_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_simplify_path(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_simplify_path_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_get_base_dir(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_get_base_dir_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_get_file(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_get_file_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_xml_escape(gd_string_name_t *self, uint8_t escape_quotes):
    cdef GDExtensionTypePtr[1] __args = [&escape_quotes]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_xml_escape_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_name_xml_unescape(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_xml_unescape_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_uri_encode(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_uri_encode_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_uri_decode(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_uri_decode_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_c_escape(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_c_escape_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_c_unescape(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_c_unescape_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_json_escape(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_json_escape_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_validate_node_name(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_validate_node_name_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_validate_filename(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_validate_filename_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_name_is_valid_identifier(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_is_valid_identifier_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_name_is_valid_int(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_is_valid_int_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_name_is_valid_float(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_is_valid_float_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_name_is_valid_hex_number(gd_string_name_t *self, uint8_t with_prefix):
    cdef GDExtensionTypePtr[1] __args = [&with_prefix]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_is_valid_hex_number_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_string_name_is_valid_html_color(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_is_valid_html_color_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_name_is_valid_ip_address(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_is_valid_ip_address_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_string_name_is_valid_filename(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_is_valid_filename_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_string_name_to_int(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_to_int_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline double gd_string_name_to_float(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_to_float_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_string_name_hex_to_int(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_hex_to_int_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_string_name_bin_to_int(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_bin_to_int_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_string_name_lpad(gd_string_name_t *self, uint64_t min_length, gd_string_t* character):
    cdef GDExtensionTypePtr[2] __args = [&min_length, character]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_lpad_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_name_rpad(gd_string_name_t *self, uint64_t min_length, gd_string_t* character):
    cdef GDExtensionTypePtr[2] __args = [&min_length, character]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_rpad_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_string_t gd_string_name_pad_decimals(gd_string_name_t *self, uint64_t digits):
    cdef GDExtensionTypePtr[1] __args = [&digits]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_pad_decimals_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_name_pad_zeros(gd_string_name_t *self, uint64_t digits):
    cdef GDExtensionTypePtr[1] __args = [&digits]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_pad_zeros_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_name_trim_prefix(gd_string_name_t *self, gd_string_t* prefix):
    cdef GDExtensionTypePtr[1] __args = [prefix]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_trim_prefix_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_string_name_trim_suffix(gd_string_name_t *self, gd_string_t* suffix):
    cdef GDExtensionTypePtr[1] __args = [suffix]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_string_name_meth_trim_suffix_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_name_to_ascii_buffer(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_name_meth_to_ascii_buffer_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_name_to_utf8_buffer(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_name_meth_to_utf8_buffer_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_name_to_utf16_buffer(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_name_meth_to_utf16_buffer_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_name_to_utf32_buffer(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_name_meth_to_utf32_buffer_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_name_hex_decode(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_name_meth_hex_decode_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_string_name_to_wchar_buffer(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_string_name_meth_to_wchar_buffer_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_string_name_hash(gd_string_name_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_string_name_meth_hash_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret




cdef inline gd_node_path_t gd_node_path_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_node_path_t ret = gd_node_path_new()
    gd_node_path_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_node_path_into_variant(gd_node_path_t *val):
    cdef gd_variant_t ret
    gd_node_path_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_node_path_t gd_node_path_new():
    cdef gd_node_path_t obj
    gd_node_path_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_node_path_t gd_node_path_new_from_node_path(gd_node_path_t* from_):
    cdef gd_node_path_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_node_path_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_node_path_t gd_node_path_new_from_string(gd_string_t* from_):
    cdef gd_node_path_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_node_path_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline void gd_node_path_del(gd_node_path_t* self):
    gd_node_path_destructor_ptr(self)

cdef inline uint8_t gd_node_path_is_absolute(gd_node_path_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_node_path_meth_is_absolute_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_node_path_get_name_count(gd_node_path_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_node_path_meth_get_name_count_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_name_t gd_node_path_get_name(gd_node_path_t *self, uint64_t idx):
    cdef GDExtensionTypePtr[1] __args = [&idx]
    cdef gd_string_name_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_name_new()
    gd_node_path_meth_get_name_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_node_path_get_subname_count(gd_node_path_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_node_path_meth_get_subname_count_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_node_path_hash(gd_node_path_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_node_path_meth_hash_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_name_t gd_node_path_get_subname(gd_node_path_t *self, uint64_t idx):
    cdef GDExtensionTypePtr[1] __args = [&idx]
    cdef gd_string_name_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_name_new()
    gd_node_path_meth_get_subname_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_name_t gd_node_path_get_concatenated_names(gd_node_path_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_name_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_name_new()
    gd_node_path_meth_get_concatenated_names_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_name_t gd_node_path_get_concatenated_subnames(gd_node_path_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_name_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_name_new()
    gd_node_path_meth_get_concatenated_subnames_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_node_path_t gd_node_path_get_as_property_path(gd_node_path_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_node_path_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_node_path_new()
    gd_node_path_meth_get_as_property_path_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_node_path_is_empty(gd_node_path_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_node_path_meth_is_empty_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret




cdef inline gd_rid_t gd_rid_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_rid_t ret = gd_rid_new()
    gd_rid_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_rid_into_variant(gd_rid_t *val):
    cdef gd_variant_t ret
    gd_rid_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_rid_t gd_rid_new():
    cdef gd_rid_t obj
    gd_rid_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_rid_t gd_rid_new_from_rid(gd_rid_t* from_):
    cdef gd_rid_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_rid_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline uint8_t gd_rid_is_valid(gd_rid_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rid_meth_is_valid_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_rid_get_id(gd_rid_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_rid_meth_get_id_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret




cdef inline gd_callable_t gd_callable_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_callable_t ret = gd_callable_new()
    gd_callable_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_callable_into_variant(gd_callable_t *val):
    cdef gd_variant_t ret
    gd_callable_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_callable_t gd_callable_new():
    cdef gd_callable_t obj
    gd_callable_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_callable_t gd_callable_new_from_callable(gd_callable_t* from_):
    cdef gd_callable_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_callable_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_callable_t gd_callable_new_from_object_string_name(gd_object_t* object, gd_string_name_t* method):
    cdef gd_callable_t obj
    cdef GDExtensionTypePtr[2] p_args = [object, method]
    gd_callable_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline void gd_callable_del(gd_callable_t* self):
    gd_callable_destructor_ptr(self)

cdef inline gd_variant_t gd_callable_callv(gd_callable_t *self, gd_array_t* arguments):
    cdef GDExtensionTypePtr[1] __args = [arguments]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_callable_meth_callv_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_callable_is_null(gd_callable_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_callable_meth_is_null_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_callable_is_custom(gd_callable_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_callable_meth_is_custom_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_callable_is_standard(gd_callable_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_callable_meth_is_standard_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_callable_is_valid(gd_callable_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_callable_meth_is_valid_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_object_t gd_callable_get_object(gd_callable_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_object_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_callable_meth_get_object_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_callable_get_object_id(gd_callable_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_callable_meth_get_object_id_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_name_t gd_callable_get_method(gd_callable_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_name_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_name_new()
    gd_callable_meth_get_method_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_callable_get_bound_arguments_count(gd_callable_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_callable_meth_get_bound_arguments_count_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_array_t gd_callable_get_bound_arguments(gd_callable_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_array_new()
    gd_callable_meth_get_bound_arguments_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_callable_hash(gd_callable_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_callable_meth_hash_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_callable_t gd_callable_bindv(gd_callable_t *self, gd_array_t* arguments):
    cdef GDExtensionTypePtr[1] __args = [arguments]
    cdef gd_callable_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_callable_new()
    gd_callable_meth_bindv_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_callable_t gd_callable_unbind(gd_callable_t *self, uint64_t argcount):
    cdef GDExtensionTypePtr[1] __args = [&argcount]
    cdef gd_callable_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_callable_new()
    gd_callable_meth_unbind_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_variant_t gd_callable_call(gd_callable_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_callable_meth_call_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_callable_call_deferred(gd_callable_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_callable_meth_call_deferred_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline void gd_callable_rpc(gd_callable_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_callable_meth_rpc_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline void gd_callable_rpc_id(gd_callable_t *self, uint64_t peer_id):
    cdef GDExtensionTypePtr[1] __args = [&peer_id]
    gd_callable_meth_rpc_id_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline gd_callable_t gd_callable_bind(gd_callable_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_callable_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_callable_new()
    gd_callable_meth_bind_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret




cdef inline gd_signal_t gd_signal_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_signal_t ret = gd_signal_new()
    gd_signal_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_signal_into_variant(gd_signal_t *val):
    cdef gd_variant_t ret
    gd_signal_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_signal_t gd_signal_new():
    cdef gd_signal_t obj
    gd_signal_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_signal_t gd_signal_new_from_signal(gd_signal_t* from_):
    cdef gd_signal_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_signal_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_signal_t gd_signal_new_from_object_string_name(gd_object_t* object, gd_string_name_t* signal):
    cdef gd_signal_t obj
    cdef GDExtensionTypePtr[2] p_args = [object, signal]
    gd_signal_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline void gd_signal_del(gd_signal_t* self):
    gd_signal_destructor_ptr(self)

cdef inline uint8_t gd_signal_is_null(gd_signal_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_signal_meth_is_null_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_object_t gd_signal_get_object(gd_signal_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_object_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_signal_meth_get_object_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_signal_get_object_id(gd_signal_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_signal_meth_get_object_id_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_name_t gd_signal_get_name(gd_signal_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_name_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_name_new()
    gd_signal_meth_get_name_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_signal_connect(gd_signal_t *self, gd_callable_t* callable, uint64_t flags):
    cdef GDExtensionTypePtr[2] __args = [callable, &flags]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_signal_meth_connect_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline void gd_signal_disconnect(gd_signal_t *self, gd_callable_t* callable):
    cdef GDExtensionTypePtr[1] __args = [callable]
    gd_signal_meth_disconnect_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint8_t gd_signal_is_connected(gd_signal_t *self, gd_callable_t* callable):
    cdef GDExtensionTypePtr[1] __args = [callable]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_signal_meth_is_connected_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_array_t gd_signal_get_connections(gd_signal_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_array_new()
    gd_signal_meth_get_connections_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_signal_emit(gd_signal_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_signal_meth_emit_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )




cdef inline gd_dictionary_t gd_dictionary_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_dictionary_t ret = gd_dictionary_new()
    gd_dictionary_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_dictionary_into_variant(gd_dictionary_t *val):
    cdef gd_variant_t ret
    gd_dictionary_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_dictionary_t gd_dictionary_new():
    cdef gd_dictionary_t obj
    gd_dictionary_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_dictionary_t gd_dictionary_new_from_dictionary(gd_dictionary_t* from_):
    cdef gd_dictionary_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_dictionary_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline void gd_dictionary_del(gd_dictionary_t* self):
    gd_dictionary_destructor_ptr(self)

cdef inline uint64_t gd_dictionary_size(gd_dictionary_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_dictionary_meth_size_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_dictionary_is_empty(gd_dictionary_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_dictionary_meth_is_empty_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_dictionary_clear(gd_dictionary_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_dictionary_meth_clear_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline void gd_dictionary_merge(gd_dictionary_t *self, gd_dictionary_t* dictionary, uint8_t overwrite):
    cdef GDExtensionTypePtr[2] __args = [dictionary, &overwrite]
    gd_dictionary_meth_merge_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline uint8_t gd_dictionary_has(gd_dictionary_t *self, gd_variant_t* key):
    cdef GDExtensionTypePtr[1] __args = [key]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_dictionary_meth_has_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_dictionary_has_all(gd_dictionary_t *self, gd_array_t* keys):
    cdef GDExtensionTypePtr[1] __args = [keys]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_dictionary_meth_has_all_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_variant_t gd_dictionary_find_key(gd_dictionary_t *self, gd_variant_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_dictionary_meth_find_key_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_dictionary_erase(gd_dictionary_t *self, gd_variant_t* key):
    cdef GDExtensionTypePtr[1] __args = [key]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_dictionary_meth_erase_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_dictionary_hash(gd_dictionary_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_dictionary_meth_hash_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_array_t gd_dictionary_keys(gd_dictionary_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_array_new()
    gd_dictionary_meth_keys_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_array_t gd_dictionary_values(gd_dictionary_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_array_new()
    gd_dictionary_meth_values_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_dictionary_t gd_dictionary_duplicate(gd_dictionary_t *self, uint8_t deep):
    cdef GDExtensionTypePtr[1] __args = [&deep]
    cdef gd_dictionary_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_dictionary_new()
    gd_dictionary_meth_duplicate_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_variant_t gd_dictionary_get(gd_dictionary_t *self, gd_variant_t* key, gd_variant_t* default):
    cdef GDExtensionTypePtr[2] __args = [key, default]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_dictionary_meth_get_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline void gd_dictionary_make_read_only(gd_dictionary_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_dictionary_meth_make_read_only_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint8_t gd_dictionary_is_read_only(gd_dictionary_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_dictionary_meth_is_read_only_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_variant_t gd_dictionary_keyed_getter(const gd_dictionary_t *self, const gd_variant_t *key):
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_dictionary_keyed_getter_ptr(self, key, &__ret)
    return __ret

cdef inline void gd_dictionary_keyed_setter(
    gd_dictionary_t *self,
    const gd_variant_t *key,
    const gd_variant_t *value
):
    gd_dictionary_keyed_setter_ptr(self, key, value)




cdef inline gd_array_t gd_array_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_array_t ret = gd_array_new()
    gd_array_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_array_into_variant(gd_array_t *val):
    cdef gd_variant_t ret
    gd_array_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_array_t gd_array_new():
    cdef gd_array_t obj
    gd_array_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_array_t gd_array_new_from_array(gd_array_t* from_):
    cdef gd_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_array_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_array_t gd_array_new_from_array_int_string_name_variant(gd_array_t* base, uint64_t type, gd_string_name_t* class_name, gd_variant_t* script):
    cdef gd_array_t obj
    cdef GDExtensionTypePtr[4] p_args = [base, &type, class_name, script]
    gd_array_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_array_t gd_array_new_from_packed_byte_array(gd_packed_byte_array_t* from_):
    cdef gd_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_array_constructor_3_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_array_t gd_array_new_from_packed_int32_array(gd_packed_int32_array_t* from_):
    cdef gd_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_array_constructor_4_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_array_t gd_array_new_from_packed_int64_array(gd_packed_int64_array_t* from_):
    cdef gd_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_array_constructor_5_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_array_t gd_array_new_from_packed_float32_array(gd_packed_float32_array_t* from_):
    cdef gd_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_array_constructor_6_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_array_t gd_array_new_from_packed_float64_array(gd_packed_float64_array_t* from_):
    cdef gd_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_array_constructor_7_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_array_t gd_array_new_from_packed_string_array(gd_packed_string_array_t* from_):
    cdef gd_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_array_constructor_8_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_array_t gd_array_new_from_packed_vector2_array(gd_packed_vector2_array_t* from_):
    cdef gd_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_array_constructor_9_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_array_t gd_array_new_from_packed_vector3_array(gd_packed_vector3_array_t* from_):
    cdef gd_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_array_constructor_10_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_array_t gd_array_new_from_packed_color_array(gd_packed_color_array_t* from_):
    cdef gd_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_array_constructor_11_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline void gd_array_del(gd_array_t* self):
    gd_array_destructor_ptr(self)

cdef inline uint64_t gd_array_size(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_array_meth_size_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_array_is_empty(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_array_meth_is_empty_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_array_clear(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_array_meth_clear_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint64_t gd_array_hash(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_array_meth_hash_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_array_assign(gd_array_t *self, gd_array_t* array):
    cdef GDExtensionTypePtr[1] __args = [array]
    gd_array_meth_assign_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline void gd_array_push_back(gd_array_t *self, gd_variant_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    gd_array_meth_push_back_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline void gd_array_push_front(gd_array_t *self, gd_variant_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    gd_array_meth_push_front_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline void gd_array_append(gd_array_t *self, gd_variant_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    gd_array_meth_append_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline void gd_array_append_array(gd_array_t *self, gd_array_t* array):
    cdef GDExtensionTypePtr[1] __args = [array]
    gd_array_meth_append_array_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_array_resize(gd_array_t *self, uint64_t size):
    cdef GDExtensionTypePtr[1] __args = [&size]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_array_meth_resize_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_array_insert(gd_array_t *self, uint64_t position, gd_variant_t* value):
    cdef GDExtensionTypePtr[2] __args = [&position, value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_array_meth_insert_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline void gd_array_remove_at(gd_array_t *self, uint64_t position):
    cdef GDExtensionTypePtr[1] __args = [&position]
    gd_array_meth_remove_at_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline void gd_array_fill(gd_array_t *self, gd_variant_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    gd_array_meth_fill_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline void gd_array_erase(gd_array_t *self, gd_variant_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    gd_array_meth_erase_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline gd_variant_t gd_array_front(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_array_meth_front_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_variant_t gd_array_back(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_array_meth_back_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_variant_t gd_array_pick_random(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_array_meth_pick_random_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_array_find(gd_array_t *self, gd_variant_t* what, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [what, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_array_meth_find_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_array_rfind(gd_array_t *self, gd_variant_t* what, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [what, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_array_meth_rfind_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_array_count(gd_array_t *self, gd_variant_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_array_meth_count_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_array_has(gd_array_t *self, gd_variant_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_array_meth_has_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_variant_t gd_array_pop_back(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_array_meth_pop_back_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_variant_t gd_array_pop_front(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_array_meth_pop_front_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_variant_t gd_array_pop_at(gd_array_t *self, uint64_t position):
    cdef GDExtensionTypePtr[1] __args = [&position]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_array_meth_pop_at_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_array_sort(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_array_meth_sort_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline void gd_array_sort_custom(gd_array_t *self, gd_callable_t* func):
    cdef GDExtensionTypePtr[1] __args = [func]
    gd_array_meth_sort_custom_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline void gd_array_shuffle(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_array_meth_shuffle_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint64_t gd_array_bsearch(gd_array_t *self, gd_variant_t* value, uint8_t before):
    cdef GDExtensionTypePtr[2] __args = [value, &before]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_array_meth_bsearch_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_array_bsearch_custom(gd_array_t *self, gd_variant_t* value, gd_callable_t* func, uint8_t before):
    cdef GDExtensionTypePtr[3] __args = [value, func, &before]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_array_meth_bsearch_custom_ptr(
                self,
                <const void **>__args,
                &__ret,
                3
    )
    return __ret

cdef inline void gd_array_reverse(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_array_meth_reverse_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline gd_array_t gd_array_duplicate(gd_array_t *self, uint8_t deep):
    cdef GDExtensionTypePtr[1] __args = [&deep]
    cdef gd_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_array_new()
    gd_array_meth_duplicate_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_array_t gd_array_slice(gd_array_t *self, uint64_t begin, uint64_t end, uint64_t step, uint8_t deep):
    cdef GDExtensionTypePtr[4] __args = [&begin, &end, &step, &deep]
    cdef gd_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_array_new()
    gd_array_meth_slice_ptr(
                self,
                <const void **>__args,
                &__ret,
                4
    )
    return __ret

cdef inline gd_array_t gd_array_filter(gd_array_t *self, gd_callable_t* method):
    cdef GDExtensionTypePtr[1] __args = [method]
    cdef gd_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_array_new()
    gd_array_meth_filter_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_array_t gd_array_map(gd_array_t *self, gd_callable_t* method):
    cdef GDExtensionTypePtr[1] __args = [method]
    cdef gd_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_array_new()
    gd_array_meth_map_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_variant_t gd_array_reduce(gd_array_t *self, gd_callable_t* method, gd_variant_t* accum):
    cdef GDExtensionTypePtr[2] __args = [method, accum]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_array_meth_reduce_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint8_t gd_array_any(gd_array_t *self, gd_callable_t* method):
    cdef GDExtensionTypePtr[1] __args = [method]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_array_meth_any_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_array_all(gd_array_t *self, gd_callable_t* method):
    cdef GDExtensionTypePtr[1] __args = [method]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_array_meth_all_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_variant_t gd_array_max(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_array_meth_max_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_variant_t gd_array_min(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_array_meth_min_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_array_is_typed(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_array_meth_is_typed_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_array_is_same_typed(gd_array_t *self, gd_array_t* array):
    cdef GDExtensionTypePtr[1] __args = [array]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_array_meth_is_same_typed_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_array_get_typed_builtin(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_array_meth_get_typed_builtin_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_name_t gd_array_get_typed_class_name(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_name_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_name_new()
    gd_array_meth_get_typed_class_name_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_variant_t gd_array_get_typed_script(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_array_meth_get_typed_script_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_array_make_read_only(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_array_meth_make_read_only_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint8_t gd_array_is_read_only(gd_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_array_meth_is_read_only_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_variant_t gd_array_indexed_getter(const gd_array_t *self, GDExtensionInt index):
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_array_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_array_indexed_setter(
    gd_array_t *self,
    GDExtensionInt index,
    gd_variant_t *value
):
    gd_array_indexed_setter_ptr(self, index, value)




cdef inline gd_packed_byte_array_t gd_packed_byte_array_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_packed_byte_array_t ret = gd_packed_byte_array_new()
    gd_packed_byte_array_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_packed_byte_array_into_variant(gd_packed_byte_array_t *val):
    cdef gd_variant_t ret
    gd_packed_byte_array_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_packed_byte_array_t gd_packed_byte_array_new():
    cdef gd_packed_byte_array_t obj
    gd_packed_byte_array_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_packed_byte_array_t gd_packed_byte_array_new_from_packed_byte_array(gd_packed_byte_array_t* from_):
    cdef gd_packed_byte_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_byte_array_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_packed_byte_array_t gd_packed_byte_array_new_from_array(gd_array_t* from_):
    cdef gd_packed_byte_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_byte_array_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline void gd_packed_byte_array_del(gd_packed_byte_array_t* self):
    gd_packed_byte_array_destructor_ptr(self)

cdef inline uint64_t gd_packed_byte_array_size(gd_packed_byte_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_size_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_packed_byte_array_is_empty(gd_packed_byte_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_is_empty_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_byte_array_set(gd_packed_byte_array_t *self, uint64_t index, uint64_t value):
    cdef GDExtensionTypePtr[2] __args = [&index, &value]
    gd_packed_byte_array_meth_set_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline uint8_t gd_packed_byte_array_push_back(gd_packed_byte_array_t *self, uint64_t value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_push_back_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_packed_byte_array_append(gd_packed_byte_array_t *self, uint64_t value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_append_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_byte_array_append_array(gd_packed_byte_array_t *self, gd_packed_byte_array_t* array):
    cdef GDExtensionTypePtr[1] __args = [array]
    gd_packed_byte_array_meth_append_array_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline void gd_packed_byte_array_remove_at(gd_packed_byte_array_t *self, uint64_t index):
    cdef GDExtensionTypePtr[1] __args = [&index]
    gd_packed_byte_array_meth_remove_at_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_byte_array_insert(gd_packed_byte_array_t *self, uint64_t at_index, uint64_t value):
    cdef GDExtensionTypePtr[2] __args = [&at_index, &value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_insert_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline void gd_packed_byte_array_fill(gd_packed_byte_array_t *self, uint64_t value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    gd_packed_byte_array_meth_fill_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_byte_array_resize(gd_packed_byte_array_t *self, uint64_t new_size):
    cdef GDExtensionTypePtr[1] __args = [&new_size]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_resize_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_byte_array_clear(gd_packed_byte_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_byte_array_meth_clear_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint8_t gd_packed_byte_array_has(gd_packed_byte_array_t *self, uint64_t value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_has_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_byte_array_reverse(gd_packed_byte_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_byte_array_meth_reverse_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline gd_packed_byte_array_t gd_packed_byte_array_slice(gd_packed_byte_array_t *self, uint64_t begin, uint64_t end):
    cdef GDExtensionTypePtr[2] __args = [&begin, &end]
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_packed_byte_array_meth_slice_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline void gd_packed_byte_array_sort(gd_packed_byte_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_byte_array_meth_sort_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint64_t gd_packed_byte_array_bsearch(gd_packed_byte_array_t *self, uint64_t value, uint8_t before):
    cdef GDExtensionTypePtr[2] __args = [&value, &before]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_bsearch_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_packed_byte_array_duplicate(gd_packed_byte_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_packed_byte_array_meth_duplicate_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_packed_byte_array_find(gd_packed_byte_array_t *self, uint64_t value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [&value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_find_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_byte_array_rfind(gd_packed_byte_array_t *self, uint64_t value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [&value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_rfind_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_byte_array_count(gd_packed_byte_array_t *self, uint64_t value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_count_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_packed_byte_array_get_string_from_ascii(gd_packed_byte_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_packed_byte_array_meth_get_string_from_ascii_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_packed_byte_array_get_string_from_utf8(gd_packed_byte_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_packed_byte_array_meth_get_string_from_utf8_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_packed_byte_array_get_string_from_utf16(gd_packed_byte_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_packed_byte_array_meth_get_string_from_utf16_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_packed_byte_array_get_string_from_utf32(gd_packed_byte_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_packed_byte_array_meth_get_string_from_utf32_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_packed_byte_array_get_string_from_wchar(gd_packed_byte_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_packed_byte_array_meth_get_string_from_wchar_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_string_t gd_packed_byte_array_hex_encode(gd_packed_byte_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_packed_byte_array_meth_hex_encode_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_packed_byte_array_compress(gd_packed_byte_array_t *self, uint64_t compression_mode):
    cdef GDExtensionTypePtr[1] __args = [&compression_mode]
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_packed_byte_array_meth_compress_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_packed_byte_array_decompress(gd_packed_byte_array_t *self, uint64_t buffer_size, uint64_t compression_mode):
    cdef GDExtensionTypePtr[2] __args = [&buffer_size, &compression_mode]
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_packed_byte_array_meth_decompress_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_packed_byte_array_decompress_dynamic(gd_packed_byte_array_t *self, uint64_t max_output_size, uint64_t compression_mode):
    cdef GDExtensionTypePtr[2] __args = [&max_output_size, &compression_mode]
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_packed_byte_array_meth_decompress_dynamic_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_byte_array_decode_u8(gd_packed_byte_array_t *self, uint64_t byte_offset):
    cdef GDExtensionTypePtr[1] __args = [&byte_offset]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_decode_u8_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_packed_byte_array_decode_s8(gd_packed_byte_array_t *self, uint64_t byte_offset):
    cdef GDExtensionTypePtr[1] __args = [&byte_offset]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_decode_s8_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_packed_byte_array_decode_u16(gd_packed_byte_array_t *self, uint64_t byte_offset):
    cdef GDExtensionTypePtr[1] __args = [&byte_offset]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_decode_u16_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_packed_byte_array_decode_s16(gd_packed_byte_array_t *self, uint64_t byte_offset):
    cdef GDExtensionTypePtr[1] __args = [&byte_offset]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_decode_s16_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_packed_byte_array_decode_u32(gd_packed_byte_array_t *self, uint64_t byte_offset):
    cdef GDExtensionTypePtr[1] __args = [&byte_offset]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_decode_u32_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_packed_byte_array_decode_s32(gd_packed_byte_array_t *self, uint64_t byte_offset):
    cdef GDExtensionTypePtr[1] __args = [&byte_offset]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_decode_s32_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_packed_byte_array_decode_u64(gd_packed_byte_array_t *self, uint64_t byte_offset):
    cdef GDExtensionTypePtr[1] __args = [&byte_offset]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_decode_u64_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_packed_byte_array_decode_s64(gd_packed_byte_array_t *self, uint64_t byte_offset):
    cdef GDExtensionTypePtr[1] __args = [&byte_offset]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_decode_s64_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_packed_byte_array_decode_half(gd_packed_byte_array_t *self, uint64_t byte_offset):
    cdef GDExtensionTypePtr[1] __args = [&byte_offset]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_decode_half_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_packed_byte_array_decode_float(gd_packed_byte_array_t *self, uint64_t byte_offset):
    cdef GDExtensionTypePtr[1] __args = [&byte_offset]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_decode_float_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_packed_byte_array_decode_double(gd_packed_byte_array_t *self, uint64_t byte_offset):
    cdef GDExtensionTypePtr[1] __args = [&byte_offset]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_decode_double_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_packed_byte_array_has_encoded_var(gd_packed_byte_array_t *self, uint64_t byte_offset, uint8_t allow_objects):
    cdef GDExtensionTypePtr[2] __args = [&byte_offset, &allow_objects]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_has_encoded_var_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_variant_t gd_packed_byte_array_decode_var(gd_packed_byte_array_t *self, uint64_t byte_offset, uint8_t allow_objects):
    cdef GDExtensionTypePtr[2] __args = [&byte_offset, &allow_objects]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_packed_byte_array_meth_decode_var_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_byte_array_decode_var_size(gd_packed_byte_array_t *self, uint64_t byte_offset, uint8_t allow_objects):
    cdef GDExtensionTypePtr[2] __args = [&byte_offset, &allow_objects]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_decode_var_size_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_int32_array_t gd_packed_byte_array_to_int32_array(gd_packed_byte_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_int32_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_int32_array_new()
    gd_packed_byte_array_meth_to_int32_array_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_int64_array_t gd_packed_byte_array_to_int64_array(gd_packed_byte_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_int64_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_int64_array_new()
    gd_packed_byte_array_meth_to_int64_array_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_float32_array_t gd_packed_byte_array_to_float32_array(gd_packed_byte_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_float32_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_float32_array_new()
    gd_packed_byte_array_meth_to_float32_array_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline gd_packed_float64_array_t gd_packed_byte_array_to_float64_array(gd_packed_byte_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_float64_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_float64_array_new()
    gd_packed_byte_array_meth_to_float64_array_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_byte_array_encode_u8(gd_packed_byte_array_t *self, uint64_t byte_offset, uint64_t value):
    cdef GDExtensionTypePtr[2] __args = [&byte_offset, &value]
    gd_packed_byte_array_meth_encode_u8_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline void gd_packed_byte_array_encode_s8(gd_packed_byte_array_t *self, uint64_t byte_offset, uint64_t value):
    cdef GDExtensionTypePtr[2] __args = [&byte_offset, &value]
    gd_packed_byte_array_meth_encode_s8_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline void gd_packed_byte_array_encode_u16(gd_packed_byte_array_t *self, uint64_t byte_offset, uint64_t value):
    cdef GDExtensionTypePtr[2] __args = [&byte_offset, &value]
    gd_packed_byte_array_meth_encode_u16_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline void gd_packed_byte_array_encode_s16(gd_packed_byte_array_t *self, uint64_t byte_offset, uint64_t value):
    cdef GDExtensionTypePtr[2] __args = [&byte_offset, &value]
    gd_packed_byte_array_meth_encode_s16_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline void gd_packed_byte_array_encode_u32(gd_packed_byte_array_t *self, uint64_t byte_offset, uint64_t value):
    cdef GDExtensionTypePtr[2] __args = [&byte_offset, &value]
    gd_packed_byte_array_meth_encode_u32_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline void gd_packed_byte_array_encode_s32(gd_packed_byte_array_t *self, uint64_t byte_offset, uint64_t value):
    cdef GDExtensionTypePtr[2] __args = [&byte_offset, &value]
    gd_packed_byte_array_meth_encode_s32_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline void gd_packed_byte_array_encode_u64(gd_packed_byte_array_t *self, uint64_t byte_offset, uint64_t value):
    cdef GDExtensionTypePtr[2] __args = [&byte_offset, &value]
    gd_packed_byte_array_meth_encode_u64_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline void gd_packed_byte_array_encode_s64(gd_packed_byte_array_t *self, uint64_t byte_offset, uint64_t value):
    cdef GDExtensionTypePtr[2] __args = [&byte_offset, &value]
    gd_packed_byte_array_meth_encode_s64_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline void gd_packed_byte_array_encode_half(gd_packed_byte_array_t *self, uint64_t byte_offset, double value):
    cdef GDExtensionTypePtr[2] __args = [&byte_offset, &value]
    gd_packed_byte_array_meth_encode_half_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline void gd_packed_byte_array_encode_float(gd_packed_byte_array_t *self, uint64_t byte_offset, double value):
    cdef GDExtensionTypePtr[2] __args = [&byte_offset, &value]
    gd_packed_byte_array_meth_encode_float_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline void gd_packed_byte_array_encode_double(gd_packed_byte_array_t *self, uint64_t byte_offset, double value):
    cdef GDExtensionTypePtr[2] __args = [&byte_offset, &value]
    gd_packed_byte_array_meth_encode_double_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline uint64_t gd_packed_byte_array_encode_var(gd_packed_byte_array_t *self, uint64_t byte_offset, gd_variant_t* value, uint8_t allow_objects):
    cdef GDExtensionTypePtr[3] __args = [&byte_offset, value, &allow_objects]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_meth_encode_var_ptr(
                self,
                <const void **>__args,
                &__ret,
                3
    )
    return __ret

cdef inline uint64_t gd_packed_byte_array_indexed_getter(const gd_packed_byte_array_t *self, GDExtensionInt index):
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_byte_array_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_packed_byte_array_indexed_setter(
    gd_packed_byte_array_t *self,
    GDExtensionInt index,
    uint64_t value
):
    gd_packed_byte_array_indexed_setter_ptr(self, index, &value)




cdef inline gd_packed_int32_array_t gd_packed_int32_array_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_packed_int32_array_t ret = gd_packed_int32_array_new()
    gd_packed_int32_array_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_packed_int32_array_into_variant(gd_packed_int32_array_t *val):
    cdef gd_variant_t ret
    gd_packed_int32_array_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_packed_int32_array_t gd_packed_int32_array_new():
    cdef gd_packed_int32_array_t obj
    gd_packed_int32_array_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_packed_int32_array_t gd_packed_int32_array_new_from_packed_int32_array(gd_packed_int32_array_t* from_):
    cdef gd_packed_int32_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_int32_array_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_packed_int32_array_t gd_packed_int32_array_new_from_array(gd_array_t* from_):
    cdef gd_packed_int32_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_int32_array_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline void gd_packed_int32_array_del(gd_packed_int32_array_t* self):
    gd_packed_int32_array_destructor_ptr(self)

cdef inline uint64_t gd_packed_int32_array_size(gd_packed_int32_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int32_array_meth_size_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_packed_int32_array_is_empty(gd_packed_int32_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int32_array_meth_is_empty_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_int32_array_set(gd_packed_int32_array_t *self, uint64_t index, uint64_t value):
    cdef GDExtensionTypePtr[2] __args = [&index, &value]
    gd_packed_int32_array_meth_set_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline uint8_t gd_packed_int32_array_push_back(gd_packed_int32_array_t *self, uint64_t value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int32_array_meth_push_back_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_packed_int32_array_append(gd_packed_int32_array_t *self, uint64_t value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int32_array_meth_append_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_int32_array_append_array(gd_packed_int32_array_t *self, gd_packed_int32_array_t* array):
    cdef GDExtensionTypePtr[1] __args = [array]
    gd_packed_int32_array_meth_append_array_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline void gd_packed_int32_array_remove_at(gd_packed_int32_array_t *self, uint64_t index):
    cdef GDExtensionTypePtr[1] __args = [&index]
    gd_packed_int32_array_meth_remove_at_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_int32_array_insert(gd_packed_int32_array_t *self, uint64_t at_index, uint64_t value):
    cdef GDExtensionTypePtr[2] __args = [&at_index, &value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int32_array_meth_insert_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline void gd_packed_int32_array_fill(gd_packed_int32_array_t *self, uint64_t value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    gd_packed_int32_array_meth_fill_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_int32_array_resize(gd_packed_int32_array_t *self, uint64_t new_size):
    cdef GDExtensionTypePtr[1] __args = [&new_size]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int32_array_meth_resize_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_int32_array_clear(gd_packed_int32_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_int32_array_meth_clear_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint8_t gd_packed_int32_array_has(gd_packed_int32_array_t *self, uint64_t value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int32_array_meth_has_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_int32_array_reverse(gd_packed_int32_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_int32_array_meth_reverse_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline gd_packed_int32_array_t gd_packed_int32_array_slice(gd_packed_int32_array_t *self, uint64_t begin, uint64_t end):
    cdef GDExtensionTypePtr[2] __args = [&begin, &end]
    cdef gd_packed_int32_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_int32_array_new()
    gd_packed_int32_array_meth_slice_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_packed_int32_array_to_byte_array(gd_packed_int32_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_packed_int32_array_meth_to_byte_array_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_int32_array_sort(gd_packed_int32_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_int32_array_meth_sort_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint64_t gd_packed_int32_array_bsearch(gd_packed_int32_array_t *self, uint64_t value, uint8_t before):
    cdef GDExtensionTypePtr[2] __args = [&value, &before]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int32_array_meth_bsearch_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_int32_array_t gd_packed_int32_array_duplicate(gd_packed_int32_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_int32_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_int32_array_new()
    gd_packed_int32_array_meth_duplicate_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_packed_int32_array_find(gd_packed_int32_array_t *self, uint64_t value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [&value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int32_array_meth_find_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_int32_array_rfind(gd_packed_int32_array_t *self, uint64_t value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [&value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int32_array_meth_rfind_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_int32_array_count(gd_packed_int32_array_t *self, uint64_t value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int32_array_meth_count_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_packed_int32_array_indexed_getter(const gd_packed_int32_array_t *self, GDExtensionInt index):
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int32_array_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_packed_int32_array_indexed_setter(
    gd_packed_int32_array_t *self,
    GDExtensionInt index,
    uint64_t value
):
    gd_packed_int32_array_indexed_setter_ptr(self, index, &value)




cdef inline gd_packed_int64_array_t gd_packed_int64_array_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_packed_int64_array_t ret = gd_packed_int64_array_new()
    gd_packed_int64_array_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_packed_int64_array_into_variant(gd_packed_int64_array_t *val):
    cdef gd_variant_t ret
    gd_packed_int64_array_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_packed_int64_array_t gd_packed_int64_array_new():
    cdef gd_packed_int64_array_t obj
    gd_packed_int64_array_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_packed_int64_array_t gd_packed_int64_array_new_from_packed_int64_array(gd_packed_int64_array_t* from_):
    cdef gd_packed_int64_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_int64_array_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_packed_int64_array_t gd_packed_int64_array_new_from_array(gd_array_t* from_):
    cdef gd_packed_int64_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_int64_array_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline void gd_packed_int64_array_del(gd_packed_int64_array_t* self):
    gd_packed_int64_array_destructor_ptr(self)

cdef inline uint64_t gd_packed_int64_array_size(gd_packed_int64_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int64_array_meth_size_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_packed_int64_array_is_empty(gd_packed_int64_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int64_array_meth_is_empty_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_int64_array_set(gd_packed_int64_array_t *self, uint64_t index, uint64_t value):
    cdef GDExtensionTypePtr[2] __args = [&index, &value]
    gd_packed_int64_array_meth_set_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline uint8_t gd_packed_int64_array_push_back(gd_packed_int64_array_t *self, uint64_t value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int64_array_meth_push_back_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_packed_int64_array_append(gd_packed_int64_array_t *self, uint64_t value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int64_array_meth_append_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_int64_array_append_array(gd_packed_int64_array_t *self, gd_packed_int64_array_t* array):
    cdef GDExtensionTypePtr[1] __args = [array]
    gd_packed_int64_array_meth_append_array_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline void gd_packed_int64_array_remove_at(gd_packed_int64_array_t *self, uint64_t index):
    cdef GDExtensionTypePtr[1] __args = [&index]
    gd_packed_int64_array_meth_remove_at_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_int64_array_insert(gd_packed_int64_array_t *self, uint64_t at_index, uint64_t value):
    cdef GDExtensionTypePtr[2] __args = [&at_index, &value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int64_array_meth_insert_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline void gd_packed_int64_array_fill(gd_packed_int64_array_t *self, uint64_t value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    gd_packed_int64_array_meth_fill_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_int64_array_resize(gd_packed_int64_array_t *self, uint64_t new_size):
    cdef GDExtensionTypePtr[1] __args = [&new_size]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int64_array_meth_resize_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_int64_array_clear(gd_packed_int64_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_int64_array_meth_clear_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint8_t gd_packed_int64_array_has(gd_packed_int64_array_t *self, uint64_t value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int64_array_meth_has_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_int64_array_reverse(gd_packed_int64_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_int64_array_meth_reverse_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline gd_packed_int64_array_t gd_packed_int64_array_slice(gd_packed_int64_array_t *self, uint64_t begin, uint64_t end):
    cdef GDExtensionTypePtr[2] __args = [&begin, &end]
    cdef gd_packed_int64_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_int64_array_new()
    gd_packed_int64_array_meth_slice_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_packed_int64_array_to_byte_array(gd_packed_int64_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_packed_int64_array_meth_to_byte_array_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_int64_array_sort(gd_packed_int64_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_int64_array_meth_sort_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint64_t gd_packed_int64_array_bsearch(gd_packed_int64_array_t *self, uint64_t value, uint8_t before):
    cdef GDExtensionTypePtr[2] __args = [&value, &before]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int64_array_meth_bsearch_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_int64_array_t gd_packed_int64_array_duplicate(gd_packed_int64_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_int64_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_int64_array_new()
    gd_packed_int64_array_meth_duplicate_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_packed_int64_array_find(gd_packed_int64_array_t *self, uint64_t value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [&value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int64_array_meth_find_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_int64_array_rfind(gd_packed_int64_array_t *self, uint64_t value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [&value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int64_array_meth_rfind_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_int64_array_count(gd_packed_int64_array_t *self, uint64_t value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int64_array_meth_count_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint64_t gd_packed_int64_array_indexed_getter(const gd_packed_int64_array_t *self, GDExtensionInt index):
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_int64_array_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_packed_int64_array_indexed_setter(
    gd_packed_int64_array_t *self,
    GDExtensionInt index,
    uint64_t value
):
    gd_packed_int64_array_indexed_setter_ptr(self, index, &value)




cdef inline gd_packed_float32_array_t gd_packed_float32_array_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_packed_float32_array_t ret = gd_packed_float32_array_new()
    gd_packed_float32_array_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_packed_float32_array_into_variant(gd_packed_float32_array_t *val):
    cdef gd_variant_t ret
    gd_packed_float32_array_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_packed_float32_array_t gd_packed_float32_array_new():
    cdef gd_packed_float32_array_t obj
    gd_packed_float32_array_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_packed_float32_array_t gd_packed_float32_array_new_from_packed_float32_array(gd_packed_float32_array_t* from_):
    cdef gd_packed_float32_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_float32_array_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_packed_float32_array_t gd_packed_float32_array_new_from_array(gd_array_t* from_):
    cdef gd_packed_float32_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_float32_array_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline void gd_packed_float32_array_del(gd_packed_float32_array_t* self):
    gd_packed_float32_array_destructor_ptr(self)

cdef inline uint64_t gd_packed_float32_array_size(gd_packed_float32_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float32_array_meth_size_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_packed_float32_array_is_empty(gd_packed_float32_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float32_array_meth_is_empty_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_float32_array_set(gd_packed_float32_array_t *self, uint64_t index, double value):
    cdef GDExtensionTypePtr[2] __args = [&index, &value]
    gd_packed_float32_array_meth_set_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline uint8_t gd_packed_float32_array_push_back(gd_packed_float32_array_t *self, double value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float32_array_meth_push_back_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_packed_float32_array_append(gd_packed_float32_array_t *self, double value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float32_array_meth_append_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_float32_array_append_array(gd_packed_float32_array_t *self, gd_packed_float32_array_t* array):
    cdef GDExtensionTypePtr[1] __args = [array]
    gd_packed_float32_array_meth_append_array_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline void gd_packed_float32_array_remove_at(gd_packed_float32_array_t *self, uint64_t index):
    cdef GDExtensionTypePtr[1] __args = [&index]
    gd_packed_float32_array_meth_remove_at_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_float32_array_insert(gd_packed_float32_array_t *self, uint64_t at_index, double value):
    cdef GDExtensionTypePtr[2] __args = [&at_index, &value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float32_array_meth_insert_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline void gd_packed_float32_array_fill(gd_packed_float32_array_t *self, double value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    gd_packed_float32_array_meth_fill_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_float32_array_resize(gd_packed_float32_array_t *self, uint64_t new_size):
    cdef GDExtensionTypePtr[1] __args = [&new_size]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float32_array_meth_resize_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_float32_array_clear(gd_packed_float32_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_float32_array_meth_clear_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint8_t gd_packed_float32_array_has(gd_packed_float32_array_t *self, double value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float32_array_meth_has_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_float32_array_reverse(gd_packed_float32_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_float32_array_meth_reverse_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline gd_packed_float32_array_t gd_packed_float32_array_slice(gd_packed_float32_array_t *self, uint64_t begin, uint64_t end):
    cdef GDExtensionTypePtr[2] __args = [&begin, &end]
    cdef gd_packed_float32_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_float32_array_new()
    gd_packed_float32_array_meth_slice_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_packed_float32_array_to_byte_array(gd_packed_float32_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_packed_float32_array_meth_to_byte_array_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_float32_array_sort(gd_packed_float32_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_float32_array_meth_sort_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint64_t gd_packed_float32_array_bsearch(gd_packed_float32_array_t *self, double value, uint8_t before):
    cdef GDExtensionTypePtr[2] __args = [&value, &before]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float32_array_meth_bsearch_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_float32_array_t gd_packed_float32_array_duplicate(gd_packed_float32_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_float32_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_float32_array_new()
    gd_packed_float32_array_meth_duplicate_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_packed_float32_array_find(gd_packed_float32_array_t *self, double value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [&value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float32_array_meth_find_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_float32_array_rfind(gd_packed_float32_array_t *self, double value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [&value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float32_array_meth_rfind_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_float32_array_count(gd_packed_float32_array_t *self, double value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float32_array_meth_count_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_packed_float32_array_indexed_getter(const gd_packed_float32_array_t *self, GDExtensionInt index):
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float32_array_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_packed_float32_array_indexed_setter(
    gd_packed_float32_array_t *self,
    GDExtensionInt index,
    double value
):
    gd_packed_float32_array_indexed_setter_ptr(self, index, &value)




cdef inline gd_packed_float64_array_t gd_packed_float64_array_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_packed_float64_array_t ret = gd_packed_float64_array_new()
    gd_packed_float64_array_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_packed_float64_array_into_variant(gd_packed_float64_array_t *val):
    cdef gd_variant_t ret
    gd_packed_float64_array_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_packed_float64_array_t gd_packed_float64_array_new():
    cdef gd_packed_float64_array_t obj
    gd_packed_float64_array_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_packed_float64_array_t gd_packed_float64_array_new_from_packed_float64_array(gd_packed_float64_array_t* from_):
    cdef gd_packed_float64_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_float64_array_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_packed_float64_array_t gd_packed_float64_array_new_from_array(gd_array_t* from_):
    cdef gd_packed_float64_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_float64_array_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline void gd_packed_float64_array_del(gd_packed_float64_array_t* self):
    gd_packed_float64_array_destructor_ptr(self)

cdef inline uint64_t gd_packed_float64_array_size(gd_packed_float64_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float64_array_meth_size_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_packed_float64_array_is_empty(gd_packed_float64_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float64_array_meth_is_empty_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_float64_array_set(gd_packed_float64_array_t *self, uint64_t index, double value):
    cdef GDExtensionTypePtr[2] __args = [&index, &value]
    gd_packed_float64_array_meth_set_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline uint8_t gd_packed_float64_array_push_back(gd_packed_float64_array_t *self, double value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float64_array_meth_push_back_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_packed_float64_array_append(gd_packed_float64_array_t *self, double value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float64_array_meth_append_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_float64_array_append_array(gd_packed_float64_array_t *self, gd_packed_float64_array_t* array):
    cdef GDExtensionTypePtr[1] __args = [array]
    gd_packed_float64_array_meth_append_array_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline void gd_packed_float64_array_remove_at(gd_packed_float64_array_t *self, uint64_t index):
    cdef GDExtensionTypePtr[1] __args = [&index]
    gd_packed_float64_array_meth_remove_at_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_float64_array_insert(gd_packed_float64_array_t *self, uint64_t at_index, double value):
    cdef GDExtensionTypePtr[2] __args = [&at_index, &value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float64_array_meth_insert_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline void gd_packed_float64_array_fill(gd_packed_float64_array_t *self, double value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    gd_packed_float64_array_meth_fill_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_float64_array_resize(gd_packed_float64_array_t *self, uint64_t new_size):
    cdef GDExtensionTypePtr[1] __args = [&new_size]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float64_array_meth_resize_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_float64_array_clear(gd_packed_float64_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_float64_array_meth_clear_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint8_t gd_packed_float64_array_has(gd_packed_float64_array_t *self, double value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float64_array_meth_has_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_float64_array_reverse(gd_packed_float64_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_float64_array_meth_reverse_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline gd_packed_float64_array_t gd_packed_float64_array_slice(gd_packed_float64_array_t *self, uint64_t begin, uint64_t end):
    cdef GDExtensionTypePtr[2] __args = [&begin, &end]
    cdef gd_packed_float64_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_float64_array_new()
    gd_packed_float64_array_meth_slice_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_packed_float64_array_to_byte_array(gd_packed_float64_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_packed_float64_array_meth_to_byte_array_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_float64_array_sort(gd_packed_float64_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_float64_array_meth_sort_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint64_t gd_packed_float64_array_bsearch(gd_packed_float64_array_t *self, double value, uint8_t before):
    cdef GDExtensionTypePtr[2] __args = [&value, &before]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float64_array_meth_bsearch_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_float64_array_t gd_packed_float64_array_duplicate(gd_packed_float64_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_float64_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_float64_array_new()
    gd_packed_float64_array_meth_duplicate_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_packed_float64_array_find(gd_packed_float64_array_t *self, double value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [&value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float64_array_meth_find_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_float64_array_rfind(gd_packed_float64_array_t *self, double value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [&value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float64_array_meth_rfind_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_float64_array_count(gd_packed_float64_array_t *self, double value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float64_array_meth_count_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline double gd_packed_float64_array_indexed_getter(const gd_packed_float64_array_t *self, GDExtensionInt index):
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_float64_array_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_packed_float64_array_indexed_setter(
    gd_packed_float64_array_t *self,
    GDExtensionInt index,
    double value
):
    gd_packed_float64_array_indexed_setter_ptr(self, index, &value)




cdef inline gd_packed_string_array_t gd_packed_string_array_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_packed_string_array_t ret = gd_packed_string_array_new()
    gd_packed_string_array_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_packed_string_array_into_variant(gd_packed_string_array_t *val):
    cdef gd_variant_t ret
    gd_packed_string_array_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_packed_string_array_t gd_packed_string_array_new():
    cdef gd_packed_string_array_t obj
    gd_packed_string_array_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_packed_string_array_t gd_packed_string_array_new_from_packed_string_array(gd_packed_string_array_t* from_):
    cdef gd_packed_string_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_string_array_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_packed_string_array_t gd_packed_string_array_new_from_array(gd_array_t* from_):
    cdef gd_packed_string_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_string_array_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline void gd_packed_string_array_del(gd_packed_string_array_t* self):
    gd_packed_string_array_destructor_ptr(self)

cdef inline uint64_t gd_packed_string_array_size(gd_packed_string_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_string_array_meth_size_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_packed_string_array_is_empty(gd_packed_string_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_string_array_meth_is_empty_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_string_array_set(gd_packed_string_array_t *self, uint64_t index, gd_string_t* value):
    cdef GDExtensionTypePtr[2] __args = [&index, value]
    gd_packed_string_array_meth_set_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline uint8_t gd_packed_string_array_push_back(gd_packed_string_array_t *self, gd_string_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_string_array_meth_push_back_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_packed_string_array_append(gd_packed_string_array_t *self, gd_string_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_string_array_meth_append_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_string_array_append_array(gd_packed_string_array_t *self, gd_packed_string_array_t* array):
    cdef GDExtensionTypePtr[1] __args = [array]
    gd_packed_string_array_meth_append_array_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline void gd_packed_string_array_remove_at(gd_packed_string_array_t *self, uint64_t index):
    cdef GDExtensionTypePtr[1] __args = [&index]
    gd_packed_string_array_meth_remove_at_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_string_array_insert(gd_packed_string_array_t *self, uint64_t at_index, gd_string_t* value):
    cdef GDExtensionTypePtr[2] __args = [&at_index, value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_string_array_meth_insert_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline void gd_packed_string_array_fill(gd_packed_string_array_t *self, gd_string_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    gd_packed_string_array_meth_fill_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_string_array_resize(gd_packed_string_array_t *self, uint64_t new_size):
    cdef GDExtensionTypePtr[1] __args = [&new_size]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_string_array_meth_resize_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_string_array_clear(gd_packed_string_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_string_array_meth_clear_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint8_t gd_packed_string_array_has(gd_packed_string_array_t *self, gd_string_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_string_array_meth_has_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_string_array_reverse(gd_packed_string_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_string_array_meth_reverse_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline gd_packed_string_array_t gd_packed_string_array_slice(gd_packed_string_array_t *self, uint64_t begin, uint64_t end):
    cdef GDExtensionTypePtr[2] __args = [&begin, &end]
    cdef gd_packed_string_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_string_array_new()
    gd_packed_string_array_meth_slice_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_packed_string_array_to_byte_array(gd_packed_string_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_packed_string_array_meth_to_byte_array_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_string_array_sort(gd_packed_string_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_string_array_meth_sort_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint64_t gd_packed_string_array_bsearch(gd_packed_string_array_t *self, gd_string_t* value, uint8_t before):
    cdef GDExtensionTypePtr[2] __args = [value, &before]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_string_array_meth_bsearch_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_string_array_t gd_packed_string_array_duplicate(gd_packed_string_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_string_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_string_array_new()
    gd_packed_string_array_meth_duplicate_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_packed_string_array_find(gd_packed_string_array_t *self, gd_string_t* value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_string_array_meth_find_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_string_array_rfind(gd_packed_string_array_t *self, gd_string_t* value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_string_array_meth_rfind_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_string_array_count(gd_packed_string_array_t *self, gd_string_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_string_array_meth_count_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_string_t gd_packed_string_array_indexed_getter(const gd_packed_string_array_t *self, GDExtensionInt index):
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_packed_string_array_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_packed_string_array_indexed_setter(
    gd_packed_string_array_t *self,
    GDExtensionInt index,
    gd_string_t *value
):
    gd_packed_string_array_indexed_setter_ptr(self, index, value)




cdef inline gd_packed_vector2_array_t gd_packed_vector2_array_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_packed_vector2_array_t ret = gd_packed_vector2_array_new()
    gd_packed_vector2_array_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_packed_vector2_array_into_variant(gd_packed_vector2_array_t *val):
    cdef gd_variant_t ret
    gd_packed_vector2_array_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_packed_vector2_array_t gd_packed_vector2_array_new():
    cdef gd_packed_vector2_array_t obj
    gd_packed_vector2_array_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_packed_vector2_array_t gd_packed_vector2_array_new_from_packed_vector2_array(gd_packed_vector2_array_t* from_):
    cdef gd_packed_vector2_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_vector2_array_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_packed_vector2_array_t gd_packed_vector2_array_new_from_array(gd_array_t* from_):
    cdef gd_packed_vector2_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_vector2_array_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline void gd_packed_vector2_array_del(gd_packed_vector2_array_t* self):
    gd_packed_vector2_array_destructor_ptr(self)

cdef inline uint64_t gd_packed_vector2_array_size(gd_packed_vector2_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector2_array_meth_size_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_packed_vector2_array_is_empty(gd_packed_vector2_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector2_array_meth_is_empty_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_vector2_array_set(gd_packed_vector2_array_t *self, uint64_t index, gd_vector2_t* value):
    cdef GDExtensionTypePtr[2] __args = [&index, value]
    gd_packed_vector2_array_meth_set_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline uint8_t gd_packed_vector2_array_push_back(gd_packed_vector2_array_t *self, gd_vector2_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector2_array_meth_push_back_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_packed_vector2_array_append(gd_packed_vector2_array_t *self, gd_vector2_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector2_array_meth_append_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_vector2_array_append_array(gd_packed_vector2_array_t *self, gd_packed_vector2_array_t* array):
    cdef GDExtensionTypePtr[1] __args = [array]
    gd_packed_vector2_array_meth_append_array_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline void gd_packed_vector2_array_remove_at(gd_packed_vector2_array_t *self, uint64_t index):
    cdef GDExtensionTypePtr[1] __args = [&index]
    gd_packed_vector2_array_meth_remove_at_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_vector2_array_insert(gd_packed_vector2_array_t *self, uint64_t at_index, gd_vector2_t* value):
    cdef GDExtensionTypePtr[2] __args = [&at_index, value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector2_array_meth_insert_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline void gd_packed_vector2_array_fill(gd_packed_vector2_array_t *self, gd_vector2_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    gd_packed_vector2_array_meth_fill_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_vector2_array_resize(gd_packed_vector2_array_t *self, uint64_t new_size):
    cdef GDExtensionTypePtr[1] __args = [&new_size]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector2_array_meth_resize_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_vector2_array_clear(gd_packed_vector2_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_vector2_array_meth_clear_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint8_t gd_packed_vector2_array_has(gd_packed_vector2_array_t *self, gd_vector2_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector2_array_meth_has_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_vector2_array_reverse(gd_packed_vector2_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_vector2_array_meth_reverse_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline gd_packed_vector2_array_t gd_packed_vector2_array_slice(gd_packed_vector2_array_t *self, uint64_t begin, uint64_t end):
    cdef GDExtensionTypePtr[2] __args = [&begin, &end]
    cdef gd_packed_vector2_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_vector2_array_new()
    gd_packed_vector2_array_meth_slice_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_packed_vector2_array_to_byte_array(gd_packed_vector2_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_packed_vector2_array_meth_to_byte_array_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_vector2_array_sort(gd_packed_vector2_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_vector2_array_meth_sort_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint64_t gd_packed_vector2_array_bsearch(gd_packed_vector2_array_t *self, gd_vector2_t* value, uint8_t before):
    cdef GDExtensionTypePtr[2] __args = [value, &before]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector2_array_meth_bsearch_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_vector2_array_t gd_packed_vector2_array_duplicate(gd_packed_vector2_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_vector2_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_vector2_array_new()
    gd_packed_vector2_array_meth_duplicate_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_packed_vector2_array_find(gd_packed_vector2_array_t *self, gd_vector2_t* value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector2_array_meth_find_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_vector2_array_rfind(gd_packed_vector2_array_t *self, gd_vector2_t* value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector2_array_meth_rfind_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_vector2_array_count(gd_packed_vector2_array_t *self, gd_vector2_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector2_array_meth_count_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector2_t gd_packed_vector2_array_indexed_getter(const gd_packed_vector2_array_t *self, GDExtensionInt index):
    cdef gd_vector2_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector2_array_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_packed_vector2_array_indexed_setter(
    gd_packed_vector2_array_t *self,
    GDExtensionInt index,
    gd_vector2_t *value
):
    gd_packed_vector2_array_indexed_setter_ptr(self, index, value)




cdef inline gd_packed_vector3_array_t gd_packed_vector3_array_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_packed_vector3_array_t ret = gd_packed_vector3_array_new()
    gd_packed_vector3_array_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_packed_vector3_array_into_variant(gd_packed_vector3_array_t *val):
    cdef gd_variant_t ret
    gd_packed_vector3_array_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_packed_vector3_array_t gd_packed_vector3_array_new():
    cdef gd_packed_vector3_array_t obj
    gd_packed_vector3_array_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_packed_vector3_array_t gd_packed_vector3_array_new_from_packed_vector3_array(gd_packed_vector3_array_t* from_):
    cdef gd_packed_vector3_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_vector3_array_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_packed_vector3_array_t gd_packed_vector3_array_new_from_array(gd_array_t* from_):
    cdef gd_packed_vector3_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_vector3_array_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline void gd_packed_vector3_array_del(gd_packed_vector3_array_t* self):
    gd_packed_vector3_array_destructor_ptr(self)

cdef inline uint64_t gd_packed_vector3_array_size(gd_packed_vector3_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector3_array_meth_size_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_packed_vector3_array_is_empty(gd_packed_vector3_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector3_array_meth_is_empty_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_vector3_array_set(gd_packed_vector3_array_t *self, uint64_t index, gd_vector3_t* value):
    cdef GDExtensionTypePtr[2] __args = [&index, value]
    gd_packed_vector3_array_meth_set_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline uint8_t gd_packed_vector3_array_push_back(gd_packed_vector3_array_t *self, gd_vector3_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector3_array_meth_push_back_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_packed_vector3_array_append(gd_packed_vector3_array_t *self, gd_vector3_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector3_array_meth_append_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_vector3_array_append_array(gd_packed_vector3_array_t *self, gd_packed_vector3_array_t* array):
    cdef GDExtensionTypePtr[1] __args = [array]
    gd_packed_vector3_array_meth_append_array_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline void gd_packed_vector3_array_remove_at(gd_packed_vector3_array_t *self, uint64_t index):
    cdef GDExtensionTypePtr[1] __args = [&index]
    gd_packed_vector3_array_meth_remove_at_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_vector3_array_insert(gd_packed_vector3_array_t *self, uint64_t at_index, gd_vector3_t* value):
    cdef GDExtensionTypePtr[2] __args = [&at_index, value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector3_array_meth_insert_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline void gd_packed_vector3_array_fill(gd_packed_vector3_array_t *self, gd_vector3_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    gd_packed_vector3_array_meth_fill_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_vector3_array_resize(gd_packed_vector3_array_t *self, uint64_t new_size):
    cdef GDExtensionTypePtr[1] __args = [&new_size]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector3_array_meth_resize_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_vector3_array_clear(gd_packed_vector3_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_vector3_array_meth_clear_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint8_t gd_packed_vector3_array_has(gd_packed_vector3_array_t *self, gd_vector3_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector3_array_meth_has_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_vector3_array_reverse(gd_packed_vector3_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_vector3_array_meth_reverse_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline gd_packed_vector3_array_t gd_packed_vector3_array_slice(gd_packed_vector3_array_t *self, uint64_t begin, uint64_t end):
    cdef GDExtensionTypePtr[2] __args = [&begin, &end]
    cdef gd_packed_vector3_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_vector3_array_new()
    gd_packed_vector3_array_meth_slice_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_packed_vector3_array_to_byte_array(gd_packed_vector3_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_packed_vector3_array_meth_to_byte_array_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_vector3_array_sort(gd_packed_vector3_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_vector3_array_meth_sort_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint64_t gd_packed_vector3_array_bsearch(gd_packed_vector3_array_t *self, gd_vector3_t* value, uint8_t before):
    cdef GDExtensionTypePtr[2] __args = [value, &before]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector3_array_meth_bsearch_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_vector3_array_t gd_packed_vector3_array_duplicate(gd_packed_vector3_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_vector3_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_vector3_array_new()
    gd_packed_vector3_array_meth_duplicate_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_packed_vector3_array_find(gd_packed_vector3_array_t *self, gd_vector3_t* value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector3_array_meth_find_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_vector3_array_rfind(gd_packed_vector3_array_t *self, gd_vector3_t* value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector3_array_meth_rfind_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_vector3_array_count(gd_packed_vector3_array_t *self, gd_vector3_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector3_array_meth_count_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_vector3_t gd_packed_vector3_array_indexed_getter(const gd_packed_vector3_array_t *self, GDExtensionInt index):
    cdef gd_vector3_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_vector3_array_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_packed_vector3_array_indexed_setter(
    gd_packed_vector3_array_t *self,
    GDExtensionInt index,
    gd_vector3_t *value
):
    gd_packed_vector3_array_indexed_setter_ptr(self, index, value)




cdef inline gd_packed_color_array_t gd_packed_color_array_from_variant(gd_variant_t *val):
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef gd_packed_color_array_t ret = gd_packed_color_array_new()
    gd_packed_color_array_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_packed_color_array_into_variant(gd_packed_color_array_t *val):
    cdef gd_variant_t ret
    gd_packed_color_array_into_variant_ptr(&ret, val)
    return ret

cdef inline gd_packed_color_array_t gd_packed_color_array_new():
    cdef gd_packed_color_array_t obj
    gd_packed_color_array_constructor_0_ptr(
        &obj,
        <const void **>NULL
    )
    return obj

cdef inline gd_packed_color_array_t gd_packed_color_array_new_from_packed_color_array(gd_packed_color_array_t* from_):
    cdef gd_packed_color_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_color_array_constructor_1_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline gd_packed_color_array_t gd_packed_color_array_new_from_array(gd_array_t* from_):
    cdef gd_packed_color_array_t obj
    cdef GDExtensionTypePtr[1] p_args = [from_]
    gd_packed_color_array_constructor_2_ptr(
        &obj,
        <const void **>p_args
    )
    return obj

cdef inline void gd_packed_color_array_del(gd_packed_color_array_t* self):
    gd_packed_color_array_destructor_ptr(self)

cdef inline uint64_t gd_packed_color_array_size(gd_packed_color_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_color_array_meth_size_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint8_t gd_packed_color_array_is_empty(gd_packed_color_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_color_array_meth_is_empty_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_color_array_set(gd_packed_color_array_t *self, uint64_t index, gd_color_t* value):
    cdef GDExtensionTypePtr[2] __args = [&index, value]
    gd_packed_color_array_meth_set_ptr(
                self,
                <const void **>__args,
                NULL,
                2
    )

cdef inline uint8_t gd_packed_color_array_push_back(gd_packed_color_array_t *self, gd_color_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_color_array_meth_push_back_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline uint8_t gd_packed_color_array_append(gd_packed_color_array_t *self, gd_color_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_color_array_meth_append_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_color_array_append_array(gd_packed_color_array_t *self, gd_packed_color_array_t* array):
    cdef GDExtensionTypePtr[1] __args = [array]
    gd_packed_color_array_meth_append_array_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline void gd_packed_color_array_remove_at(gd_packed_color_array_t *self, uint64_t index):
    cdef GDExtensionTypePtr[1] __args = [&index]
    gd_packed_color_array_meth_remove_at_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_color_array_insert(gd_packed_color_array_t *self, uint64_t at_index, gd_color_t* value):
    cdef GDExtensionTypePtr[2] __args = [&at_index, value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_color_array_meth_insert_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline void gd_packed_color_array_fill(gd_packed_color_array_t *self, gd_color_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    gd_packed_color_array_meth_fill_ptr(
                self,
                <const void **>__args,
                NULL,
                1
    )

cdef inline uint64_t gd_packed_color_array_resize(gd_packed_color_array_t *self, uint64_t new_size):
    cdef GDExtensionTypePtr[1] __args = [&new_size]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_color_array_meth_resize_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_color_array_clear(gd_packed_color_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_color_array_meth_clear_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint8_t gd_packed_color_array_has(gd_packed_color_array_t *self, gd_color_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_color_array_meth_has_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline void gd_packed_color_array_reverse(gd_packed_color_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_color_array_meth_reverse_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline gd_packed_color_array_t gd_packed_color_array_slice(gd_packed_color_array_t *self, uint64_t begin, uint64_t end):
    cdef GDExtensionTypePtr[2] __args = [&begin, &end]
    cdef gd_packed_color_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_color_array_new()
    gd_packed_color_array_meth_slice_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_byte_array_t gd_packed_color_array_to_byte_array(gd_packed_color_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_packed_color_array_meth_to_byte_array_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline void gd_packed_color_array_sort(gd_packed_color_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    gd_packed_color_array_meth_sort_ptr(
                self,
                <const void **>__args,
                NULL,
                0
    )

cdef inline uint64_t gd_packed_color_array_bsearch(gd_packed_color_array_t *self, gd_color_t* value, uint8_t before):
    cdef GDExtensionTypePtr[2] __args = [value, &before]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_color_array_meth_bsearch_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline gd_packed_color_array_t gd_packed_color_array_duplicate(gd_packed_color_array_t *self):
    cdef GDExtensionTypePtr* __args = NULL
    cdef gd_packed_color_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_color_array_new()
    gd_packed_color_array_meth_duplicate_ptr(
                self,
                <const void **>__args,
                &__ret,
                0
    )
    return __ret

cdef inline uint64_t gd_packed_color_array_find(gd_packed_color_array_t *self, gd_color_t* value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_color_array_meth_find_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_color_array_rfind(gd_packed_color_array_t *self, gd_color_t* value, uint64_t from_):
    cdef GDExtensionTypePtr[2] __args = [value, &from_]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_color_array_meth_rfind_ptr(
                self,
                <const void **>__args,
                &__ret,
                2
    )
    return __ret

cdef inline uint64_t gd_packed_color_array_count(gd_packed_color_array_t *self, gd_color_t* value):
    cdef GDExtensionTypePtr[1] __args = [value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_color_array_meth_count_ptr(
                self,
                <const void **>__args,
                &__ret,
                1
    )
    return __ret

cdef inline gd_color_t gd_packed_color_array_indexed_getter(const gd_packed_color_array_t *self, GDExtensionInt index):
    cdef gd_color_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_packed_color_array_indexed_getter_ptr(self, index, &__ret)
    return __ret

cdef inline void gd_packed_color_array_indexed_setter(
    gd_packed_color_array_t *self,
    GDExtensionInt index,
    gd_color_t *value
):
    gd_packed_color_array_indexed_setter_ptr(self, index, value)




##############################################################################
#                          Builtin constants & enums                         #
##############################################################################


# String


# Vector2
cdef extern from *:
    """
    #define GD_VECTOR2_AXIS_X 0
    #define GD_VECTOR2_AXIS_Y 1
    """
    int GD_VECTOR2_AXIS_X
    int GD_VECTOR2_AXIS_Y
cdef inline gd_vector2_t gd_vector2_make_constant_ZERO():
    # TODO: Initialize as Vector2(0, 0)
    return gd_vector2_new()
cdef inline gd_vector2_t gd_vector2_make_constant_ONE():
    # TODO: Initialize as Vector2(1, 1)
    return gd_vector2_new()
cdef inline gd_vector2_t gd_vector2_make_constant_INF():
    # TODO: Initialize as Vector2(inf, inf)
    return gd_vector2_new()
cdef inline gd_vector2_t gd_vector2_make_constant_LEFT():
    # TODO: Initialize as Vector2(-1, 0)
    return gd_vector2_new()
cdef inline gd_vector2_t gd_vector2_make_constant_RIGHT():
    # TODO: Initialize as Vector2(1, 0)
    return gd_vector2_new()
cdef inline gd_vector2_t gd_vector2_make_constant_UP():
    # TODO: Initialize as Vector2(0, -1)
    return gd_vector2_new()
cdef inline gd_vector2_t gd_vector2_make_constant_DOWN():
    # TODO: Initialize as Vector2(0, 1)
    return gd_vector2_new()


# Vector2i
cdef extern from *:
    """
    #define GD_VECTOR2I_AXIS_X 0
    #define GD_VECTOR2I_AXIS_Y 1
    """
    int GD_VECTOR2I_AXIS_X
    int GD_VECTOR2I_AXIS_Y
cdef inline gd_vector2i_t gd_vector2i_make_constant_ZERO():
    # TODO: Initialize as Vector2i(0, 0)
    return gd_vector2i_new()
cdef inline gd_vector2i_t gd_vector2i_make_constant_ONE():
    # TODO: Initialize as Vector2i(1, 1)
    return gd_vector2i_new()
cdef inline gd_vector2i_t gd_vector2i_make_constant_LEFT():
    # TODO: Initialize as Vector2i(-1, 0)
    return gd_vector2i_new()
cdef inline gd_vector2i_t gd_vector2i_make_constant_RIGHT():
    # TODO: Initialize as Vector2i(1, 0)
    return gd_vector2i_new()
cdef inline gd_vector2i_t gd_vector2i_make_constant_UP():
    # TODO: Initialize as Vector2i(0, -1)
    return gd_vector2i_new()
cdef inline gd_vector2i_t gd_vector2i_make_constant_DOWN():
    # TODO: Initialize as Vector2i(0, 1)
    return gd_vector2i_new()


# Rect2


# Rect2i


# Vector3
cdef extern from *:
    """
    #define GD_VECTOR3_AXIS_X 0
    #define GD_VECTOR3_AXIS_Y 1
    #define GD_VECTOR3_AXIS_Z 2
    """
    int GD_VECTOR3_AXIS_X
    int GD_VECTOR3_AXIS_Y
    int GD_VECTOR3_AXIS_Z
cdef inline gd_vector3_t gd_vector3_make_constant_ZERO():
    # TODO: Initialize as Vector3(0, 0, 0)
    return gd_vector3_new()
cdef inline gd_vector3_t gd_vector3_make_constant_ONE():
    # TODO: Initialize as Vector3(1, 1, 1)
    return gd_vector3_new()
cdef inline gd_vector3_t gd_vector3_make_constant_INF():
    # TODO: Initialize as Vector3(inf, inf, inf)
    return gd_vector3_new()
cdef inline gd_vector3_t gd_vector3_make_constant_LEFT():
    # TODO: Initialize as Vector3(-1, 0, 0)
    return gd_vector3_new()
cdef inline gd_vector3_t gd_vector3_make_constant_RIGHT():
    # TODO: Initialize as Vector3(1, 0, 0)
    return gd_vector3_new()
cdef inline gd_vector3_t gd_vector3_make_constant_UP():
    # TODO: Initialize as Vector3(0, 1, 0)
    return gd_vector3_new()
cdef inline gd_vector3_t gd_vector3_make_constant_DOWN():
    # TODO: Initialize as Vector3(0, -1, 0)
    return gd_vector3_new()
cdef inline gd_vector3_t gd_vector3_make_constant_FORWARD():
    # TODO: Initialize as Vector3(0, 0, -1)
    return gd_vector3_new()
cdef inline gd_vector3_t gd_vector3_make_constant_BACK():
    # TODO: Initialize as Vector3(0, 0, 1)
    return gd_vector3_new()
cdef inline gd_vector3_t gd_vector3_make_constant_MODEL_LEFT():
    # TODO: Initialize as Vector3(1, 0, 0)
    return gd_vector3_new()
cdef inline gd_vector3_t gd_vector3_make_constant_MODEL_RIGHT():
    # TODO: Initialize as Vector3(-1, 0, 0)
    return gd_vector3_new()
cdef inline gd_vector3_t gd_vector3_make_constant_MODEL_TOP():
    # TODO: Initialize as Vector3(0, 1, 0)
    return gd_vector3_new()
cdef inline gd_vector3_t gd_vector3_make_constant_MODEL_BOTTOM():
    # TODO: Initialize as Vector3(0, -1, 0)
    return gd_vector3_new()
cdef inline gd_vector3_t gd_vector3_make_constant_MODEL_FRONT():
    # TODO: Initialize as Vector3(0, 0, 1)
    return gd_vector3_new()
cdef inline gd_vector3_t gd_vector3_make_constant_MODEL_REAR():
    # TODO: Initialize as Vector3(0, 0, -1)
    return gd_vector3_new()


# Vector3i
cdef extern from *:
    """
    #define GD_VECTOR3I_AXIS_X 0
    #define GD_VECTOR3I_AXIS_Y 1
    #define GD_VECTOR3I_AXIS_Z 2
    """
    int GD_VECTOR3I_AXIS_X
    int GD_VECTOR3I_AXIS_Y
    int GD_VECTOR3I_AXIS_Z
cdef inline gd_vector3i_t gd_vector3i_make_constant_ZERO():
    # TODO: Initialize as Vector3i(0, 0, 0)
    return gd_vector3i_new()
cdef inline gd_vector3i_t gd_vector3i_make_constant_ONE():
    # TODO: Initialize as Vector3i(1, 1, 1)
    return gd_vector3i_new()
cdef inline gd_vector3i_t gd_vector3i_make_constant_LEFT():
    # TODO: Initialize as Vector3i(-1, 0, 0)
    return gd_vector3i_new()
cdef inline gd_vector3i_t gd_vector3i_make_constant_RIGHT():
    # TODO: Initialize as Vector3i(1, 0, 0)
    return gd_vector3i_new()
cdef inline gd_vector3i_t gd_vector3i_make_constant_UP():
    # TODO: Initialize as Vector3i(0, 1, 0)
    return gd_vector3i_new()
cdef inline gd_vector3i_t gd_vector3i_make_constant_DOWN():
    # TODO: Initialize as Vector3i(0, -1, 0)
    return gd_vector3i_new()
cdef inline gd_vector3i_t gd_vector3i_make_constant_FORWARD():
    # TODO: Initialize as Vector3i(0, 0, -1)
    return gd_vector3i_new()
cdef inline gd_vector3i_t gd_vector3i_make_constant_BACK():
    # TODO: Initialize as Vector3i(0, 0, 1)
    return gd_vector3i_new()


# Transform2D
cdef inline gd_transform2d_t gd_transform2d_make_constant_IDENTITY():
    # TODO: Initialize as Transform2D(1, 0, 0, 1, 0, 0)
    return gd_transform2d_new()
cdef inline gd_transform2d_t gd_transform2d_make_constant_FLIP_X():
    # TODO: Initialize as Transform2D(-1, 0, 0, 1, 0, 0)
    return gd_transform2d_new()
cdef inline gd_transform2d_t gd_transform2d_make_constant_FLIP_Y():
    # TODO: Initialize as Transform2D(1, 0, 0, -1, 0, 0)
    return gd_transform2d_new()


# Vector4
cdef extern from *:
    """
    #define GD_VECTOR4_AXIS_X 0
    #define GD_VECTOR4_AXIS_Y 1
    #define GD_VECTOR4_AXIS_Z 2
    #define GD_VECTOR4_AXIS_W 3
    """
    int GD_VECTOR4_AXIS_X
    int GD_VECTOR4_AXIS_Y
    int GD_VECTOR4_AXIS_Z
    int GD_VECTOR4_AXIS_W
cdef inline gd_vector4_t gd_vector4_make_constant_ZERO():
    # TODO: Initialize as Vector4(0, 0, 0, 0)
    return gd_vector4_new()
cdef inline gd_vector4_t gd_vector4_make_constant_ONE():
    # TODO: Initialize as Vector4(1, 1, 1, 1)
    return gd_vector4_new()
cdef inline gd_vector4_t gd_vector4_make_constant_INF():
    # TODO: Initialize as Vector4(inf, inf, inf, inf)
    return gd_vector4_new()


# Vector4i
cdef extern from *:
    """
    #define GD_VECTOR4I_AXIS_X 0
    #define GD_VECTOR4I_AXIS_Y 1
    #define GD_VECTOR4I_AXIS_Z 2
    #define GD_VECTOR4I_AXIS_W 3
    """
    int GD_VECTOR4I_AXIS_X
    int GD_VECTOR4I_AXIS_Y
    int GD_VECTOR4I_AXIS_Z
    int GD_VECTOR4I_AXIS_W
cdef inline gd_vector4i_t gd_vector4i_make_constant_ZERO():
    # TODO: Initialize as Vector4i(0, 0, 0, 0)
    return gd_vector4i_new()
cdef inline gd_vector4i_t gd_vector4i_make_constant_ONE():
    # TODO: Initialize as Vector4i(1, 1, 1, 1)
    return gd_vector4i_new()


# Plane
cdef inline gd_plane_t gd_plane_make_constant_PLANE_YZ():
    # TODO: Initialize as Plane(1, 0, 0, 0)
    return gd_plane_new()
cdef inline gd_plane_t gd_plane_make_constant_PLANE_XZ():
    # TODO: Initialize as Plane(0, 1, 0, 0)
    return gd_plane_new()
cdef inline gd_plane_t gd_plane_make_constant_PLANE_XY():
    # TODO: Initialize as Plane(0, 0, 1, 0)
    return gd_plane_new()


# Quaternion
cdef inline gd_quaternion_t gd_quaternion_make_constant_IDENTITY():
    # TODO: Initialize as Quaternion(0, 0, 0, 1)
    return gd_quaternion_new()


# AABB


# Basis
cdef inline gd_basis_t gd_basis_make_constant_IDENTITY():
    # TODO: Initialize as Basis(1, 0, 0, 0, 1, 0, 0, 0, 1)
    return gd_basis_new()
cdef inline gd_basis_t gd_basis_make_constant_FLIP_X():
    # TODO: Initialize as Basis(-1, 0, 0, 0, 1, 0, 0, 0, 1)
    return gd_basis_new()
cdef inline gd_basis_t gd_basis_make_constant_FLIP_Y():
    # TODO: Initialize as Basis(1, 0, 0, 0, -1, 0, 0, 0, 1)
    return gd_basis_new()
cdef inline gd_basis_t gd_basis_make_constant_FLIP_Z():
    # TODO: Initialize as Basis(1, 0, 0, 0, 1, 0, 0, 0, -1)
    return gd_basis_new()


# Transform3D
cdef inline gd_transform3d_t gd_transform3d_make_constant_IDENTITY():
    # TODO: Initialize as Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)
    return gd_transform3d_new()
cdef inline gd_transform3d_t gd_transform3d_make_constant_FLIP_X():
    # TODO: Initialize as Transform3D(-1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)
    return gd_transform3d_new()
cdef inline gd_transform3d_t gd_transform3d_make_constant_FLIP_Y():
    # TODO: Initialize as Transform3D(1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0)
    return gd_transform3d_new()
cdef inline gd_transform3d_t gd_transform3d_make_constant_FLIP_Z():
    # TODO: Initialize as Transform3D(1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0)
    return gd_transform3d_new()


# Projection
cdef extern from *:
    """
    #define GD_PROJECTION_PLANE_NEAR 0
    #define GD_PROJECTION_PLANE_FAR 1
    #define GD_PROJECTION_PLANE_LEFT 2
    #define GD_PROJECTION_PLANE_TOP 3
    #define GD_PROJECTION_PLANE_RIGHT 4
    #define GD_PROJECTION_PLANE_BOTTOM 5
    """
    int GD_PROJECTION_PLANE_NEAR
    int GD_PROJECTION_PLANE_FAR
    int GD_PROJECTION_PLANE_LEFT
    int GD_PROJECTION_PLANE_TOP
    int GD_PROJECTION_PLANE_RIGHT
    int GD_PROJECTION_PLANE_BOTTOM
cdef inline gd_projection_t gd_projection_make_constant_IDENTITY():
    # TODO: Initialize as Projection(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    return gd_projection_new()
cdef inline gd_projection_t gd_projection_make_constant_ZERO():
    # TODO: Initialize as Projection(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
    return gd_projection_new()


# Color
cdef inline gd_color_t gd_color_make_constant_ALICE_BLUE():
    # TODO: Initialize as Color(0.941176, 0.972549, 1, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_ANTIQUE_WHITE():
    # TODO: Initialize as Color(0.980392, 0.921569, 0.843137, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_AQUA():
    # TODO: Initialize as Color(0, 1, 1, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_AQUAMARINE():
    # TODO: Initialize as Color(0.498039, 1, 0.831373, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_AZURE():
    # TODO: Initialize as Color(0.941176, 1, 1, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_BEIGE():
    # TODO: Initialize as Color(0.960784, 0.960784, 0.862745, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_BISQUE():
    # TODO: Initialize as Color(1, 0.894118, 0.768627, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_BLACK():
    # TODO: Initialize as Color(0, 0, 0, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_BLANCHED_ALMOND():
    # TODO: Initialize as Color(1, 0.921569, 0.803922, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_BLUE():
    # TODO: Initialize as Color(0, 0, 1, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_BLUE_VIOLET():
    # TODO: Initialize as Color(0.541176, 0.168627, 0.886275, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_BROWN():
    # TODO: Initialize as Color(0.647059, 0.164706, 0.164706, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_BURLYWOOD():
    # TODO: Initialize as Color(0.870588, 0.721569, 0.529412, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_CADET_BLUE():
    # TODO: Initialize as Color(0.372549, 0.619608, 0.627451, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_CHARTREUSE():
    # TODO: Initialize as Color(0.498039, 1, 0, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_CHOCOLATE():
    # TODO: Initialize as Color(0.823529, 0.411765, 0.117647, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_CORAL():
    # TODO: Initialize as Color(1, 0.498039, 0.313726, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_CORNFLOWER_BLUE():
    # TODO: Initialize as Color(0.392157, 0.584314, 0.929412, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_CORNSILK():
    # TODO: Initialize as Color(1, 0.972549, 0.862745, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_CRIMSON():
    # TODO: Initialize as Color(0.862745, 0.0784314, 0.235294, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_CYAN():
    # TODO: Initialize as Color(0, 1, 1, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DARK_BLUE():
    # TODO: Initialize as Color(0, 0, 0.545098, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DARK_CYAN():
    # TODO: Initialize as Color(0, 0.545098, 0.545098, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DARK_GOLDENROD():
    # TODO: Initialize as Color(0.721569, 0.52549, 0.0431373, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DARK_GRAY():
    # TODO: Initialize as Color(0.662745, 0.662745, 0.662745, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DARK_GREEN():
    # TODO: Initialize as Color(0, 0.392157, 0, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DARK_KHAKI():
    # TODO: Initialize as Color(0.741176, 0.717647, 0.419608, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DARK_MAGENTA():
    # TODO: Initialize as Color(0.545098, 0, 0.545098, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DARK_OLIVE_GREEN():
    # TODO: Initialize as Color(0.333333, 0.419608, 0.184314, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DARK_ORANGE():
    # TODO: Initialize as Color(1, 0.54902, 0, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DARK_ORCHID():
    # TODO: Initialize as Color(0.6, 0.196078, 0.8, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DARK_RED():
    # TODO: Initialize as Color(0.545098, 0, 0, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DARK_SALMON():
    # TODO: Initialize as Color(0.913725, 0.588235, 0.478431, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DARK_SEA_GREEN():
    # TODO: Initialize as Color(0.560784, 0.737255, 0.560784, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DARK_SLATE_BLUE():
    # TODO: Initialize as Color(0.282353, 0.239216, 0.545098, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DARK_SLATE_GRAY():
    # TODO: Initialize as Color(0.184314, 0.309804, 0.309804, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DARK_TURQUOISE():
    # TODO: Initialize as Color(0, 0.807843, 0.819608, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DARK_VIOLET():
    # TODO: Initialize as Color(0.580392, 0, 0.827451, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DEEP_PINK():
    # TODO: Initialize as Color(1, 0.0784314, 0.576471, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DEEP_SKY_BLUE():
    # TODO: Initialize as Color(0, 0.74902, 1, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DIM_GRAY():
    # TODO: Initialize as Color(0.411765, 0.411765, 0.411765, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_DODGER_BLUE():
    # TODO: Initialize as Color(0.117647, 0.564706, 1, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_FIREBRICK():
    # TODO: Initialize as Color(0.698039, 0.133333, 0.133333, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_FLORAL_WHITE():
    # TODO: Initialize as Color(1, 0.980392, 0.941176, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_FOREST_GREEN():
    # TODO: Initialize as Color(0.133333, 0.545098, 0.133333, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_FUCHSIA():
    # TODO: Initialize as Color(1, 0, 1, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_GAINSBORO():
    # TODO: Initialize as Color(0.862745, 0.862745, 0.862745, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_GHOST_WHITE():
    # TODO: Initialize as Color(0.972549, 0.972549, 1, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_GOLD():
    # TODO: Initialize as Color(1, 0.843137, 0, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_GOLDENROD():
    # TODO: Initialize as Color(0.854902, 0.647059, 0.12549, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_GRAY():
    # TODO: Initialize as Color(0.745098, 0.745098, 0.745098, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_GREEN():
    # TODO: Initialize as Color(0, 1, 0, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_GREEN_YELLOW():
    # TODO: Initialize as Color(0.678431, 1, 0.184314, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_HONEYDEW():
    # TODO: Initialize as Color(0.941176, 1, 0.941176, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_HOT_PINK():
    # TODO: Initialize as Color(1, 0.411765, 0.705882, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_INDIAN_RED():
    # TODO: Initialize as Color(0.803922, 0.360784, 0.360784, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_INDIGO():
    # TODO: Initialize as Color(0.294118, 0, 0.509804, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_IVORY():
    # TODO: Initialize as Color(1, 1, 0.941176, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_KHAKI():
    # TODO: Initialize as Color(0.941176, 0.901961, 0.54902, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LAVENDER():
    # TODO: Initialize as Color(0.901961, 0.901961, 0.980392, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LAVENDER_BLUSH():
    # TODO: Initialize as Color(1, 0.941176, 0.960784, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LAWN_GREEN():
    # TODO: Initialize as Color(0.486275, 0.988235, 0, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LEMON_CHIFFON():
    # TODO: Initialize as Color(1, 0.980392, 0.803922, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LIGHT_BLUE():
    # TODO: Initialize as Color(0.678431, 0.847059, 0.901961, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LIGHT_CORAL():
    # TODO: Initialize as Color(0.941176, 0.501961, 0.501961, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LIGHT_CYAN():
    # TODO: Initialize as Color(0.878431, 1, 1, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LIGHT_GOLDENROD():
    # TODO: Initialize as Color(0.980392, 0.980392, 0.823529, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LIGHT_GRAY():
    # TODO: Initialize as Color(0.827451, 0.827451, 0.827451, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LIGHT_GREEN():
    # TODO: Initialize as Color(0.564706, 0.933333, 0.564706, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LIGHT_PINK():
    # TODO: Initialize as Color(1, 0.713726, 0.756863, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LIGHT_SALMON():
    # TODO: Initialize as Color(1, 0.627451, 0.478431, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LIGHT_SEA_GREEN():
    # TODO: Initialize as Color(0.12549, 0.698039, 0.666667, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LIGHT_SKY_BLUE():
    # TODO: Initialize as Color(0.529412, 0.807843, 0.980392, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LIGHT_SLATE_GRAY():
    # TODO: Initialize as Color(0.466667, 0.533333, 0.6, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LIGHT_STEEL_BLUE():
    # TODO: Initialize as Color(0.690196, 0.768627, 0.870588, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LIGHT_YELLOW():
    # TODO: Initialize as Color(1, 1, 0.878431, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LIME():
    # TODO: Initialize as Color(0, 1, 0, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LIME_GREEN():
    # TODO: Initialize as Color(0.196078, 0.803922, 0.196078, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_LINEN():
    # TODO: Initialize as Color(0.980392, 0.941176, 0.901961, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_MAGENTA():
    # TODO: Initialize as Color(1, 0, 1, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_MAROON():
    # TODO: Initialize as Color(0.690196, 0.188235, 0.376471, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_MEDIUM_AQUAMARINE():
    # TODO: Initialize as Color(0.4, 0.803922, 0.666667, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_MEDIUM_BLUE():
    # TODO: Initialize as Color(0, 0, 0.803922, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_MEDIUM_ORCHID():
    # TODO: Initialize as Color(0.729412, 0.333333, 0.827451, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_MEDIUM_PURPLE():
    # TODO: Initialize as Color(0.576471, 0.439216, 0.858824, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_MEDIUM_SEA_GREEN():
    # TODO: Initialize as Color(0.235294, 0.701961, 0.443137, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_MEDIUM_SLATE_BLUE():
    # TODO: Initialize as Color(0.482353, 0.407843, 0.933333, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_MEDIUM_SPRING_GREEN():
    # TODO: Initialize as Color(0, 0.980392, 0.603922, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_MEDIUM_TURQUOISE():
    # TODO: Initialize as Color(0.282353, 0.819608, 0.8, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_MEDIUM_VIOLET_RED():
    # TODO: Initialize as Color(0.780392, 0.0823529, 0.521569, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_MIDNIGHT_BLUE():
    # TODO: Initialize as Color(0.0980392, 0.0980392, 0.439216, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_MINT_CREAM():
    # TODO: Initialize as Color(0.960784, 1, 0.980392, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_MISTY_ROSE():
    # TODO: Initialize as Color(1, 0.894118, 0.882353, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_MOCCASIN():
    # TODO: Initialize as Color(1, 0.894118, 0.709804, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_NAVAJO_WHITE():
    # TODO: Initialize as Color(1, 0.870588, 0.678431, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_NAVY_BLUE():
    # TODO: Initialize as Color(0, 0, 0.501961, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_OLD_LACE():
    # TODO: Initialize as Color(0.992157, 0.960784, 0.901961, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_OLIVE():
    # TODO: Initialize as Color(0.501961, 0.501961, 0, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_OLIVE_DRAB():
    # TODO: Initialize as Color(0.419608, 0.556863, 0.137255, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_ORANGE():
    # TODO: Initialize as Color(1, 0.647059, 0, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_ORANGE_RED():
    # TODO: Initialize as Color(1, 0.270588, 0, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_ORCHID():
    # TODO: Initialize as Color(0.854902, 0.439216, 0.839216, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_PALE_GOLDENROD():
    # TODO: Initialize as Color(0.933333, 0.909804, 0.666667, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_PALE_GREEN():
    # TODO: Initialize as Color(0.596078, 0.984314, 0.596078, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_PALE_TURQUOISE():
    # TODO: Initialize as Color(0.686275, 0.933333, 0.933333, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_PALE_VIOLET_RED():
    # TODO: Initialize as Color(0.858824, 0.439216, 0.576471, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_PAPAYA_WHIP():
    # TODO: Initialize as Color(1, 0.937255, 0.835294, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_PEACH_PUFF():
    # TODO: Initialize as Color(1, 0.854902, 0.72549, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_PERU():
    # TODO: Initialize as Color(0.803922, 0.521569, 0.247059, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_PINK():
    # TODO: Initialize as Color(1, 0.752941, 0.796078, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_PLUM():
    # TODO: Initialize as Color(0.866667, 0.627451, 0.866667, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_POWDER_BLUE():
    # TODO: Initialize as Color(0.690196, 0.878431, 0.901961, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_PURPLE():
    # TODO: Initialize as Color(0.627451, 0.12549, 0.941176, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_REBECCA_PURPLE():
    # TODO: Initialize as Color(0.4, 0.2, 0.6, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_RED():
    # TODO: Initialize as Color(1, 0, 0, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_ROSY_BROWN():
    # TODO: Initialize as Color(0.737255, 0.560784, 0.560784, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_ROYAL_BLUE():
    # TODO: Initialize as Color(0.254902, 0.411765, 0.882353, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_SADDLE_BROWN():
    # TODO: Initialize as Color(0.545098, 0.270588, 0.0745098, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_SALMON():
    # TODO: Initialize as Color(0.980392, 0.501961, 0.447059, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_SANDY_BROWN():
    # TODO: Initialize as Color(0.956863, 0.643137, 0.376471, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_SEA_GREEN():
    # TODO: Initialize as Color(0.180392, 0.545098, 0.341176, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_SEASHELL():
    # TODO: Initialize as Color(1, 0.960784, 0.933333, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_SIENNA():
    # TODO: Initialize as Color(0.627451, 0.321569, 0.176471, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_SILVER():
    # TODO: Initialize as Color(0.752941, 0.752941, 0.752941, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_SKY_BLUE():
    # TODO: Initialize as Color(0.529412, 0.807843, 0.921569, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_SLATE_BLUE():
    # TODO: Initialize as Color(0.415686, 0.352941, 0.803922, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_SLATE_GRAY():
    # TODO: Initialize as Color(0.439216, 0.501961, 0.564706, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_SNOW():
    # TODO: Initialize as Color(1, 0.980392, 0.980392, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_SPRING_GREEN():
    # TODO: Initialize as Color(0, 1, 0.498039, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_STEEL_BLUE():
    # TODO: Initialize as Color(0.27451, 0.509804, 0.705882, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_TAN():
    # TODO: Initialize as Color(0.823529, 0.705882, 0.54902, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_TEAL():
    # TODO: Initialize as Color(0, 0.501961, 0.501961, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_THISTLE():
    # TODO: Initialize as Color(0.847059, 0.74902, 0.847059, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_TOMATO():
    # TODO: Initialize as Color(1, 0.388235, 0.278431, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_TRANSPARENT():
    # TODO: Initialize as Color(1, 1, 1, 0)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_TURQUOISE():
    # TODO: Initialize as Color(0.25098, 0.878431, 0.815686, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_VIOLET():
    # TODO: Initialize as Color(0.933333, 0.509804, 0.933333, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_WEB_GRAY():
    # TODO: Initialize as Color(0.501961, 0.501961, 0.501961, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_WEB_GREEN():
    # TODO: Initialize as Color(0, 0.501961, 0, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_WEB_MAROON():
    # TODO: Initialize as Color(0.501961, 0, 0, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_WEB_PURPLE():
    # TODO: Initialize as Color(0.501961, 0, 0.501961, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_WHEAT():
    # TODO: Initialize as Color(0.960784, 0.870588, 0.701961, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_WHITE():
    # TODO: Initialize as Color(1, 1, 1, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_WHITE_SMOKE():
    # TODO: Initialize as Color(0.960784, 0.960784, 0.960784, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_YELLOW():
    # TODO: Initialize as Color(1, 1, 0, 1)
    return gd_color_new()
cdef inline gd_color_t gd_color_make_constant_YELLOW_GREEN():
    # TODO: Initialize as Color(0.603922, 0.803922, 0.196078, 1)
    return gd_color_new()


# StringName


# NodePath


# RID


# Callable


# Signal


# Dictionary


# Array


# PackedByteArray


# PackedInt32Array


# PackedInt64Array


# PackedFloat32Array


# PackedFloat64Array


# PackedStringArray


# PackedVector2Array


# PackedVector3Array


# PackedColorArray


##############################################################################
#                              Utility functions                             #
##############################################################################


# sin
cdef inline double gd_utility_sin(double angle_rad):
    cdef GDExtensionTypePtr[1] __args = [&angle_rad]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_sin_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# cos
cdef inline double gd_utility_cos(double angle_rad):
    cdef GDExtensionTypePtr[1] __args = [&angle_rad]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_cos_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# tan
cdef inline double gd_utility_tan(double angle_rad):
    cdef GDExtensionTypePtr[1] __args = [&angle_rad]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_tan_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# sinh
cdef inline double gd_utility_sinh(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_sinh_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# cosh
cdef inline double gd_utility_cosh(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_cosh_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# tanh
cdef inline double gd_utility_tanh(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_tanh_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# asin
cdef inline double gd_utility_asin(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_asin_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# acos
cdef inline double gd_utility_acos(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_acos_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# atan
cdef inline double gd_utility_atan(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_atan_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# atan2
cdef inline double gd_utility_atan2(double y, double x):
    cdef GDExtensionTypePtr[2] __args = [&y, &x]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_atan2_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# sqrt
cdef inline double gd_utility_sqrt(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_sqrt_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# fmod
cdef inline double gd_utility_fmod(double x, double y):
    cdef GDExtensionTypePtr[2] __args = [&x, &y]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_fmod_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# fposmod
cdef inline double gd_utility_fposmod(double x, double y):
    cdef GDExtensionTypePtr[2] __args = [&x, &y]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_fposmod_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# posmod
cdef inline uint64_t gd_utility_posmod(uint64_t x, uint64_t y):
    cdef GDExtensionTypePtr[2] __args = [&x, &y]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_posmod_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# floor
cdef inline gd_variant_t gd_utility_floor(gd_variant_t* x):
    cdef GDExtensionTypePtr[1] __args = [x]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_utility_floor_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# floorf
cdef inline double gd_utility_floorf(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_floorf_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# floori
cdef inline uint64_t gd_utility_floori(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_floori_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# ceil
cdef inline gd_variant_t gd_utility_ceil(gd_variant_t* x):
    cdef GDExtensionTypePtr[1] __args = [x]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_utility_ceil_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# ceilf
cdef inline double gd_utility_ceilf(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_ceilf_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# ceili
cdef inline uint64_t gd_utility_ceili(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_ceili_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# round
cdef inline gd_variant_t gd_utility_round(gd_variant_t* x):
    cdef GDExtensionTypePtr[1] __args = [x]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_utility_round_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# roundf
cdef inline double gd_utility_roundf(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_roundf_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# roundi
cdef inline uint64_t gd_utility_roundi(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_roundi_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# abs
cdef inline gd_variant_t gd_utility_abs(gd_variant_t* x):
    cdef GDExtensionTypePtr[1] __args = [x]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_utility_abs_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# absf
cdef inline double gd_utility_absf(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_absf_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# absi
cdef inline uint64_t gd_utility_absi(uint64_t x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_absi_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# sign
cdef inline gd_variant_t gd_utility_sign(gd_variant_t* x):
    cdef GDExtensionTypePtr[1] __args = [x]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_utility_sign_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# signf
cdef inline double gd_utility_signf(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_signf_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# signi
cdef inline uint64_t gd_utility_signi(uint64_t x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_signi_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# snapped
cdef inline gd_variant_t gd_utility_snapped(gd_variant_t* x, gd_variant_t* step):
    cdef GDExtensionTypePtr[2] __args = [x, step]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_utility_snapped_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# snappedf
cdef inline double gd_utility_snappedf(double x, double step):
    cdef GDExtensionTypePtr[2] __args = [&x, &step]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_snappedf_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# snappedi
cdef inline uint64_t gd_utility_snappedi(double x, uint64_t step):
    cdef GDExtensionTypePtr[2] __args = [&x, &step]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_snappedi_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# pow
cdef inline double gd_utility_pow(double base, double exp):
    cdef GDExtensionTypePtr[2] __args = [&base, &exp]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_pow_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# log
cdef inline double gd_utility_log(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_log_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# exp
cdef inline double gd_utility_exp(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_exp_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# is_nan
cdef inline uint8_t gd_utility_is_nan(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_is_nan_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# is_inf
cdef inline uint8_t gd_utility_is_inf(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_is_inf_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# is_equal_approx
cdef inline uint8_t gd_utility_is_equal_approx(double a, double b):
    cdef GDExtensionTypePtr[2] __args = [&a, &b]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_is_equal_approx_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# is_zero_approx
cdef inline uint8_t gd_utility_is_zero_approx(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_is_zero_approx_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# is_finite
cdef inline uint8_t gd_utility_is_finite(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_is_finite_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# ease
cdef inline double gd_utility_ease(double x, double curve):
    cdef GDExtensionTypePtr[2] __args = [&x, &curve]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_ease_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# step_decimals
cdef inline uint64_t gd_utility_step_decimals(double x):
    cdef GDExtensionTypePtr[1] __args = [&x]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_step_decimals_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# lerp
cdef inline gd_variant_t gd_utility_lerp(gd_variant_t* from_, gd_variant_t* to, gd_variant_t* weight):
    cdef GDExtensionTypePtr[3] __args = [from_, to, weight]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_utility_lerp_ptr(
                &__ret,
                <const void **>__args,
                3
    )
    return __ret




# lerpf
cdef inline double gd_utility_lerpf(double from_, double to, double weight):
    cdef GDExtensionTypePtr[3] __args = [&from_, &to, &weight]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_lerpf_ptr(
                &__ret,
                <const void **>__args,
                3
    )
    return __ret




# cubic_interpolate
cdef inline double gd_utility_cubic_interpolate(double from_, double to, double pre, double post, double weight):
    cdef GDExtensionTypePtr[5] __args = [&from_, &to, &pre, &post, &weight]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_cubic_interpolate_ptr(
                &__ret,
                <const void **>__args,
                5
    )
    return __ret




# cubic_interpolate_angle
cdef inline double gd_utility_cubic_interpolate_angle(double from_, double to, double pre, double post, double weight):
    cdef GDExtensionTypePtr[5] __args = [&from_, &to, &pre, &post, &weight]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_cubic_interpolate_angle_ptr(
                &__ret,
                <const void **>__args,
                5
    )
    return __ret




# cubic_interpolate_in_time
cdef inline double gd_utility_cubic_interpolate_in_time(double from_, double to, double pre, double post, double weight, double to_t, double pre_t, double post_t):
    cdef GDExtensionTypePtr[8] __args = [&from_, &to, &pre, &post, &weight, &to_t, &pre_t, &post_t]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_cubic_interpolate_in_time_ptr(
                &__ret,
                <const void **>__args,
                8
    )
    return __ret




# cubic_interpolate_angle_in_time
cdef inline double gd_utility_cubic_interpolate_angle_in_time(double from_, double to, double pre, double post, double weight, double to_t, double pre_t, double post_t):
    cdef GDExtensionTypePtr[8] __args = [&from_, &to, &pre, &post, &weight, &to_t, &pre_t, &post_t]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_cubic_interpolate_angle_in_time_ptr(
                &__ret,
                <const void **>__args,
                8
    )
    return __ret




# bezier_interpolate
cdef inline double gd_utility_bezier_interpolate(double start, double control_1, double control_2, double end, double t):
    cdef GDExtensionTypePtr[5] __args = [&start, &control_1, &control_2, &end, &t]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_bezier_interpolate_ptr(
                &__ret,
                <const void **>__args,
                5
    )
    return __ret




# bezier_derivative
cdef inline double gd_utility_bezier_derivative(double start, double control_1, double control_2, double end, double t):
    cdef GDExtensionTypePtr[5] __args = [&start, &control_1, &control_2, &end, &t]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_bezier_derivative_ptr(
                &__ret,
                <const void **>__args,
                5
    )
    return __ret




# lerp_angle
cdef inline double gd_utility_lerp_angle(double from_, double to, double weight):
    cdef GDExtensionTypePtr[3] __args = [&from_, &to, &weight]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_lerp_angle_ptr(
                &__ret,
                <const void **>__args,
                3
    )
    return __ret




# inverse_lerp
cdef inline double gd_utility_inverse_lerp(double from_, double to, double weight):
    cdef GDExtensionTypePtr[3] __args = [&from_, &to, &weight]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_inverse_lerp_ptr(
                &__ret,
                <const void **>__args,
                3
    )
    return __ret




# remap
cdef inline double gd_utility_remap(double value, double istart, double istop, double ostart, double ostop):
    cdef GDExtensionTypePtr[5] __args = [&value, &istart, &istop, &ostart, &ostop]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_remap_ptr(
                &__ret,
                <const void **>__args,
                5
    )
    return __ret




# smoothstep
cdef inline double gd_utility_smoothstep(double from_, double to, double x):
    cdef GDExtensionTypePtr[3] __args = [&from_, &to, &x]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_smoothstep_ptr(
                &__ret,
                <const void **>__args,
                3
    )
    return __ret




# move_toward
cdef inline double gd_utility_move_toward(double from_, double to, double delta):
    cdef GDExtensionTypePtr[3] __args = [&from_, &to, &delta]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_move_toward_ptr(
                &__ret,
                <const void **>__args,
                3
    )
    return __ret




# deg_to_rad
cdef inline double gd_utility_deg_to_rad(double deg):
    cdef GDExtensionTypePtr[1] __args = [&deg]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_deg_to_rad_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# rad_to_deg
cdef inline double gd_utility_rad_to_deg(double rad):
    cdef GDExtensionTypePtr[1] __args = [&rad]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_rad_to_deg_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# linear_to_db
cdef inline double gd_utility_linear_to_db(double lin):
    cdef GDExtensionTypePtr[1] __args = [&lin]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_linear_to_db_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# db_to_linear
cdef inline double gd_utility_db_to_linear(double db):
    cdef GDExtensionTypePtr[1] __args = [&db]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_db_to_linear_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# wrap
cdef inline gd_variant_t gd_utility_wrap(gd_variant_t* value, gd_variant_t* min, gd_variant_t* max):
    cdef GDExtensionTypePtr[3] __args = [value, min, max]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_utility_wrap_ptr(
                &__ret,
                <const void **>__args,
                3
    )
    return __ret




# wrapi
cdef inline uint64_t gd_utility_wrapi(uint64_t value, uint64_t min, uint64_t max):
    cdef GDExtensionTypePtr[3] __args = [&value, &min, &max]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_wrapi_ptr(
                &__ret,
                <const void **>__args,
                3
    )
    return __ret




# wrapf
cdef inline double gd_utility_wrapf(double value, double min, double max):
    cdef GDExtensionTypePtr[3] __args = [&value, &min, &max]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_wrapf_ptr(
                &__ret,
                <const void **>__args,
                3
    )
    return __ret




# max
cdef inline gd_variant_t gd_utility_max(gd_variant_t *args, int args_count):
    cdef gd_variant_t __ret  # TODO: improve return type !
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_utility_max_ptr(&__ret, <const void **>&args, args_count)
    return __ret




# maxi
cdef inline uint64_t gd_utility_maxi(uint64_t a, uint64_t b):
    cdef GDExtensionTypePtr[2] __args = [&a, &b]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_maxi_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# maxf
cdef inline double gd_utility_maxf(double a, double b):
    cdef GDExtensionTypePtr[2] __args = [&a, &b]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_maxf_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# min
cdef inline gd_variant_t gd_utility_min(gd_variant_t *args, int args_count):
    cdef gd_variant_t __ret  # TODO: improve return type !
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_utility_min_ptr(&__ret, <const void **>&args, args_count)
    return __ret




# mini
cdef inline uint64_t gd_utility_mini(uint64_t a, uint64_t b):
    cdef GDExtensionTypePtr[2] __args = [&a, &b]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_mini_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# minf
cdef inline double gd_utility_minf(double a, double b):
    cdef GDExtensionTypePtr[2] __args = [&a, &b]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_minf_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# clamp
cdef inline gd_variant_t gd_utility_clamp(gd_variant_t* value, gd_variant_t* min, gd_variant_t* max):
    cdef GDExtensionTypePtr[3] __args = [value, min, max]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_utility_clamp_ptr(
                &__ret,
                <const void **>__args,
                3
    )
    return __ret




# clampi
cdef inline uint64_t gd_utility_clampi(uint64_t value, uint64_t min, uint64_t max):
    cdef GDExtensionTypePtr[3] __args = [&value, &min, &max]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_clampi_ptr(
                &__ret,
                <const void **>__args,
                3
    )
    return __ret




# clampf
cdef inline double gd_utility_clampf(double value, double min, double max):
    cdef GDExtensionTypePtr[3] __args = [&value, &min, &max]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_clampf_ptr(
                &__ret,
                <const void **>__args,
                3
    )
    return __ret




# nearest_po2
cdef inline uint64_t gd_utility_nearest_po2(uint64_t value):
    cdef GDExtensionTypePtr[1] __args = [&value]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_nearest_po2_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# pingpong
cdef inline double gd_utility_pingpong(double value, double length):
    cdef GDExtensionTypePtr[2] __args = [&value, &length]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_pingpong_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# randomize
cdef inline void gd_utility_randomize():
    gd_utility_randomize_ptr(
                NULL,
                <const void **>NULL,
                0
    )




# randi
cdef inline uint64_t gd_utility_randi():
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_randi_ptr(
                &__ret,
                <const void **>NULL,
                0
    )
    return __ret




# randf
cdef inline double gd_utility_randf():
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_randf_ptr(
                &__ret,
                <const void **>NULL,
                0
    )
    return __ret




# randi_range
cdef inline uint64_t gd_utility_randi_range(uint64_t from_, uint64_t to):
    cdef GDExtensionTypePtr[2] __args = [&from_, &to]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_randi_range_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# randf_range
cdef inline double gd_utility_randf_range(double from_, double to):
    cdef GDExtensionTypePtr[2] __args = [&from_, &to]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_randf_range_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# randfn
cdef inline double gd_utility_randfn(double mean, double deviation):
    cdef GDExtensionTypePtr[2] __args = [&mean, &deviation]
    cdef double __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_randfn_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




# seed
cdef inline void gd_utility_seed(uint64_t base):
    cdef GDExtensionTypePtr[1] __args = [&base]
    gd_utility_seed_ptr(
                NULL,
                <const void **>__args,
                1
    )




# rand_from_seed
cdef inline gd_packed_int64_array_t gd_utility_rand_from_seed(uint64_t seed):
    cdef GDExtensionTypePtr[1] __args = [&seed]
    cdef gd_packed_int64_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_int64_array_new()
    gd_utility_rand_from_seed_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# weakref
cdef inline gd_variant_t gd_utility_weakref(gd_variant_t* obj):
    cdef GDExtensionTypePtr[1] __args = [obj]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_utility_weakref_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# typeof
cdef inline uint64_t gd_utility_typeof(gd_variant_t* variable):
    cdef GDExtensionTypePtr[1] __args = [variable]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_typeof_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# str
cdef inline gd_variant_t gd_utility_str(gd_variant_t *args, int args_count):
    cdef gd_variant_t __ret  # TODO: improve return type !
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_utility_str_ptr(&__ret, <const void **>&args, args_count)
    return __ret




# error_string
cdef inline gd_string_t gd_utility_error_string(uint64_t error):
    cdef GDExtensionTypePtr[1] __args = [&error]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_utility_error_string_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# print
cdef inline void gd_utility_print(gd_variant_t *args, int args_count):
    gd_utility_print_ptr(NULL, <const void **>&args, args_count)




# print_rich
cdef inline void gd_utility_print_rich(gd_variant_t *args, int args_count):
    gd_utility_print_rich_ptr(NULL, <const void **>&args, args_count)




# printerr
cdef inline void gd_utility_printerr(gd_variant_t *args, int args_count):
    gd_utility_printerr_ptr(NULL, <const void **>&args, args_count)




# printt
cdef inline void gd_utility_printt(gd_variant_t *args, int args_count):
    gd_utility_printt_ptr(NULL, <const void **>&args, args_count)




# prints
cdef inline void gd_utility_prints(gd_variant_t *args, int args_count):
    gd_utility_prints_ptr(NULL, <const void **>&args, args_count)




# printraw
cdef inline void gd_utility_printraw(gd_variant_t *args, int args_count):
    gd_utility_printraw_ptr(NULL, <const void **>&args, args_count)




# print_verbose
cdef inline void gd_utility_print_verbose(gd_variant_t *args, int args_count):
    gd_utility_print_verbose_ptr(NULL, <const void **>&args, args_count)




# push_error
cdef inline void gd_utility_push_error(gd_variant_t *args, int args_count):
    gd_utility_push_error_ptr(NULL, <const void **>&args, args_count)




# push_warning
cdef inline void gd_utility_push_warning(gd_variant_t *args, int args_count):
    gd_utility_push_warning_ptr(NULL, <const void **>&args, args_count)




# var_to_str
cdef inline gd_string_t gd_utility_var_to_str(gd_variant_t* variable):
    cdef GDExtensionTypePtr[1] __args = [variable]
    cdef gd_string_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_string_new()
    gd_utility_var_to_str_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# str_to_var
cdef inline gd_variant_t gd_utility_str_to_var(gd_string_t* string):
    cdef GDExtensionTypePtr[1] __args = [string]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_utility_str_to_var_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# var_to_bytes
cdef inline gd_packed_byte_array_t gd_utility_var_to_bytes(gd_variant_t* variable):
    cdef GDExtensionTypePtr[1] __args = [variable]
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_utility_var_to_bytes_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# bytes_to_var
cdef inline gd_variant_t gd_utility_bytes_to_var(gd_packed_byte_array_t* bytes):
    cdef GDExtensionTypePtr[1] __args = [bytes]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_utility_bytes_to_var_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# var_to_bytes_with_objects
cdef inline gd_packed_byte_array_t gd_utility_var_to_bytes_with_objects(gd_variant_t* variable):
    cdef GDExtensionTypePtr[1] __args = [variable]
    cdef gd_packed_byte_array_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_packed_byte_array_new()
    gd_utility_var_to_bytes_with_objects_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# bytes_to_var_with_objects
cdef inline gd_variant_t gd_utility_bytes_to_var_with_objects(gd_packed_byte_array_t* bytes):
    cdef GDExtensionTypePtr[1] __args = [bytes]
    cdef gd_variant_t __ret
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_utility_bytes_to_var_with_objects_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# hash
cdef inline uint64_t gd_utility_hash(gd_variant_t* variable):
    cdef GDExtensionTypePtr[1] __args = [variable]
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_hash_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# instance_from_id
cdef inline gd_object_t gd_utility_instance_from_id(uint64_t instance_id):
    cdef GDExtensionTypePtr[1] __args = [&instance_id]
    cdef gd_object_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_instance_from_id_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# is_instance_id_valid
cdef inline uint8_t gd_utility_is_instance_id_valid(uint64_t id):
    cdef GDExtensionTypePtr[1] __args = [&id]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_is_instance_id_valid_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# is_instance_valid
cdef inline uint8_t gd_utility_is_instance_valid(gd_variant_t* instance):
    cdef GDExtensionTypePtr[1] __args = [instance]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_is_instance_valid_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# rid_allocate_id
cdef inline uint64_t gd_utility_rid_allocate_id():
    cdef uint64_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_rid_allocate_id_ptr(
                &__ret,
                <const void **>NULL,
                0
    )
    return __ret




# rid_from_int64
cdef inline gd_rid_t gd_utility_rid_from_int64(uint64_t base):
    cdef GDExtensionTypePtr[1] __args = [&base]
    cdef gd_rid_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_rid_from_int64_ptr(
                &__ret,
                <const void **>__args,
                1
    )
    return __ret




# is_same
cdef inline uint8_t gd_utility_is_same(gd_variant_t* a, gd_variant_t* b):
    cdef GDExtensionTypePtr[2] __args = [a, b]
    cdef uint8_t __ret
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
    gd_utility_is_same_ptr(
                &__ret,
                <const void **>__args,
                2
    )
    return __ret




##############################################################################
#                        Global Constants & Enums                            #
##############################################################################


cdef enum Side:
    SIDE_LEFT = 0
    SIDE_TOP = 1
    SIDE_RIGHT = 2
    SIDE_BOTTOM = 3


cdef enum Corner:
    CORNER_TOP_LEFT = 0
    CORNER_TOP_RIGHT = 1
    CORNER_BOTTOM_RIGHT = 2
    CORNER_BOTTOM_LEFT = 3


cdef enum Orientation:
    VERTICAL = 1
    HORIZONTAL = 0


cdef enum ClockDirection:
    CLOCKWISE = 0
    COUNTERCLOCKWISE = 1


cdef enum HorizontalAlignment:
    HORIZONTAL_ALIGNMENT_LEFT = 0
    HORIZONTAL_ALIGNMENT_CENTER = 1
    HORIZONTAL_ALIGNMENT_RIGHT = 2
    HORIZONTAL_ALIGNMENT_FILL = 3


cdef enum VerticalAlignment:
    VERTICAL_ALIGNMENT_TOP = 0
    VERTICAL_ALIGNMENT_CENTER = 1
    VERTICAL_ALIGNMENT_BOTTOM = 2
    VERTICAL_ALIGNMENT_FILL = 3


cdef enum InlineAlignment:
    INLINE_ALIGNMENT_TOP_TO = 0
    INLINE_ALIGNMENT_CENTER_TO = 1
    INLINE_ALIGNMENT_BASELINE_TO = 3
    INLINE_ALIGNMENT_BOTTOM_TO = 2
    INLINE_ALIGNMENT_TO_TOP = 0
    INLINE_ALIGNMENT_TO_CENTER = 4
    INLINE_ALIGNMENT_TO_BASELINE = 8
    INLINE_ALIGNMENT_TO_BOTTOM = 12
    INLINE_ALIGNMENT_TOP = 0
    INLINE_ALIGNMENT_CENTER = 5
    INLINE_ALIGNMENT_BOTTOM = 14
    INLINE_ALIGNMENT_IMAGE_MASK = 3
    INLINE_ALIGNMENT_TEXT_MASK = 12


cdef enum EulerOrder:
    EULER_ORDER_XYZ = 0
    EULER_ORDER_XZY = 1
    EULER_ORDER_YXZ = 2
    EULER_ORDER_YZX = 3
    EULER_ORDER_ZXY = 4
    EULER_ORDER_ZYX = 5


cdef enum Key:
    KEY_NONE = 0
    KEY_SPECIAL = 4194304
    KEY_ESCAPE = 4194305
    KEY_TAB = 4194306
    KEY_BACKTAB = 4194307
    KEY_BACKSPACE = 4194308
    KEY_ENTER = 4194309
    KEY_KP_ENTER = 4194310
    KEY_INSERT = 4194311
    KEY_DELETE = 4194312
    KEY_PAUSE = 4194313
    KEY_PRINT = 4194314
    KEY_SYSREQ = 4194315
    KEY_CLEAR = 4194316
    KEY_HOME = 4194317
    KEY_END = 4194318
    KEY_LEFT = 4194319
    KEY_UP = 4194320
    KEY_RIGHT = 4194321
    KEY_DOWN = 4194322
    KEY_PAGEUP = 4194323
    KEY_PAGEDOWN = 4194324
    KEY_SHIFT = 4194325
    KEY_CTRL = 4194326
    KEY_META = 4194327
    KEY_ALT = 4194328
    KEY_CAPSLOCK = 4194329
    KEY_NUMLOCK = 4194330
    KEY_SCROLLLOCK = 4194331
    KEY_F1 = 4194332
    KEY_F2 = 4194333
    KEY_F3 = 4194334
    KEY_F4 = 4194335
    KEY_F5 = 4194336
    KEY_F6 = 4194337
    KEY_F7 = 4194338
    KEY_F8 = 4194339
    KEY_F9 = 4194340
    KEY_F10 = 4194341
    KEY_F11 = 4194342
    KEY_F12 = 4194343
    KEY_F13 = 4194344
    KEY_F14 = 4194345
    KEY_F15 = 4194346
    KEY_F16 = 4194347
    KEY_F17 = 4194348
    KEY_F18 = 4194349
    KEY_F19 = 4194350
    KEY_F20 = 4194351
    KEY_F21 = 4194352
    KEY_F22 = 4194353
    KEY_F23 = 4194354
    KEY_F24 = 4194355
    KEY_F25 = 4194356
    KEY_F26 = 4194357
    KEY_F27 = 4194358
    KEY_F28 = 4194359
    KEY_F29 = 4194360
    KEY_F30 = 4194361
    KEY_F31 = 4194362
    KEY_F32 = 4194363
    KEY_F33 = 4194364
    KEY_F34 = 4194365
    KEY_F35 = 4194366
    KEY_KP_MULTIPLY = 4194433
    KEY_KP_DIVIDE = 4194434
    KEY_KP_SUBTRACT = 4194435
    KEY_KP_PERIOD = 4194436
    KEY_KP_ADD = 4194437
    KEY_KP_0 = 4194438
    KEY_KP_1 = 4194439
    KEY_KP_2 = 4194440
    KEY_KP_3 = 4194441
    KEY_KP_4 = 4194442
    KEY_KP_5 = 4194443
    KEY_KP_6 = 4194444
    KEY_KP_7 = 4194445
    KEY_KP_8 = 4194446
    KEY_KP_9 = 4194447
    KEY_MENU = 4194370
    KEY_HYPER = 4194371
    KEY_HELP = 4194373
    KEY_BACK = 4194376
    KEY_FORWARD = 4194377
    KEY_STOP = 4194378
    KEY_REFRESH = 4194379
    KEY_VOLUMEDOWN = 4194380
    KEY_VOLUMEMUTE = 4194381
    KEY_VOLUMEUP = 4194382
    KEY_MEDIAPLAY = 4194388
    KEY_MEDIASTOP = 4194389
    KEY_MEDIAPREVIOUS = 4194390
    KEY_MEDIANEXT = 4194391
    KEY_MEDIARECORD = 4194392
    KEY_HOMEPAGE = 4194393
    KEY_FAVORITES = 4194394
    KEY_SEARCH = 4194395
    KEY_STANDBY = 4194396
    KEY_OPENURL = 4194397
    KEY_LAUNCHMAIL = 4194398
    KEY_LAUNCHMEDIA = 4194399
    KEY_LAUNCH0 = 4194400
    KEY_LAUNCH1 = 4194401
    KEY_LAUNCH2 = 4194402
    KEY_LAUNCH3 = 4194403
    KEY_LAUNCH4 = 4194404
    KEY_LAUNCH5 = 4194405
    KEY_LAUNCH6 = 4194406
    KEY_LAUNCH7 = 4194407
    KEY_LAUNCH8 = 4194408
    KEY_LAUNCH9 = 4194409
    KEY_LAUNCHA = 4194410
    KEY_LAUNCHB = 4194411
    KEY_LAUNCHC = 4194412
    KEY_LAUNCHD = 4194413
    KEY_LAUNCHE = 4194414
    KEY_LAUNCHF = 4194415
    KEY_UNKNOWN = 8388607
    KEY_SPACE = 32
    KEY_EXCLAM = 33
    KEY_QUOTEDBL = 34
    KEY_NUMBERSIGN = 35
    KEY_DOLLAR = 36
    KEY_PERCENT = 37
    KEY_AMPERSAND = 38
    KEY_APOSTROPHE = 39
    KEY_PARENLEFT = 40
    KEY_PARENRIGHT = 41
    KEY_ASTERISK = 42
    KEY_PLUS = 43
    KEY_COMMA = 44
    KEY_MINUS = 45
    KEY_PERIOD = 46
    KEY_SLASH = 47
    KEY_0 = 48
    KEY_1 = 49
    KEY_2 = 50
    KEY_3 = 51
    KEY_4 = 52
    KEY_5 = 53
    KEY_6 = 54
    KEY_7 = 55
    KEY_8 = 56
    KEY_9 = 57
    KEY_COLON = 58
    KEY_SEMICOLON = 59
    KEY_LESS = 60
    KEY_EQUAL = 61
    KEY_GREATER = 62
    KEY_QUESTION = 63
    KEY_AT = 64
    KEY_A = 65
    KEY_B = 66
    KEY_C = 67
    KEY_D = 68
    KEY_E = 69
    KEY_F = 70
    KEY_G = 71
    KEY_H = 72
    KEY_I = 73
    KEY_J = 74
    KEY_K = 75
    KEY_L = 76
    KEY_M = 77
    KEY_N = 78
    KEY_O = 79
    KEY_P = 80
    KEY_Q = 81
    KEY_R = 82
    KEY_S = 83
    KEY_T = 84
    KEY_U = 85
    KEY_V = 86
    KEY_W = 87
    KEY_X = 88
    KEY_Y = 89
    KEY_Z = 90
    KEY_BRACKETLEFT = 91
    KEY_BACKSLASH = 92
    KEY_BRACKETRIGHT = 93
    KEY_ASCIICIRCUM = 94
    KEY_UNDERSCORE = 95
    KEY_QUOTELEFT = 96
    KEY_BRACELEFT = 123
    KEY_BAR = 124
    KEY_BRACERIGHT = 125
    KEY_ASCIITILDE = 126
    KEY_YEN = 165
    KEY_SECTION = 167
    KEY_GLOBE = 4194416
    KEY_KEYBOARD = 4194417
    KEY_JIS_EISU = 4194418
    KEY_JIS_KANA = 4194419


cdef enum KeyModifierMask:
    KEY_CODE_MASK = 8388607
    KEY_MODIFIER_MASK = 532676608
    KEY_MASK_CMD_OR_CTRL = 16777216
    KEY_MASK_SHIFT = 33554432
    KEY_MASK_ALT = 67108864
    KEY_MASK_META = 134217728
    KEY_MASK_CTRL = 268435456
    KEY_MASK_KPAD = 536870912
    KEY_MASK_GROUP_SWITCH = 1073741824


cdef enum MouseButton:
    MOUSE_BUTTON_NONE = 0
    MOUSE_BUTTON_LEFT = 1
    MOUSE_BUTTON_RIGHT = 2
    MOUSE_BUTTON_MIDDLE = 3
    MOUSE_BUTTON_WHEEL_UP = 4
    MOUSE_BUTTON_WHEEL_DOWN = 5
    MOUSE_BUTTON_WHEEL_LEFT = 6
    MOUSE_BUTTON_WHEEL_RIGHT = 7
    MOUSE_BUTTON_XBUTTON1 = 8
    MOUSE_BUTTON_XBUTTON2 = 9


cdef enum MouseButtonMask:
    MOUSE_BUTTON_MASK_LEFT = 1
    MOUSE_BUTTON_MASK_RIGHT = 2
    MOUSE_BUTTON_MASK_MIDDLE = 4
    MOUSE_BUTTON_MASK_MB_XBUTTON1 = 128
    MOUSE_BUTTON_MASK_MB_XBUTTON2 = 256


cdef enum JoyButton:
    JOY_BUTTON_INVALID = -1
    JOY_BUTTON_A = 0
    JOY_BUTTON_B = 1
    JOY_BUTTON_X = 2
    JOY_BUTTON_Y = 3
    JOY_BUTTON_BACK = 4
    JOY_BUTTON_GUIDE = 5
    JOY_BUTTON_START = 6
    JOY_BUTTON_LEFT_STICK = 7
    JOY_BUTTON_RIGHT_STICK = 8
    JOY_BUTTON_LEFT_SHOULDER = 9
    JOY_BUTTON_RIGHT_SHOULDER = 10
    JOY_BUTTON_DPAD_UP = 11
    JOY_BUTTON_DPAD_DOWN = 12
    JOY_BUTTON_DPAD_LEFT = 13
    JOY_BUTTON_DPAD_RIGHT = 14
    JOY_BUTTON_MISC1 = 15
    JOY_BUTTON_PADDLE1 = 16
    JOY_BUTTON_PADDLE2 = 17
    JOY_BUTTON_PADDLE3 = 18
    JOY_BUTTON_PADDLE4 = 19
    JOY_BUTTON_TOUCHPAD = 20
    JOY_BUTTON_SDL_MAX = 21
    JOY_BUTTON_MAX = 128


cdef enum JoyAxis:
    JOY_AXIS_INVALID = -1
    JOY_AXIS_LEFT_X = 0
    JOY_AXIS_LEFT_Y = 1
    JOY_AXIS_RIGHT_X = 2
    JOY_AXIS_RIGHT_Y = 3
    JOY_AXIS_TRIGGER_LEFT = 4
    JOY_AXIS_TRIGGER_RIGHT = 5
    JOY_AXIS_SDL_MAX = 6
    JOY_AXIS_MAX = 10


cdef enum MIDIMessage:
    MIDI_MESSAGE_NONE = 0
    MIDI_MESSAGE_NOTE_OFF = 8
    MIDI_MESSAGE_NOTE_ON = 9
    MIDI_MESSAGE_AFTERTOUCH = 10
    MIDI_MESSAGE_CONTROL_CHANGE = 11
    MIDI_MESSAGE_PROGRAM_CHANGE = 12
    MIDI_MESSAGE_CHANNEL_PRESSURE = 13
    MIDI_MESSAGE_PITCH_BEND = 14
    MIDI_MESSAGE_SYSTEM_EXCLUSIVE = 240
    MIDI_MESSAGE_QUARTER_FRAME = 241
    MIDI_MESSAGE_SONG_POSITION_POINTER = 242
    MIDI_MESSAGE_SONG_SELECT = 243
    MIDI_MESSAGE_TUNE_REQUEST = 246
    MIDI_MESSAGE_TIMING_CLOCK = 248
    MIDI_MESSAGE_START = 250
    MIDI_MESSAGE_CONTINUE = 251
    MIDI_MESSAGE_STOP = 252
    MIDI_MESSAGE_ACTIVE_SENSING = 254
    MIDI_MESSAGE_SYSTEM_RESET = 255


cdef enum Error:
    OK = 0
    FAILED = 1
    ERR_UNAVAILABLE = 2
    ERR_UNCONFIGURED = 3
    ERR_UNAUTHORIZED = 4
    ERR_PARAMETER_RANGE_ERROR = 5
    ERR_OUT_OF_MEMORY = 6
    ERR_FILE_NOT_FOUND = 7
    ERR_FILE_BAD_DRIVE = 8
    ERR_FILE_BAD_PATH = 9
    ERR_FILE_NO_PERMISSION = 10
    ERR_FILE_ALREADY_IN_USE = 11
    ERR_FILE_CANT_OPEN = 12
    ERR_FILE_CANT_WRITE = 13
    ERR_FILE_CANT_READ = 14
    ERR_FILE_UNRECOGNIZED = 15
    ERR_FILE_CORRUPT = 16
    ERR_FILE_MISSING_DEPENDENCIES = 17
    ERR_FILE_EOF = 18
    ERR_CANT_OPEN = 19
    ERR_CANT_CREATE = 20
    ERR_QUERY_FAILED = 21
    ERR_ALREADY_IN_USE = 22
    ERR_LOCKED = 23
    ERR_TIMEOUT = 24
    ERR_CANT_CONNECT = 25
    ERR_CANT_RESOLVE = 26
    ERR_CONNECTION_ERROR = 27
    ERR_CANT_ACQUIRE_RESOURCE = 28
    ERR_CANT_FORK = 29
    ERR_INVALID_DATA = 30
    ERR_INVALID_PARAMETER = 31
    ERR_ALREADY_EXISTS = 32
    ERR_DOES_NOT_EXIST = 33
    ERR_DATABASE_CANT_READ = 34
    ERR_DATABASE_CANT_WRITE = 35
    ERR_COMPILATION_FAILED = 36
    ERR_METHOD_NOT_FOUND = 37
    ERR_LINK_FAILED = 38
    ERR_SCRIPT_FAILED = 39
    ERR_CYCLIC_LINK = 40
    ERR_INVALID_DECLARATION = 41
    ERR_DUPLICATE_SYMBOL = 42
    ERR_PARSE_ERROR = 43
    ERR_BUSY = 44
    ERR_SKIP = 45
    ERR_HELP = 46
    ERR_BUG = 47
    ERR_PRINTER_ON_FIRE = 48


cdef enum PropertyHint:
    PROPERTY_HINT_NONE = 0
    PROPERTY_HINT_RANGE = 1
    PROPERTY_HINT_ENUM = 2
    PROPERTY_HINT_ENUM_SUGGESTION = 3
    PROPERTY_HINT_EXP_EASING = 4
    PROPERTY_HINT_LINK = 5
    PROPERTY_HINT_FLAGS = 6
    PROPERTY_HINT_LAYERS_2D_RENDER = 7
    PROPERTY_HINT_LAYERS_2D_PHYSICS = 8
    PROPERTY_HINT_LAYERS_2D_NAVIGATION = 9
    PROPERTY_HINT_LAYERS_3D_RENDER = 10
    PROPERTY_HINT_LAYERS_3D_PHYSICS = 11
    PROPERTY_HINT_LAYERS_3D_NAVIGATION = 12
    PROPERTY_HINT_LAYERS_AVOIDANCE = 37
    PROPERTY_HINT_FILE = 13
    PROPERTY_HINT_DIR = 14
    PROPERTY_HINT_GLOBAL_FILE = 15
    PROPERTY_HINT_GLOBAL_DIR = 16
    PROPERTY_HINT_RESOURCE_TYPE = 17
    PROPERTY_HINT_MULTILINE_TEXT = 18
    PROPERTY_HINT_EXPRESSION = 19
    PROPERTY_HINT_PLACEHOLDER_TEXT = 20
    PROPERTY_HINT_COLOR_NO_ALPHA = 21
    PROPERTY_HINT_OBJECT_ID = 22
    PROPERTY_HINT_TYPE_STRING = 23
    PROPERTY_HINT_NODE_PATH_TO_EDITED_NODE = 24
    PROPERTY_HINT_OBJECT_TOO_BIG = 25
    PROPERTY_HINT_NODE_PATH_VALID_TYPES = 26
    PROPERTY_HINT_SAVE_FILE = 27
    PROPERTY_HINT_GLOBAL_SAVE_FILE = 28
    PROPERTY_HINT_INT_IS_OBJECTID = 29
    PROPERTY_HINT_INT_IS_POINTER = 30
    PROPERTY_HINT_ARRAY_TYPE = 31
    PROPERTY_HINT_LOCALE_ID = 32
    PROPERTY_HINT_LOCALIZABLE_STRING = 33
    PROPERTY_HINT_NODE_TYPE = 34
    PROPERTY_HINT_HIDE_QUATERNION_EDIT = 35
    PROPERTY_HINT_PASSWORD = 36
    PROPERTY_HINT_MAX = 38


cdef enum PropertyUsageFlags:
    PROPERTY_USAGE_NONE = 0
    PROPERTY_USAGE_STORAGE = 2
    PROPERTY_USAGE_EDITOR = 4
    PROPERTY_USAGE_INTERNAL = 8
    PROPERTY_USAGE_CHECKABLE = 16
    PROPERTY_USAGE_CHECKED = 32
    PROPERTY_USAGE_GROUP = 64
    PROPERTY_USAGE_CATEGORY = 128
    PROPERTY_USAGE_SUBGROUP = 256
    PROPERTY_USAGE_CLASS_IS_BITFIELD = 512
    PROPERTY_USAGE_NO_INSTANCE_STATE = 1024
    PROPERTY_USAGE_RESTART_IF_CHANGED = 2048
    PROPERTY_USAGE_SCRIPT_VARIABLE = 4096
    PROPERTY_USAGE_STORE_IF_NULL = 8192
    PROPERTY_USAGE_UPDATE_ALL_IF_MODIFIED = 16384
    PROPERTY_USAGE_SCRIPT_DEFAULT_VALUE = 32768
    PROPERTY_USAGE_CLASS_IS_ENUM = 65536
    PROPERTY_USAGE_NIL_IS_VARIANT = 131072
    PROPERTY_USAGE_ARRAY = 262144
    PROPERTY_USAGE_ALWAYS_DUPLICATE = 524288
    PROPERTY_USAGE_NEVER_DUPLICATE = 1048576
    PROPERTY_USAGE_HIGH_END_GFX = 2097152
    PROPERTY_USAGE_NODE_PATH_FROM_SCENE_ROOT = 4194304
    PROPERTY_USAGE_RESOURCE_NOT_PERSISTENT = 8388608
    PROPERTY_USAGE_KEYING_INCREMENTS = 16777216
    PROPERTY_USAGE_DEFERRED_SET_RESOURCE = 33554432
    PROPERTY_USAGE_EDITOR_INSTANTIATE_OBJECT = 67108864
    PROPERTY_USAGE_EDITOR_BASIC_SETTING = 134217728
    PROPERTY_USAGE_READ_ONLY = 268435456
    PROPERTY_USAGE_SECRET = 536870912
    PROPERTY_USAGE_DEFAULT = 6
    PROPERTY_USAGE_NO_EDITOR = 2


cdef enum MethodFlags:
    METHOD_FLAG_NORMAL = 1
    METHOD_FLAG_EDITOR = 2
    METHOD_FLAG_CONST = 4
    METHOD_FLAG_VIRTUAL = 8
    METHOD_FLAG_VARARG = 16
    METHOD_FLAG_STATIC = 32
    METHOD_FLAG_OBJECT_CORE = 64
    METHOD_FLAGS_DEFAULT = 1


cdef enum VariantType:
    TYPE_NIL = 0
    TYPE_BOOL = 1
    TYPE_INT = 2
    TYPE_FLOAT = 3
    TYPE_STRING = 4
    TYPE_VECTOR2 = 5
    TYPE_VECTOR2I = 6
    TYPE_RECT2 = 7
    TYPE_RECT2I = 8
    TYPE_VECTOR3 = 9
    TYPE_VECTOR3I = 10
    TYPE_TRANSFORM2D = 11
    TYPE_VECTOR4 = 12
    TYPE_VECTOR4I = 13
    TYPE_PLANE = 14
    TYPE_QUATERNION = 15
    TYPE_AABB = 16
    TYPE_BASIS = 17
    TYPE_TRANSFORM3D = 18
    TYPE_PROJECTION = 19
    TYPE_COLOR = 20
    TYPE_STRING_NAME = 21
    TYPE_NODE_PATH = 22
    TYPE_RID = 23
    TYPE_OBJECT = 24
    TYPE_CALLABLE = 25
    TYPE_SIGNAL = 26
    TYPE_DICTIONARY = 27
    TYPE_ARRAY = 28
    TYPE_PACKED_BYTE_ARRAY = 29
    TYPE_PACKED_INT32_ARRAY = 30
    TYPE_PACKED_INT64_ARRAY = 31
    TYPE_PACKED_FLOAT32_ARRAY = 32
    TYPE_PACKED_FLOAT64_ARRAY = 33
    TYPE_PACKED_STRING_ARRAY = 34
    TYPE_PACKED_VECTOR2_ARRAY = 35
    TYPE_PACKED_VECTOR3_ARRAY = 36
    TYPE_PACKED_COLOR_ARRAY = 37
    TYPE_MAX = 38


cdef enum VariantOperator:
    OP_EQUAL = 0
    OP_NOT_EQUAL = 1
    OP_LESS = 2
    OP_LESS_EQUAL = 3
    OP_GREATER = 4
    OP_GREATER_EQUAL = 5
    OP_ADD = 6
    OP_SUBTRACT = 7
    OP_MULTIPLY = 8
    OP_DIVIDE = 9
    OP_NEGATE = 10
    OP_POSITIVE = 11
    OP_MODULE = 12
    OP_POWER = 13
    OP_SHIFT_LEFT = 14
    OP_SHIFT_RIGHT = 15
    OP_BIT_AND = 16
    OP_BIT_OR = 17
    OP_BIT_XOR = 18
    OP_BIT_NEGATE = 19
    OP_AND = 20
    OP_OR = 21
    OP_XOR = 22
    OP_NOT = 23
    OP_IN = 24
    OP_MAX = 25


##############################################################################
#                              Native structures                             #
##############################################################################

cdef struct gd_audio_frame:
    double left
    double right
cdef struct gd_caret_info:
    gd_rect2_t leading_caret
    gd_rect2_t trailing_caret
    uint64_t leading_direction
    uint64_t trailing_direction
cdef struct gd_glyph:
    uint64_t start
    uint64_t end
    uint8_t count
    uint8_t repeat
    uint16_t flags
    double x_off
    double y_off
    double advance
    gd_rid_t font_rid
    uint64_t font_size
    int32_t index
cdef struct gd_object_id:
    uint64_t id
cdef struct gd_physics_server2_dextension_motion_result:
    gd_vector2_t travel
    gd_vector2_t remainder
    gd_vector2_t collision_point
    gd_vector2_t collision_normal
    gd_vector2_t collider_velocity
    double collision_depth
    double collision_safe_fraction
    double collision_unsafe_fraction
    uint64_t collision_local_shape
    gd_object_id collider_id
    gd_rid_t collider
    uint64_t collider_shape
cdef struct gd_physics_server2_dextension_ray_result:
    gd_vector2_t position
    gd_vector2_t normal
    gd_rid_t rid
    gd_object_id collider_id
    gd_object_t collider
    uint64_t shape
cdef struct gd_physics_server2_dextension_shape_rest_info:
    gd_vector2_t point
    gd_vector2_t normal
    gd_rid_t rid
    gd_object_id collider_id
    uint64_t shape
    gd_vector2_t linear_velocity
cdef struct gd_physics_server2_dextension_shape_result:
    gd_rid_t rid
    gd_object_id collider_id
    gd_object_t collider
    uint64_t shape
cdef struct gd_physics_server3_dextension_motion_collision:
    gd_vector3_t position
    gd_vector3_t normal
    gd_vector3_t collider_velocity
    gd_vector3_t collider_angular_velocity
    double depth
    uint64_t local_shape
    gd_object_id collider_id
    gd_rid_t collider
    uint64_t collider_shape
cdef struct gd_physics_server3_dextension_motion_result:
    gd_vector3_t travel
    gd_vector3_t remainder
    double collision_depth
    double collision_safe_fraction
    double collision_unsafe_fraction
    gd_physics_server3_dextension_motion_collision collisions[32]
    uint64_t collision_count
cdef struct gd_physics_server3_dextension_ray_result:
    gd_vector3_t position
    gd_vector3_t normal
    gd_rid_t rid
    gd_object_id collider_id
    gd_object_t collider
    uint64_t shape
cdef struct gd_physics_server3_dextension_shape_rest_info:
    gd_vector3_t point
    gd_vector3_t normal
    gd_rid_t rid
    gd_object_id collider_id
    uint64_t shape
    gd_vector3_t linear_velocity
cdef struct gd_physics_server3_dextension_shape_result:
    gd_rid_t rid
    gd_object_id collider_id
    gd_object_t collider
    uint64_t shape
cdef struct gd_script_language_extension_profiling_info:
    gd_string_name_t signature
    uint64_t call_count
    uint64_t total_time
    uint64_t self_time
