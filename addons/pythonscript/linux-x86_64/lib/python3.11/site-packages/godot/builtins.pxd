cimport cython

# Forward declarations
cdef class GDString
cdef class Vector2
cdef class Vector2i
cdef class Rect2
cdef class Rect2i
cdef class Vector3
cdef class Vector3i
cdef class Transform2D
cdef class Vector4
cdef class Vector4i
cdef class Plane
cdef class Quaternion
cdef class AABB
cdef class Basis
cdef class Transform3D
cdef class Projection
cdef class Color
cdef class StringName
cdef class NodePath
cdef class RID
cdef class GDCallable
cdef class Signal
cdef class GDDictionary
cdef class GDArray
cdef class PackedByteArray
cdef class PackedInt32Array
cdef class PackedInt64Array
cdef class PackedFloat32Array
cdef class PackedFloat64Array
cdef class PackedStringArray
cdef class PackedVector2Array
cdef class PackedVector3Array
cdef class PackedColorArray

from .hazmat.gdextension_interface cimport *
from .hazmat.gdapi cimport *
from .classes cimport GDObject


cdef bint gd_variant_supports_py_type(object pytype)
cdef object gd_to_py_type(GDExtensionVariantType gdtype)
cdef GDExtensionVariantType py_to_gd_type(object pytype)
cdef object gd_variant_steal_into_pyobj(const gd_variant_t *gdvar)
cdef object gd_variant_copy_into_pyobj(const gd_variant_t *gdvar)
cdef bint gd_variant_steal_from_pyobj(object pyobj, gd_variant_t *gdvar)


cdef str _ENSURE_IS_GDANY_ERR_MSG
cdef str _ENSURE_IS_GDSTRING_ERR_MSG
cdef str _ENSURE_IS_STRINGNAME_ERR_MSG
cdef str _ENSURE_IS_NODEPATH_ERR_MSG


cdef inline gd_variant_t ensure_is_gdany_and_borrow_ref(object pyobj):
    """
    /!\ ensure_is_gdany_and_borrow_ref stole the reference from pyobj !
    Most of the time this is more like sharing: the variant object is only
    use in the body of the function that called `ensure_is_gdany_and_borrow_ref`,
    then it is discarded without using it destructor (hence pyobj is not
    affected by this steal)
    """
    cdef gd_variant_t ret
    if not gd_variant_steal_from_pyobj(pyobj, &ret):
        raise TypeError(_ENSURE_IS_GDANY_ERR_MSG.format(repr(pyobj)))
    return ret


cdef inline GDString ensure_is_gdstring(object gdstring_or_pystr):
    cdef GDString gdstring_converted
    try:
        return <GDString?>gdstring_or_pystr
    except TypeError:
        try:
            return GDString(gdstring_or_pystr)
        except TypeError:
            raise TypeError(_ENSURE_IS_GDSTRING_ERR_MSG.format(repr(gdstring_or_pystr)))


cdef inline StringName ensure_is_stringname(object stringname_or_pystr):
    cdef StringName stringname_converted
    try:
        return <StringName?>stringname_or_pystr
    except TypeError:
        try:
            return StringName(stringname_or_pystr)
        except TypeError:
            raise TypeError(_ENSURE_IS_STRINGNAME_ERR_MSG.format(repr(stringname_or_pystr)))


cdef inline NodePath ensure_is_nodepath(object nodepath_or_pystr):
    cdef NodePath NodePath_converted
    try:
        return <NodePath?>nodepath_or_pystr
    except TypeError:
        try:
            return NodePath(nodepath_or_pystr)
        except TypeError:
            raise TypeError(_ENSURE_IS_NODEPATH_ERR_MSG.format(repr(nodepath_or_pystr)))



@cython.freelist(8)
@cython.final
cdef class GDString:
    cdef gd_string_t _gd_data

    cpdef inline GDString clone(self):
        cdef GDString obj = GDString.__new__(GDString)
        obj._gd_data = gd_string_new_from_string(&self._gd_data)
        return obj


    @staticmethod
    cdef inline GDString new():
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_new()
        return ret
    cdef inline str to_pystr(self):
        return gd_string_to_pystr(&self._gd_data)
    cpdef inline uint64_t casecmp_to(self, GDString to):
        cdef uint64_t ret = gd_string_casecmp_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline uint64_t nocasecmp_to(self, GDString to):
        cdef uint64_t ret = gd_string_nocasecmp_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline uint64_t naturalcasecmp_to(self, GDString to):
        cdef uint64_t ret = gd_string_naturalcasecmp_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline uint64_t naturalnocasecmp_to(self, GDString to):
        cdef uint64_t ret = gd_string_naturalnocasecmp_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline uint64_t length(self):
        cdef uint64_t ret = gd_string_length(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString substr(self, uint64_t from_, uint64_t len):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_substr(
            &self._gd_data,
            from_,
            len,
        )
        return ret

    cpdef inline GDString get_slice(self, GDString delimiter, uint64_t slice):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_get_slice(
            &self._gd_data,
            &delimiter._gd_data,
            slice,
        )
        return ret

    cpdef inline GDString get_slicec(self, uint64_t delimiter, uint64_t slice):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_get_slicec(
            &self._gd_data,
            delimiter,
            slice,
        )
        return ret

    cpdef inline uint64_t get_slice_count(self, GDString delimiter):
        cdef uint64_t ret = gd_string_get_slice_count(
            &self._gd_data,
            &delimiter._gd_data,
        )
        return ret

    cpdef inline uint64_t find(self, GDString what, uint64_t from_):
        cdef uint64_t ret = gd_string_find(
            &self._gd_data,
            &what._gd_data,
            from_,
        )
        return ret

    cpdef inline uint64_t count(self, GDString what, uint64_t from_, uint64_t to):
        cdef uint64_t ret = gd_string_count(
            &self._gd_data,
            &what._gd_data,
            from_,
            to,
        )
        return ret

    cpdef inline uint64_t countn(self, GDString what, uint64_t from_, uint64_t to):
        cdef uint64_t ret = gd_string_countn(
            &self._gd_data,
            &what._gd_data,
            from_,
            to,
        )
        return ret

    cpdef inline uint64_t findn(self, GDString what, uint64_t from_):
        cdef uint64_t ret = gd_string_findn(
            &self._gd_data,
            &what._gd_data,
            from_,
        )
        return ret

    cpdef inline uint64_t rfind(self, GDString what, uint64_t from_):
        cdef uint64_t ret = gd_string_rfind(
            &self._gd_data,
            &what._gd_data,
            from_,
        )
        return ret

    cpdef inline uint64_t rfindn(self, GDString what, uint64_t from_):
        cdef uint64_t ret = gd_string_rfindn(
            &self._gd_data,
            &what._gd_data,
            from_,
        )
        return ret

    cpdef inline uint8_t match(self, GDString expr):
        cdef uint8_t ret = gd_string_match(
            &self._gd_data,
            &expr._gd_data,
        )
        return ret

    cpdef inline uint8_t matchn(self, GDString expr):
        cdef uint8_t ret = gd_string_matchn(
            &self._gd_data,
            &expr._gd_data,
        )
        return ret

    cpdef inline uint8_t begins_with(self, GDString text):
        cdef uint8_t ret = gd_string_begins_with(
            &self._gd_data,
            &text._gd_data,
        )
        return ret

    cpdef inline uint8_t ends_with(self, GDString text):
        cdef uint8_t ret = gd_string_ends_with(
            &self._gd_data,
            &text._gd_data,
        )
        return ret

    cpdef inline uint8_t is_subsequence_of(self, GDString text):
        cdef uint8_t ret = gd_string_is_subsequence_of(
            &self._gd_data,
            &text._gd_data,
        )
        return ret

    cpdef inline uint8_t is_subsequence_ofn(self, GDString text):
        cdef uint8_t ret = gd_string_is_subsequence_ofn(
            &self._gd_data,
            &text._gd_data,
        )
        return ret

    cpdef inline PackedStringArray bigrams(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedStringArray ret = PackedStringArray.__new__(PackedStringArray)
        ret._gd_data = gd_string_bigrams(
            &self._gd_data,
        )
        return ret

    cpdef inline double similarity(self, GDString text):
        cdef double ret = gd_string_similarity(
            &self._gd_data,
            &text._gd_data,
        )
        return ret

    cpdef inline GDString format(self, object values, GDString placeholder):
        raise NotImplementedError  # TODO

    cpdef inline GDString replace(self, GDString what, GDString forwhat):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_replace(
            &self._gd_data,
            &what._gd_data,
            &forwhat._gd_data,
        )
        return ret

    cpdef inline GDString replacen(self, GDString what, GDString forwhat):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_replacen(
            &self._gd_data,
            &what._gd_data,
            &forwhat._gd_data,
        )
        return ret

    cpdef inline GDString repeat(self, uint64_t count):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_repeat(
            &self._gd_data,
            count,
        )
        return ret

    cpdef inline GDString insert(self, uint64_t position, GDString what):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_insert(
            &self._gd_data,
            position,
            &what._gd_data,
        )
        return ret

    cpdef inline GDString erase(self, uint64_t position, uint64_t chars):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_erase(
            &self._gd_data,
            position,
            chars,
        )
        return ret

    cpdef inline GDString capitalize(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_capitalize(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString to_camel_case(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_to_camel_case(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString to_pascal_case(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_to_pascal_case(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString to_snake_case(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_to_snake_case(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedStringArray split(self, GDString delimiter, uint8_t allow_empty, uint64_t maxsplit):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedStringArray ret = PackedStringArray.__new__(PackedStringArray)
        ret._gd_data = gd_string_split(
            &self._gd_data,
            &delimiter._gd_data,
            allow_empty,
            maxsplit,
        )
        return ret

    cpdef inline PackedStringArray rsplit(self, GDString delimiter, uint8_t allow_empty, uint64_t maxsplit):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedStringArray ret = PackedStringArray.__new__(PackedStringArray)
        ret._gd_data = gd_string_rsplit(
            &self._gd_data,
            &delimiter._gd_data,
            allow_empty,
            maxsplit,
        )
        return ret

    cpdef inline PackedFloat64Array split_floats(self, GDString delimiter, uint8_t allow_empty):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedFloat64Array ret = PackedFloat64Array.__new__(PackedFloat64Array)
        ret._gd_data = gd_string_split_floats(
            &self._gd_data,
            &delimiter._gd_data,
            allow_empty,
        )
        return ret

    cpdef inline GDString join(self, PackedStringArray parts):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_join(
            &self._gd_data,
            &parts._gd_data,
        )
        return ret

    cpdef inline GDString to_upper(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_to_upper(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString to_lower(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_to_lower(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString left(self, uint64_t length):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_left(
            &self._gd_data,
            length,
        )
        return ret

    cpdef inline GDString right(self, uint64_t length):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_right(
            &self._gd_data,
            length,
        )
        return ret

    cpdef inline GDString strip_edges(self, uint8_t left, uint8_t right):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_strip_edges(
            &self._gd_data,
            left,
            right,
        )
        return ret

    cpdef inline GDString strip_escapes(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_strip_escapes(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString lstrip(self, GDString chars):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_lstrip(
            &self._gd_data,
            &chars._gd_data,
        )
        return ret

    cpdef inline GDString rstrip(self, GDString chars):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_rstrip(
            &self._gd_data,
            &chars._gd_data,
        )
        return ret

    cpdef inline GDString get_extension(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_get_extension(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString get_basename(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_get_basename(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString path_join(self, GDString file):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_path_join(
            &self._gd_data,
            &file._gd_data,
        )
        return ret

    cpdef inline uint64_t unicode_at(self, uint64_t at):
        cdef uint64_t ret = gd_string_unicode_at(
            &self._gd_data,
            at,
        )
        return ret

    cpdef inline GDString indent(self, GDString prefix):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_indent(
            &self._gd_data,
            &prefix._gd_data,
        )
        return ret

    cpdef inline GDString dedent(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_dedent(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t hash(self):
        cdef uint64_t ret = gd_string_hash(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString md5_text(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_md5_text(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString sha1_text(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_sha1_text(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString sha256_text(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_sha256_text(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedByteArray md5_buffer(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_md5_buffer(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedByteArray sha1_buffer(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_sha1_buffer(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedByteArray sha256_buffer(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_sha256_buffer(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_empty(self):
        cdef uint8_t ret = gd_string_is_empty(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t contains(self, GDString what):
        cdef uint8_t ret = gd_string_contains(
            &self._gd_data,
            &what._gd_data,
        )
        return ret

    cpdef inline uint8_t is_absolute_path(self):
        cdef uint8_t ret = gd_string_is_absolute_path(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_relative_path(self):
        cdef uint8_t ret = gd_string_is_relative_path(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString simplify_path(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_simplify_path(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString get_base_dir(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_get_base_dir(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString get_file(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_get_file(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString xml_escape(self, uint8_t escape_quotes):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_xml_escape(
            &self._gd_data,
            escape_quotes,
        )
        return ret

    cpdef inline GDString xml_unescape(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_xml_unescape(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString uri_encode(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_uri_encode(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString uri_decode(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_uri_decode(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString c_escape(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_c_escape(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString c_unescape(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_c_unescape(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString json_escape(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_json_escape(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString validate_node_name(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_validate_node_name(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString validate_filename(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_validate_filename(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_valid_identifier(self):
        cdef uint8_t ret = gd_string_is_valid_identifier(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_valid_int(self):
        cdef uint8_t ret = gd_string_is_valid_int(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_valid_float(self):
        cdef uint8_t ret = gd_string_is_valid_float(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_valid_hex_number(self, uint8_t with_prefix):
        cdef uint8_t ret = gd_string_is_valid_hex_number(
            &self._gd_data,
            with_prefix,
        )
        return ret

    cpdef inline uint8_t is_valid_html_color(self):
        cdef uint8_t ret = gd_string_is_valid_html_color(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_valid_ip_address(self):
        cdef uint8_t ret = gd_string_is_valid_ip_address(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_valid_filename(self):
        cdef uint8_t ret = gd_string_is_valid_filename(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t to_int(self):
        cdef uint64_t ret = gd_string_to_int(
            &self._gd_data,
        )
        return ret

    cpdef inline double to_float(self):
        cdef double ret = gd_string_to_float(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t hex_to_int(self):
        cdef uint64_t ret = gd_string_hex_to_int(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t bin_to_int(self):
        cdef uint64_t ret = gd_string_bin_to_int(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString lpad(self, uint64_t min_length, GDString character):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_lpad(
            &self._gd_data,
            min_length,
            &character._gd_data,
        )
        return ret

    cpdef inline GDString rpad(self, uint64_t min_length, GDString character):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_rpad(
            &self._gd_data,
            min_length,
            &character._gd_data,
        )
        return ret

    cpdef inline GDString pad_decimals(self, uint64_t digits):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_pad_decimals(
            &self._gd_data,
            digits,
        )
        return ret

    cpdef inline GDString pad_zeros(self, uint64_t digits):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_pad_zeros(
            &self._gd_data,
            digits,
        )
        return ret

    cpdef inline GDString trim_prefix(self, GDString prefix):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_trim_prefix(
            &self._gd_data,
            &prefix._gd_data,
        )
        return ret

    cpdef inline GDString trim_suffix(self, GDString suffix):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_trim_suffix(
            &self._gd_data,
            &suffix._gd_data,
        )
        return ret

    cpdef inline PackedByteArray to_ascii_buffer(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_to_ascii_buffer(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedByteArray to_utf8_buffer(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_to_utf8_buffer(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedByteArray to_utf16_buffer(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_to_utf16_buffer(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedByteArray to_utf32_buffer(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_to_utf32_buffer(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedByteArray hex_decode(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_hex_decode(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedByteArray to_wchar_buffer(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_to_wchar_buffer(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString num_scientific(self, double number):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_num_scientific(
            &self._gd_data,
            number,
        )
        return ret

    cpdef inline GDString num(self, double number, uint64_t decimals):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_num(
            &self._gd_data,
            number,
            decimals,
        )
        return ret

    cpdef inline GDString num_int64(self, uint64_t number, uint64_t base, uint8_t capitalize_hex):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_num_int64(
            &self._gd_data,
            number,
            base,
            capitalize_hex,
        )
        return ret

    cpdef inline GDString num_uint64(self, uint64_t number, uint64_t base, uint8_t capitalize_hex):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_num_uint64(
            &self._gd_data,
            number,
            base,
            capitalize_hex,
        )
        return ret

    cpdef inline GDString chr(self, uint64_t char_):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_chr(
            &self._gd_data,
            char_,
        )
        return ret

    cpdef inline GDString humanize_size(self, uint64_t size):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_humanize_size(
            &self._gd_data,
            size,
        )
        return ret

    cdef inline GDString _getitem(self, GDExtensionInt index):
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data =  gd_string_indexed_getter(&self._gd_data, index)
        return ret

    cdef inline void _setitem(self, GDExtensionInt index, GDString value):
        gd_string_indexed_setter(&self._gd_data, index, &value._gd_data)





@cython.freelist(8)
@cython.final
cdef class Vector2:
    cdef gd_vector2_t _gd_data

    cpdef inline Vector2 clone(self):
        cdef Vector2 obj = Vector2.__new__(Vector2)
        obj._gd_data = self._gd_data
        return obj


    @staticmethod
    cdef inline Vector2 new():
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_new()
        return ret
    
    
    cpdef inline double angle(self):
        cdef double ret = gd_vector2_angle(
            &self._gd_data,
        )
        return ret

    cpdef inline double angle_to(self, Vector2 to):
        cdef double ret = gd_vector2_angle_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline double angle_to_point(self, Vector2 to):
        cdef double ret = gd_vector2_angle_to_point(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline Vector2 direction_to(self, Vector2 to):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_direction_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline double distance_to(self, Vector2 to):
        cdef double ret = gd_vector2_distance_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline double distance_squared_to(self, Vector2 to):
        cdef double ret = gd_vector2_distance_squared_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline double length(self):
        cdef double ret = gd_vector2_length(
            &self._gd_data,
        )
        return ret

    cpdef inline double length_squared(self):
        cdef double ret = gd_vector2_length_squared(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector2 limit_length(self, double length):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_limit_length(
            &self._gd_data,
            length,
        )
        return ret

    cpdef inline Vector2 normalized(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_normalized(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_normalized(self):
        cdef uint8_t ret = gd_vector2_is_normalized(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_equal_approx(self, Vector2 to):
        cdef uint8_t ret = gd_vector2_is_equal_approx(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline uint8_t is_zero_approx(self):
        cdef uint8_t ret = gd_vector2_is_zero_approx(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_finite(self):
        cdef uint8_t ret = gd_vector2_is_finite(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector2 posmod(self, double mod):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_posmod(
            &self._gd_data,
            mod,
        )
        return ret

    cpdef inline Vector2 posmodv(self, Vector2 modv):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_posmodv(
            &self._gd_data,
            &modv._gd_data,
        )
        return ret

    cpdef inline Vector2 project(self, Vector2 b):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_project(
            &self._gd_data,
            &b._gd_data,
        )
        return ret

    cpdef inline Vector2 lerp(self, Vector2 to, double weight):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_lerp(
            &self._gd_data,
            &to._gd_data,
            weight,
        )
        return ret

    cpdef inline Vector2 slerp(self, Vector2 to, double weight):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_slerp(
            &self._gd_data,
            &to._gd_data,
            weight,
        )
        return ret

    cpdef inline Vector2 cubic_interpolate(self, Vector2 b, Vector2 pre_a, Vector2 post_b, double weight):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_cubic_interpolate(
            &self._gd_data,
            &b._gd_data,
            &pre_a._gd_data,
            &post_b._gd_data,
            weight,
        )
        return ret

    cpdef inline Vector2 cubic_interpolate_in_time(self, Vector2 b, Vector2 pre_a, Vector2 post_b, double weight, double b_t, double pre_a_t, double post_b_t):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_cubic_interpolate_in_time(
            &self._gd_data,
            &b._gd_data,
            &pre_a._gd_data,
            &post_b._gd_data,
            weight,
            b_t,
            pre_a_t,
            post_b_t,
        )
        return ret

    cpdef inline Vector2 bezier_interpolate(self, Vector2 control_1, Vector2 control_2, Vector2 end, double t):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_bezier_interpolate(
            &self._gd_data,
            &control_1._gd_data,
            &control_2._gd_data,
            &end._gd_data,
            t,
        )
        return ret

    cpdef inline Vector2 bezier_derivative(self, Vector2 control_1, Vector2 control_2, Vector2 end, double t):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_bezier_derivative(
            &self._gd_data,
            &control_1._gd_data,
            &control_2._gd_data,
            &end._gd_data,
            t,
        )
        return ret

    cpdef inline uint64_t max_axis_index(self):
        cdef uint64_t ret = gd_vector2_max_axis_index(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t min_axis_index(self):
        cdef uint64_t ret = gd_vector2_min_axis_index(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector2 move_toward(self, Vector2 to, double delta):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_move_toward(
            &self._gd_data,
            &to._gd_data,
            delta,
        )
        return ret

    cpdef inline Vector2 rotated(self, double angle):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_rotated(
            &self._gd_data,
            angle,
        )
        return ret

    cpdef inline Vector2 orthogonal(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_orthogonal(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector2 floor(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_floor(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector2 ceil(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_ceil(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector2 round(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_round(
            &self._gd_data,
        )
        return ret

    cpdef inline double aspect(self):
        cdef double ret = gd_vector2_aspect(
            &self._gd_data,
        )
        return ret

    cpdef inline double dot(self, Vector2 with_):
        cdef double ret = gd_vector2_dot(
            &self._gd_data,
            &with_._gd_data,
        )
        return ret

    cpdef inline Vector2 slide(self, Vector2 n):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_slide(
            &self._gd_data,
            &n._gd_data,
        )
        return ret

    cpdef inline Vector2 bounce(self, Vector2 n):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_bounce(
            &self._gd_data,
            &n._gd_data,
        )
        return ret

    cpdef inline Vector2 reflect(self, Vector2 n):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_reflect(
            &self._gd_data,
            &n._gd_data,
        )
        return ret

    cpdef inline double cross(self, Vector2 with_):
        cdef double ret = gd_vector2_cross(
            &self._gd_data,
            &with_._gd_data,
        )
        return ret

    cpdef inline Vector2 abs(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_abs(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector2 sign(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_sign(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector2 clamp(self, Vector2 min, Vector2 max):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_clamp(
            &self._gd_data,
            &min._gd_data,
            &max._gd_data,
        )
        return ret

    cpdef inline Vector2 snapped(self, Vector2 step):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_snapped(
            &self._gd_data,
            &step._gd_data,
        )
        return ret

    cpdef inline Vector2 from_angle(self, double angle):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector2_from_angle(
            &self._gd_data,
            angle,
        )
        return ret

    cdef inline double _getitem(self, GDExtensionInt index):
        return gd_vector2_indexed_getter(&self._gd_data, index)

    cdef inline void _setitem(self, GDExtensionInt index, double value):
        gd_vector2_indexed_setter(&self._gd_data, index, value)





@cython.freelist(8)
@cython.final
cdef class Vector2i:
    cdef gd_vector2i_t _gd_data

    cpdef inline Vector2i clone(self):
        cdef Vector2i obj = Vector2i.__new__(Vector2i)
        obj._gd_data = self._gd_data
        return obj


    @staticmethod
    cdef inline Vector2i new():
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2i ret = Vector2i.__new__(Vector2i)
        ret._gd_data = gd_vector2i_new()
        return ret
    
    
    cpdef inline double aspect(self):
        cdef double ret = gd_vector2i_aspect(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t max_axis_index(self):
        cdef uint64_t ret = gd_vector2i_max_axis_index(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t min_axis_index(self):
        cdef uint64_t ret = gd_vector2i_min_axis_index(
            &self._gd_data,
        )
        return ret

    cpdef inline double length(self):
        cdef double ret = gd_vector2i_length(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t length_squared(self):
        cdef uint64_t ret = gd_vector2i_length_squared(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector2i sign(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2i ret = Vector2i.__new__(Vector2i)
        ret._gd_data = gd_vector2i_sign(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector2i abs(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2i ret = Vector2i.__new__(Vector2i)
        ret._gd_data = gd_vector2i_abs(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector2i clamp(self, Vector2i min, Vector2i max):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2i ret = Vector2i.__new__(Vector2i)
        ret._gd_data = gd_vector2i_clamp(
            &self._gd_data,
            &min._gd_data,
            &max._gd_data,
        )
        return ret

    cpdef inline Vector2i snapped(self, Vector2i step):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2i ret = Vector2i.__new__(Vector2i)
        ret._gd_data = gd_vector2i_snapped(
            &self._gd_data,
            &step._gd_data,
        )
        return ret

    cdef inline uint64_t _getitem(self, GDExtensionInt index):
        return gd_vector2i_indexed_getter(&self._gd_data, index)

    cdef inline void _setitem(self, GDExtensionInt index, uint64_t value):
        gd_vector2i_indexed_setter(&self._gd_data, index, value)





@cython.freelist(8)
@cython.final
cdef class Rect2:
    cdef gd_rect2_t _gd_data

    cpdef inline Rect2 clone(self):
        cdef Rect2 obj = Rect2.__new__(Rect2)
        obj._gd_data = self._gd_data
        return obj


    @staticmethod
    cdef inline Rect2 new():
        # Call to __new__ bypasses __init__ constructor
        cdef Rect2 ret = Rect2.__new__(Rect2)
        ret._gd_data = gd_rect2_new()
        return ret
    
    
    cdef inline Vector2 get_end(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_rect2_get_end(&self._gd_data)
        return ret
    cdef inline void set_end(self, Vector2 val):
        gd_rect2_set_end(&self._gd_data, &val._gd_data)

    cpdef inline Vector2 get_center(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_rect2_get_center(
            &self._gd_data,
        )
        return ret

    cpdef inline double get_area(self):
        cdef double ret = gd_rect2_get_area(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t has_area(self):
        cdef uint8_t ret = gd_rect2_has_area(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t has_point(self, Vector2 point):
        cdef uint8_t ret = gd_rect2_has_point(
            &self._gd_data,
            &point._gd_data,
        )
        return ret

    cpdef inline uint8_t is_equal_approx(self, Rect2 rect):
        cdef uint8_t ret = gd_rect2_is_equal_approx(
            &self._gd_data,
            &rect._gd_data,
        )
        return ret

    cpdef inline uint8_t is_finite(self):
        cdef uint8_t ret = gd_rect2_is_finite(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t intersects(self, Rect2 b, uint8_t include_borders):
        cdef uint8_t ret = gd_rect2_intersects(
            &self._gd_data,
            &b._gd_data,
            include_borders,
        )
        return ret

    cpdef inline uint8_t encloses(self, Rect2 b):
        cdef uint8_t ret = gd_rect2_encloses(
            &self._gd_data,
            &b._gd_data,
        )
        return ret

    cpdef inline Rect2 intersection(self, Rect2 b):
        # Call to __new__ bypasses __init__ constructor
        cdef Rect2 ret = Rect2.__new__(Rect2)
        ret._gd_data = gd_rect2_intersection(
            &self._gd_data,
            &b._gd_data,
        )
        return ret

    cpdef inline Rect2 merge(self, Rect2 b):
        # Call to __new__ bypasses __init__ constructor
        cdef Rect2 ret = Rect2.__new__(Rect2)
        ret._gd_data = gd_rect2_merge(
            &self._gd_data,
            &b._gd_data,
        )
        return ret

    cpdef inline Rect2 expand(self, Vector2 to):
        # Call to __new__ bypasses __init__ constructor
        cdef Rect2 ret = Rect2.__new__(Rect2)
        ret._gd_data = gd_rect2_expand(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline Rect2 grow(self, double amount):
        # Call to __new__ bypasses __init__ constructor
        cdef Rect2 ret = Rect2.__new__(Rect2)
        ret._gd_data = gd_rect2_grow(
            &self._gd_data,
            amount,
        )
        return ret

    cpdef inline Rect2 grow_side(self, uint64_t side, double amount):
        # Call to __new__ bypasses __init__ constructor
        cdef Rect2 ret = Rect2.__new__(Rect2)
        ret._gd_data = gd_rect2_grow_side(
            &self._gd_data,
            side,
            amount,
        )
        return ret

    cpdef inline Rect2 grow_individual(self, double left, double top, double right, double bottom):
        # Call to __new__ bypasses __init__ constructor
        cdef Rect2 ret = Rect2.__new__(Rect2)
        ret._gd_data = gd_rect2_grow_individual(
            &self._gd_data,
            left,
            top,
            right,
            bottom,
        )
        return ret

    cpdef inline Rect2 abs(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Rect2 ret = Rect2.__new__(Rect2)
        ret._gd_data = gd_rect2_abs(
            &self._gd_data,
        )
        return ret




@cython.freelist(8)
@cython.final
cdef class Rect2i:
    cdef gd_rect2i_t _gd_data

    cpdef inline Rect2i clone(self):
        cdef Rect2i obj = Rect2i.__new__(Rect2i)
        obj._gd_data = self._gd_data
        return obj


    @staticmethod
    cdef inline Rect2i new():
        # Call to __new__ bypasses __init__ constructor
        cdef Rect2i ret = Rect2i.__new__(Rect2i)
        ret._gd_data = gd_rect2i_new()
        return ret
    
    
    cdef inline Vector2i get_end(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2i ret = Vector2i.__new__(Vector2i)
        ret._gd_data = gd_rect2i_get_end(&self._gd_data)
        return ret
    cdef inline void set_end(self, Vector2i val):
        gd_rect2i_set_end(&self._gd_data, &val._gd_data)

    cpdef inline Vector2i get_center(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2i ret = Vector2i.__new__(Vector2i)
        ret._gd_data = gd_rect2i_get_center(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t get_area(self):
        cdef uint64_t ret = gd_rect2i_get_area(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t has_area(self):
        cdef uint8_t ret = gd_rect2i_has_area(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t has_point(self, Vector2i point):
        cdef uint8_t ret = gd_rect2i_has_point(
            &self._gd_data,
            &point._gd_data,
        )
        return ret

    cpdef inline uint8_t intersects(self, Rect2i b):
        cdef uint8_t ret = gd_rect2i_intersects(
            &self._gd_data,
            &b._gd_data,
        )
        return ret

    cpdef inline uint8_t encloses(self, Rect2i b):
        cdef uint8_t ret = gd_rect2i_encloses(
            &self._gd_data,
            &b._gd_data,
        )
        return ret

    cpdef inline Rect2i intersection(self, Rect2i b):
        # Call to __new__ bypasses __init__ constructor
        cdef Rect2i ret = Rect2i.__new__(Rect2i)
        ret._gd_data = gd_rect2i_intersection(
            &self._gd_data,
            &b._gd_data,
        )
        return ret

    cpdef inline Rect2i merge(self, Rect2i b):
        # Call to __new__ bypasses __init__ constructor
        cdef Rect2i ret = Rect2i.__new__(Rect2i)
        ret._gd_data = gd_rect2i_merge(
            &self._gd_data,
            &b._gd_data,
        )
        return ret

    cpdef inline Rect2i expand(self, Vector2i to):
        # Call to __new__ bypasses __init__ constructor
        cdef Rect2i ret = Rect2i.__new__(Rect2i)
        ret._gd_data = gd_rect2i_expand(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline Rect2i grow(self, uint64_t amount):
        # Call to __new__ bypasses __init__ constructor
        cdef Rect2i ret = Rect2i.__new__(Rect2i)
        ret._gd_data = gd_rect2i_grow(
            &self._gd_data,
            amount,
        )
        return ret

    cpdef inline Rect2i grow_side(self, uint64_t side, uint64_t amount):
        # Call to __new__ bypasses __init__ constructor
        cdef Rect2i ret = Rect2i.__new__(Rect2i)
        ret._gd_data = gd_rect2i_grow_side(
            &self._gd_data,
            side,
            amount,
        )
        return ret

    cpdef inline Rect2i grow_individual(self, uint64_t left, uint64_t top, uint64_t right, uint64_t bottom):
        # Call to __new__ bypasses __init__ constructor
        cdef Rect2i ret = Rect2i.__new__(Rect2i)
        ret._gd_data = gd_rect2i_grow_individual(
            &self._gd_data,
            left,
            top,
            right,
            bottom,
        )
        return ret

    cpdef inline Rect2i abs(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Rect2i ret = Rect2i.__new__(Rect2i)
        ret._gd_data = gd_rect2i_abs(
            &self._gd_data,
        )
        return ret




@cython.freelist(8)
@cython.final
cdef class Vector3:
    cdef gd_vector3_t _gd_data

    cpdef inline Vector3 clone(self):
        cdef Vector3 obj = Vector3.__new__(Vector3)
        obj._gd_data = self._gd_data
        return obj


    @staticmethod
    cdef inline Vector3 new():
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_new()
        return ret
    
    
    
    cpdef inline uint64_t min_axis_index(self):
        cdef uint64_t ret = gd_vector3_min_axis_index(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t max_axis_index(self):
        cdef uint64_t ret = gd_vector3_max_axis_index(
            &self._gd_data,
        )
        return ret

    cpdef inline double angle_to(self, Vector3 to):
        cdef double ret = gd_vector3_angle_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline double signed_angle_to(self, Vector3 to, Vector3 axis):
        cdef double ret = gd_vector3_signed_angle_to(
            &self._gd_data,
            &to._gd_data,
            &axis._gd_data,
        )
        return ret

    cpdef inline Vector3 direction_to(self, Vector3 to):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_direction_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline double distance_to(self, Vector3 to):
        cdef double ret = gd_vector3_distance_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline double distance_squared_to(self, Vector3 to):
        cdef double ret = gd_vector3_distance_squared_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline double length(self):
        cdef double ret = gd_vector3_length(
            &self._gd_data,
        )
        return ret

    cpdef inline double length_squared(self):
        cdef double ret = gd_vector3_length_squared(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector3 limit_length(self, double length):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_limit_length(
            &self._gd_data,
            length,
        )
        return ret

    cpdef inline Vector3 normalized(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_normalized(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_normalized(self):
        cdef uint8_t ret = gd_vector3_is_normalized(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_equal_approx(self, Vector3 to):
        cdef uint8_t ret = gd_vector3_is_equal_approx(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline uint8_t is_zero_approx(self):
        cdef uint8_t ret = gd_vector3_is_zero_approx(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_finite(self):
        cdef uint8_t ret = gd_vector3_is_finite(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector3 inverse(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_inverse(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector3 clamp(self, Vector3 min, Vector3 max):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_clamp(
            &self._gd_data,
            &min._gd_data,
            &max._gd_data,
        )
        return ret

    cpdef inline Vector3 snapped(self, Vector3 step):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_snapped(
            &self._gd_data,
            &step._gd_data,
        )
        return ret

    cpdef inline Vector3 rotated(self, Vector3 axis, double angle):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_rotated(
            &self._gd_data,
            &axis._gd_data,
            angle,
        )
        return ret

    cpdef inline Vector3 lerp(self, Vector3 to, double weight):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_lerp(
            &self._gd_data,
            &to._gd_data,
            weight,
        )
        return ret

    cpdef inline Vector3 slerp(self, Vector3 to, double weight):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_slerp(
            &self._gd_data,
            &to._gd_data,
            weight,
        )
        return ret

    cpdef inline Vector3 cubic_interpolate(self, Vector3 b, Vector3 pre_a, Vector3 post_b, double weight):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_cubic_interpolate(
            &self._gd_data,
            &b._gd_data,
            &pre_a._gd_data,
            &post_b._gd_data,
            weight,
        )
        return ret

    cpdef inline Vector3 cubic_interpolate_in_time(self, Vector3 b, Vector3 pre_a, Vector3 post_b, double weight, double b_t, double pre_a_t, double post_b_t):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_cubic_interpolate_in_time(
            &self._gd_data,
            &b._gd_data,
            &pre_a._gd_data,
            &post_b._gd_data,
            weight,
            b_t,
            pre_a_t,
            post_b_t,
        )
        return ret

    cpdef inline Vector3 bezier_interpolate(self, Vector3 control_1, Vector3 control_2, Vector3 end, double t):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_bezier_interpolate(
            &self._gd_data,
            &control_1._gd_data,
            &control_2._gd_data,
            &end._gd_data,
            t,
        )
        return ret

    cpdef inline Vector3 bezier_derivative(self, Vector3 control_1, Vector3 control_2, Vector3 end, double t):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_bezier_derivative(
            &self._gd_data,
            &control_1._gd_data,
            &control_2._gd_data,
            &end._gd_data,
            t,
        )
        return ret

    cpdef inline Vector3 move_toward(self, Vector3 to, double delta):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_move_toward(
            &self._gd_data,
            &to._gd_data,
            delta,
        )
        return ret

    cpdef inline double dot(self, Vector3 with_):
        cdef double ret = gd_vector3_dot(
            &self._gd_data,
            &with_._gd_data,
        )
        return ret

    cpdef inline Vector3 cross(self, Vector3 with_):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_cross(
            &self._gd_data,
            &with_._gd_data,
        )
        return ret

    cpdef inline Basis outer(self, Vector3 with_):
        # Call to __new__ bypasses __init__ constructor
        cdef Basis ret = Basis.__new__(Basis)
        ret._gd_data = gd_vector3_outer(
            &self._gd_data,
            &with_._gd_data,
        )
        return ret

    cpdef inline Vector3 abs(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_abs(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector3 floor(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_floor(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector3 ceil(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_ceil(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector3 round(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_round(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector3 posmod(self, double mod):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_posmod(
            &self._gd_data,
            mod,
        )
        return ret

    cpdef inline Vector3 posmodv(self, Vector3 modv):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_posmodv(
            &self._gd_data,
            &modv._gd_data,
        )
        return ret

    cpdef inline Vector3 project(self, Vector3 b):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_project(
            &self._gd_data,
            &b._gd_data,
        )
        return ret

    cpdef inline Vector3 slide(self, Vector3 n):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_slide(
            &self._gd_data,
            &n._gd_data,
        )
        return ret

    cpdef inline Vector3 bounce(self, Vector3 n):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_bounce(
            &self._gd_data,
            &n._gd_data,
        )
        return ret

    cpdef inline Vector3 reflect(self, Vector3 n):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_reflect(
            &self._gd_data,
            &n._gd_data,
        )
        return ret

    cpdef inline Vector3 sign(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_sign(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector2 octahedron_encode(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_vector3_octahedron_encode(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector3 octahedron_decode(self, Vector2 uv):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_vector3_octahedron_decode(
            &self._gd_data,
            &uv._gd_data,
        )
        return ret

    cdef inline double _getitem(self, GDExtensionInt index):
        return gd_vector3_indexed_getter(&self._gd_data, index)

    cdef inline void _setitem(self, GDExtensionInt index, double value):
        gd_vector3_indexed_setter(&self._gd_data, index, value)





@cython.freelist(8)
@cython.final
cdef class Vector3i:
    cdef gd_vector3i_t _gd_data

    cpdef inline Vector3i clone(self):
        cdef Vector3i obj = Vector3i.__new__(Vector3i)
        obj._gd_data = self._gd_data
        return obj


    @staticmethod
    cdef inline Vector3i new():
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3i ret = Vector3i.__new__(Vector3i)
        ret._gd_data = gd_vector3i_new()
        return ret
    
    
    
    cpdef inline uint64_t min_axis_index(self):
        cdef uint64_t ret = gd_vector3i_min_axis_index(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t max_axis_index(self):
        cdef uint64_t ret = gd_vector3i_max_axis_index(
            &self._gd_data,
        )
        return ret

    cpdef inline double length(self):
        cdef double ret = gd_vector3i_length(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t length_squared(self):
        cdef uint64_t ret = gd_vector3i_length_squared(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector3i sign(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3i ret = Vector3i.__new__(Vector3i)
        ret._gd_data = gd_vector3i_sign(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector3i abs(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3i ret = Vector3i.__new__(Vector3i)
        ret._gd_data = gd_vector3i_abs(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector3i clamp(self, Vector3i min, Vector3i max):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3i ret = Vector3i.__new__(Vector3i)
        ret._gd_data = gd_vector3i_clamp(
            &self._gd_data,
            &min._gd_data,
            &max._gd_data,
        )
        return ret

    cpdef inline Vector3i snapped(self, Vector3i step):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3i ret = Vector3i.__new__(Vector3i)
        ret._gd_data = gd_vector3i_snapped(
            &self._gd_data,
            &step._gd_data,
        )
        return ret

    cdef inline uint64_t _getitem(self, GDExtensionInt index):
        return gd_vector3i_indexed_getter(&self._gd_data, index)

    cdef inline void _setitem(self, GDExtensionInt index, uint64_t value):
        gd_vector3i_indexed_setter(&self._gd_data, index, value)





@cython.freelist(8)
@cython.final
cdef class Transform2D:
    cdef gd_transform2d_t _gd_data

    cpdef inline Transform2D clone(self):
        cdef Transform2D obj = Transform2D.__new__(Transform2D)
        obj._gd_data = self._gd_data
        return obj


    @staticmethod
    cdef inline Transform2D new():
        # Call to __new__ bypasses __init__ constructor
        cdef Transform2D ret = Transform2D.__new__(Transform2D)
        ret._gd_data = gd_transform2d_new()
        return ret
    
    
    
    cpdef inline Transform2D inverse(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform2D ret = Transform2D.__new__(Transform2D)
        ret._gd_data = gd_transform2d_inverse(
            &self._gd_data,
        )
        return ret

    cpdef inline Transform2D affine_inverse(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform2D ret = Transform2D.__new__(Transform2D)
        ret._gd_data = gd_transform2d_affine_inverse(
            &self._gd_data,
        )
        return ret

    cpdef inline double get_rotation(self):
        cdef double ret = gd_transform2d_get_rotation(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector2 get_origin(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_transform2d_get_origin(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector2 get_scale(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_transform2d_get_scale(
            &self._gd_data,
        )
        return ret

    cpdef inline double get_skew(self):
        cdef double ret = gd_transform2d_get_skew(
            &self._gd_data,
        )
        return ret

    cpdef inline Transform2D orthonormalized(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform2D ret = Transform2D.__new__(Transform2D)
        ret._gd_data = gd_transform2d_orthonormalized(
            &self._gd_data,
        )
        return ret

    cpdef inline Transform2D rotated(self, double angle):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform2D ret = Transform2D.__new__(Transform2D)
        ret._gd_data = gd_transform2d_rotated(
            &self._gd_data,
            angle,
        )
        return ret

    cpdef inline Transform2D rotated_local(self, double angle):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform2D ret = Transform2D.__new__(Transform2D)
        ret._gd_data = gd_transform2d_rotated_local(
            &self._gd_data,
            angle,
        )
        return ret

    cpdef inline Transform2D scaled(self, Vector2 scale):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform2D ret = Transform2D.__new__(Transform2D)
        ret._gd_data = gd_transform2d_scaled(
            &self._gd_data,
            &scale._gd_data,
        )
        return ret

    cpdef inline Transform2D scaled_local(self, Vector2 scale):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform2D ret = Transform2D.__new__(Transform2D)
        ret._gd_data = gd_transform2d_scaled_local(
            &self._gd_data,
            &scale._gd_data,
        )
        return ret

    cpdef inline Transform2D translated(self, Vector2 offset):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform2D ret = Transform2D.__new__(Transform2D)
        ret._gd_data = gd_transform2d_translated(
            &self._gd_data,
            &offset._gd_data,
        )
        return ret

    cpdef inline Transform2D translated_local(self, Vector2 offset):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform2D ret = Transform2D.__new__(Transform2D)
        ret._gd_data = gd_transform2d_translated_local(
            &self._gd_data,
            &offset._gd_data,
        )
        return ret

    cpdef inline double determinant(self):
        cdef double ret = gd_transform2d_determinant(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector2 basis_xform(self, Vector2 v):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_transform2d_basis_xform(
            &self._gd_data,
            &v._gd_data,
        )
        return ret

    cpdef inline Vector2 basis_xform_inv(self, Vector2 v):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_transform2d_basis_xform_inv(
            &self._gd_data,
            &v._gd_data,
        )
        return ret

    cpdef inline Transform2D interpolate_with(self, Transform2D xform, double weight):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform2D ret = Transform2D.__new__(Transform2D)
        ret._gd_data = gd_transform2d_interpolate_with(
            &self._gd_data,
            &xform._gd_data,
            weight,
        )
        return ret

    cpdef inline uint8_t is_equal_approx(self, Transform2D xform):
        cdef uint8_t ret = gd_transform2d_is_equal_approx(
            &self._gd_data,
            &xform._gd_data,
        )
        return ret

    cpdef inline uint8_t is_finite(self):
        cdef uint8_t ret = gd_transform2d_is_finite(
            &self._gd_data,
        )
        return ret

    cpdef inline Transform2D looking_at(self, Vector2 target):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform2D ret = Transform2D.__new__(Transform2D)
        ret._gd_data = gd_transform2d_looking_at(
            &self._gd_data,
            &target._gd_data,
        )
        return ret

    cdef inline Vector2 _getitem(self, GDExtensionInt index):
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data =  gd_transform2d_indexed_getter(&self._gd_data, index)
        return ret

    cdef inline void _setitem(self, GDExtensionInt index, Vector2 value):
        gd_transform2d_indexed_setter(&self._gd_data, index, &value._gd_data)





@cython.freelist(8)
@cython.final
cdef class Vector4:
    cdef gd_vector4_t _gd_data

    cpdef inline Vector4 clone(self):
        cdef Vector4 obj = Vector4.__new__(Vector4)
        obj._gd_data = self._gd_data
        return obj


    @staticmethod
    cdef inline Vector4 new():
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4 ret = Vector4.__new__(Vector4)
        ret._gd_data = gd_vector4_new()
        return ret
    
    
    
    
    cpdef inline uint64_t min_axis_index(self):
        cdef uint64_t ret = gd_vector4_min_axis_index(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t max_axis_index(self):
        cdef uint64_t ret = gd_vector4_max_axis_index(
            &self._gd_data,
        )
        return ret

    cpdef inline double length(self):
        cdef double ret = gd_vector4_length(
            &self._gd_data,
        )
        return ret

    cpdef inline double length_squared(self):
        cdef double ret = gd_vector4_length_squared(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector4 abs(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4 ret = Vector4.__new__(Vector4)
        ret._gd_data = gd_vector4_abs(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector4 sign(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4 ret = Vector4.__new__(Vector4)
        ret._gd_data = gd_vector4_sign(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector4 floor(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4 ret = Vector4.__new__(Vector4)
        ret._gd_data = gd_vector4_floor(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector4 ceil(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4 ret = Vector4.__new__(Vector4)
        ret._gd_data = gd_vector4_ceil(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector4 round(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4 ret = Vector4.__new__(Vector4)
        ret._gd_data = gd_vector4_round(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector4 lerp(self, Vector4 to, double weight):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4 ret = Vector4.__new__(Vector4)
        ret._gd_data = gd_vector4_lerp(
            &self._gd_data,
            &to._gd_data,
            weight,
        )
        return ret

    cpdef inline Vector4 cubic_interpolate(self, Vector4 b, Vector4 pre_a, Vector4 post_b, double weight):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4 ret = Vector4.__new__(Vector4)
        ret._gd_data = gd_vector4_cubic_interpolate(
            &self._gd_data,
            &b._gd_data,
            &pre_a._gd_data,
            &post_b._gd_data,
            weight,
        )
        return ret

    cpdef inline Vector4 cubic_interpolate_in_time(self, Vector4 b, Vector4 pre_a, Vector4 post_b, double weight, double b_t, double pre_a_t, double post_b_t):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4 ret = Vector4.__new__(Vector4)
        ret._gd_data = gd_vector4_cubic_interpolate_in_time(
            &self._gd_data,
            &b._gd_data,
            &pre_a._gd_data,
            &post_b._gd_data,
            weight,
            b_t,
            pre_a_t,
            post_b_t,
        )
        return ret

    cpdef inline Vector4 posmod(self, double mod):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4 ret = Vector4.__new__(Vector4)
        ret._gd_data = gd_vector4_posmod(
            &self._gd_data,
            mod,
        )
        return ret

    cpdef inline Vector4 posmodv(self, Vector4 modv):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4 ret = Vector4.__new__(Vector4)
        ret._gd_data = gd_vector4_posmodv(
            &self._gd_data,
            &modv._gd_data,
        )
        return ret

    cpdef inline Vector4 snapped(self, Vector4 step):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4 ret = Vector4.__new__(Vector4)
        ret._gd_data = gd_vector4_snapped(
            &self._gd_data,
            &step._gd_data,
        )
        return ret

    cpdef inline Vector4 clamp(self, Vector4 min, Vector4 max):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4 ret = Vector4.__new__(Vector4)
        ret._gd_data = gd_vector4_clamp(
            &self._gd_data,
            &min._gd_data,
            &max._gd_data,
        )
        return ret

    cpdef inline Vector4 normalized(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4 ret = Vector4.__new__(Vector4)
        ret._gd_data = gd_vector4_normalized(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_normalized(self):
        cdef uint8_t ret = gd_vector4_is_normalized(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector4 direction_to(self, Vector4 to):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4 ret = Vector4.__new__(Vector4)
        ret._gd_data = gd_vector4_direction_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline double distance_to(self, Vector4 to):
        cdef double ret = gd_vector4_distance_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline double distance_squared_to(self, Vector4 to):
        cdef double ret = gd_vector4_distance_squared_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline double dot(self, Vector4 with_):
        cdef double ret = gd_vector4_dot(
            &self._gd_data,
            &with_._gd_data,
        )
        return ret

    cpdef inline Vector4 inverse(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4 ret = Vector4.__new__(Vector4)
        ret._gd_data = gd_vector4_inverse(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_equal_approx(self, Vector4 to):
        cdef uint8_t ret = gd_vector4_is_equal_approx(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline uint8_t is_zero_approx(self):
        cdef uint8_t ret = gd_vector4_is_zero_approx(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_finite(self):
        cdef uint8_t ret = gd_vector4_is_finite(
            &self._gd_data,
        )
        return ret

    cdef inline double _getitem(self, GDExtensionInt index):
        return gd_vector4_indexed_getter(&self._gd_data, index)

    cdef inline void _setitem(self, GDExtensionInt index, double value):
        gd_vector4_indexed_setter(&self._gd_data, index, value)





@cython.freelist(8)
@cython.final
cdef class Vector4i:
    cdef gd_vector4i_t _gd_data

    cpdef inline Vector4i clone(self):
        cdef Vector4i obj = Vector4i.__new__(Vector4i)
        obj._gd_data = self._gd_data
        return obj


    @staticmethod
    cdef inline Vector4i new():
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4i ret = Vector4i.__new__(Vector4i)
        ret._gd_data = gd_vector4i_new()
        return ret
    
    
    
    
    cpdef inline uint64_t min_axis_index(self):
        cdef uint64_t ret = gd_vector4i_min_axis_index(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t max_axis_index(self):
        cdef uint64_t ret = gd_vector4i_max_axis_index(
            &self._gd_data,
        )
        return ret

    cpdef inline double length(self):
        cdef double ret = gd_vector4i_length(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t length_squared(self):
        cdef uint64_t ret = gd_vector4i_length_squared(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector4i sign(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4i ret = Vector4i.__new__(Vector4i)
        ret._gd_data = gd_vector4i_sign(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector4i abs(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4i ret = Vector4i.__new__(Vector4i)
        ret._gd_data = gd_vector4i_abs(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector4i clamp(self, Vector4i min, Vector4i max):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4i ret = Vector4i.__new__(Vector4i)
        ret._gd_data = gd_vector4i_clamp(
            &self._gd_data,
            &min._gd_data,
            &max._gd_data,
        )
        return ret

    cpdef inline Vector4i snapped(self, Vector4i step):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector4i ret = Vector4i.__new__(Vector4i)
        ret._gd_data = gd_vector4i_snapped(
            &self._gd_data,
            &step._gd_data,
        )
        return ret

    cdef inline uint64_t _getitem(self, GDExtensionInt index):
        return gd_vector4i_indexed_getter(&self._gd_data, index)

    cdef inline void _setitem(self, GDExtensionInt index, uint64_t value):
        gd_vector4i_indexed_setter(&self._gd_data, index, value)





@cython.freelist(8)
@cython.final
cdef class Plane:
    cdef gd_plane_t _gd_data

    cpdef inline Plane clone(self):
        cdef Plane obj = Plane.__new__(Plane)
        obj._gd_data = self._gd_data
        return obj


    @staticmethod
    cdef inline Plane new():
        # Call to __new__ bypasses __init__ constructor
        cdef Plane ret = Plane.__new__(Plane)
        ret._gd_data = gd_plane_new()
        return ret
    cdef inline double get_x(self):
        return gd_plane_get_x(&self._gd_data)
    cdef inline void set_x(self, double val):
        gd_plane_set_x(&self._gd_data, val)

    cdef inline double get_y(self):
        return gd_plane_get_y(&self._gd_data)
    cdef inline void set_y(self, double val):
        gd_plane_set_y(&self._gd_data, val)

    cdef inline double get_z(self):
        return gd_plane_get_z(&self._gd_data)
    cdef inline void set_z(self, double val):
        gd_plane_set_z(&self._gd_data, val)

    
    
    cpdef inline Plane normalized(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Plane ret = Plane.__new__(Plane)
        ret._gd_data = gd_plane_normalized(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector3 get_center(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_plane_get_center(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_equal_approx(self, Plane to_plane):
        cdef uint8_t ret = gd_plane_is_equal_approx(
            &self._gd_data,
            &to_plane._gd_data,
        )
        return ret

    cpdef inline uint8_t is_finite(self):
        cdef uint8_t ret = gd_plane_is_finite(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_point_over(self, Vector3 point):
        cdef uint8_t ret = gd_plane_is_point_over(
            &self._gd_data,
            &point._gd_data,
        )
        return ret

    cpdef inline double distance_to(self, Vector3 point):
        cdef double ret = gd_plane_distance_to(
            &self._gd_data,
            &point._gd_data,
        )
        return ret

    cpdef inline uint8_t has_point(self, Vector3 point, double tolerance):
        cdef uint8_t ret = gd_plane_has_point(
            &self._gd_data,
            &point._gd_data,
            tolerance,
        )
        return ret

    cpdef inline Vector3 project(self, Vector3 point):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_plane_project(
            &self._gd_data,
            &point._gd_data,
        )
        return ret

    cpdef inline object intersect_3(self, Plane b, Plane c):
        raise NotImplementedError  # TODO

    cpdef inline object intersects_ray(self, Vector3 from_, Vector3 dir):
        raise NotImplementedError  # TODO

    cpdef inline object intersects_segment(self, Vector3 from_, Vector3 to):
        raise NotImplementedError  # TODO




@cython.freelist(8)
@cython.final
cdef class Quaternion:
    cdef gd_quaternion_t _gd_data

    cpdef inline Quaternion clone(self):
        cdef Quaternion obj = Quaternion.__new__(Quaternion)
        obj._gd_data = self._gd_data
        return obj


    @staticmethod
    cdef inline Quaternion new():
        # Call to __new__ bypasses __init__ constructor
        cdef Quaternion ret = Quaternion.__new__(Quaternion)
        ret._gd_data = gd_quaternion_new()
        return ret
    
    
    
    
    cpdef inline double length(self):
        cdef double ret = gd_quaternion_length(
            &self._gd_data,
        )
        return ret

    cpdef inline double length_squared(self):
        cdef double ret = gd_quaternion_length_squared(
            &self._gd_data,
        )
        return ret

    cpdef inline Quaternion normalized(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Quaternion ret = Quaternion.__new__(Quaternion)
        ret._gd_data = gd_quaternion_normalized(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_normalized(self):
        cdef uint8_t ret = gd_quaternion_is_normalized(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_equal_approx(self, Quaternion to):
        cdef uint8_t ret = gd_quaternion_is_equal_approx(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline uint8_t is_finite(self):
        cdef uint8_t ret = gd_quaternion_is_finite(
            &self._gd_data,
        )
        return ret

    cpdef inline Quaternion inverse(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Quaternion ret = Quaternion.__new__(Quaternion)
        ret._gd_data = gd_quaternion_inverse(
            &self._gd_data,
        )
        return ret

    cpdef inline Quaternion log(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Quaternion ret = Quaternion.__new__(Quaternion)
        ret._gd_data = gd_quaternion_log(
            &self._gd_data,
        )
        return ret

    cpdef inline Quaternion exp(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Quaternion ret = Quaternion.__new__(Quaternion)
        ret._gd_data = gd_quaternion_exp(
            &self._gd_data,
        )
        return ret

    cpdef inline double angle_to(self, Quaternion to):
        cdef double ret = gd_quaternion_angle_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline double dot(self, Quaternion with_):
        cdef double ret = gd_quaternion_dot(
            &self._gd_data,
            &with_._gd_data,
        )
        return ret

    cpdef inline Quaternion slerp(self, Quaternion to, double weight):
        # Call to __new__ bypasses __init__ constructor
        cdef Quaternion ret = Quaternion.__new__(Quaternion)
        ret._gd_data = gd_quaternion_slerp(
            &self._gd_data,
            &to._gd_data,
            weight,
        )
        return ret

    cpdef inline Quaternion slerpni(self, Quaternion to, double weight):
        # Call to __new__ bypasses __init__ constructor
        cdef Quaternion ret = Quaternion.__new__(Quaternion)
        ret._gd_data = gd_quaternion_slerpni(
            &self._gd_data,
            &to._gd_data,
            weight,
        )
        return ret

    cpdef inline Quaternion spherical_cubic_interpolate(self, Quaternion b, Quaternion pre_a, Quaternion post_b, double weight):
        # Call to __new__ bypasses __init__ constructor
        cdef Quaternion ret = Quaternion.__new__(Quaternion)
        ret._gd_data = gd_quaternion_spherical_cubic_interpolate(
            &self._gd_data,
            &b._gd_data,
            &pre_a._gd_data,
            &post_b._gd_data,
            weight,
        )
        return ret

    cpdef inline Quaternion spherical_cubic_interpolate_in_time(self, Quaternion b, Quaternion pre_a, Quaternion post_b, double weight, double b_t, double pre_a_t, double post_b_t):
        # Call to __new__ bypasses __init__ constructor
        cdef Quaternion ret = Quaternion.__new__(Quaternion)
        ret._gd_data = gd_quaternion_spherical_cubic_interpolate_in_time(
            &self._gd_data,
            &b._gd_data,
            &pre_a._gd_data,
            &post_b._gd_data,
            weight,
            b_t,
            pre_a_t,
            post_b_t,
        )
        return ret

    cpdef inline Vector3 get_euler(self, uint64_t order):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_quaternion_get_euler(
            &self._gd_data,
            order,
        )
        return ret

    cpdef inline Quaternion from_euler(self, Vector3 euler):
        # Call to __new__ bypasses __init__ constructor
        cdef Quaternion ret = Quaternion.__new__(Quaternion)
        ret._gd_data = gd_quaternion_from_euler(
            &self._gd_data,
            &euler._gd_data,
        )
        return ret

    cpdef inline Vector3 get_axis(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_quaternion_get_axis(
            &self._gd_data,
        )
        return ret

    cpdef inline double get_angle(self):
        cdef double ret = gd_quaternion_get_angle(
            &self._gd_data,
        )
        return ret

    cdef inline double _getitem(self, GDExtensionInt index):
        return gd_quaternion_indexed_getter(&self._gd_data, index)

    cdef inline void _setitem(self, GDExtensionInt index, double value):
        gd_quaternion_indexed_setter(&self._gd_data, index, value)





@cython.freelist(8)
@cython.final
cdef class AABB:
    cdef gd_aabb_t _gd_data

    cpdef inline AABB clone(self):
        cdef AABB obj = AABB.__new__(AABB)
        obj._gd_data = self._gd_data
        return obj


    @staticmethod
    cdef inline AABB new():
        # Call to __new__ bypasses __init__ constructor
        cdef AABB ret = AABB.__new__(AABB)
        ret._gd_data = gd_aabb_new()
        return ret
    
    
    cdef inline Vector3 get_end(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_aabb_get_end(&self._gd_data)
        return ret
    cdef inline void set_end(self, Vector3 val):
        gd_aabb_set_end(&self._gd_data, &val._gd_data)

    cpdef inline AABB abs(self):
        # Call to __new__ bypasses __init__ constructor
        cdef AABB ret = AABB.__new__(AABB)
        ret._gd_data = gd_aabb_abs(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector3 get_center(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_aabb_get_center(
            &self._gd_data,
        )
        return ret

    cpdef inline double get_volume(self):
        cdef double ret = gd_aabb_get_volume(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t has_volume(self):
        cdef uint8_t ret = gd_aabb_has_volume(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t has_surface(self):
        cdef uint8_t ret = gd_aabb_has_surface(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t has_point(self, Vector3 point):
        cdef uint8_t ret = gd_aabb_has_point(
            &self._gd_data,
            &point._gd_data,
        )
        return ret

    cpdef inline uint8_t is_equal_approx(self, AABB aabb):
        cdef uint8_t ret = gd_aabb_is_equal_approx(
            &self._gd_data,
            &aabb._gd_data,
        )
        return ret

    cpdef inline uint8_t is_finite(self):
        cdef uint8_t ret = gd_aabb_is_finite(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t intersects(self, AABB with_):
        cdef uint8_t ret = gd_aabb_intersects(
            &self._gd_data,
            &with_._gd_data,
        )
        return ret

    cpdef inline uint8_t encloses(self, AABB with_):
        cdef uint8_t ret = gd_aabb_encloses(
            &self._gd_data,
            &with_._gd_data,
        )
        return ret

    cpdef inline uint8_t intersects_plane(self, Plane plane):
        cdef uint8_t ret = gd_aabb_intersects_plane(
            &self._gd_data,
            &plane._gd_data,
        )
        return ret

    cpdef inline AABB intersection(self, AABB with_):
        # Call to __new__ bypasses __init__ constructor
        cdef AABB ret = AABB.__new__(AABB)
        ret._gd_data = gd_aabb_intersection(
            &self._gd_data,
            &with_._gd_data,
        )
        return ret

    cpdef inline AABB merge(self, AABB with_):
        # Call to __new__ bypasses __init__ constructor
        cdef AABB ret = AABB.__new__(AABB)
        ret._gd_data = gd_aabb_merge(
            &self._gd_data,
            &with_._gd_data,
        )
        return ret

    cpdef inline AABB expand(self, Vector3 to_point):
        # Call to __new__ bypasses __init__ constructor
        cdef AABB ret = AABB.__new__(AABB)
        ret._gd_data = gd_aabb_expand(
            &self._gd_data,
            &to_point._gd_data,
        )
        return ret

    cpdef inline AABB grow(self, double by):
        # Call to __new__ bypasses __init__ constructor
        cdef AABB ret = AABB.__new__(AABB)
        ret._gd_data = gd_aabb_grow(
            &self._gd_data,
            by,
        )
        return ret

    cpdef inline Vector3 get_support(self, Vector3 dir):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_aabb_get_support(
            &self._gd_data,
            &dir._gd_data,
        )
        return ret

    cpdef inline Vector3 get_longest_axis(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_aabb_get_longest_axis(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t get_longest_axis_index(self):
        cdef uint64_t ret = gd_aabb_get_longest_axis_index(
            &self._gd_data,
        )
        return ret

    cpdef inline double get_longest_axis_size(self):
        cdef double ret = gd_aabb_get_longest_axis_size(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector3 get_shortest_axis(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_aabb_get_shortest_axis(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t get_shortest_axis_index(self):
        cdef uint64_t ret = gd_aabb_get_shortest_axis_index(
            &self._gd_data,
        )
        return ret

    cpdef inline double get_shortest_axis_size(self):
        cdef double ret = gd_aabb_get_shortest_axis_size(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector3 get_endpoint(self, uint64_t idx):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_aabb_get_endpoint(
            &self._gd_data,
            idx,
        )
        return ret

    cpdef inline object intersects_segment(self, Vector3 from_, Vector3 to):
        raise NotImplementedError  # TODO

    cpdef inline object intersects_ray(self, Vector3 from_, Vector3 dir):
        raise NotImplementedError  # TODO




@cython.freelist(8)
@cython.final
cdef class Basis:
    cdef gd_basis_t _gd_data

    cpdef inline Basis clone(self):
        cdef Basis obj = Basis.__new__(Basis)
        obj._gd_data = self._gd_data
        return obj


    @staticmethod
    cdef inline Basis new():
        # Call to __new__ bypasses __init__ constructor
        cdef Basis ret = Basis.__new__(Basis)
        ret._gd_data = gd_basis_new()
        return ret
    
    
    
    cpdef inline Basis inverse(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Basis ret = Basis.__new__(Basis)
        ret._gd_data = gd_basis_inverse(
            &self._gd_data,
        )
        return ret

    cpdef inline Basis transposed(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Basis ret = Basis.__new__(Basis)
        ret._gd_data = gd_basis_transposed(
            &self._gd_data,
        )
        return ret

    cpdef inline Basis orthonormalized(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Basis ret = Basis.__new__(Basis)
        ret._gd_data = gd_basis_orthonormalized(
            &self._gd_data,
        )
        return ret

    cpdef inline double determinant(self):
        cdef double ret = gd_basis_determinant(
            &self._gd_data,
        )
        return ret

    cpdef inline Basis rotated(self, Vector3 axis, double angle):
        # Call to __new__ bypasses __init__ constructor
        cdef Basis ret = Basis.__new__(Basis)
        ret._gd_data = gd_basis_rotated(
            &self._gd_data,
            &axis._gd_data,
            angle,
        )
        return ret

    cpdef inline Basis scaled(self, Vector3 scale):
        # Call to __new__ bypasses __init__ constructor
        cdef Basis ret = Basis.__new__(Basis)
        ret._gd_data = gd_basis_scaled(
            &self._gd_data,
            &scale._gd_data,
        )
        return ret

    cpdef inline Vector3 get_scale(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_basis_get_scale(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector3 get_euler(self, uint64_t order):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data = gd_basis_get_euler(
            &self._gd_data,
            order,
        )
        return ret

    cpdef inline double tdotx(self, Vector3 with_):
        cdef double ret = gd_basis_tdotx(
            &self._gd_data,
            &with_._gd_data,
        )
        return ret

    cpdef inline double tdoty(self, Vector3 with_):
        cdef double ret = gd_basis_tdoty(
            &self._gd_data,
            &with_._gd_data,
        )
        return ret

    cpdef inline double tdotz(self, Vector3 with_):
        cdef double ret = gd_basis_tdotz(
            &self._gd_data,
            &with_._gd_data,
        )
        return ret

    cpdef inline Basis slerp(self, Basis to, double weight):
        # Call to __new__ bypasses __init__ constructor
        cdef Basis ret = Basis.__new__(Basis)
        ret._gd_data = gd_basis_slerp(
            &self._gd_data,
            &to._gd_data,
            weight,
        )
        return ret

    cpdef inline uint8_t is_equal_approx(self, Basis b):
        cdef uint8_t ret = gd_basis_is_equal_approx(
            &self._gd_data,
            &b._gd_data,
        )
        return ret

    cpdef inline uint8_t is_finite(self):
        cdef uint8_t ret = gd_basis_is_finite(
            &self._gd_data,
        )
        return ret

    cpdef inline Quaternion get_rotation_quaternion(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Quaternion ret = Quaternion.__new__(Quaternion)
        ret._gd_data = gd_basis_get_rotation_quaternion(
            &self._gd_data,
        )
        return ret

    cpdef inline Basis looking_at(self, Vector3 target, Vector3 up, uint8_t use_model_front):
        # Call to __new__ bypasses __init__ constructor
        cdef Basis ret = Basis.__new__(Basis)
        ret._gd_data = gd_basis_looking_at(
            &self._gd_data,
            &target._gd_data,
            &up._gd_data,
            use_model_front,
        )
        return ret

    cpdef inline Basis from_scale(self, Vector3 scale):
        # Call to __new__ bypasses __init__ constructor
        cdef Basis ret = Basis.__new__(Basis)
        ret._gd_data = gd_basis_from_scale(
            &self._gd_data,
            &scale._gd_data,
        )
        return ret

    cpdef inline Basis from_euler(self, Vector3 euler, uint64_t order):
        # Call to __new__ bypasses __init__ constructor
        cdef Basis ret = Basis.__new__(Basis)
        ret._gd_data = gd_basis_from_euler(
            &self._gd_data,
            &euler._gd_data,
            order,
        )
        return ret

    cdef inline Vector3 _getitem(self, GDExtensionInt index):
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data =  gd_basis_indexed_getter(&self._gd_data, index)
        return ret

    cdef inline void _setitem(self, GDExtensionInt index, Vector3 value):
        gd_basis_indexed_setter(&self._gd_data, index, &value._gd_data)





@cython.freelist(8)
@cython.final
cdef class Transform3D:
    cdef gd_transform3d_t _gd_data

    cpdef inline Transform3D clone(self):
        cdef Transform3D obj = Transform3D.__new__(Transform3D)
        obj._gd_data = self._gd_data
        return obj


    @staticmethod
    cdef inline Transform3D new():
        # Call to __new__ bypasses __init__ constructor
        cdef Transform3D ret = Transform3D.__new__(Transform3D)
        ret._gd_data = gd_transform3d_new()
        return ret
    
    
    cpdef inline Transform3D inverse(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform3D ret = Transform3D.__new__(Transform3D)
        ret._gd_data = gd_transform3d_inverse(
            &self._gd_data,
        )
        return ret

    cpdef inline Transform3D affine_inverse(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform3D ret = Transform3D.__new__(Transform3D)
        ret._gd_data = gd_transform3d_affine_inverse(
            &self._gd_data,
        )
        return ret

    cpdef inline Transform3D orthonormalized(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform3D ret = Transform3D.__new__(Transform3D)
        ret._gd_data = gd_transform3d_orthonormalized(
            &self._gd_data,
        )
        return ret

    cpdef inline Transform3D rotated(self, Vector3 axis, double angle):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform3D ret = Transform3D.__new__(Transform3D)
        ret._gd_data = gd_transform3d_rotated(
            &self._gd_data,
            &axis._gd_data,
            angle,
        )
        return ret

    cpdef inline Transform3D rotated_local(self, Vector3 axis, double angle):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform3D ret = Transform3D.__new__(Transform3D)
        ret._gd_data = gd_transform3d_rotated_local(
            &self._gd_data,
            &axis._gd_data,
            angle,
        )
        return ret

    cpdef inline Transform3D scaled(self, Vector3 scale):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform3D ret = Transform3D.__new__(Transform3D)
        ret._gd_data = gd_transform3d_scaled(
            &self._gd_data,
            &scale._gd_data,
        )
        return ret

    cpdef inline Transform3D scaled_local(self, Vector3 scale):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform3D ret = Transform3D.__new__(Transform3D)
        ret._gd_data = gd_transform3d_scaled_local(
            &self._gd_data,
            &scale._gd_data,
        )
        return ret

    cpdef inline Transform3D translated(self, Vector3 offset):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform3D ret = Transform3D.__new__(Transform3D)
        ret._gd_data = gd_transform3d_translated(
            &self._gd_data,
            &offset._gd_data,
        )
        return ret

    cpdef inline Transform3D translated_local(self, Vector3 offset):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform3D ret = Transform3D.__new__(Transform3D)
        ret._gd_data = gd_transform3d_translated_local(
            &self._gd_data,
            &offset._gd_data,
        )
        return ret

    cpdef inline Transform3D looking_at(self, Vector3 target, Vector3 up, uint8_t use_model_front):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform3D ret = Transform3D.__new__(Transform3D)
        ret._gd_data = gd_transform3d_looking_at(
            &self._gd_data,
            &target._gd_data,
            &up._gd_data,
            use_model_front,
        )
        return ret

    cpdef inline Transform3D interpolate_with(self, Transform3D xform, double weight):
        # Call to __new__ bypasses __init__ constructor
        cdef Transform3D ret = Transform3D.__new__(Transform3D)
        ret._gd_data = gd_transform3d_interpolate_with(
            &self._gd_data,
            &xform._gd_data,
            weight,
        )
        return ret

    cpdef inline uint8_t is_equal_approx(self, Transform3D xform):
        cdef uint8_t ret = gd_transform3d_is_equal_approx(
            &self._gd_data,
            &xform._gd_data,
        )
        return ret

    cpdef inline uint8_t is_finite(self):
        cdef uint8_t ret = gd_transform3d_is_finite(
            &self._gd_data,
        )
        return ret




@cython.freelist(8)
@cython.final
cdef class Projection:
    cdef gd_projection_t _gd_data

    cpdef inline Projection clone(self):
        cdef Projection obj = Projection.__new__(Projection)
        obj._gd_data = self._gd_data
        return obj


    @staticmethod
    cdef inline Projection new():
        # Call to __new__ bypasses __init__ constructor
        cdef Projection ret = Projection.__new__(Projection)
        ret._gd_data = gd_projection_new()
        return ret
    
    
    
    
    cpdef inline Projection create_depth_correction(self, uint8_t flip_y):
        # Call to __new__ bypasses __init__ constructor
        cdef Projection ret = Projection.__new__(Projection)
        ret._gd_data = gd_projection_create_depth_correction(
            &self._gd_data,
            flip_y,
        )
        return ret

    cpdef inline Projection create_light_atlas_rect(self, Rect2 rect):
        # Call to __new__ bypasses __init__ constructor
        cdef Projection ret = Projection.__new__(Projection)
        ret._gd_data = gd_projection_create_light_atlas_rect(
            &self._gd_data,
            &rect._gd_data,
        )
        return ret

    cpdef inline Projection create_perspective(self, double fovy, double aspect, double z_near, double z_far, uint8_t flip_fov):
        # Call to __new__ bypasses __init__ constructor
        cdef Projection ret = Projection.__new__(Projection)
        ret._gd_data = gd_projection_create_perspective(
            &self._gd_data,
            fovy,
            aspect,
            z_near,
            z_far,
            flip_fov,
        )
        return ret

    cpdef inline Projection create_perspective_hmd(self, double fovy, double aspect, double z_near, double z_far, uint8_t flip_fov, uint64_t eye, double intraocular_dist, double convergence_dist):
        # Call to __new__ bypasses __init__ constructor
        cdef Projection ret = Projection.__new__(Projection)
        ret._gd_data = gd_projection_create_perspective_hmd(
            &self._gd_data,
            fovy,
            aspect,
            z_near,
            z_far,
            flip_fov,
            eye,
            intraocular_dist,
            convergence_dist,
        )
        return ret

    cpdef inline Projection create_for_hmd(self, uint64_t eye, double aspect, double intraocular_dist, double display_width, double display_to_lens, double oversample, double z_near, double z_far):
        # Call to __new__ bypasses __init__ constructor
        cdef Projection ret = Projection.__new__(Projection)
        ret._gd_data = gd_projection_create_for_hmd(
            &self._gd_data,
            eye,
            aspect,
            intraocular_dist,
            display_width,
            display_to_lens,
            oversample,
            z_near,
            z_far,
        )
        return ret

    cpdef inline Projection create_orthogonal(self, double left, double right, double bottom, double top, double z_near, double z_far):
        # Call to __new__ bypasses __init__ constructor
        cdef Projection ret = Projection.__new__(Projection)
        ret._gd_data = gd_projection_create_orthogonal(
            &self._gd_data,
            left,
            right,
            bottom,
            top,
            z_near,
            z_far,
        )
        return ret

    cpdef inline Projection create_orthogonal_aspect(self, double size, double aspect, double z_near, double z_far, uint8_t flip_fov):
        # Call to __new__ bypasses __init__ constructor
        cdef Projection ret = Projection.__new__(Projection)
        ret._gd_data = gd_projection_create_orthogonal_aspect(
            &self._gd_data,
            size,
            aspect,
            z_near,
            z_far,
            flip_fov,
        )
        return ret

    cpdef inline Projection create_frustum(self, double left, double right, double bottom, double top, double z_near, double z_far):
        # Call to __new__ bypasses __init__ constructor
        cdef Projection ret = Projection.__new__(Projection)
        ret._gd_data = gd_projection_create_frustum(
            &self._gd_data,
            left,
            right,
            bottom,
            top,
            z_near,
            z_far,
        )
        return ret

    cpdef inline Projection create_frustum_aspect(self, double size, double aspect, Vector2 offset, double z_near, double z_far, uint8_t flip_fov):
        # Call to __new__ bypasses __init__ constructor
        cdef Projection ret = Projection.__new__(Projection)
        ret._gd_data = gd_projection_create_frustum_aspect(
            &self._gd_data,
            size,
            aspect,
            &offset._gd_data,
            z_near,
            z_far,
            flip_fov,
        )
        return ret

    cpdef inline Projection create_fit_aabb(self, AABB aabb):
        # Call to __new__ bypasses __init__ constructor
        cdef Projection ret = Projection.__new__(Projection)
        ret._gd_data = gd_projection_create_fit_aabb(
            &self._gd_data,
            &aabb._gd_data,
        )
        return ret

    cpdef inline double determinant(self):
        cdef double ret = gd_projection_determinant(
            &self._gd_data,
        )
        return ret

    cpdef inline Projection perspective_znear_adjusted(self, double new_znear):
        # Call to __new__ bypasses __init__ constructor
        cdef Projection ret = Projection.__new__(Projection)
        ret._gd_data = gd_projection_perspective_znear_adjusted(
            &self._gd_data,
            new_znear,
        )
        return ret

    cpdef inline Plane get_projection_plane(self, uint64_t plane):
        # Call to __new__ bypasses __init__ constructor
        cdef Plane ret = Plane.__new__(Plane)
        ret._gd_data = gd_projection_get_projection_plane(
            &self._gd_data,
            plane,
        )
        return ret

    cpdef inline Projection flipped_y(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Projection ret = Projection.__new__(Projection)
        ret._gd_data = gd_projection_flipped_y(
            &self._gd_data,
        )
        return ret

    cpdef inline Projection jitter_offseted(self, Vector2 offset):
        # Call to __new__ bypasses __init__ constructor
        cdef Projection ret = Projection.__new__(Projection)
        ret._gd_data = gd_projection_jitter_offseted(
            &self._gd_data,
            &offset._gd_data,
        )
        return ret

    cpdef inline double get_fovy(self, double fovx, double aspect):
        cdef double ret = gd_projection_get_fovy(
            &self._gd_data,
            fovx,
            aspect,
        )
        return ret

    cpdef inline double get_z_far(self):
        cdef double ret = gd_projection_get_z_far(
            &self._gd_data,
        )
        return ret

    cpdef inline double get_z_near(self):
        cdef double ret = gd_projection_get_z_near(
            &self._gd_data,
        )
        return ret

    cpdef inline double get_aspect(self):
        cdef double ret = gd_projection_get_aspect(
            &self._gd_data,
        )
        return ret

    cpdef inline double get_fov(self):
        cdef double ret = gd_projection_get_fov(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_orthogonal(self):
        cdef uint8_t ret = gd_projection_is_orthogonal(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector2 get_viewport_half_extents(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_projection_get_viewport_half_extents(
            &self._gd_data,
        )
        return ret

    cpdef inline Vector2 get_far_plane_half_extents(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data = gd_projection_get_far_plane_half_extents(
            &self._gd_data,
        )
        return ret

    cpdef inline Projection inverse(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Projection ret = Projection.__new__(Projection)
        ret._gd_data = gd_projection_inverse(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t get_pixels_per_meter(self, uint64_t for_pixel_width):
        cdef uint64_t ret = gd_projection_get_pixels_per_meter(
            &self._gd_data,
            for_pixel_width,
        )
        return ret

    cpdef inline double get_lod_multiplier(self):
        cdef double ret = gd_projection_get_lod_multiplier(
            &self._gd_data,
        )
        return ret

    cdef inline Vector4 _getitem(self, GDExtensionInt index):
        cdef Vector4 ret = Vector4.__new__(Vector4)
        ret._gd_data =  gd_projection_indexed_getter(&self._gd_data, index)
        return ret

    cdef inline void _setitem(self, GDExtensionInt index, Vector4 value):
        gd_projection_indexed_setter(&self._gd_data, index, &value._gd_data)





@cython.freelist(8)
@cython.final
cdef class Color:
    cdef gd_color_t _gd_data

    cpdef inline Color clone(self):
        cdef Color obj = Color.__new__(Color)
        obj._gd_data = self._gd_data
        return obj


    @staticmethod
    cdef inline Color new():
        # Call to __new__ bypasses __init__ constructor
        cdef Color ret = Color.__new__(Color)
        ret._gd_data = gd_color_new()
        return ret
    
    
    
    
    cdef inline uint64_t get_r8(self):
        return gd_color_get_r8(&self._gd_data)
    cdef inline void set_r8(self, uint64_t val):
        gd_color_set_r8(&self._gd_data, val)

    cdef inline uint64_t get_g8(self):
        return gd_color_get_g8(&self._gd_data)
    cdef inline void set_g8(self, uint64_t val):
        gd_color_set_g8(&self._gd_data, val)

    cdef inline uint64_t get_b8(self):
        return gd_color_get_b8(&self._gd_data)
    cdef inline void set_b8(self, uint64_t val):
        gd_color_set_b8(&self._gd_data, val)

    cdef inline uint64_t get_a8(self):
        return gd_color_get_a8(&self._gd_data)
    cdef inline void set_a8(self, uint64_t val):
        gd_color_set_a8(&self._gd_data, val)

    cdef inline double get_h(self):
        return gd_color_get_h(&self._gd_data)
    cdef inline void set_h(self, double val):
        gd_color_set_h(&self._gd_data, val)

    cdef inline double get_s(self):
        return gd_color_get_s(&self._gd_data)
    cdef inline void set_s(self, double val):
        gd_color_set_s(&self._gd_data, val)

    cdef inline double get_v(self):
        return gd_color_get_v(&self._gd_data)
    cdef inline void set_v(self, double val):
        gd_color_set_v(&self._gd_data, val)

    cpdef inline uint64_t to_argb32(self):
        cdef uint64_t ret = gd_color_to_argb32(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t to_abgr32(self):
        cdef uint64_t ret = gd_color_to_abgr32(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t to_rgba32(self):
        cdef uint64_t ret = gd_color_to_rgba32(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t to_argb64(self):
        cdef uint64_t ret = gd_color_to_argb64(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t to_abgr64(self):
        cdef uint64_t ret = gd_color_to_abgr64(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t to_rgba64(self):
        cdef uint64_t ret = gd_color_to_rgba64(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString to_html(self, uint8_t with_alpha):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_color_to_html(
            &self._gd_data,
            with_alpha,
        )
        return ret

    cpdef inline Color clamp(self, Color min, Color max):
        # Call to __new__ bypasses __init__ constructor
        cdef Color ret = Color.__new__(Color)
        ret._gd_data = gd_color_clamp(
            &self._gd_data,
            &min._gd_data,
            &max._gd_data,
        )
        return ret

    cpdef inline Color inverted(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Color ret = Color.__new__(Color)
        ret._gd_data = gd_color_inverted(
            &self._gd_data,
        )
        return ret

    cpdef inline Color lerp(self, Color to, double weight):
        # Call to __new__ bypasses __init__ constructor
        cdef Color ret = Color.__new__(Color)
        ret._gd_data = gd_color_lerp(
            &self._gd_data,
            &to._gd_data,
            weight,
        )
        return ret

    cpdef inline Color lightened(self, double amount):
        # Call to __new__ bypasses __init__ constructor
        cdef Color ret = Color.__new__(Color)
        ret._gd_data = gd_color_lightened(
            &self._gd_data,
            amount,
        )
        return ret

    cpdef inline Color darkened(self, double amount):
        # Call to __new__ bypasses __init__ constructor
        cdef Color ret = Color.__new__(Color)
        ret._gd_data = gd_color_darkened(
            &self._gd_data,
            amount,
        )
        return ret

    cpdef inline Color blend(self, Color over):
        # Call to __new__ bypasses __init__ constructor
        cdef Color ret = Color.__new__(Color)
        ret._gd_data = gd_color_blend(
            &self._gd_data,
            &over._gd_data,
        )
        return ret

    cpdef inline double get_luminance(self):
        cdef double ret = gd_color_get_luminance(
            &self._gd_data,
        )
        return ret

    cpdef inline Color srgb_to_linear(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Color ret = Color.__new__(Color)
        ret._gd_data = gd_color_srgb_to_linear(
            &self._gd_data,
        )
        return ret

    cpdef inline Color linear_to_srgb(self):
        # Call to __new__ bypasses __init__ constructor
        cdef Color ret = Color.__new__(Color)
        ret._gd_data = gd_color_linear_to_srgb(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_equal_approx(self, Color to):
        cdef uint8_t ret = gd_color_is_equal_approx(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline Color hex(self, uint64_t hex):
        # Call to __new__ bypasses __init__ constructor
        cdef Color ret = Color.__new__(Color)
        ret._gd_data = gd_color_hex(
            &self._gd_data,
            hex,
        )
        return ret

    cpdef inline Color hex64(self, uint64_t hex):
        # Call to __new__ bypasses __init__ constructor
        cdef Color ret = Color.__new__(Color)
        ret._gd_data = gd_color_hex64(
            &self._gd_data,
            hex,
        )
        return ret

    cpdef inline Color html(self, GDString rgba):
        # Call to __new__ bypasses __init__ constructor
        cdef Color ret = Color.__new__(Color)
        ret._gd_data = gd_color_html(
            &self._gd_data,
            &rgba._gd_data,
        )
        return ret

    cpdef inline uint8_t html_is_valid(self, GDString color):
        cdef uint8_t ret = gd_color_html_is_valid(
            &self._gd_data,
            &color._gd_data,
        )
        return ret

    cpdef inline Color from_string(self, GDString str, Color default):
        # Call to __new__ bypasses __init__ constructor
        cdef Color ret = Color.__new__(Color)
        ret._gd_data = gd_color_from_string(
            &self._gd_data,
            &str._gd_data,
            &default._gd_data,
        )
        return ret

    cpdef inline Color from_hsv(self, double h, double s, double v, double alpha):
        # Call to __new__ bypasses __init__ constructor
        cdef Color ret = Color.__new__(Color)
        ret._gd_data = gd_color_from_hsv(
            &self._gd_data,
            h,
            s,
            v,
            alpha,
        )
        return ret

    cpdef inline Color from_ok_hsl(self, double h, double s, double l, double alpha):
        # Call to __new__ bypasses __init__ constructor
        cdef Color ret = Color.__new__(Color)
        ret._gd_data = gd_color_from_ok_hsl(
            &self._gd_data,
            h,
            s,
            l,
            alpha,
        )
        return ret

    cpdef inline Color from_rgbe9995(self, uint64_t rgbe):
        # Call to __new__ bypasses __init__ constructor
        cdef Color ret = Color.__new__(Color)
        ret._gd_data = gd_color_from_rgbe9995(
            &self._gd_data,
            rgbe,
        )
        return ret

    cdef inline double _getitem(self, GDExtensionInt index):
        return gd_color_indexed_getter(&self._gd_data, index)

    cdef inline void _setitem(self, GDExtensionInt index, double value):
        gd_color_indexed_setter(&self._gd_data, index, value)





@cython.freelist(8)
@cython.final
cdef class StringName:
    cdef gd_string_name_t _gd_data

    cpdef inline StringName clone(self):
        cdef StringName obj = StringName.__new__(StringName)
        obj._gd_data = gd_string_name_new_from_string_name(&self._gd_data)
        return obj


    @staticmethod
    cdef inline StringName new():
        # Call to __new__ bypasses __init__ constructor
        cdef StringName ret = StringName.__new__(StringName)
        ret._gd_data = gd_string_name_new()
        return ret
    cpdef inline uint64_t casecmp_to(self, GDString to):
        cdef uint64_t ret = gd_string_name_casecmp_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline uint64_t nocasecmp_to(self, GDString to):
        cdef uint64_t ret = gd_string_name_nocasecmp_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline uint64_t naturalcasecmp_to(self, GDString to):
        cdef uint64_t ret = gd_string_name_naturalcasecmp_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline uint64_t naturalnocasecmp_to(self, GDString to):
        cdef uint64_t ret = gd_string_name_naturalnocasecmp_to(
            &self._gd_data,
            &to._gd_data,
        )
        return ret

    cpdef inline uint64_t length(self):
        cdef uint64_t ret = gd_string_name_length(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString substr(self, uint64_t from_, uint64_t len):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_substr(
            &self._gd_data,
            from_,
            len,
        )
        return ret

    cpdef inline GDString get_slice(self, GDString delimiter, uint64_t slice):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_get_slice(
            &self._gd_data,
            &delimiter._gd_data,
            slice,
        )
        return ret

    cpdef inline GDString get_slicec(self, uint64_t delimiter, uint64_t slice):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_get_slicec(
            &self._gd_data,
            delimiter,
            slice,
        )
        return ret

    cpdef inline uint64_t get_slice_count(self, GDString delimiter):
        cdef uint64_t ret = gd_string_name_get_slice_count(
            &self._gd_data,
            &delimiter._gd_data,
        )
        return ret

    cpdef inline uint64_t find(self, GDString what, uint64_t from_):
        cdef uint64_t ret = gd_string_name_find(
            &self._gd_data,
            &what._gd_data,
            from_,
        )
        return ret

    cpdef inline uint64_t count(self, GDString what, uint64_t from_, uint64_t to):
        cdef uint64_t ret = gd_string_name_count(
            &self._gd_data,
            &what._gd_data,
            from_,
            to,
        )
        return ret

    cpdef inline uint64_t countn(self, GDString what, uint64_t from_, uint64_t to):
        cdef uint64_t ret = gd_string_name_countn(
            &self._gd_data,
            &what._gd_data,
            from_,
            to,
        )
        return ret

    cpdef inline uint64_t findn(self, GDString what, uint64_t from_):
        cdef uint64_t ret = gd_string_name_findn(
            &self._gd_data,
            &what._gd_data,
            from_,
        )
        return ret

    cpdef inline uint64_t rfind(self, GDString what, uint64_t from_):
        cdef uint64_t ret = gd_string_name_rfind(
            &self._gd_data,
            &what._gd_data,
            from_,
        )
        return ret

    cpdef inline uint64_t rfindn(self, GDString what, uint64_t from_):
        cdef uint64_t ret = gd_string_name_rfindn(
            &self._gd_data,
            &what._gd_data,
            from_,
        )
        return ret

    cpdef inline uint8_t match(self, GDString expr):
        cdef uint8_t ret = gd_string_name_match(
            &self._gd_data,
            &expr._gd_data,
        )
        return ret

    cpdef inline uint8_t matchn(self, GDString expr):
        cdef uint8_t ret = gd_string_name_matchn(
            &self._gd_data,
            &expr._gd_data,
        )
        return ret

    cpdef inline uint8_t begins_with(self, GDString text):
        cdef uint8_t ret = gd_string_name_begins_with(
            &self._gd_data,
            &text._gd_data,
        )
        return ret

    cpdef inline uint8_t ends_with(self, GDString text):
        cdef uint8_t ret = gd_string_name_ends_with(
            &self._gd_data,
            &text._gd_data,
        )
        return ret

    cpdef inline uint8_t is_subsequence_of(self, GDString text):
        cdef uint8_t ret = gd_string_name_is_subsequence_of(
            &self._gd_data,
            &text._gd_data,
        )
        return ret

    cpdef inline uint8_t is_subsequence_ofn(self, GDString text):
        cdef uint8_t ret = gd_string_name_is_subsequence_ofn(
            &self._gd_data,
            &text._gd_data,
        )
        return ret

    cpdef inline PackedStringArray bigrams(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedStringArray ret = PackedStringArray.__new__(PackedStringArray)
        ret._gd_data = gd_string_name_bigrams(
            &self._gd_data,
        )
        return ret

    cpdef inline double similarity(self, GDString text):
        cdef double ret = gd_string_name_similarity(
            &self._gd_data,
            &text._gd_data,
        )
        return ret

    cpdef inline GDString format(self, object values, GDString placeholder):
        raise NotImplementedError  # TODO

    cpdef inline GDString replace(self, GDString what, GDString forwhat):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_replace(
            &self._gd_data,
            &what._gd_data,
            &forwhat._gd_data,
        )
        return ret

    cpdef inline GDString replacen(self, GDString what, GDString forwhat):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_replacen(
            &self._gd_data,
            &what._gd_data,
            &forwhat._gd_data,
        )
        return ret

    cpdef inline GDString repeat(self, uint64_t count):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_repeat(
            &self._gd_data,
            count,
        )
        return ret

    cpdef inline GDString insert(self, uint64_t position, GDString what):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_insert(
            &self._gd_data,
            position,
            &what._gd_data,
        )
        return ret

    cpdef inline GDString erase(self, uint64_t position, uint64_t chars):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_erase(
            &self._gd_data,
            position,
            chars,
        )
        return ret

    cpdef inline GDString capitalize(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_capitalize(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString to_camel_case(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_to_camel_case(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString to_pascal_case(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_to_pascal_case(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString to_snake_case(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_to_snake_case(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedStringArray split(self, GDString delimiter, uint8_t allow_empty, uint64_t maxsplit):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedStringArray ret = PackedStringArray.__new__(PackedStringArray)
        ret._gd_data = gd_string_name_split(
            &self._gd_data,
            &delimiter._gd_data,
            allow_empty,
            maxsplit,
        )
        return ret

    cpdef inline PackedStringArray rsplit(self, GDString delimiter, uint8_t allow_empty, uint64_t maxsplit):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedStringArray ret = PackedStringArray.__new__(PackedStringArray)
        ret._gd_data = gd_string_name_rsplit(
            &self._gd_data,
            &delimiter._gd_data,
            allow_empty,
            maxsplit,
        )
        return ret

    cpdef inline PackedFloat64Array split_floats(self, GDString delimiter, uint8_t allow_empty):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedFloat64Array ret = PackedFloat64Array.__new__(PackedFloat64Array)
        ret._gd_data = gd_string_name_split_floats(
            &self._gd_data,
            &delimiter._gd_data,
            allow_empty,
        )
        return ret

    cpdef inline GDString join(self, PackedStringArray parts):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_join(
            &self._gd_data,
            &parts._gd_data,
        )
        return ret

    cpdef inline GDString to_upper(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_to_upper(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString to_lower(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_to_lower(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString left(self, uint64_t length):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_left(
            &self._gd_data,
            length,
        )
        return ret

    cpdef inline GDString right(self, uint64_t length):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_right(
            &self._gd_data,
            length,
        )
        return ret

    cpdef inline GDString strip_edges(self, uint8_t left, uint8_t right):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_strip_edges(
            &self._gd_data,
            left,
            right,
        )
        return ret

    cpdef inline GDString strip_escapes(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_strip_escapes(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString lstrip(self, GDString chars):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_lstrip(
            &self._gd_data,
            &chars._gd_data,
        )
        return ret

    cpdef inline GDString rstrip(self, GDString chars):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_rstrip(
            &self._gd_data,
            &chars._gd_data,
        )
        return ret

    cpdef inline GDString get_extension(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_get_extension(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString get_basename(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_get_basename(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString path_join(self, GDString file):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_path_join(
            &self._gd_data,
            &file._gd_data,
        )
        return ret

    cpdef inline uint64_t unicode_at(self, uint64_t at):
        cdef uint64_t ret = gd_string_name_unicode_at(
            &self._gd_data,
            at,
        )
        return ret

    cpdef inline GDString indent(self, GDString prefix):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_indent(
            &self._gd_data,
            &prefix._gd_data,
        )
        return ret

    cpdef inline GDString dedent(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_dedent(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString md5_text(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_md5_text(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString sha1_text(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_sha1_text(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString sha256_text(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_sha256_text(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedByteArray md5_buffer(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_name_md5_buffer(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedByteArray sha1_buffer(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_name_sha1_buffer(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedByteArray sha256_buffer(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_name_sha256_buffer(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_empty(self):
        cdef uint8_t ret = gd_string_name_is_empty(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t contains(self, GDString what):
        cdef uint8_t ret = gd_string_name_contains(
            &self._gd_data,
            &what._gd_data,
        )
        return ret

    cpdef inline uint8_t is_absolute_path(self):
        cdef uint8_t ret = gd_string_name_is_absolute_path(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_relative_path(self):
        cdef uint8_t ret = gd_string_name_is_relative_path(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString simplify_path(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_simplify_path(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString get_base_dir(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_get_base_dir(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString get_file(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_get_file(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString xml_escape(self, uint8_t escape_quotes):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_xml_escape(
            &self._gd_data,
            escape_quotes,
        )
        return ret

    cpdef inline GDString xml_unescape(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_xml_unescape(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString uri_encode(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_uri_encode(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString uri_decode(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_uri_decode(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString c_escape(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_c_escape(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString c_unescape(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_c_unescape(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString json_escape(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_json_escape(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString validate_node_name(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_validate_node_name(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString validate_filename(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_validate_filename(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_valid_identifier(self):
        cdef uint8_t ret = gd_string_name_is_valid_identifier(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_valid_int(self):
        cdef uint8_t ret = gd_string_name_is_valid_int(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_valid_float(self):
        cdef uint8_t ret = gd_string_name_is_valid_float(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_valid_hex_number(self, uint8_t with_prefix):
        cdef uint8_t ret = gd_string_name_is_valid_hex_number(
            &self._gd_data,
            with_prefix,
        )
        return ret

    cpdef inline uint8_t is_valid_html_color(self):
        cdef uint8_t ret = gd_string_name_is_valid_html_color(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_valid_ip_address(self):
        cdef uint8_t ret = gd_string_name_is_valid_ip_address(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_valid_filename(self):
        cdef uint8_t ret = gd_string_name_is_valid_filename(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t to_int(self):
        cdef uint64_t ret = gd_string_name_to_int(
            &self._gd_data,
        )
        return ret

    cpdef inline double to_float(self):
        cdef double ret = gd_string_name_to_float(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t hex_to_int(self):
        cdef uint64_t ret = gd_string_name_hex_to_int(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t bin_to_int(self):
        cdef uint64_t ret = gd_string_name_bin_to_int(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString lpad(self, uint64_t min_length, GDString character):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_lpad(
            &self._gd_data,
            min_length,
            &character._gd_data,
        )
        return ret

    cpdef inline GDString rpad(self, uint64_t min_length, GDString character):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_rpad(
            &self._gd_data,
            min_length,
            &character._gd_data,
        )
        return ret

    cpdef inline GDString pad_decimals(self, uint64_t digits):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_pad_decimals(
            &self._gd_data,
            digits,
        )
        return ret

    cpdef inline GDString pad_zeros(self, uint64_t digits):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_pad_zeros(
            &self._gd_data,
            digits,
        )
        return ret

    cpdef inline GDString trim_prefix(self, GDString prefix):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_trim_prefix(
            &self._gd_data,
            &prefix._gd_data,
        )
        return ret

    cpdef inline GDString trim_suffix(self, GDString suffix):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_string_name_trim_suffix(
            &self._gd_data,
            &suffix._gd_data,
        )
        return ret

    cpdef inline PackedByteArray to_ascii_buffer(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_name_to_ascii_buffer(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedByteArray to_utf8_buffer(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_name_to_utf8_buffer(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedByteArray to_utf16_buffer(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_name_to_utf16_buffer(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedByteArray to_utf32_buffer(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_name_to_utf32_buffer(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedByteArray hex_decode(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_name_hex_decode(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedByteArray to_wchar_buffer(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_string_name_to_wchar_buffer(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t hash(self):
        cdef uint64_t ret = gd_string_name_hash(
            &self._gd_data,
        )
        return ret




@cython.freelist(8)
@cython.final
cdef class NodePath:
    cdef gd_node_path_t _gd_data

    cpdef inline NodePath clone(self):
        cdef NodePath obj = NodePath.__new__(NodePath)
        obj._gd_data = gd_node_path_new_from_node_path(&self._gd_data)
        return obj


    @staticmethod
    cdef inline NodePath new():
        # Call to __new__ bypasses __init__ constructor
        cdef NodePath ret = NodePath.__new__(NodePath)
        ret._gd_data = gd_node_path_new()
        return ret
    cpdef inline uint8_t is_absolute(self):
        cdef uint8_t ret = gd_node_path_is_absolute(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t get_name_count(self):
        cdef uint64_t ret = gd_node_path_get_name_count(
            &self._gd_data,
        )
        return ret

    cpdef inline StringName get_name(self, uint64_t idx):
        # Call to __new__ bypasses __init__ constructor
        cdef StringName ret = StringName.__new__(StringName)
        ret._gd_data = gd_node_path_get_name(
            &self._gd_data,
            idx,
        )
        return ret

    cpdef inline uint64_t get_subname_count(self):
        cdef uint64_t ret = gd_node_path_get_subname_count(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t hash(self):
        cdef uint64_t ret = gd_node_path_hash(
            &self._gd_data,
        )
        return ret

    cpdef inline StringName get_subname(self, uint64_t idx):
        # Call to __new__ bypasses __init__ constructor
        cdef StringName ret = StringName.__new__(StringName)
        ret._gd_data = gd_node_path_get_subname(
            &self._gd_data,
            idx,
        )
        return ret

    cpdef inline StringName get_concatenated_names(self):
        # Call to __new__ bypasses __init__ constructor
        cdef StringName ret = StringName.__new__(StringName)
        ret._gd_data = gd_node_path_get_concatenated_names(
            &self._gd_data,
        )
        return ret

    cpdef inline StringName get_concatenated_subnames(self):
        # Call to __new__ bypasses __init__ constructor
        cdef StringName ret = StringName.__new__(StringName)
        ret._gd_data = gd_node_path_get_concatenated_subnames(
            &self._gd_data,
        )
        return ret

    cpdef inline NodePath get_as_property_path(self):
        # Call to __new__ bypasses __init__ constructor
        cdef NodePath ret = NodePath.__new__(NodePath)
        ret._gd_data = gd_node_path_get_as_property_path(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_empty(self):
        cdef uint8_t ret = gd_node_path_is_empty(
            &self._gd_data,
        )
        return ret




@cython.freelist(8)
@cython.final
cdef class RID:
    cdef gd_rid_t _gd_data

    cpdef inline RID clone(self):
        cdef RID obj = RID.__new__(RID)
        obj._gd_data = gd_rid_new_from_rid(&self._gd_data)
        return obj


    @staticmethod
    cdef inline RID new():
        # Call to __new__ bypasses __init__ constructor
        cdef RID ret = RID.__new__(RID)
        ret._gd_data = gd_rid_new()
        return ret
    cpdef inline uint8_t is_valid(self):
        cdef uint8_t ret = gd_rid_is_valid(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t get_id(self):
        cdef uint64_t ret = gd_rid_get_id(
            &self._gd_data,
        )
        return ret




@cython.freelist(8)
@cython.final
cdef class GDCallable:
    cdef gd_callable_t _gd_data

    cpdef inline GDCallable clone(self):
        cdef GDCallable obj = GDCallable.__new__(GDCallable)
        obj._gd_data = gd_callable_new_from_callable(&self._gd_data)
        return obj


    @staticmethod
    cdef inline GDCallable new():
        # Call to __new__ bypasses __init__ constructor
        cdef GDCallable ret = GDCallable.__new__(GDCallable)
        ret._gd_data = gd_callable_new()
        return ret
    cpdef inline object callv(self, GDArray arguments):
        raise NotImplementedError  # TODO

    cpdef inline uint8_t is_null(self):
        cdef uint8_t ret = gd_callable_is_null(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_custom(self):
        cdef uint8_t ret = gd_callable_is_custom(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_standard(self):
        cdef uint8_t ret = gd_callable_is_standard(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_valid(self):
        cdef uint8_t ret = gd_callable_is_valid(
            &self._gd_data,
        )
        return ret

    cpdef inline GDObject get_object(self):
        raise NotImplementedError  # TODO

    cpdef inline uint64_t get_object_id(self):
        cdef uint64_t ret = gd_callable_get_object_id(
            &self._gd_data,
        )
        return ret

    cpdef inline StringName get_method(self):
        # Call to __new__ bypasses __init__ constructor
        cdef StringName ret = StringName.__new__(StringName)
        ret._gd_data = gd_callable_get_method(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t get_bound_arguments_count(self):
        cdef uint64_t ret = gd_callable_get_bound_arguments_count(
            &self._gd_data,
        )
        return ret

    cpdef inline GDArray get_bound_arguments(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDArray ret = GDArray.__new__(GDArray)
        ret._gd_data = gd_callable_get_bound_arguments(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t hash(self):
        cdef uint64_t ret = gd_callable_hash(
            &self._gd_data,
        )
        return ret

    cpdef inline GDCallable bindv(self, GDArray arguments):
        # Call to __new__ bypasses __init__ constructor
        cdef GDCallable ret = GDCallable.__new__(GDCallable)
        ret._gd_data = gd_callable_bindv(
            &self._gd_data,
            &arguments._gd_data,
        )
        return ret

    cpdef inline GDCallable unbind(self, uint64_t argcount):
        # Call to __new__ bypasses __init__ constructor
        cdef GDCallable ret = GDCallable.__new__(GDCallable)
        ret._gd_data = gd_callable_unbind(
            &self._gd_data,
            argcount,
        )
        return ret

    cpdef inline object call(self):
        raise NotImplementedError  # TODO

    cpdef inline void call_deferred(self):
        gd_callable_call_deferred(
            &self._gd_data,
        )

    cpdef inline void rpc(self):
        gd_callable_rpc(
            &self._gd_data,
        )

    cpdef inline void rpc_id(self, uint64_t peer_id):
        gd_callable_rpc_id(
            &self._gd_data,
            peer_id,
        )

    cpdef inline GDCallable bind(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDCallable ret = GDCallable.__new__(GDCallable)
        ret._gd_data = gd_callable_bind(
            &self._gd_data,
        )
        return ret




@cython.freelist(8)
@cython.final
cdef class Signal:
    cdef gd_signal_t _gd_data

    cpdef inline Signal clone(self):
        cdef Signal obj = Signal.__new__(Signal)
        obj._gd_data = gd_signal_new_from_signal(&self._gd_data)
        return obj


    @staticmethod
    cdef inline Signal new():
        # Call to __new__ bypasses __init__ constructor
        cdef Signal ret = Signal.__new__(Signal)
        ret._gd_data = gd_signal_new()
        return ret
    cpdef inline uint8_t is_null(self):
        cdef uint8_t ret = gd_signal_is_null(
            &self._gd_data,
        )
        return ret

    cpdef inline GDObject get_object(self):
        raise NotImplementedError  # TODO

    cpdef inline uint64_t get_object_id(self):
        cdef uint64_t ret = gd_signal_get_object_id(
            &self._gd_data,
        )
        return ret

    cpdef inline StringName get_name(self):
        # Call to __new__ bypasses __init__ constructor
        cdef StringName ret = StringName.__new__(StringName)
        ret._gd_data = gd_signal_get_name(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t connect(self, GDCallable callable, uint64_t flags):
        cdef uint64_t ret = gd_signal_connect(
            &self._gd_data,
            &callable._gd_data,
            flags,
        )
        return ret

    cpdef inline void disconnect(self, GDCallable callable):
        gd_signal_disconnect(
            &self._gd_data,
            &callable._gd_data,
        )

    cpdef inline uint8_t is_connected(self, GDCallable callable):
        cdef uint8_t ret = gd_signal_is_connected(
            &self._gd_data,
            &callable._gd_data,
        )
        return ret

    cpdef inline GDArray get_connections(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDArray ret = GDArray.__new__(GDArray)
        ret._gd_data = gd_signal_get_connections(
            &self._gd_data,
        )
        return ret

    cpdef inline void emit(self):
        gd_signal_emit(
            &self._gd_data,
        )




@cython.freelist(8)
@cython.final
cdef class GDDictionary:
    cdef gd_dictionary_t _gd_data

    cpdef inline GDDictionary clone(self):
        cdef GDDictionary obj = GDDictionary.__new__(GDDictionary)
        obj._gd_data = gd_dictionary_new_from_dictionary(&self._gd_data)
        return obj


    @staticmethod
    cdef inline GDDictionary new():
        # Call to __new__ bypasses __init__ constructor
        cdef GDDictionary ret = GDDictionary.__new__(GDDictionary)
        ret._gd_data = gd_dictionary_new()
        return ret
    cpdef inline uint64_t size(self):
        cdef uint64_t ret = gd_dictionary_size(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_empty(self):
        cdef uint8_t ret = gd_dictionary_is_empty(
            &self._gd_data,
        )
        return ret

    cpdef inline void clear(self):
        gd_dictionary_clear(
            &self._gd_data,
        )

    cpdef inline void merge(self, GDDictionary dictionary, uint8_t overwrite):
        gd_dictionary_merge(
            &self._gd_data,
            &dictionary._gd_data,
            overwrite,
        )

    cpdef inline uint8_t has(self, object key):
        raise NotImplementedError  # TODO

    cpdef inline uint8_t has_all(self, GDArray keys):
        cdef uint8_t ret = gd_dictionary_has_all(
            &self._gd_data,
            &keys._gd_data,
        )
        return ret

    cpdef inline object find_key(self, object value):
        raise NotImplementedError  # TODO

    cpdef inline uint8_t erase(self, object key):
        raise NotImplementedError  # TODO

    cpdef inline uint64_t hash(self):
        cdef uint64_t ret = gd_dictionary_hash(
            &self._gd_data,
        )
        return ret

    cpdef inline GDArray keys(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDArray ret = GDArray.__new__(GDArray)
        ret._gd_data = gd_dictionary_keys(
            &self._gd_data,
        )
        return ret

    cpdef inline GDArray values(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDArray ret = GDArray.__new__(GDArray)
        ret._gd_data = gd_dictionary_values(
            &self._gd_data,
        )
        return ret

    cpdef inline GDDictionary duplicate(self, uint8_t deep):
        # Call to __new__ bypasses __init__ constructor
        cdef GDDictionary ret = GDDictionary.__new__(GDDictionary)
        ret._gd_data = gd_dictionary_duplicate(
            &self._gd_data,
            deep,
        )
        return ret

    cpdef inline object get(self, object key, object default):
        raise NotImplementedError  # TODO

    cpdef inline void make_read_only(self):
        gd_dictionary_make_read_only(
            &self._gd_data,
        )

    cpdef inline uint8_t is_read_only(self):
        cdef uint8_t ret = gd_dictionary_is_read_only(
            &self._gd_data,
        )
        return ret

    cdef inline object _getitem(self, object key):
        cdef gd_variant_t gdret
        cdef gd_variant_t gdkey = ensure_is_gdany_and_borrow_ref(key)
        gdret = gd_dictionary_keyed_getter(&self._gd_data, &gdkey)
        return gd_variant_steal_into_pyobj(&gdret)
        # No need to destroy gdret given the conversion has stolen ownership on data !

    cdef inline void _setitem(self, object key, object value):
        cdef gd_variant_t gdkey = ensure_is_gdany_and_borrow_ref(key)
        cdef gd_variant_t gdvalue
        gdvalue = ensure_is_gdany_and_borrow_ref(value)
        gd_dictionary_keyed_setter(&self._gd_data, &gdkey, &gdvalue)




@cython.freelist(8)
@cython.final
cdef class GDArray:
    cdef gd_array_t _gd_data

    cpdef inline GDArray clone(self):
        cdef GDArray obj = GDArray.__new__(GDArray)
        obj._gd_data = gd_array_new_from_array(&self._gd_data)
        return obj


    @staticmethod
    cdef inline GDArray new():
        # Call to __new__ bypasses __init__ constructor
        cdef GDArray ret = GDArray.__new__(GDArray)
        ret._gd_data = gd_array_new()
        return ret
    cpdef inline uint64_t size(self):
        cdef uint64_t ret = gd_array_size(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_empty(self):
        cdef uint8_t ret = gd_array_is_empty(
            &self._gd_data,
        )
        return ret

    cpdef inline void clear(self):
        gd_array_clear(
            &self._gd_data,
        )

    cpdef inline uint64_t hash(self):
        cdef uint64_t ret = gd_array_hash(
            &self._gd_data,
        )
        return ret

    cpdef inline void assign(self, GDArray array):
        gd_array_assign(
            &self._gd_data,
            &array._gd_data,
        )

    cpdef inline void push_back(self, object value):
        raise NotImplementedError  # TODO

    cpdef inline void push_front(self, object value):
        raise NotImplementedError  # TODO

    cpdef inline void append(self, object value):
        raise NotImplementedError  # TODO

    cpdef inline void append_array(self, GDArray array):
        gd_array_append_array(
            &self._gd_data,
            &array._gd_data,
        )

    cpdef inline uint64_t resize(self, uint64_t size):
        cdef uint64_t ret = gd_array_resize(
            &self._gd_data,
            size,
        )
        return ret

    cpdef inline uint64_t insert(self, uint64_t position, object value):
        raise NotImplementedError  # TODO

    cpdef inline void remove_at(self, uint64_t position):
        gd_array_remove_at(
            &self._gd_data,
            position,
        )

    cpdef inline void fill(self, object value):
        raise NotImplementedError  # TODO

    cpdef inline void erase(self, object value):
        raise NotImplementedError  # TODO

    cpdef inline object front(self):
        raise NotImplementedError  # TODO

    cpdef inline object back(self):
        raise NotImplementedError  # TODO

    cpdef inline object pick_random(self):
        raise NotImplementedError  # TODO

    cpdef inline uint64_t find(self, object what, uint64_t from_):
        raise NotImplementedError  # TODO

    cpdef inline uint64_t rfind(self, object what, uint64_t from_):
        raise NotImplementedError  # TODO

    cpdef inline uint64_t count(self, object value):
        raise NotImplementedError  # TODO

    cpdef inline uint8_t has(self, object value):
        raise NotImplementedError  # TODO

    cpdef inline object pop_back(self):
        raise NotImplementedError  # TODO

    cpdef inline object pop_front(self):
        raise NotImplementedError  # TODO

    cpdef inline object pop_at(self, uint64_t position):
        raise NotImplementedError  # TODO

    cpdef inline void sort(self):
        gd_array_sort(
            &self._gd_data,
        )

    cpdef inline void sort_custom(self, GDCallable func):
        gd_array_sort_custom(
            &self._gd_data,
            &func._gd_data,
        )

    cpdef inline void shuffle(self):
        gd_array_shuffle(
            &self._gd_data,
        )

    cpdef inline uint64_t bsearch(self, object value, uint8_t before):
        raise NotImplementedError  # TODO

    cpdef inline uint64_t bsearch_custom(self, object value, GDCallable func, uint8_t before):
        raise NotImplementedError  # TODO

    cpdef inline void reverse(self):
        gd_array_reverse(
            &self._gd_data,
        )

    cpdef inline GDArray duplicate(self, uint8_t deep):
        # Call to __new__ bypasses __init__ constructor
        cdef GDArray ret = GDArray.__new__(GDArray)
        ret._gd_data = gd_array_duplicate(
            &self._gd_data,
            deep,
        )
        return ret

    cpdef inline GDArray slice(self, uint64_t begin, uint64_t end, uint64_t step, uint8_t deep):
        # Call to __new__ bypasses __init__ constructor
        cdef GDArray ret = GDArray.__new__(GDArray)
        ret._gd_data = gd_array_slice(
            &self._gd_data,
            begin,
            end,
            step,
            deep,
        )
        return ret

    cpdef inline GDArray filter(self, GDCallable method):
        # Call to __new__ bypasses __init__ constructor
        cdef GDArray ret = GDArray.__new__(GDArray)
        ret._gd_data = gd_array_filter(
            &self._gd_data,
            &method._gd_data,
        )
        return ret

    cpdef inline GDArray map(self, GDCallable method):
        # Call to __new__ bypasses __init__ constructor
        cdef GDArray ret = GDArray.__new__(GDArray)
        ret._gd_data = gd_array_map(
            &self._gd_data,
            &method._gd_data,
        )
        return ret

    cpdef inline object reduce(self, GDCallable method, object accum):
        raise NotImplementedError  # TODO

    cpdef inline uint8_t any(self, GDCallable method):
        cdef uint8_t ret = gd_array_any(
            &self._gd_data,
            &method._gd_data,
        )
        return ret

    cpdef inline uint8_t all(self, GDCallable method):
        cdef uint8_t ret = gd_array_all(
            &self._gd_data,
            &method._gd_data,
        )
        return ret

    cpdef inline object max(self):
        raise NotImplementedError  # TODO

    cpdef inline object min(self):
        raise NotImplementedError  # TODO

    cpdef inline uint8_t is_typed(self):
        cdef uint8_t ret = gd_array_is_typed(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_same_typed(self, GDArray array):
        cdef uint8_t ret = gd_array_is_same_typed(
            &self._gd_data,
            &array._gd_data,
        )
        return ret

    cpdef inline uint64_t get_typed_builtin(self):
        cdef uint64_t ret = gd_array_get_typed_builtin(
            &self._gd_data,
        )
        return ret

    cpdef inline StringName get_typed_class_name(self):
        # Call to __new__ bypasses __init__ constructor
        cdef StringName ret = StringName.__new__(StringName)
        ret._gd_data = gd_array_get_typed_class_name(
            &self._gd_data,
        )
        return ret

    cpdef inline object get_typed_script(self):
        raise NotImplementedError  # TODO

    cpdef inline void make_read_only(self):
        gd_array_make_read_only(
            &self._gd_data,
        )

    cpdef inline uint8_t is_read_only(self):
        cdef uint8_t ret = gd_array_is_read_only(
            &self._gd_data,
        )
        return ret

    cdef inline object _getitem(self, GDExtensionInt index):
        cdef const gd_variant_t *item = <const gd_variant_t *>pythonscript_gdextension.array_operator_index_const(&self._gd_data, index)
        if item != NULL:
            return gd_variant_copy_into_pyobj(item)
        else:
            raise IndexError

    cdef inline void _setitem(self, GDExtensionInt index, object value):
        cdef gd_variant_t *item = <gd_variant_t *>pythonscript_gdextension.array_operator_index(&self._gd_data, index)
        cdef gd_variant_t gdvalue
        if item != NULL:
            gdvalue = ensure_is_gdany_and_borrow_ref(value)
            pythonscript_gdextension.variant_new_copy(item, &gdvalue)
        else:
            raise IndexError





@cython.freelist(8)
@cython.final
cdef class PackedByteArray:
    cdef gd_packed_byte_array_t _gd_data

    cpdef inline PackedByteArray clone(self):
        cdef PackedByteArray obj = PackedByteArray.__new__(PackedByteArray)
        obj._gd_data = gd_packed_byte_array_new_from_packed_byte_array(&self._gd_data)
        return obj


    @staticmethod
    cdef inline PackedByteArray new():
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_packed_byte_array_new()
        return ret
    cpdef inline uint64_t size(self):
        cdef uint64_t ret = gd_packed_byte_array_size(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_empty(self):
        cdef uint8_t ret = gd_packed_byte_array_is_empty(
            &self._gd_data,
        )
        return ret

    cpdef inline void set(self, uint64_t index, uint64_t value):
        gd_packed_byte_array_set(
            &self._gd_data,
            index,
            value,
        )

    cpdef inline uint8_t push_back(self, uint64_t value):
        cdef uint8_t ret = gd_packed_byte_array_push_back(
            &self._gd_data,
            value,
        )
        return ret

    cpdef inline uint8_t append(self, uint64_t value):
        cdef uint8_t ret = gd_packed_byte_array_append(
            &self._gd_data,
            value,
        )
        return ret

    cpdef inline void append_array(self, PackedByteArray array):
        gd_packed_byte_array_append_array(
            &self._gd_data,
            &array._gd_data,
        )

    cpdef inline void remove_at(self, uint64_t index):
        gd_packed_byte_array_remove_at(
            &self._gd_data,
            index,
        )

    cpdef inline uint64_t insert(self, uint64_t at_index, uint64_t value):
        cdef uint64_t ret = gd_packed_byte_array_insert(
            &self._gd_data,
            at_index,
            value,
        )
        return ret

    cpdef inline void fill(self, uint64_t value):
        gd_packed_byte_array_fill(
            &self._gd_data,
            value,
        )

    cpdef inline uint64_t resize(self, uint64_t new_size):
        cdef uint64_t ret = gd_packed_byte_array_resize(
            &self._gd_data,
            new_size,
        )
        return ret

    cpdef inline void clear(self):
        gd_packed_byte_array_clear(
            &self._gd_data,
        )

    cpdef inline uint8_t has(self, uint64_t value):
        cdef uint8_t ret = gd_packed_byte_array_has(
            &self._gd_data,
            value,
        )
        return ret

    cpdef inline void reverse(self):
        gd_packed_byte_array_reverse(
            &self._gd_data,
        )

    cpdef inline PackedByteArray slice(self, uint64_t begin, uint64_t end):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_packed_byte_array_slice(
            &self._gd_data,
            begin,
            end,
        )
        return ret

    cpdef inline void sort(self):
        gd_packed_byte_array_sort(
            &self._gd_data,
        )

    cpdef inline uint64_t bsearch(self, uint64_t value, uint8_t before):
        cdef uint64_t ret = gd_packed_byte_array_bsearch(
            &self._gd_data,
            value,
            before,
        )
        return ret

    cpdef inline PackedByteArray duplicate(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_packed_byte_array_duplicate(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t find(self, uint64_t value, uint64_t from_):
        cdef uint64_t ret = gd_packed_byte_array_find(
            &self._gd_data,
            value,
            from_,
        )
        return ret

    cpdef inline uint64_t rfind(self, uint64_t value, uint64_t from_):
        cdef uint64_t ret = gd_packed_byte_array_rfind(
            &self._gd_data,
            value,
            from_,
        )
        return ret

    cpdef inline uint64_t count(self, uint64_t value):
        cdef uint64_t ret = gd_packed_byte_array_count(
            &self._gd_data,
            value,
        )
        return ret

    cpdef inline GDString get_string_from_ascii(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_packed_byte_array_get_string_from_ascii(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString get_string_from_utf8(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_packed_byte_array_get_string_from_utf8(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString get_string_from_utf16(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_packed_byte_array_get_string_from_utf16(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString get_string_from_utf32(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_packed_byte_array_get_string_from_utf32(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString get_string_from_wchar(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_packed_byte_array_get_string_from_wchar(
            &self._gd_data,
        )
        return ret

    cpdef inline GDString hex_encode(self):
        # Call to __new__ bypasses __init__ constructor
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data = gd_packed_byte_array_hex_encode(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedByteArray compress(self, uint64_t compression_mode):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_packed_byte_array_compress(
            &self._gd_data,
            compression_mode,
        )
        return ret

    cpdef inline PackedByteArray decompress(self, uint64_t buffer_size, uint64_t compression_mode):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_packed_byte_array_decompress(
            &self._gd_data,
            buffer_size,
            compression_mode,
        )
        return ret

    cpdef inline PackedByteArray decompress_dynamic(self, uint64_t max_output_size, uint64_t compression_mode):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_packed_byte_array_decompress_dynamic(
            &self._gd_data,
            max_output_size,
            compression_mode,
        )
        return ret

    cpdef inline uint64_t decode_u8(self, uint64_t byte_offset):
        cdef uint64_t ret = gd_packed_byte_array_decode_u8(
            &self._gd_data,
            byte_offset,
        )
        return ret

    cpdef inline uint64_t decode_s8(self, uint64_t byte_offset):
        cdef uint64_t ret = gd_packed_byte_array_decode_s8(
            &self._gd_data,
            byte_offset,
        )
        return ret

    cpdef inline uint64_t decode_u16(self, uint64_t byte_offset):
        cdef uint64_t ret = gd_packed_byte_array_decode_u16(
            &self._gd_data,
            byte_offset,
        )
        return ret

    cpdef inline uint64_t decode_s16(self, uint64_t byte_offset):
        cdef uint64_t ret = gd_packed_byte_array_decode_s16(
            &self._gd_data,
            byte_offset,
        )
        return ret

    cpdef inline uint64_t decode_u32(self, uint64_t byte_offset):
        cdef uint64_t ret = gd_packed_byte_array_decode_u32(
            &self._gd_data,
            byte_offset,
        )
        return ret

    cpdef inline uint64_t decode_s32(self, uint64_t byte_offset):
        cdef uint64_t ret = gd_packed_byte_array_decode_s32(
            &self._gd_data,
            byte_offset,
        )
        return ret

    cpdef inline uint64_t decode_u64(self, uint64_t byte_offset):
        cdef uint64_t ret = gd_packed_byte_array_decode_u64(
            &self._gd_data,
            byte_offset,
        )
        return ret

    cpdef inline uint64_t decode_s64(self, uint64_t byte_offset):
        cdef uint64_t ret = gd_packed_byte_array_decode_s64(
            &self._gd_data,
            byte_offset,
        )
        return ret

    cpdef inline double decode_half(self, uint64_t byte_offset):
        cdef double ret = gd_packed_byte_array_decode_half(
            &self._gd_data,
            byte_offset,
        )
        return ret

    cpdef inline double decode_float(self, uint64_t byte_offset):
        cdef double ret = gd_packed_byte_array_decode_float(
            &self._gd_data,
            byte_offset,
        )
        return ret

    cpdef inline double decode_double(self, uint64_t byte_offset):
        cdef double ret = gd_packed_byte_array_decode_double(
            &self._gd_data,
            byte_offset,
        )
        return ret

    cpdef inline uint8_t has_encoded_var(self, uint64_t byte_offset, uint8_t allow_objects):
        cdef uint8_t ret = gd_packed_byte_array_has_encoded_var(
            &self._gd_data,
            byte_offset,
            allow_objects,
        )
        return ret

    cpdef inline object decode_var(self, uint64_t byte_offset, uint8_t allow_objects):
        raise NotImplementedError  # TODO

    cpdef inline uint64_t decode_var_size(self, uint64_t byte_offset, uint8_t allow_objects):
        cdef uint64_t ret = gd_packed_byte_array_decode_var_size(
            &self._gd_data,
            byte_offset,
            allow_objects,
        )
        return ret

    cpdef inline PackedInt32Array to_int32_array(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedInt32Array ret = PackedInt32Array.__new__(PackedInt32Array)
        ret._gd_data = gd_packed_byte_array_to_int32_array(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedInt64Array to_int64_array(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedInt64Array ret = PackedInt64Array.__new__(PackedInt64Array)
        ret._gd_data = gd_packed_byte_array_to_int64_array(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedFloat32Array to_float32_array(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedFloat32Array ret = PackedFloat32Array.__new__(PackedFloat32Array)
        ret._gd_data = gd_packed_byte_array_to_float32_array(
            &self._gd_data,
        )
        return ret

    cpdef inline PackedFloat64Array to_float64_array(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedFloat64Array ret = PackedFloat64Array.__new__(PackedFloat64Array)
        ret._gd_data = gd_packed_byte_array_to_float64_array(
            &self._gd_data,
        )
        return ret

    cpdef inline void encode_u8(self, uint64_t byte_offset, uint64_t value):
        gd_packed_byte_array_encode_u8(
            &self._gd_data,
            byte_offset,
            value,
        )

    cpdef inline void encode_s8(self, uint64_t byte_offset, uint64_t value):
        gd_packed_byte_array_encode_s8(
            &self._gd_data,
            byte_offset,
            value,
        )

    cpdef inline void encode_u16(self, uint64_t byte_offset, uint64_t value):
        gd_packed_byte_array_encode_u16(
            &self._gd_data,
            byte_offset,
            value,
        )

    cpdef inline void encode_s16(self, uint64_t byte_offset, uint64_t value):
        gd_packed_byte_array_encode_s16(
            &self._gd_data,
            byte_offset,
            value,
        )

    cpdef inline void encode_u32(self, uint64_t byte_offset, uint64_t value):
        gd_packed_byte_array_encode_u32(
            &self._gd_data,
            byte_offset,
            value,
        )

    cpdef inline void encode_s32(self, uint64_t byte_offset, uint64_t value):
        gd_packed_byte_array_encode_s32(
            &self._gd_data,
            byte_offset,
            value,
        )

    cpdef inline void encode_u64(self, uint64_t byte_offset, uint64_t value):
        gd_packed_byte_array_encode_u64(
            &self._gd_data,
            byte_offset,
            value,
        )

    cpdef inline void encode_s64(self, uint64_t byte_offset, uint64_t value):
        gd_packed_byte_array_encode_s64(
            &self._gd_data,
            byte_offset,
            value,
        )

    cpdef inline void encode_half(self, uint64_t byte_offset, double value):
        gd_packed_byte_array_encode_half(
            &self._gd_data,
            byte_offset,
            value,
        )

    cpdef inline void encode_float(self, uint64_t byte_offset, double value):
        gd_packed_byte_array_encode_float(
            &self._gd_data,
            byte_offset,
            value,
        )

    cpdef inline void encode_double(self, uint64_t byte_offset, double value):
        gd_packed_byte_array_encode_double(
            &self._gd_data,
            byte_offset,
            value,
        )

    cpdef inline uint64_t encode_var(self, uint64_t byte_offset, object value, uint8_t allow_objects):
        raise NotImplementedError  # TODO

    cdef inline uint64_t _getitem(self, GDExtensionInt index):
        return gd_packed_byte_array_indexed_getter(&self._gd_data, index)

    cdef inline void _setitem(self, GDExtensionInt index, uint64_t value):
        gd_packed_byte_array_indexed_setter(&self._gd_data, index, value)





@cython.freelist(8)
@cython.final
cdef class PackedInt32Array:
    cdef gd_packed_int32_array_t _gd_data

    cpdef inline PackedInt32Array clone(self):
        cdef PackedInt32Array obj = PackedInt32Array.__new__(PackedInt32Array)
        obj._gd_data = gd_packed_int32_array_new_from_packed_int32_array(&self._gd_data)
        return obj


    @staticmethod
    cdef inline PackedInt32Array new():
        # Call to __new__ bypasses __init__ constructor
        cdef PackedInt32Array ret = PackedInt32Array.__new__(PackedInt32Array)
        ret._gd_data = gd_packed_int32_array_new()
        return ret
    cpdef inline uint64_t size(self):
        cdef uint64_t ret = gd_packed_int32_array_size(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_empty(self):
        cdef uint8_t ret = gd_packed_int32_array_is_empty(
            &self._gd_data,
        )
        return ret

    cpdef inline void set(self, uint64_t index, uint64_t value):
        gd_packed_int32_array_set(
            &self._gd_data,
            index,
            value,
        )

    cpdef inline uint8_t push_back(self, uint64_t value):
        cdef uint8_t ret = gd_packed_int32_array_push_back(
            &self._gd_data,
            value,
        )
        return ret

    cpdef inline uint8_t append(self, uint64_t value):
        cdef uint8_t ret = gd_packed_int32_array_append(
            &self._gd_data,
            value,
        )
        return ret

    cpdef inline void append_array(self, PackedInt32Array array):
        gd_packed_int32_array_append_array(
            &self._gd_data,
            &array._gd_data,
        )

    cpdef inline void remove_at(self, uint64_t index):
        gd_packed_int32_array_remove_at(
            &self._gd_data,
            index,
        )

    cpdef inline uint64_t insert(self, uint64_t at_index, uint64_t value):
        cdef uint64_t ret = gd_packed_int32_array_insert(
            &self._gd_data,
            at_index,
            value,
        )
        return ret

    cpdef inline void fill(self, uint64_t value):
        gd_packed_int32_array_fill(
            &self._gd_data,
            value,
        )

    cpdef inline uint64_t resize(self, uint64_t new_size):
        cdef uint64_t ret = gd_packed_int32_array_resize(
            &self._gd_data,
            new_size,
        )
        return ret

    cpdef inline void clear(self):
        gd_packed_int32_array_clear(
            &self._gd_data,
        )

    cpdef inline uint8_t has(self, uint64_t value):
        cdef uint8_t ret = gd_packed_int32_array_has(
            &self._gd_data,
            value,
        )
        return ret

    cpdef inline void reverse(self):
        gd_packed_int32_array_reverse(
            &self._gd_data,
        )

    cpdef inline PackedInt32Array slice(self, uint64_t begin, uint64_t end):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedInt32Array ret = PackedInt32Array.__new__(PackedInt32Array)
        ret._gd_data = gd_packed_int32_array_slice(
            &self._gd_data,
            begin,
            end,
        )
        return ret

    cpdef inline PackedByteArray to_byte_array(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_packed_int32_array_to_byte_array(
            &self._gd_data,
        )
        return ret

    cpdef inline void sort(self):
        gd_packed_int32_array_sort(
            &self._gd_data,
        )

    cpdef inline uint64_t bsearch(self, uint64_t value, uint8_t before):
        cdef uint64_t ret = gd_packed_int32_array_bsearch(
            &self._gd_data,
            value,
            before,
        )
        return ret

    cpdef inline PackedInt32Array duplicate(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedInt32Array ret = PackedInt32Array.__new__(PackedInt32Array)
        ret._gd_data = gd_packed_int32_array_duplicate(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t find(self, uint64_t value, uint64_t from_):
        cdef uint64_t ret = gd_packed_int32_array_find(
            &self._gd_data,
            value,
            from_,
        )
        return ret

    cpdef inline uint64_t rfind(self, uint64_t value, uint64_t from_):
        cdef uint64_t ret = gd_packed_int32_array_rfind(
            &self._gd_data,
            value,
            from_,
        )
        return ret

    cpdef inline uint64_t count(self, uint64_t value):
        cdef uint64_t ret = gd_packed_int32_array_count(
            &self._gd_data,
            value,
        )
        return ret

    cdef inline uint64_t _getitem(self, GDExtensionInt index):
        return gd_packed_int32_array_indexed_getter(&self._gd_data, index)

    cdef inline void _setitem(self, GDExtensionInt index, uint64_t value):
        gd_packed_int32_array_indexed_setter(&self._gd_data, index, value)





@cython.freelist(8)
@cython.final
cdef class PackedInt64Array:
    cdef gd_packed_int64_array_t _gd_data

    cpdef inline PackedInt64Array clone(self):
        cdef PackedInt64Array obj = PackedInt64Array.__new__(PackedInt64Array)
        obj._gd_data = gd_packed_int64_array_new_from_packed_int64_array(&self._gd_data)
        return obj


    @staticmethod
    cdef inline PackedInt64Array new():
        # Call to __new__ bypasses __init__ constructor
        cdef PackedInt64Array ret = PackedInt64Array.__new__(PackedInt64Array)
        ret._gd_data = gd_packed_int64_array_new()
        return ret
    cpdef inline uint64_t size(self):
        cdef uint64_t ret = gd_packed_int64_array_size(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_empty(self):
        cdef uint8_t ret = gd_packed_int64_array_is_empty(
            &self._gd_data,
        )
        return ret

    cpdef inline void set(self, uint64_t index, uint64_t value):
        gd_packed_int64_array_set(
            &self._gd_data,
            index,
            value,
        )

    cpdef inline uint8_t push_back(self, uint64_t value):
        cdef uint8_t ret = gd_packed_int64_array_push_back(
            &self._gd_data,
            value,
        )
        return ret

    cpdef inline uint8_t append(self, uint64_t value):
        cdef uint8_t ret = gd_packed_int64_array_append(
            &self._gd_data,
            value,
        )
        return ret

    cpdef inline void append_array(self, PackedInt64Array array):
        gd_packed_int64_array_append_array(
            &self._gd_data,
            &array._gd_data,
        )

    cpdef inline void remove_at(self, uint64_t index):
        gd_packed_int64_array_remove_at(
            &self._gd_data,
            index,
        )

    cpdef inline uint64_t insert(self, uint64_t at_index, uint64_t value):
        cdef uint64_t ret = gd_packed_int64_array_insert(
            &self._gd_data,
            at_index,
            value,
        )
        return ret

    cpdef inline void fill(self, uint64_t value):
        gd_packed_int64_array_fill(
            &self._gd_data,
            value,
        )

    cpdef inline uint64_t resize(self, uint64_t new_size):
        cdef uint64_t ret = gd_packed_int64_array_resize(
            &self._gd_data,
            new_size,
        )
        return ret

    cpdef inline void clear(self):
        gd_packed_int64_array_clear(
            &self._gd_data,
        )

    cpdef inline uint8_t has(self, uint64_t value):
        cdef uint8_t ret = gd_packed_int64_array_has(
            &self._gd_data,
            value,
        )
        return ret

    cpdef inline void reverse(self):
        gd_packed_int64_array_reverse(
            &self._gd_data,
        )

    cpdef inline PackedInt64Array slice(self, uint64_t begin, uint64_t end):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedInt64Array ret = PackedInt64Array.__new__(PackedInt64Array)
        ret._gd_data = gd_packed_int64_array_slice(
            &self._gd_data,
            begin,
            end,
        )
        return ret

    cpdef inline PackedByteArray to_byte_array(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_packed_int64_array_to_byte_array(
            &self._gd_data,
        )
        return ret

    cpdef inline void sort(self):
        gd_packed_int64_array_sort(
            &self._gd_data,
        )

    cpdef inline uint64_t bsearch(self, uint64_t value, uint8_t before):
        cdef uint64_t ret = gd_packed_int64_array_bsearch(
            &self._gd_data,
            value,
            before,
        )
        return ret

    cpdef inline PackedInt64Array duplicate(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedInt64Array ret = PackedInt64Array.__new__(PackedInt64Array)
        ret._gd_data = gd_packed_int64_array_duplicate(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t find(self, uint64_t value, uint64_t from_):
        cdef uint64_t ret = gd_packed_int64_array_find(
            &self._gd_data,
            value,
            from_,
        )
        return ret

    cpdef inline uint64_t rfind(self, uint64_t value, uint64_t from_):
        cdef uint64_t ret = gd_packed_int64_array_rfind(
            &self._gd_data,
            value,
            from_,
        )
        return ret

    cpdef inline uint64_t count(self, uint64_t value):
        cdef uint64_t ret = gd_packed_int64_array_count(
            &self._gd_data,
            value,
        )
        return ret

    cdef inline uint64_t _getitem(self, GDExtensionInt index):
        return gd_packed_int64_array_indexed_getter(&self._gd_data, index)

    cdef inline void _setitem(self, GDExtensionInt index, uint64_t value):
        gd_packed_int64_array_indexed_setter(&self._gd_data, index, value)





@cython.freelist(8)
@cython.final
cdef class PackedFloat32Array:
    cdef gd_packed_float32_array_t _gd_data

    cpdef inline PackedFloat32Array clone(self):
        cdef PackedFloat32Array obj = PackedFloat32Array.__new__(PackedFloat32Array)
        obj._gd_data = gd_packed_float32_array_new_from_packed_float32_array(&self._gd_data)
        return obj


    @staticmethod
    cdef inline PackedFloat32Array new():
        # Call to __new__ bypasses __init__ constructor
        cdef PackedFloat32Array ret = PackedFloat32Array.__new__(PackedFloat32Array)
        ret._gd_data = gd_packed_float32_array_new()
        return ret
    cpdef inline uint64_t size(self):
        cdef uint64_t ret = gd_packed_float32_array_size(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_empty(self):
        cdef uint8_t ret = gd_packed_float32_array_is_empty(
            &self._gd_data,
        )
        return ret

    cpdef inline void set(self, uint64_t index, double value):
        gd_packed_float32_array_set(
            &self._gd_data,
            index,
            value,
        )

    cpdef inline uint8_t push_back(self, double value):
        cdef uint8_t ret = gd_packed_float32_array_push_back(
            &self._gd_data,
            value,
        )
        return ret

    cpdef inline uint8_t append(self, double value):
        cdef uint8_t ret = gd_packed_float32_array_append(
            &self._gd_data,
            value,
        )
        return ret

    cpdef inline void append_array(self, PackedFloat32Array array):
        gd_packed_float32_array_append_array(
            &self._gd_data,
            &array._gd_data,
        )

    cpdef inline void remove_at(self, uint64_t index):
        gd_packed_float32_array_remove_at(
            &self._gd_data,
            index,
        )

    cpdef inline uint64_t insert(self, uint64_t at_index, double value):
        cdef uint64_t ret = gd_packed_float32_array_insert(
            &self._gd_data,
            at_index,
            value,
        )
        return ret

    cpdef inline void fill(self, double value):
        gd_packed_float32_array_fill(
            &self._gd_data,
            value,
        )

    cpdef inline uint64_t resize(self, uint64_t new_size):
        cdef uint64_t ret = gd_packed_float32_array_resize(
            &self._gd_data,
            new_size,
        )
        return ret

    cpdef inline void clear(self):
        gd_packed_float32_array_clear(
            &self._gd_data,
        )

    cpdef inline uint8_t has(self, double value):
        cdef uint8_t ret = gd_packed_float32_array_has(
            &self._gd_data,
            value,
        )
        return ret

    cpdef inline void reverse(self):
        gd_packed_float32_array_reverse(
            &self._gd_data,
        )

    cpdef inline PackedFloat32Array slice(self, uint64_t begin, uint64_t end):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedFloat32Array ret = PackedFloat32Array.__new__(PackedFloat32Array)
        ret._gd_data = gd_packed_float32_array_slice(
            &self._gd_data,
            begin,
            end,
        )
        return ret

    cpdef inline PackedByteArray to_byte_array(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_packed_float32_array_to_byte_array(
            &self._gd_data,
        )
        return ret

    cpdef inline void sort(self):
        gd_packed_float32_array_sort(
            &self._gd_data,
        )

    cpdef inline uint64_t bsearch(self, double value, uint8_t before):
        cdef uint64_t ret = gd_packed_float32_array_bsearch(
            &self._gd_data,
            value,
            before,
        )
        return ret

    cpdef inline PackedFloat32Array duplicate(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedFloat32Array ret = PackedFloat32Array.__new__(PackedFloat32Array)
        ret._gd_data = gd_packed_float32_array_duplicate(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t find(self, double value, uint64_t from_):
        cdef uint64_t ret = gd_packed_float32_array_find(
            &self._gd_data,
            value,
            from_,
        )
        return ret

    cpdef inline uint64_t rfind(self, double value, uint64_t from_):
        cdef uint64_t ret = gd_packed_float32_array_rfind(
            &self._gd_data,
            value,
            from_,
        )
        return ret

    cpdef inline uint64_t count(self, double value):
        cdef uint64_t ret = gd_packed_float32_array_count(
            &self._gd_data,
            value,
        )
        return ret

    cdef inline double _getitem(self, GDExtensionInt index):
        return gd_packed_float32_array_indexed_getter(&self._gd_data, index)

    cdef inline void _setitem(self, GDExtensionInt index, double value):
        gd_packed_float32_array_indexed_setter(&self._gd_data, index, value)





@cython.freelist(8)
@cython.final
cdef class PackedFloat64Array:
    cdef gd_packed_float64_array_t _gd_data

    cpdef inline PackedFloat64Array clone(self):
        cdef PackedFloat64Array obj = PackedFloat64Array.__new__(PackedFloat64Array)
        obj._gd_data = gd_packed_float64_array_new_from_packed_float64_array(&self._gd_data)
        return obj


    @staticmethod
    cdef inline PackedFloat64Array new():
        # Call to __new__ bypasses __init__ constructor
        cdef PackedFloat64Array ret = PackedFloat64Array.__new__(PackedFloat64Array)
        ret._gd_data = gd_packed_float64_array_new()
        return ret
    cpdef inline uint64_t size(self):
        cdef uint64_t ret = gd_packed_float64_array_size(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_empty(self):
        cdef uint8_t ret = gd_packed_float64_array_is_empty(
            &self._gd_data,
        )
        return ret

    cpdef inline void set(self, uint64_t index, double value):
        gd_packed_float64_array_set(
            &self._gd_data,
            index,
            value,
        )

    cpdef inline uint8_t push_back(self, double value):
        cdef uint8_t ret = gd_packed_float64_array_push_back(
            &self._gd_data,
            value,
        )
        return ret

    cpdef inline uint8_t append(self, double value):
        cdef uint8_t ret = gd_packed_float64_array_append(
            &self._gd_data,
            value,
        )
        return ret

    cpdef inline void append_array(self, PackedFloat64Array array):
        gd_packed_float64_array_append_array(
            &self._gd_data,
            &array._gd_data,
        )

    cpdef inline void remove_at(self, uint64_t index):
        gd_packed_float64_array_remove_at(
            &self._gd_data,
            index,
        )

    cpdef inline uint64_t insert(self, uint64_t at_index, double value):
        cdef uint64_t ret = gd_packed_float64_array_insert(
            &self._gd_data,
            at_index,
            value,
        )
        return ret

    cpdef inline void fill(self, double value):
        gd_packed_float64_array_fill(
            &self._gd_data,
            value,
        )

    cpdef inline uint64_t resize(self, uint64_t new_size):
        cdef uint64_t ret = gd_packed_float64_array_resize(
            &self._gd_data,
            new_size,
        )
        return ret

    cpdef inline void clear(self):
        gd_packed_float64_array_clear(
            &self._gd_data,
        )

    cpdef inline uint8_t has(self, double value):
        cdef uint8_t ret = gd_packed_float64_array_has(
            &self._gd_data,
            value,
        )
        return ret

    cpdef inline void reverse(self):
        gd_packed_float64_array_reverse(
            &self._gd_data,
        )

    cpdef inline PackedFloat64Array slice(self, uint64_t begin, uint64_t end):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedFloat64Array ret = PackedFloat64Array.__new__(PackedFloat64Array)
        ret._gd_data = gd_packed_float64_array_slice(
            &self._gd_data,
            begin,
            end,
        )
        return ret

    cpdef inline PackedByteArray to_byte_array(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_packed_float64_array_to_byte_array(
            &self._gd_data,
        )
        return ret

    cpdef inline void sort(self):
        gd_packed_float64_array_sort(
            &self._gd_data,
        )

    cpdef inline uint64_t bsearch(self, double value, uint8_t before):
        cdef uint64_t ret = gd_packed_float64_array_bsearch(
            &self._gd_data,
            value,
            before,
        )
        return ret

    cpdef inline PackedFloat64Array duplicate(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedFloat64Array ret = PackedFloat64Array.__new__(PackedFloat64Array)
        ret._gd_data = gd_packed_float64_array_duplicate(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t find(self, double value, uint64_t from_):
        cdef uint64_t ret = gd_packed_float64_array_find(
            &self._gd_data,
            value,
            from_,
        )
        return ret

    cpdef inline uint64_t rfind(self, double value, uint64_t from_):
        cdef uint64_t ret = gd_packed_float64_array_rfind(
            &self._gd_data,
            value,
            from_,
        )
        return ret

    cpdef inline uint64_t count(self, double value):
        cdef uint64_t ret = gd_packed_float64_array_count(
            &self._gd_data,
            value,
        )
        return ret

    cdef inline double _getitem(self, GDExtensionInt index):
        return gd_packed_float64_array_indexed_getter(&self._gd_data, index)

    cdef inline void _setitem(self, GDExtensionInt index, double value):
        gd_packed_float64_array_indexed_setter(&self._gd_data, index, value)





@cython.freelist(8)
@cython.final
cdef class PackedStringArray:
    cdef gd_packed_string_array_t _gd_data

    cpdef inline PackedStringArray clone(self):
        cdef PackedStringArray obj = PackedStringArray.__new__(PackedStringArray)
        obj._gd_data = gd_packed_string_array_new_from_packed_string_array(&self._gd_data)
        return obj


    @staticmethod
    cdef inline PackedStringArray new():
        # Call to __new__ bypasses __init__ constructor
        cdef PackedStringArray ret = PackedStringArray.__new__(PackedStringArray)
        ret._gd_data = gd_packed_string_array_new()
        return ret
    cpdef inline uint64_t size(self):
        cdef uint64_t ret = gd_packed_string_array_size(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_empty(self):
        cdef uint8_t ret = gd_packed_string_array_is_empty(
            &self._gd_data,
        )
        return ret

    cpdef inline void set(self, uint64_t index, GDString value):
        gd_packed_string_array_set(
            &self._gd_data,
            index,
            &value._gd_data,
        )

    cpdef inline uint8_t push_back(self, GDString value):
        cdef uint8_t ret = gd_packed_string_array_push_back(
            &self._gd_data,
            &value._gd_data,
        )
        return ret

    cpdef inline uint8_t append(self, GDString value):
        cdef uint8_t ret = gd_packed_string_array_append(
            &self._gd_data,
            &value._gd_data,
        )
        return ret

    cpdef inline void append_array(self, PackedStringArray array):
        gd_packed_string_array_append_array(
            &self._gd_data,
            &array._gd_data,
        )

    cpdef inline void remove_at(self, uint64_t index):
        gd_packed_string_array_remove_at(
            &self._gd_data,
            index,
        )

    cpdef inline uint64_t insert(self, uint64_t at_index, GDString value):
        cdef uint64_t ret = gd_packed_string_array_insert(
            &self._gd_data,
            at_index,
            &value._gd_data,
        )
        return ret

    cpdef inline void fill(self, GDString value):
        gd_packed_string_array_fill(
            &self._gd_data,
            &value._gd_data,
        )

    cpdef inline uint64_t resize(self, uint64_t new_size):
        cdef uint64_t ret = gd_packed_string_array_resize(
            &self._gd_data,
            new_size,
        )
        return ret

    cpdef inline void clear(self):
        gd_packed_string_array_clear(
            &self._gd_data,
        )

    cpdef inline uint8_t has(self, GDString value):
        cdef uint8_t ret = gd_packed_string_array_has(
            &self._gd_data,
            &value._gd_data,
        )
        return ret

    cpdef inline void reverse(self):
        gd_packed_string_array_reverse(
            &self._gd_data,
        )

    cpdef inline PackedStringArray slice(self, uint64_t begin, uint64_t end):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedStringArray ret = PackedStringArray.__new__(PackedStringArray)
        ret._gd_data = gd_packed_string_array_slice(
            &self._gd_data,
            begin,
            end,
        )
        return ret

    cpdef inline PackedByteArray to_byte_array(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_packed_string_array_to_byte_array(
            &self._gd_data,
        )
        return ret

    cpdef inline void sort(self):
        gd_packed_string_array_sort(
            &self._gd_data,
        )

    cpdef inline uint64_t bsearch(self, GDString value, uint8_t before):
        cdef uint64_t ret = gd_packed_string_array_bsearch(
            &self._gd_data,
            &value._gd_data,
            before,
        )
        return ret

    cpdef inline PackedStringArray duplicate(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedStringArray ret = PackedStringArray.__new__(PackedStringArray)
        ret._gd_data = gd_packed_string_array_duplicate(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t find(self, GDString value, uint64_t from_):
        cdef uint64_t ret = gd_packed_string_array_find(
            &self._gd_data,
            &value._gd_data,
            from_,
        )
        return ret

    cpdef inline uint64_t rfind(self, GDString value, uint64_t from_):
        cdef uint64_t ret = gd_packed_string_array_rfind(
            &self._gd_data,
            &value._gd_data,
            from_,
        )
        return ret

    cpdef inline uint64_t count(self, GDString value):
        cdef uint64_t ret = gd_packed_string_array_count(
            &self._gd_data,
            &value._gd_data,
        )
        return ret

    cdef inline GDString _getitem(self, GDExtensionInt index):
        cdef GDString ret = GDString.__new__(GDString)
        ret._gd_data =  gd_packed_string_array_indexed_getter(&self._gd_data, index)
        return ret

    cdef inline void _setitem(self, GDExtensionInt index, GDString value):
        gd_packed_string_array_indexed_setter(&self._gd_data, index, &value._gd_data)





@cython.freelist(8)
@cython.final
cdef class PackedVector2Array:
    cdef gd_packed_vector2_array_t _gd_data

    cpdef inline PackedVector2Array clone(self):
        cdef PackedVector2Array obj = PackedVector2Array.__new__(PackedVector2Array)
        obj._gd_data = gd_packed_vector2_array_new_from_packed_vector2_array(&self._gd_data)
        return obj


    @staticmethod
    cdef inline PackedVector2Array new():
        # Call to __new__ bypasses __init__ constructor
        cdef PackedVector2Array ret = PackedVector2Array.__new__(PackedVector2Array)
        ret._gd_data = gd_packed_vector2_array_new()
        return ret
    cpdef inline uint64_t size(self):
        cdef uint64_t ret = gd_packed_vector2_array_size(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_empty(self):
        cdef uint8_t ret = gd_packed_vector2_array_is_empty(
            &self._gd_data,
        )
        return ret

    cpdef inline void set(self, uint64_t index, Vector2 value):
        gd_packed_vector2_array_set(
            &self._gd_data,
            index,
            &value._gd_data,
        )

    cpdef inline uint8_t push_back(self, Vector2 value):
        cdef uint8_t ret = gd_packed_vector2_array_push_back(
            &self._gd_data,
            &value._gd_data,
        )
        return ret

    cpdef inline uint8_t append(self, Vector2 value):
        cdef uint8_t ret = gd_packed_vector2_array_append(
            &self._gd_data,
            &value._gd_data,
        )
        return ret

    cpdef inline void append_array(self, PackedVector2Array array):
        gd_packed_vector2_array_append_array(
            &self._gd_data,
            &array._gd_data,
        )

    cpdef inline void remove_at(self, uint64_t index):
        gd_packed_vector2_array_remove_at(
            &self._gd_data,
            index,
        )

    cpdef inline uint64_t insert(self, uint64_t at_index, Vector2 value):
        cdef uint64_t ret = gd_packed_vector2_array_insert(
            &self._gd_data,
            at_index,
            &value._gd_data,
        )
        return ret

    cpdef inline void fill(self, Vector2 value):
        gd_packed_vector2_array_fill(
            &self._gd_data,
            &value._gd_data,
        )

    cpdef inline uint64_t resize(self, uint64_t new_size):
        cdef uint64_t ret = gd_packed_vector2_array_resize(
            &self._gd_data,
            new_size,
        )
        return ret

    cpdef inline void clear(self):
        gd_packed_vector2_array_clear(
            &self._gd_data,
        )

    cpdef inline uint8_t has(self, Vector2 value):
        cdef uint8_t ret = gd_packed_vector2_array_has(
            &self._gd_data,
            &value._gd_data,
        )
        return ret

    cpdef inline void reverse(self):
        gd_packed_vector2_array_reverse(
            &self._gd_data,
        )

    cpdef inline PackedVector2Array slice(self, uint64_t begin, uint64_t end):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedVector2Array ret = PackedVector2Array.__new__(PackedVector2Array)
        ret._gd_data = gd_packed_vector2_array_slice(
            &self._gd_data,
            begin,
            end,
        )
        return ret

    cpdef inline PackedByteArray to_byte_array(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_packed_vector2_array_to_byte_array(
            &self._gd_data,
        )
        return ret

    cpdef inline void sort(self):
        gd_packed_vector2_array_sort(
            &self._gd_data,
        )

    cpdef inline uint64_t bsearch(self, Vector2 value, uint8_t before):
        cdef uint64_t ret = gd_packed_vector2_array_bsearch(
            &self._gd_data,
            &value._gd_data,
            before,
        )
        return ret

    cpdef inline PackedVector2Array duplicate(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedVector2Array ret = PackedVector2Array.__new__(PackedVector2Array)
        ret._gd_data = gd_packed_vector2_array_duplicate(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t find(self, Vector2 value, uint64_t from_):
        cdef uint64_t ret = gd_packed_vector2_array_find(
            &self._gd_data,
            &value._gd_data,
            from_,
        )
        return ret

    cpdef inline uint64_t rfind(self, Vector2 value, uint64_t from_):
        cdef uint64_t ret = gd_packed_vector2_array_rfind(
            &self._gd_data,
            &value._gd_data,
            from_,
        )
        return ret

    cpdef inline uint64_t count(self, Vector2 value):
        cdef uint64_t ret = gd_packed_vector2_array_count(
            &self._gd_data,
            &value._gd_data,
        )
        return ret

    cdef inline Vector2 _getitem(self, GDExtensionInt index):
        cdef Vector2 ret = Vector2.__new__(Vector2)
        ret._gd_data =  gd_packed_vector2_array_indexed_getter(&self._gd_data, index)
        return ret

    cdef inline void _setitem(self, GDExtensionInt index, Vector2 value):
        gd_packed_vector2_array_indexed_setter(&self._gd_data, index, &value._gd_data)





@cython.freelist(8)
@cython.final
cdef class PackedVector3Array:
    cdef gd_packed_vector3_array_t _gd_data

    cpdef inline PackedVector3Array clone(self):
        cdef PackedVector3Array obj = PackedVector3Array.__new__(PackedVector3Array)
        obj._gd_data = gd_packed_vector3_array_new_from_packed_vector3_array(&self._gd_data)
        return obj


    @staticmethod
    cdef inline PackedVector3Array new():
        # Call to __new__ bypasses __init__ constructor
        cdef PackedVector3Array ret = PackedVector3Array.__new__(PackedVector3Array)
        ret._gd_data = gd_packed_vector3_array_new()
        return ret
    cpdef inline uint64_t size(self):
        cdef uint64_t ret = gd_packed_vector3_array_size(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_empty(self):
        cdef uint8_t ret = gd_packed_vector3_array_is_empty(
            &self._gd_data,
        )
        return ret

    cpdef inline void set(self, uint64_t index, Vector3 value):
        gd_packed_vector3_array_set(
            &self._gd_data,
            index,
            &value._gd_data,
        )

    cpdef inline uint8_t push_back(self, Vector3 value):
        cdef uint8_t ret = gd_packed_vector3_array_push_back(
            &self._gd_data,
            &value._gd_data,
        )
        return ret

    cpdef inline uint8_t append(self, Vector3 value):
        cdef uint8_t ret = gd_packed_vector3_array_append(
            &self._gd_data,
            &value._gd_data,
        )
        return ret

    cpdef inline void append_array(self, PackedVector3Array array):
        gd_packed_vector3_array_append_array(
            &self._gd_data,
            &array._gd_data,
        )

    cpdef inline void remove_at(self, uint64_t index):
        gd_packed_vector3_array_remove_at(
            &self._gd_data,
            index,
        )

    cpdef inline uint64_t insert(self, uint64_t at_index, Vector3 value):
        cdef uint64_t ret = gd_packed_vector3_array_insert(
            &self._gd_data,
            at_index,
            &value._gd_data,
        )
        return ret

    cpdef inline void fill(self, Vector3 value):
        gd_packed_vector3_array_fill(
            &self._gd_data,
            &value._gd_data,
        )

    cpdef inline uint64_t resize(self, uint64_t new_size):
        cdef uint64_t ret = gd_packed_vector3_array_resize(
            &self._gd_data,
            new_size,
        )
        return ret

    cpdef inline void clear(self):
        gd_packed_vector3_array_clear(
            &self._gd_data,
        )

    cpdef inline uint8_t has(self, Vector3 value):
        cdef uint8_t ret = gd_packed_vector3_array_has(
            &self._gd_data,
            &value._gd_data,
        )
        return ret

    cpdef inline void reverse(self):
        gd_packed_vector3_array_reverse(
            &self._gd_data,
        )

    cpdef inline PackedVector3Array slice(self, uint64_t begin, uint64_t end):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedVector3Array ret = PackedVector3Array.__new__(PackedVector3Array)
        ret._gd_data = gd_packed_vector3_array_slice(
            &self._gd_data,
            begin,
            end,
        )
        return ret

    cpdef inline PackedByteArray to_byte_array(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_packed_vector3_array_to_byte_array(
            &self._gd_data,
        )
        return ret

    cpdef inline void sort(self):
        gd_packed_vector3_array_sort(
            &self._gd_data,
        )

    cpdef inline uint64_t bsearch(self, Vector3 value, uint8_t before):
        cdef uint64_t ret = gd_packed_vector3_array_bsearch(
            &self._gd_data,
            &value._gd_data,
            before,
        )
        return ret

    cpdef inline PackedVector3Array duplicate(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedVector3Array ret = PackedVector3Array.__new__(PackedVector3Array)
        ret._gd_data = gd_packed_vector3_array_duplicate(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t find(self, Vector3 value, uint64_t from_):
        cdef uint64_t ret = gd_packed_vector3_array_find(
            &self._gd_data,
            &value._gd_data,
            from_,
        )
        return ret

    cpdef inline uint64_t rfind(self, Vector3 value, uint64_t from_):
        cdef uint64_t ret = gd_packed_vector3_array_rfind(
            &self._gd_data,
            &value._gd_data,
            from_,
        )
        return ret

    cpdef inline uint64_t count(self, Vector3 value):
        cdef uint64_t ret = gd_packed_vector3_array_count(
            &self._gd_data,
            &value._gd_data,
        )
        return ret

    cdef inline Vector3 _getitem(self, GDExtensionInt index):
        cdef Vector3 ret = Vector3.__new__(Vector3)
        ret._gd_data =  gd_packed_vector3_array_indexed_getter(&self._gd_data, index)
        return ret

    cdef inline void _setitem(self, GDExtensionInt index, Vector3 value):
        gd_packed_vector3_array_indexed_setter(&self._gd_data, index, &value._gd_data)





@cython.freelist(8)
@cython.final
cdef class PackedColorArray:
    cdef gd_packed_color_array_t _gd_data

    cpdef inline PackedColorArray clone(self):
        cdef PackedColorArray obj = PackedColorArray.__new__(PackedColorArray)
        obj._gd_data = gd_packed_color_array_new_from_packed_color_array(&self._gd_data)
        return obj


    @staticmethod
    cdef inline PackedColorArray new():
        # Call to __new__ bypasses __init__ constructor
        cdef PackedColorArray ret = PackedColorArray.__new__(PackedColorArray)
        ret._gd_data = gd_packed_color_array_new()
        return ret
    cpdef inline uint64_t size(self):
        cdef uint64_t ret = gd_packed_color_array_size(
            &self._gd_data,
        )
        return ret

    cpdef inline uint8_t is_empty(self):
        cdef uint8_t ret = gd_packed_color_array_is_empty(
            &self._gd_data,
        )
        return ret

    cpdef inline void set(self, uint64_t index, Color value):
        gd_packed_color_array_set(
            &self._gd_data,
            index,
            &value._gd_data,
        )

    cpdef inline uint8_t push_back(self, Color value):
        cdef uint8_t ret = gd_packed_color_array_push_back(
            &self._gd_data,
            &value._gd_data,
        )
        return ret

    cpdef inline uint8_t append(self, Color value):
        cdef uint8_t ret = gd_packed_color_array_append(
            &self._gd_data,
            &value._gd_data,
        )
        return ret

    cpdef inline void append_array(self, PackedColorArray array):
        gd_packed_color_array_append_array(
            &self._gd_data,
            &array._gd_data,
        )

    cpdef inline void remove_at(self, uint64_t index):
        gd_packed_color_array_remove_at(
            &self._gd_data,
            index,
        )

    cpdef inline uint64_t insert(self, uint64_t at_index, Color value):
        cdef uint64_t ret = gd_packed_color_array_insert(
            &self._gd_data,
            at_index,
            &value._gd_data,
        )
        return ret

    cpdef inline void fill(self, Color value):
        gd_packed_color_array_fill(
            &self._gd_data,
            &value._gd_data,
        )

    cpdef inline uint64_t resize(self, uint64_t new_size):
        cdef uint64_t ret = gd_packed_color_array_resize(
            &self._gd_data,
            new_size,
        )
        return ret

    cpdef inline void clear(self):
        gd_packed_color_array_clear(
            &self._gd_data,
        )

    cpdef inline uint8_t has(self, Color value):
        cdef uint8_t ret = gd_packed_color_array_has(
            &self._gd_data,
            &value._gd_data,
        )
        return ret

    cpdef inline void reverse(self):
        gd_packed_color_array_reverse(
            &self._gd_data,
        )

    cpdef inline PackedColorArray slice(self, uint64_t begin, uint64_t end):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedColorArray ret = PackedColorArray.__new__(PackedColorArray)
        ret._gd_data = gd_packed_color_array_slice(
            &self._gd_data,
            begin,
            end,
        )
        return ret

    cpdef inline PackedByteArray to_byte_array(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedByteArray ret = PackedByteArray.__new__(PackedByteArray)
        ret._gd_data = gd_packed_color_array_to_byte_array(
            &self._gd_data,
        )
        return ret

    cpdef inline void sort(self):
        gd_packed_color_array_sort(
            &self._gd_data,
        )

    cpdef inline uint64_t bsearch(self, Color value, uint8_t before):
        cdef uint64_t ret = gd_packed_color_array_bsearch(
            &self._gd_data,
            &value._gd_data,
            before,
        )
        return ret

    cpdef inline PackedColorArray duplicate(self):
        # Call to __new__ bypasses __init__ constructor
        cdef PackedColorArray ret = PackedColorArray.__new__(PackedColorArray)
        ret._gd_data = gd_packed_color_array_duplicate(
            &self._gd_data,
        )
        return ret

    cpdef inline uint64_t find(self, Color value, uint64_t from_):
        cdef uint64_t ret = gd_packed_color_array_find(
            &self._gd_data,
            &value._gd_data,
            from_,
        )
        return ret

    cpdef inline uint64_t rfind(self, Color value, uint64_t from_):
        cdef uint64_t ret = gd_packed_color_array_rfind(
            &self._gd_data,
            &value._gd_data,
            from_,
        )
        return ret

    cpdef inline uint64_t count(self, Color value):
        cdef uint64_t ret = gd_packed_color_array_count(
            &self._gd_data,
            &value._gd_data,
        )
        return ret

    cdef inline Color _getitem(self, GDExtensionInt index):
        cdef Color ret = Color.__new__(Color)
        ret._gd_data =  gd_packed_color_array_indexed_getter(&self._gd_data, index)
        return ret

    cdef inline void _setitem(self, GDExtensionInt index, Color value):
        gd_packed_color_array_indexed_setter(&self._gd_data, index, &value._gd_data)



