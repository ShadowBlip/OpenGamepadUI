from collections.abc import Mapping, Sequence
from enum import Enum

from .builtins import *


class GDObject():
    @classmethod
    def new(cls) -> GDObject: ...

    # Enums
    class GDObject.ConnectFlags(Enum):
        CONNECT_DEFERRED: int
        CONNECT_PERSIST: int
        CONNECT_ONE_SHOT: int
        CONNECT_REFERENCE_COUNTED: int

    # Methods
    def get_class(self) -> GDString: ...
    def is_class(self, class_: GDString | str) -> bool: ...
    def set(self, property: StringName | str, value: GDAny) -> None: ...
    def get(self, property: StringName | str) -> GDAny: ...
    def set_indexed(self, property_path: NodePath | str, value: GDAny) -> None: ...
    def get_indexed(self, property_path: NodePath | str) -> GDAny: ...
    def get_property_list(self) -> GDArray: ...
    def get_method_list(self) -> GDArray: ...
    def property_can_revert(self, property: StringName | str) -> bool: ...
    def property_get_revert(self, property: StringName | str) -> GDAny: ...
    def notification(self, what: int, reversed: bool = False) -> None: ...
    def to_string(self) -> GDString: ...
    def get_instance_id(self) -> int: ...
    def set_script(self, script: GDAny) -> None: ...
    def get_script(self) -> GDAny: ...
    def set_meta(self, name: StringName | str, value: GDAny) -> None: ...
    def remove_meta(self, name: StringName | str) -> None: ...
    def get_meta(self, name: StringName | str, default: GDAny = None) -> GDAny: ...
    def has_meta(self, name: StringName | str) -> bool: ...
    def get_meta_list(self) -> GDArray: ...
    def add_user_signal(self, signal: GDString | str, arguments: GDArray = []) -> None: ...
    def has_user_signal(self, signal: StringName | str) -> bool: ...
    def emit_signal(self, signal: StringName | str) -> Error: ...
    def call(self, method: StringName | str) -> GDAny: ...
    def call_deferred(self, method: StringName | str) -> GDAny: ...
    def set_deferred(self, property: StringName | str, value: GDAny) -> None: ...
    def callv(self, method: StringName | str, arg_array: GDArray) -> GDAny: ...
    def has_method(self, method: StringName | str) -> bool: ...
    def has_signal(self, signal: StringName | str) -> bool: ...
    def get_signal_list(self) -> GDArray: ...
    def get_signal_connection_list(self, signal: StringName | str) -> GDArray: ...
    def get_incoming_connections(self) -> GDArray: ...
    def connect(self, signal: StringName | str, callable: GDCallable, flags: int = 0) -> Error: ...
    def disconnect(self, signal: StringName | str, callable: GDCallable) -> None: ...
    def is_connected(self, signal: StringName | str, callable: GDCallable) -> bool: ...
    def set_block_signals(self, enable: bool) -> None: ...
    def is_blocking_signals(self) -> bool: ...
    def notify_property_list_changed(self) -> None: ...
    def set_message_translation(self, enable: bool) -> None: ...
    def can_translate_messages(self) -> bool: ...
    def tr(self, message: StringName | str, context: StringName | str = "") -> GDString: ...
    def tr_n(self, message: StringName | str, plural_message: StringName | str, n: int, context: StringName | str = "") -> GDString: ...
    def is_queued_for_deletion(self) -> bool: ...
    def cancel_free(self) -> None: ...

    # Signals
    def script_changed(self) -> None: ...
    def property_list_changed(self) -> None: ...

    # Constants
    NOTIFICATION_POSTINITIALIZE: int
    NOTIFICATION_PREDELETE: int


class Performance(TypeInUse(Object)):
    @classmethod
    def new(cls) -> Performance: ...

    # Enums
    class Performance.Monitor(Enum):
        TIME_FPS: int
        TIME_PROCESS: int
        TIME_PHYSICS_PROCESS: int
        TIME_NAVIGATION_PROCESS: int
        MEMORY_STATIC: int
        MEMORY_STATIC_MAX: int
        MEMORY_MESSAGE_BUFFER_MAX: int
        OBJECT_COUNT: int
        OBJECT_RESOURCE_COUNT: int
        OBJECT_NODE_COUNT: int
        OBJECT_ORPHAN_NODE_COUNT: int
        RENDER_TOTAL_OBJECTS_IN_FRAME: int
        RENDER_TOTAL_PRIMITIVES_IN_FRAME: int
        RENDER_TOTAL_DRAW_CALLS_IN_FRAME: int
        RENDER_VIDEO_MEM_USED: int
        RENDER_TEXTURE_MEM_USED: int
        RENDER_BUFFER_MEM_USED: int
        PHYSICS_2D_ACTIVE_OBJECTS: int
        PHYSICS_2D_COLLISION_PAIRS: int
        PHYSICS_2D_ISLAND_COUNT: int
        PHYSICS_3D_ACTIVE_OBJECTS: int
        PHYSICS_3D_COLLISION_PAIRS: int
        PHYSICS_3D_ISLAND_COUNT: int
        AUDIO_OUTPUT_LATENCY: int
        NAVIGATION_ACTIVE_MAPS: int
        NAVIGATION_REGION_COUNT: int
        NAVIGATION_AGENT_COUNT: int
        NAVIGATION_LINK_COUNT: int
        NAVIGATION_POLYGON_COUNT: int
        NAVIGATION_EDGE_COUNT: int
        NAVIGATION_EDGE_MERGE_COUNT: int
        NAVIGATION_EDGE_CONNECTION_COUNT: int
        NAVIGATION_EDGE_FREE_COUNT: int
        MONITOR_MAX: int

    # Methods
    def get_monitor(self, monitor: Performance.Monitor) -> float: ...
    def add_custom_monitor(self, id: StringName | str, callable: GDCallable, arguments: GDArray = []) -> None: ...
    def remove_custom_monitor(self, id: StringName | str) -> None: ...
    def has_custom_monitor(self, id: StringName | str) -> bool: ...
    def get_custom_monitor(self, id: StringName | str) -> GDAny: ...
    def get_monitor_modification_time(self) -> int: ...
    def get_custom_monitor_names(self) -> GDArray: ...


class PhysicsDirectBodyState2D(TypeInUse(Object)):

    # Methods
    def get_total_gravity(self) -> Vector2: ...
    def get_total_linear_damp(self) -> float: ...
    def get_total_angular_damp(self) -> float: ...
    def get_center_of_mass(self) -> Vector2: ...
    def get_center_of_mass_local(self) -> Vector2: ...
    def get_inverse_mass(self) -> float: ...
    def get_inverse_inertia(self) -> float: ...
    def set_linear_velocity(self, velocity: Vector2) -> None: ...
    def get_linear_velocity(self) -> Vector2: ...
    def set_angular_velocity(self, velocity: float) -> None: ...
    def get_angular_velocity(self) -> float: ...
    def set_transform(self, transform: Transform2D) -> None: ...
    def get_transform(self) -> Transform2D: ...
    def get_velocity_at_local_position(self, local_position: Vector2) -> Vector2: ...
    def apply_central_impulse(self, impulse: Vector2) -> None: ...
    def apply_torque_impulse(self, impulse: float) -> None: ...
    def apply_impulse(self, impulse: Vector2, position: Vector2 = Vector2(0, 0)) -> None: ...
    def apply_central_force(self, force: Vector2 = Vector2(0, 0)) -> None: ...
    def apply_force(self, force: Vector2, position: Vector2 = Vector2(0, 0)) -> None: ...
    def apply_torque(self, torque: float) -> None: ...
    def add_constant_central_force(self, force: Vector2 = Vector2(0, 0)) -> None: ...
    def add_constant_force(self, force: Vector2, position: Vector2 = Vector2(0, 0)) -> None: ...
    def add_constant_torque(self, torque: float) -> None: ...
    def set_constant_force(self, force: Vector2) -> None: ...
    def get_constant_force(self) -> Vector2: ...
    def set_constant_torque(self, torque: float) -> None: ...
    def get_constant_torque(self) -> float: ...
    def set_sleep_state(self, enabled: bool) -> None: ...
    def is_sleeping(self) -> bool: ...
    def get_contact_count(self) -> int: ...
    def get_contact_local_position(self, contact_idx: int) -> Vector2: ...
    def get_contact_local_normal(self, contact_idx: int) -> Vector2: ...
    def get_contact_local_shape(self, contact_idx: int) -> int: ...
    def get_contact_local_velocity_at_position(self, contact_idx: int) -> Vector2: ...
    def get_contact_collider(self, contact_idx: int) -> RID: ...
    def get_contact_collider_position(self, contact_idx: int) -> Vector2: ...
    def get_contact_collider_id(self, contact_idx: int) -> int: ...
    def get_contact_collider_object(self, contact_idx: int) -> GDObject: ...
    def get_contact_collider_shape(self, contact_idx: int) -> int: ...
    def get_contact_collider_velocity_at_position(self, contact_idx: int) -> Vector2: ...
    def get_contact_impulse(self, contact_idx: int) -> Vector2: ...
    def get_step(self) -> float: ...
    def integrate_forces(self) -> None: ...
    def get_space_state(self) -> PhysicsDirectSpaceState2D: ...

    # Properties
    step: float
    inverse_mass: float
    inverse_inertia: float
    total_angular_damp: float
    total_linear_damp: float
    total_gravity: Vector2
    center_of_mass: Vector2
    center_of_mass_local: Vector2
    angular_velocity: float
    linear_velocity: Vector2
    sleeping: bool
    transform: Transform2D


class PhysicsDirectBodyState2DExtension(TypeInUse(PhysicsDirectBodyState2D)):
    @classmethod
    def new(cls) -> PhysicsDirectBodyState2DExtension: ...


class PhysicsDirectBodyState3D(TypeInUse(Object)):

    # Methods
    def get_total_gravity(self) -> Vector3: ...
    def get_total_linear_damp(self) -> float: ...
    def get_total_angular_damp(self) -> float: ...
    def get_center_of_mass(self) -> Vector3: ...
    def get_center_of_mass_local(self) -> Vector3: ...
    def get_principal_inertia_axes(self) -> Basis: ...
    def get_inverse_mass(self) -> float: ...
    def get_inverse_inertia(self) -> Vector3: ...
    def get_inverse_inertia_tensor(self) -> Basis: ...
    def set_linear_velocity(self, velocity: Vector3) -> None: ...
    def get_linear_velocity(self) -> Vector3: ...
    def set_angular_velocity(self, velocity: Vector3) -> None: ...
    def get_angular_velocity(self) -> Vector3: ...
    def set_transform(self, transform: Transform3D) -> None: ...
    def get_transform(self) -> Transform3D: ...
    def get_velocity_at_local_position(self, local_position: Vector3) -> Vector3: ...
    def apply_central_impulse(self, impulse: Vector3 = Vector3(0, 0, 0)) -> None: ...
    def apply_impulse(self, impulse: Vector3, position: Vector3 = Vector3(0, 0, 0)) -> None: ...
    def apply_torque_impulse(self, impulse: Vector3) -> None: ...
    def apply_central_force(self, force: Vector3 = Vector3(0, 0, 0)) -> None: ...
    def apply_force(self, force: Vector3, position: Vector3 = Vector3(0, 0, 0)) -> None: ...
    def apply_torque(self, torque: Vector3) -> None: ...
    def add_constant_central_force(self, force: Vector3 = Vector3(0, 0, 0)) -> None: ...
    def add_constant_force(self, force: Vector3, position: Vector3 = Vector3(0, 0, 0)) -> None: ...
    def add_constant_torque(self, torque: Vector3) -> None: ...
    def set_constant_force(self, force: Vector3) -> None: ...
    def get_constant_force(self) -> Vector3: ...
    def set_constant_torque(self, torque: Vector3) -> None: ...
    def get_constant_torque(self) -> Vector3: ...
    def set_sleep_state(self, enabled: bool) -> None: ...
    def is_sleeping(self) -> bool: ...
    def get_contact_count(self) -> int: ...
    def get_contact_local_position(self, contact_idx: int) -> Vector3: ...
    def get_contact_local_normal(self, contact_idx: int) -> Vector3: ...
    def get_contact_impulse(self, contact_idx: int) -> Vector3: ...
    def get_contact_local_shape(self, contact_idx: int) -> int: ...
    def get_contact_local_velocity_at_position(self, contact_idx: int) -> Vector3: ...
    def get_contact_collider(self, contact_idx: int) -> RID: ...
    def get_contact_collider_position(self, contact_idx: int) -> Vector3: ...
    def get_contact_collider_id(self, contact_idx: int) -> int: ...
    def get_contact_collider_object(self, contact_idx: int) -> GDObject: ...
    def get_contact_collider_shape(self, contact_idx: int) -> int: ...
    def get_contact_collider_velocity_at_position(self, contact_idx: int) -> Vector3: ...
    def get_step(self) -> float: ...
    def integrate_forces(self) -> None: ...
    def get_space_state(self) -> PhysicsDirectSpaceState3D: ...

    # Properties
    step: float
    inverse_mass: float
    total_angular_damp: float
    total_linear_damp: float
    inverse_inertia: Vector3
    inverse_inertia_tensor: Basis
    total_gravity: Vector3
    center_of_mass: Vector3
    center_of_mass_local: Vector3
    principal_inertia_axes: Basis
    angular_velocity: Vector3
    linear_velocity: Vector3
    sleeping: bool
    transform: Transform3D


class PhysicsDirectBodyState3DExtension(TypeInUse(PhysicsDirectBodyState3D)):
    @classmethod
    def new(cls) -> PhysicsDirectBodyState3DExtension: ...


class PhysicsDirectSpaceState2D(TypeInUse(Object)):

    # Methods
    def intersect_point(self, parameters: PhysicsPointQueryParameters2D, max_results: int = 32) -> GDArray: ...
    def intersect_ray(self, parameters: PhysicsRayQueryParameters2D) -> GDDictionary: ...
    def intersect_shape(self, parameters: PhysicsShapeQueryParameters2D, max_results: int = 32) -> GDArray: ...
    def cast_motion(self, parameters: PhysicsShapeQueryParameters2D) -> PackedFloat32Array: ...
    def collide_shape(self, parameters: PhysicsShapeQueryParameters2D, max_results: int = 32) -> GDArray: ...
    def get_rest_info(self, parameters: PhysicsShapeQueryParameters2D) -> GDDictionary: ...


class PhysicsDirectSpaceState2DExtension(TypeInUse(PhysicsDirectSpaceState2D)):
    @classmethod
    def new(cls) -> PhysicsDirectSpaceState2DExtension: ...

    # Methods
    def is_body_excluded_from_query(self, body: RID) -> bool: ...


class PhysicsDirectSpaceState3D(TypeInUse(Object)):

    # Methods
    def intersect_point(self, parameters: PhysicsPointQueryParameters3D, max_results: int = 32) -> GDArray: ...
    def intersect_ray(self, parameters: PhysicsRayQueryParameters3D) -> GDDictionary: ...
    def intersect_shape(self, parameters: PhysicsShapeQueryParameters3D, max_results: int = 32) -> GDArray: ...
    def cast_motion(self, parameters: PhysicsShapeQueryParameters3D) -> PackedFloat32Array: ...
    def collide_shape(self, parameters: PhysicsShapeQueryParameters3D, max_results: int = 32) -> GDArray: ...
    def get_rest_info(self, parameters: PhysicsShapeQueryParameters3D) -> GDDictionary: ...


class PhysicsDirectSpaceState3DExtension(TypeInUse(PhysicsDirectSpaceState3D)):
    @classmethod
    def new(cls) -> PhysicsDirectSpaceState3DExtension: ...

    # Methods
    def is_body_excluded_from_query(self, body: RID) -> bool: ...


class PhysicsServer2D(TypeInUse(Object)):

    # Enums
    class PhysicsServer2D.SpaceParameter(Enum):
        SPACE_PARAM_CONTACT_RECYCLE_RADIUS: int
        SPACE_PARAM_CONTACT_MAX_SEPARATION: int
        SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION: int
        SPACE_PARAM_CONTACT_DEFAULT_BIAS: int
        SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD: int
        SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD: int
        SPACE_PARAM_BODY_TIME_TO_SLEEP: int
        SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS: int
        SPACE_PARAM_SOLVER_ITERATIONS: int
    class PhysicsServer2D.ShapeType(Enum):
        SHAPE_WORLD_BOUNDARY: int
        SHAPE_SEPARATION_RAY: int
        SHAPE_SEGMENT: int
        SHAPE_CIRCLE: int
        SHAPE_RECTANGLE: int
        SHAPE_CAPSULE: int
        SHAPE_CONVEX_POLYGON: int
        SHAPE_CONCAVE_POLYGON: int
        SHAPE_CUSTOM: int
    class PhysicsServer2D.AreaParameter(Enum):
        AREA_PARAM_GRAVITY_OVERRIDE_MODE: int
        AREA_PARAM_GRAVITY: int
        AREA_PARAM_GRAVITY_VECTOR: int
        AREA_PARAM_GRAVITY_IS_POINT: int
        AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE: int
        AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE: int
        AREA_PARAM_LINEAR_DAMP: int
        AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE: int
        AREA_PARAM_ANGULAR_DAMP: int
        AREA_PARAM_PRIORITY: int
    class PhysicsServer2D.AreaSpaceOverrideMode(Enum):
        AREA_SPACE_OVERRIDE_DISABLED: int
        AREA_SPACE_OVERRIDE_COMBINE: int
        AREA_SPACE_OVERRIDE_COMBINE_REPLACE: int
        AREA_SPACE_OVERRIDE_REPLACE: int
        AREA_SPACE_OVERRIDE_REPLACE_COMBINE: int
    class PhysicsServer2D.BodyMode(Enum):
        BODY_MODE_STATIC: int
        BODY_MODE_KINEMATIC: int
        BODY_MODE_RIGID: int
        BODY_MODE_RIGID_LINEAR: int
    class PhysicsServer2D.BodyParameter(Enum):
        BODY_PARAM_BOUNCE: int
        BODY_PARAM_FRICTION: int
        BODY_PARAM_MASS: int
        BODY_PARAM_INERTIA: int
        BODY_PARAM_CENTER_OF_MASS: int
        BODY_PARAM_GRAVITY_SCALE: int
        BODY_PARAM_LINEAR_DAMP_MODE: int
        BODY_PARAM_ANGULAR_DAMP_MODE: int
        BODY_PARAM_LINEAR_DAMP: int
        BODY_PARAM_ANGULAR_DAMP: int
        BODY_PARAM_MAX: int
    class PhysicsServer2D.BodyDampMode(Enum):
        BODY_DAMP_MODE_COMBINE: int
        BODY_DAMP_MODE_REPLACE: int
    class PhysicsServer2D.BodyState(Enum):
        BODY_STATE_TRANSFORM: int
        BODY_STATE_LINEAR_VELOCITY: int
        BODY_STATE_ANGULAR_VELOCITY: int
        BODY_STATE_SLEEPING: int
        BODY_STATE_CAN_SLEEP: int
    class PhysicsServer2D.JointType(Enum):
        JOINT_TYPE_PIN: int
        JOINT_TYPE_GROOVE: int
        JOINT_TYPE_DAMPED_SPRING: int
        JOINT_TYPE_MAX: int
    class PhysicsServer2D.JointParam(Enum):
        JOINT_PARAM_BIAS: int
        JOINT_PARAM_MAX_BIAS: int
        JOINT_PARAM_MAX_FORCE: int
    class PhysicsServer2D.PinJointParam(Enum):
        PIN_JOINT_SOFTNESS: int
    class PhysicsServer2D.DampedSpringParam(Enum):
        DAMPED_SPRING_REST_LENGTH: int
        DAMPED_SPRING_STIFFNESS: int
        DAMPED_SPRING_DAMPING: int
    class PhysicsServer2D.CCDMode(Enum):
        CCD_MODE_DISABLED: int
        CCD_MODE_CAST_RAY: int
        CCD_MODE_CAST_SHAPE: int
    class PhysicsServer2D.AreaBodyStatus(Enum):
        AREA_BODY_ADDED: int
        AREA_BODY_REMOVED: int
    class PhysicsServer2D.ProcessInfo(Enum):
        INFO_ACTIVE_OBJECTS: int
        INFO_COLLISION_PAIRS: int
        INFO_ISLAND_COUNT: int

    # Methods
    def world_boundary_shape_create(self) -> RID: ...
    def separation_ray_shape_create(self) -> RID: ...
    def segment_shape_create(self) -> RID: ...
    def circle_shape_create(self) -> RID: ...
    def rectangle_shape_create(self) -> RID: ...
    def capsule_shape_create(self) -> RID: ...
    def convex_polygon_shape_create(self) -> RID: ...
    def concave_polygon_shape_create(self) -> RID: ...
    def shape_set_data(self, shape: RID, data: GDAny) -> None: ...
    def shape_get_type(self, shape: RID) -> PhysicsServer2D.ShapeType: ...
    def shape_get_data(self, shape: RID) -> GDAny: ...
    def space_create(self) -> RID: ...
    def space_set_active(self, space: RID, active: bool) -> None: ...
    def space_is_active(self, space: RID) -> bool: ...
    def space_set_param(self, space: RID, param: PhysicsServer2D.SpaceParameter, value: float) -> None: ...
    def space_get_param(self, space: RID, param: PhysicsServer2D.SpaceParameter) -> float: ...
    def space_get_direct_state(self, space: RID) -> PhysicsDirectSpaceState2D: ...
    def area_create(self) -> RID: ...
    def area_set_space(self, area: RID, space: RID) -> None: ...
    def area_get_space(self, area: RID) -> RID: ...
    def area_add_shape(self, area: RID, shape: RID, transform: Transform2D = Transform2D(1, 0, 0, 1, 0, 0), disabled: bool = False) -> None: ...
    def area_set_shape(self, area: RID, shape_idx: int, shape: RID) -> None: ...
    def area_set_shape_transform(self, area: RID, shape_idx: int, transform: Transform2D) -> None: ...
    def area_set_shape_disabled(self, area: RID, shape_idx: int, disabled: bool) -> None: ...
    def area_get_shape_count(self, area: RID) -> int: ...
    def area_get_shape(self, area: RID, shape_idx: int) -> RID: ...
    def area_get_shape_transform(self, area: RID, shape_idx: int) -> Transform2D: ...
    def area_remove_shape(self, area: RID, shape_idx: int) -> None: ...
    def area_clear_shapes(self, area: RID) -> None: ...
    def area_set_collision_layer(self, area: RID, layer: int) -> None: ...
    def area_get_collision_layer(self, area: RID) -> int: ...
    def area_set_collision_mask(self, area: RID, mask: int) -> None: ...
    def area_get_collision_mask(self, area: RID) -> int: ...
    def area_set_param(self, area: RID, param: PhysicsServer2D.AreaParameter, value: GDAny) -> None: ...
    def area_set_transform(self, area: RID, transform: Transform2D) -> None: ...
    def area_get_param(self, area: RID, param: PhysicsServer2D.AreaParameter) -> GDAny: ...
    def area_get_transform(self, area: RID) -> Transform2D: ...
    def area_attach_object_instance_id(self, area: RID, id: int) -> None: ...
    def area_get_object_instance_id(self, area: RID) -> int: ...
    def area_attach_canvas_instance_id(self, area: RID, id: int) -> None: ...
    def area_get_canvas_instance_id(self, area: RID) -> int: ...
    def area_set_monitor_callback(self, area: RID, callback: GDCallable) -> None: ...
    def area_set_area_monitor_callback(self, area: RID, callback: GDCallable) -> None: ...
    def area_set_monitorable(self, area: RID, monitorable: bool) -> None: ...
    def body_create(self) -> RID: ...
    def body_set_space(self, body: RID, space: RID) -> None: ...
    def body_get_space(self, body: RID) -> RID: ...
    def body_set_mode(self, body: RID, mode: PhysicsServer2D.BodyMode) -> None: ...
    def body_get_mode(self, body: RID) -> PhysicsServer2D.BodyMode: ...
    def body_add_shape(self, body: RID, shape: RID, transform: Transform2D = Transform2D(1, 0, 0, 1, 0, 0), disabled: bool = False) -> None: ...
    def body_set_shape(self, body: RID, shape_idx: int, shape: RID) -> None: ...
    def body_set_shape_transform(self, body: RID, shape_idx: int, transform: Transform2D) -> None: ...
    def body_get_shape_count(self, body: RID) -> int: ...
    def body_get_shape(self, body: RID, shape_idx: int) -> RID: ...
    def body_get_shape_transform(self, body: RID, shape_idx: int) -> Transform2D: ...
    def body_remove_shape(self, body: RID, shape_idx: int) -> None: ...
    def body_clear_shapes(self, body: RID) -> None: ...
    def body_set_shape_disabled(self, body: RID, shape_idx: int, disabled: bool) -> None: ...
    def body_set_shape_as_one_way_collision(self, body: RID, shape_idx: int, enable: bool, margin: float) -> None: ...
    def body_attach_object_instance_id(self, body: RID, id: int) -> None: ...
    def body_get_object_instance_id(self, body: RID) -> int: ...
    def body_attach_canvas_instance_id(self, body: RID, id: int) -> None: ...
    def body_get_canvas_instance_id(self, body: RID) -> int: ...
    def body_set_continuous_collision_detection_mode(self, body: RID, mode: PhysicsServer2D.CCDMode) -> None: ...
    def body_get_continuous_collision_detection_mode(self, body: RID) -> PhysicsServer2D.CCDMode: ...
    def body_set_collision_layer(self, body: RID, layer: int) -> None: ...
    def body_get_collision_layer(self, body: RID) -> int: ...
    def body_set_collision_mask(self, body: RID, mask: int) -> None: ...
    def body_get_collision_mask(self, body: RID) -> int: ...
    def body_set_collision_priority(self, body: RID, priority: float) -> None: ...
    def body_get_collision_priority(self, body: RID) -> float: ...
    def body_set_param(self, body: RID, param: PhysicsServer2D.BodyParameter, value: GDAny) -> None: ...
    def body_get_param(self, body: RID, param: PhysicsServer2D.BodyParameter) -> GDAny: ...
    def body_reset_mass_properties(self, body: RID) -> None: ...
    def body_set_state(self, body: RID, state: PhysicsServer2D.BodyState, value: GDAny) -> None: ...
    def body_get_state(self, body: RID, state: PhysicsServer2D.BodyState) -> GDAny: ...
    def body_apply_central_impulse(self, body: RID, impulse: Vector2) -> None: ...
    def body_apply_torque_impulse(self, body: RID, impulse: float) -> None: ...
    def body_apply_impulse(self, body: RID, impulse: Vector2, position: Vector2 = Vector2(0, 0)) -> None: ...
    def body_apply_central_force(self, body: RID, force: Vector2) -> None: ...
    def body_apply_force(self, body: RID, force: Vector2, position: Vector2 = Vector2(0, 0)) -> None: ...
    def body_apply_torque(self, body: RID, torque: float) -> None: ...
    def body_add_constant_central_force(self, body: RID, force: Vector2) -> None: ...
    def body_add_constant_force(self, body: RID, force: Vector2, position: Vector2 = Vector2(0, 0)) -> None: ...
    def body_add_constant_torque(self, body: RID, torque: float) -> None: ...
    def body_set_constant_force(self, body: RID, force: Vector2) -> None: ...
    def body_get_constant_force(self, body: RID) -> Vector2: ...
    def body_set_constant_torque(self, body: RID, torque: float) -> None: ...
    def body_get_constant_torque(self, body: RID) -> float: ...
    def body_set_axis_velocity(self, body: RID, axis_velocity: Vector2) -> None: ...
    def body_add_collision_exception(self, body: RID, excepted_body: RID) -> None: ...
    def body_remove_collision_exception(self, body: RID, excepted_body: RID) -> None: ...
    def body_set_max_contacts_reported(self, body: RID, amount: int) -> None: ...
    def body_get_max_contacts_reported(self, body: RID) -> int: ...
    def body_set_omit_force_integration(self, body: RID, enable: bool) -> None: ...
    def body_is_omitting_force_integration(self, body: RID) -> bool: ...
    def body_set_force_integration_callback(self, body: RID, callable: GDCallable, userdata: GDAny = None) -> None: ...
    def body_test_motion(self, body: RID, parameters: PhysicsTestMotionParameters2D, result: PhysicsTestMotionResult2D = None) -> bool: ...
    def body_get_direct_state(self, body: RID) -> PhysicsDirectBodyState2D: ...
    def joint_create(self) -> RID: ...
    def joint_clear(self, joint: RID) -> None: ...
    def joint_set_param(self, joint: RID, param: PhysicsServer2D.JointParam, value: float) -> None: ...
    def joint_get_param(self, joint: RID, param: PhysicsServer2D.JointParam) -> float: ...
    def joint_disable_collisions_between_bodies(self, joint: RID, disable: bool) -> None: ...
    def joint_is_disabled_collisions_between_bodies(self, joint: RID) -> bool: ...
    def joint_make_pin(self, joint: RID, anchor: Vector2, body_a: RID, body_b: RID = RID()) -> None: ...
    def joint_make_groove(self, joint: RID, groove1_a: Vector2, groove2_a: Vector2, anchor_b: Vector2, body_a: RID = RID(), body_b: RID = RID()) -> None: ...
    def joint_make_damped_spring(self, joint: RID, anchor_a: Vector2, anchor_b: Vector2, body_a: RID, body_b: RID = RID()) -> None: ...
    def pin_joint_set_param(self, joint: RID, param: PhysicsServer2D.PinJointParam, value: float) -> None: ...
    def pin_joint_get_param(self, joint: RID, param: PhysicsServer2D.PinJointParam) -> float: ...
    def damped_spring_joint_set_param(self, joint: RID, param: PhysicsServer2D.DampedSpringParam, value: float) -> None: ...
    def damped_spring_joint_get_param(self, joint: RID, param: PhysicsServer2D.DampedSpringParam) -> float: ...
    def joint_get_type(self, joint: RID) -> PhysicsServer2D.JointType: ...
    def free_rid(self, rid: RID) -> None: ...
    def set_active(self, active: bool) -> None: ...
    def get_process_info(self, process_info: PhysicsServer2D.ProcessInfo) -> int: ...


class PhysicsServer2DExtension(TypeInUse(PhysicsServer2D)):
    @classmethod
    def new(cls) -> PhysicsServer2DExtension: ...

    # Methods
    def body_test_motion_is_excluding_body(self, body: RID) -> bool: ...
    def body_test_motion_is_excluding_object(self, object: int) -> bool: ...


class PhysicsServer2DManager(TypeInUse(Object)):
    @classmethod
    def new(cls) -> PhysicsServer2DManager: ...

    # Methods
    def register_server(self, name: GDString | str, create_callback: GDCallable) -> None: ...
    def set_default_server(self, name: GDString | str, priority: int) -> None: ...


class PhysicsServer3D(TypeInUse(Object)):

    # Enums
    class PhysicsServer3D.JointType(Enum):
        JOINT_TYPE_PIN: int
        JOINT_TYPE_HINGE: int
        JOINT_TYPE_SLIDER: int
        JOINT_TYPE_CONE_TWIST: int
        JOINT_TYPE_6DOF: int
        JOINT_TYPE_MAX: int
    class PhysicsServer3D.PinJointParam(Enum):
        PIN_JOINT_BIAS: int
        PIN_JOINT_DAMPING: int
        PIN_JOINT_IMPULSE_CLAMP: int
    class PhysicsServer3D.HingeJointParam(Enum):
        HINGE_JOINT_BIAS: int
        HINGE_JOINT_LIMIT_UPPER: int
        HINGE_JOINT_LIMIT_LOWER: int
        HINGE_JOINT_LIMIT_BIAS: int
        HINGE_JOINT_LIMIT_SOFTNESS: int
        HINGE_JOINT_LIMIT_RELAXATION: int
        HINGE_JOINT_MOTOR_TARGET_VELOCITY: int
        HINGE_JOINT_MOTOR_MAX_IMPULSE: int
    class PhysicsServer3D.HingeJointFlag(Enum):
        HINGE_JOINT_FLAG_USE_LIMIT: int
        HINGE_JOINT_FLAG_ENABLE_MOTOR: int
    class PhysicsServer3D.SliderJointParam(Enum):
        SLIDER_JOINT_LINEAR_LIMIT_UPPER: int
        SLIDER_JOINT_LINEAR_LIMIT_LOWER: int
        SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS: int
        SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION: int
        SLIDER_JOINT_LINEAR_LIMIT_DAMPING: int
        SLIDER_JOINT_LINEAR_MOTION_SOFTNESS: int
        SLIDER_JOINT_LINEAR_MOTION_RESTITUTION: int
        SLIDER_JOINT_LINEAR_MOTION_DAMPING: int
        SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS: int
        SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION: int
        SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING: int
        SLIDER_JOINT_ANGULAR_LIMIT_UPPER: int
        SLIDER_JOINT_ANGULAR_LIMIT_LOWER: int
        SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS: int
        SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION: int
        SLIDER_JOINT_ANGULAR_LIMIT_DAMPING: int
        SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS: int
        SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION: int
        SLIDER_JOINT_ANGULAR_MOTION_DAMPING: int
        SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS: int
        SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION: int
        SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING: int
        SLIDER_JOINT_MAX: int
    class PhysicsServer3D.ConeTwistJointParam(Enum):
        CONE_TWIST_JOINT_SWING_SPAN: int
        CONE_TWIST_JOINT_TWIST_SPAN: int
        CONE_TWIST_JOINT_BIAS: int
        CONE_TWIST_JOINT_SOFTNESS: int
        CONE_TWIST_JOINT_RELAXATION: int
    class PhysicsServer3D.G6DOFJointAxisParam(Enum):
        G6DOF_JOINT_LINEAR_LOWER_LIMIT: int
        G6DOF_JOINT_LINEAR_UPPER_LIMIT: int
        G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS: int
        G6DOF_JOINT_LINEAR_RESTITUTION: int
        G6DOF_JOINT_LINEAR_DAMPING: int
        G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY: int
        G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT: int
        G6DOF_JOINT_ANGULAR_LOWER_LIMIT: int
        G6DOF_JOINT_ANGULAR_UPPER_LIMIT: int
        G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS: int
        G6DOF_JOINT_ANGULAR_DAMPING: int
        G6DOF_JOINT_ANGULAR_RESTITUTION: int
        G6DOF_JOINT_ANGULAR_FORCE_LIMIT: int
        G6DOF_JOINT_ANGULAR_ERP: int
        G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY: int
        G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT: int
    class PhysicsServer3D.G6DOFJointAxisFlag(Enum):
        G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT: int
        G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT: int
        G6DOF_JOINT_FLAG_ENABLE_MOTOR: int
        G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR: int
    class PhysicsServer3D.ShapeType(Enum):
        SHAPE_WORLD_BOUNDARY: int
        SHAPE_SEPARATION_RAY: int
        SHAPE_SPHERE: int
        SHAPE_BOX: int
        SHAPE_CAPSULE: int
        SHAPE_CYLINDER: int
        SHAPE_CONVEX_POLYGON: int
        SHAPE_CONCAVE_POLYGON: int
        SHAPE_HEIGHTMAP: int
        SHAPE_SOFT_BODY: int
        SHAPE_CUSTOM: int
    class PhysicsServer3D.AreaParameter(Enum):
        AREA_PARAM_GRAVITY_OVERRIDE_MODE: int
        AREA_PARAM_GRAVITY: int
        AREA_PARAM_GRAVITY_VECTOR: int
        AREA_PARAM_GRAVITY_IS_POINT: int
        AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE: int
        AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE: int
        AREA_PARAM_LINEAR_DAMP: int
        AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE: int
        AREA_PARAM_ANGULAR_DAMP: int
        AREA_PARAM_PRIORITY: int
        AREA_PARAM_WIND_FORCE_MAGNITUDE: int
        AREA_PARAM_WIND_SOURCE: int
        AREA_PARAM_WIND_DIRECTION: int
        AREA_PARAM_WIND_ATTENUATION_FACTOR: int
    class PhysicsServer3D.AreaSpaceOverrideMode(Enum):
        AREA_SPACE_OVERRIDE_DISABLED: int
        AREA_SPACE_OVERRIDE_COMBINE: int
        AREA_SPACE_OVERRIDE_COMBINE_REPLACE: int
        AREA_SPACE_OVERRIDE_REPLACE: int
        AREA_SPACE_OVERRIDE_REPLACE_COMBINE: int
    class PhysicsServer3D.BodyMode(Enum):
        BODY_MODE_STATIC: int
        BODY_MODE_KINEMATIC: int
        BODY_MODE_RIGID: int
        BODY_MODE_RIGID_LINEAR: int
    class PhysicsServer3D.BodyParameter(Enum):
        BODY_PARAM_BOUNCE: int
        BODY_PARAM_FRICTION: int
        BODY_PARAM_MASS: int
        BODY_PARAM_INERTIA: int
        BODY_PARAM_CENTER_OF_MASS: int
        BODY_PARAM_GRAVITY_SCALE: int
        BODY_PARAM_LINEAR_DAMP_MODE: int
        BODY_PARAM_ANGULAR_DAMP_MODE: int
        BODY_PARAM_LINEAR_DAMP: int
        BODY_PARAM_ANGULAR_DAMP: int
        BODY_PARAM_MAX: int
    class PhysicsServer3D.BodyDampMode(Enum):
        BODY_DAMP_MODE_COMBINE: int
        BODY_DAMP_MODE_REPLACE: int
    class PhysicsServer3D.BodyState(Enum):
        BODY_STATE_TRANSFORM: int
        BODY_STATE_LINEAR_VELOCITY: int
        BODY_STATE_ANGULAR_VELOCITY: int
        BODY_STATE_SLEEPING: int
        BODY_STATE_CAN_SLEEP: int
    class PhysicsServer3D.AreaBodyStatus(Enum):
        AREA_BODY_ADDED: int
        AREA_BODY_REMOVED: int
    class PhysicsServer3D.ProcessInfo(Enum):
        INFO_ACTIVE_OBJECTS: int
        INFO_COLLISION_PAIRS: int
        INFO_ISLAND_COUNT: int
    class PhysicsServer3D.SpaceParameter(Enum):
        SPACE_PARAM_CONTACT_RECYCLE_RADIUS: int
        SPACE_PARAM_CONTACT_MAX_SEPARATION: int
        SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION: int
        SPACE_PARAM_CONTACT_DEFAULT_BIAS: int
        SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD: int
        SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD: int
        SPACE_PARAM_BODY_TIME_TO_SLEEP: int
        SPACE_PARAM_SOLVER_ITERATIONS: int
    class PhysicsServer3D.BodyAxis(Enum):
        BODY_AXIS_LINEAR_X: int
        BODY_AXIS_LINEAR_Y: int
        BODY_AXIS_LINEAR_Z: int
        BODY_AXIS_ANGULAR_X: int
        BODY_AXIS_ANGULAR_Y: int
        BODY_AXIS_ANGULAR_Z: int

    # Methods
    def world_boundary_shape_create(self) -> RID: ...
    def separation_ray_shape_create(self) -> RID: ...
    def sphere_shape_create(self) -> RID: ...
    def box_shape_create(self) -> RID: ...
    def capsule_shape_create(self) -> RID: ...
    def cylinder_shape_create(self) -> RID: ...
    def convex_polygon_shape_create(self) -> RID: ...
    def concave_polygon_shape_create(self) -> RID: ...
    def heightmap_shape_create(self) -> RID: ...
    def custom_shape_create(self) -> RID: ...
    def shape_set_data(self, shape: RID, data: GDAny) -> None: ...
    def shape_get_type(self, shape: RID) -> PhysicsServer3D.ShapeType: ...
    def shape_get_data(self, shape: RID) -> GDAny: ...
    def space_create(self) -> RID: ...
    def space_set_active(self, space: RID, active: bool) -> None: ...
    def space_is_active(self, space: RID) -> bool: ...
    def space_set_param(self, space: RID, param: PhysicsServer3D.SpaceParameter, value: float) -> None: ...
    def space_get_param(self, space: RID, param: PhysicsServer3D.SpaceParameter) -> float: ...
    def space_get_direct_state(self, space: RID) -> PhysicsDirectSpaceState3D: ...
    def area_create(self) -> RID: ...
    def area_set_space(self, area: RID, space: RID) -> None: ...
    def area_get_space(self, area: RID) -> RID: ...
    def area_add_shape(self, area: RID, shape: RID, transform: Transform3D = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0), disabled: bool = False) -> None: ...
    def area_set_shape(self, area: RID, shape_idx: int, shape: RID) -> None: ...
    def area_set_shape_transform(self, area: RID, shape_idx: int, transform: Transform3D) -> None: ...
    def area_set_shape_disabled(self, area: RID, shape_idx: int, disabled: bool) -> None: ...
    def area_get_shape_count(self, area: RID) -> int: ...
    def area_get_shape(self, area: RID, shape_idx: int) -> RID: ...
    def area_get_shape_transform(self, area: RID, shape_idx: int) -> Transform3D: ...
    def area_remove_shape(self, area: RID, shape_idx: int) -> None: ...
    def area_clear_shapes(self, area: RID) -> None: ...
    def area_set_collision_layer(self, area: RID, layer: int) -> None: ...
    def area_get_collision_layer(self, area: RID) -> int: ...
    def area_set_collision_mask(self, area: RID, mask: int) -> None: ...
    def area_get_collision_mask(self, area: RID) -> int: ...
    def area_set_param(self, area: RID, param: PhysicsServer3D.AreaParameter, value: GDAny) -> None: ...
    def area_set_transform(self, area: RID, transform: Transform3D) -> None: ...
    def area_get_param(self, area: RID, param: PhysicsServer3D.AreaParameter) -> GDAny: ...
    def area_get_transform(self, area: RID) -> Transform3D: ...
    def area_attach_object_instance_id(self, area: RID, id: int) -> None: ...
    def area_get_object_instance_id(self, area: RID) -> int: ...
    def area_set_monitor_callback(self, area: RID, callback: GDCallable) -> None: ...
    def area_set_area_monitor_callback(self, area: RID, callback: GDCallable) -> None: ...
    def area_set_monitorable(self, area: RID, monitorable: bool) -> None: ...
    def area_set_ray_pickable(self, area: RID, enable: bool) -> None: ...
    def body_create(self) -> RID: ...
    def body_set_space(self, body: RID, space: RID) -> None: ...
    def body_get_space(self, body: RID) -> RID: ...
    def body_set_mode(self, body: RID, mode: PhysicsServer3D.BodyMode) -> None: ...
    def body_get_mode(self, body: RID) -> PhysicsServer3D.BodyMode: ...
    def body_set_collision_layer(self, body: RID, layer: int) -> None: ...
    def body_get_collision_layer(self, body: RID) -> int: ...
    def body_set_collision_mask(self, body: RID, mask: int) -> None: ...
    def body_get_collision_mask(self, body: RID) -> int: ...
    def body_set_collision_priority(self, body: RID, priority: float) -> None: ...
    def body_get_collision_priority(self, body: RID) -> float: ...
    def body_add_shape(self, body: RID, shape: RID, transform: Transform3D = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0), disabled: bool = False) -> None: ...
    def body_set_shape(self, body: RID, shape_idx: int, shape: RID) -> None: ...
    def body_set_shape_transform(self, body: RID, shape_idx: int, transform: Transform3D) -> None: ...
    def body_set_shape_disabled(self, body: RID, shape_idx: int, disabled: bool) -> None: ...
    def body_get_shape_count(self, body: RID) -> int: ...
    def body_get_shape(self, body: RID, shape_idx: int) -> RID: ...
    def body_get_shape_transform(self, body: RID, shape_idx: int) -> Transform3D: ...
    def body_remove_shape(self, body: RID, shape_idx: int) -> None: ...
    def body_clear_shapes(self, body: RID) -> None: ...
    def body_attach_object_instance_id(self, body: RID, id: int) -> None: ...
    def body_get_object_instance_id(self, body: RID) -> int: ...
    def body_set_enable_continuous_collision_detection(self, body: RID, enable: bool) -> None: ...
    def body_is_continuous_collision_detection_enabled(self, body: RID) -> bool: ...
    def body_set_param(self, body: RID, param: PhysicsServer3D.BodyParameter, value: GDAny) -> None: ...
    def body_get_param(self, body: RID, param: PhysicsServer3D.BodyParameter) -> GDAny: ...
    def body_reset_mass_properties(self, body: RID) -> None: ...
    def body_set_state(self, body: RID, state: PhysicsServer3D.BodyState, value: GDAny) -> None: ...
    def body_get_state(self, body: RID, state: PhysicsServer3D.BodyState) -> GDAny: ...
    def body_apply_central_impulse(self, body: RID, impulse: Vector3) -> None: ...
    def body_apply_impulse(self, body: RID, impulse: Vector3, position: Vector3 = Vector3(0, 0, 0)) -> None: ...
    def body_apply_torque_impulse(self, body: RID, impulse: Vector3) -> None: ...
    def body_apply_central_force(self, body: RID, force: Vector3) -> None: ...
    def body_apply_force(self, body: RID, force: Vector3, position: Vector3 = Vector3(0, 0, 0)) -> None: ...
    def body_apply_torque(self, body: RID, torque: Vector3) -> None: ...
    def body_add_constant_central_force(self, body: RID, force: Vector3) -> None: ...
    def body_add_constant_force(self, body: RID, force: Vector3, position: Vector3 = Vector3(0, 0, 0)) -> None: ...
    def body_add_constant_torque(self, body: RID, torque: Vector3) -> None: ...
    def body_set_constant_force(self, body: RID, force: Vector3) -> None: ...
    def body_get_constant_force(self, body: RID) -> Vector3: ...
    def body_set_constant_torque(self, body: RID, torque: Vector3) -> None: ...
    def body_get_constant_torque(self, body: RID) -> Vector3: ...
    def body_set_axis_velocity(self, body: RID, axis_velocity: Vector3) -> None: ...
    def body_set_axis_lock(self, body: RID, axis: PhysicsServer3D.BodyAxis, lock: bool) -> None: ...
    def body_is_axis_locked(self, body: RID, axis: PhysicsServer3D.BodyAxis) -> bool: ...
    def body_add_collision_exception(self, body: RID, excepted_body: RID) -> None: ...
    def body_remove_collision_exception(self, body: RID, excepted_body: RID) -> None: ...
    def body_set_max_contacts_reported(self, body: RID, amount: int) -> None: ...
    def body_get_max_contacts_reported(self, body: RID) -> int: ...
    def body_set_omit_force_integration(self, body: RID, enable: bool) -> None: ...
    def body_is_omitting_force_integration(self, body: RID) -> bool: ...
    def body_set_force_integration_callback(self, body: RID, callable: GDCallable, userdata: GDAny = None) -> None: ...
    def body_set_ray_pickable(self, body: RID, enable: bool) -> None: ...
    def body_test_motion(self, body: RID, parameters: PhysicsTestMotionParameters3D, result: PhysicsTestMotionResult3D = None) -> bool: ...
    def body_get_direct_state(self, body: RID) -> PhysicsDirectBodyState3D: ...
    def soft_body_get_bounds(self, body: RID) -> AABB: ...
    def joint_create(self) -> RID: ...
    def joint_clear(self, joint: RID) -> None: ...
    def joint_make_pin(self, joint: RID, body_A: RID, local_A: Vector3, body_B: RID, local_B: Vector3) -> None: ...
    def pin_joint_set_param(self, joint: RID, param: PhysicsServer3D.PinJointParam, value: float) -> None: ...
    def pin_joint_get_param(self, joint: RID, param: PhysicsServer3D.PinJointParam) -> float: ...
    def pin_joint_set_local_a(self, joint: RID, local_A: Vector3) -> None: ...
    def pin_joint_get_local_a(self, joint: RID) -> Vector3: ...
    def pin_joint_set_local_b(self, joint: RID, local_B: Vector3) -> None: ...
    def pin_joint_get_local_b(self, joint: RID) -> Vector3: ...
    def joint_make_hinge(self, joint: RID, body_A: RID, hinge_A: Transform3D, body_B: RID, hinge_B: Transform3D) -> None: ...
    def hinge_joint_set_param(self, joint: RID, param: PhysicsServer3D.HingeJointParam, value: float) -> None: ...
    def hinge_joint_get_param(self, joint: RID, param: PhysicsServer3D.HingeJointParam) -> float: ...
    def hinge_joint_set_flag(self, joint: RID, flag: PhysicsServer3D.HingeJointFlag, enabled: bool) -> None: ...
    def hinge_joint_get_flag(self, joint: RID, flag: PhysicsServer3D.HingeJointFlag) -> bool: ...
    def joint_make_slider(self, joint: RID, body_A: RID, local_ref_A: Transform3D, body_B: RID, local_ref_B: Transform3D) -> None: ...
    def slider_joint_set_param(self, joint: RID, param: PhysicsServer3D.SliderJointParam, value: float) -> None: ...
    def slider_joint_get_param(self, joint: RID, param: PhysicsServer3D.SliderJointParam) -> float: ...
    def joint_make_cone_twist(self, joint: RID, body_A: RID, local_ref_A: Transform3D, body_B: RID, local_ref_B: Transform3D) -> None: ...
    def cone_twist_joint_set_param(self, joint: RID, param: PhysicsServer3D.ConeTwistJointParam, value: float) -> None: ...
    def cone_twist_joint_get_param(self, joint: RID, param: PhysicsServer3D.ConeTwistJointParam) -> float: ...
    def joint_get_type(self, joint: RID) -> PhysicsServer3D.JointType: ...
    def joint_set_solver_priority(self, joint: RID, priority: int) -> None: ...
    def joint_get_solver_priority(self, joint: RID) -> int: ...
    def joint_disable_collisions_between_bodies(self, joint: RID, disable: bool) -> None: ...
    def joint_is_disabled_collisions_between_bodies(self, joint: RID) -> bool: ...
    def joint_make_generic_6dof(self, joint: RID, body_A: RID, local_ref_A: Transform3D, body_B: RID, local_ref_B: Transform3D) -> None: ...
    def generic_6dof_joint_set_param(self, joint: RID, axis: Vector3.Axis, param: PhysicsServer3D.G6DOFJointAxisParam, value: float) -> None: ...
    def generic_6dof_joint_get_param(self, joint: RID, axis: Vector3.Axis, param: PhysicsServer3D.G6DOFJointAxisParam) -> float: ...
    def generic_6dof_joint_set_flag(self, joint: RID, axis: Vector3.Axis, flag: PhysicsServer3D.G6DOFJointAxisFlag, enable: bool) -> None: ...
    def generic_6dof_joint_get_flag(self, joint: RID, axis: Vector3.Axis, flag: PhysicsServer3D.G6DOFJointAxisFlag) -> bool: ...
    def free_rid(self, rid: RID) -> None: ...
    def set_active(self, active: bool) -> None: ...
    def get_process_info(self, process_info: PhysicsServer3D.ProcessInfo) -> int: ...


class PhysicsServer3DExtension(TypeInUse(PhysicsServer3D)):
    @classmethod
    def new(cls) -> PhysicsServer3DExtension: ...

    # Methods
    def body_test_motion_is_excluding_body(self, body: RID) -> bool: ...
    def body_test_motion_is_excluding_object(self, object: int) -> bool: ...


class PhysicsServer3DManager(TypeInUse(Object)):
    @classmethod
    def new(cls) -> PhysicsServer3DManager: ...

    # Methods
    def register_server(self, name: GDString | str, create_callback: GDCallable) -> None: ...
    def set_default_server(self, name: GDString | str, priority: int) -> None: ...


class PhysicsServer3DRenderingServerHandler(TypeInUse(Object)):
    @classmethod
    def new(cls) -> PhysicsServer3DRenderingServerHandler: ...


class ProjectSettings(TypeInUse(Object)):
    @classmethod
    def new(cls) -> ProjectSettings: ...

    # Methods
    def has_setting(self, name: GDString | str) -> bool: ...
    def set_setting(self, name: GDString | str, value: GDAny) -> None: ...
    def get_setting(self, name: GDString | str, default_value: GDAny = None) -> GDAny: ...
    def get_setting_with_override(self, name: StringName | str) -> GDAny: ...
    def get_global_class_list(self) -> GDArray: ...
    def set_order(self, name: GDString | str, position: int) -> None: ...
    def get_order(self, name: GDString | str) -> int: ...
    def set_initial_value(self, name: GDString | str, value: GDAny) -> None: ...
    def set_as_basic(self, name: GDString | str, basic: bool) -> None: ...
    def set_as_internal(self, name: GDString | str, internal: bool) -> None: ...
    def add_property_info(self, hint: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def set_restart_if_changed(self, name: GDString | str, restart: bool) -> None: ...
    def clear(self, name: GDString | str) -> None: ...
    def localize_path(self, path: GDString | str) -> GDString: ...
    def globalize_path(self, path: GDString | str) -> GDString: ...
    def save(self) -> Error: ...
    def load_resource_pack(self, pack: GDString | str, replace_files: bool = True, offset: int = 0) -> bool: ...
    def save_custom(self, file: GDString | str) -> Error: ...


class RefCounted(TypeInUse(Object)):
    def __init__(self): ...

    # Methods
    def init_ref(self) -> bool: ...
    def reference(self) -> bool: ...
    def unreference(self) -> bool: ...
    def get_reference_count(self) -> int: ...


class RegEx(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def create_from_string(self, pattern: GDString | str) -> RegEx: ...
    def clear(self) -> None: ...
    def compile(self, pattern: GDString | str) -> Error: ...
    def search(self, subject: GDString | str, offset: int = 0, end: int = -1) -> RegExMatch: ...
    def search_all(self, subject: GDString | str, offset: int = 0, end: int = -1) -> GDArray: ...
    def sub(self, subject: GDString | str, replacement: GDString | str, all: bool = False, offset: int = 0, end: int = -1) -> GDString: ...
    def is_valid(self) -> bool: ...
    def get_pattern(self) -> GDString: ...
    def get_group_count(self) -> int: ...
    def get_names(self) -> PackedStringArray: ...


class RegExMatch(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def get_subject(self) -> GDString: ...
    def get_group_count(self) -> int: ...
    def get_names(self) -> GDDictionary: ...
    def get_strings(self) -> PackedStringArray: ...
    def get_string(self, name: GDAny = 0) -> GDString: ...
    def get_start(self, name: GDAny = 0) -> int: ...
    def get_end(self, name: GDAny = 0) -> int: ...

    # Properties
    subject: GDString
    names: GDDictionary
    strings: GDArray


class RenderingDevice(TypeInUse(Object)):

    # Enums
    class RenderingDevice.DeviceType(Enum):
        DEVICE_TYPE_OTHER: int
        DEVICE_TYPE_INTEGRATED_GPU: int
        DEVICE_TYPE_DISCRETE_GPU: int
        DEVICE_TYPE_VIRTUAL_GPU: int
        DEVICE_TYPE_CPU: int
        DEVICE_TYPE_MAX: int
    class RenderingDevice.DriverResource(Enum):
        DRIVER_RESOURCE_VULKAN_DEVICE: int
        DRIVER_RESOURCE_VULKAN_PHYSICAL_DEVICE: int
        DRIVER_RESOURCE_VULKAN_INSTANCE: int
        DRIVER_RESOURCE_VULKAN_QUEUE: int
        DRIVER_RESOURCE_VULKAN_QUEUE_FAMILY_INDEX: int
        DRIVER_RESOURCE_VULKAN_IMAGE: int
        DRIVER_RESOURCE_VULKAN_IMAGE_VIEW: int
        DRIVER_RESOURCE_VULKAN_IMAGE_NATIVE_TEXTURE_FORMAT: int
        DRIVER_RESOURCE_VULKAN_SAMPLER: int
        DRIVER_RESOURCE_VULKAN_DESCRIPTOR_SET: int
        DRIVER_RESOURCE_VULKAN_BUFFER: int
        DRIVER_RESOURCE_VULKAN_COMPUTE_PIPELINE: int
        DRIVER_RESOURCE_VULKAN_RENDER_PIPELINE: int
    class RenderingDevice.DataFormat(Enum):
        DATA_FORMAT_R4G4_UNORM_PACK8: int
        DATA_FORMAT_R4G4B4A4_UNORM_PACK16: int
        DATA_FORMAT_B4G4R4A4_UNORM_PACK16: int
        DATA_FORMAT_R5G6B5_UNORM_PACK16: int
        DATA_FORMAT_B5G6R5_UNORM_PACK16: int
        DATA_FORMAT_R5G5B5A1_UNORM_PACK16: int
        DATA_FORMAT_B5G5R5A1_UNORM_PACK16: int
        DATA_FORMAT_A1R5G5B5_UNORM_PACK16: int
        DATA_FORMAT_R8_UNORM: int
        DATA_FORMAT_R8_SNORM: int
        DATA_FORMAT_R8_USCALED: int
        DATA_FORMAT_R8_SSCALED: int
        DATA_FORMAT_R8_UINT: int
        DATA_FORMAT_R8_SINT: int
        DATA_FORMAT_R8_SRGB: int
        DATA_FORMAT_R8G8_UNORM: int
        DATA_FORMAT_R8G8_SNORM: int
        DATA_FORMAT_R8G8_USCALED: int
        DATA_FORMAT_R8G8_SSCALED: int
        DATA_FORMAT_R8G8_UINT: int
        DATA_FORMAT_R8G8_SINT: int
        DATA_FORMAT_R8G8_SRGB: int
        DATA_FORMAT_R8G8B8_UNORM: int
        DATA_FORMAT_R8G8B8_SNORM: int
        DATA_FORMAT_R8G8B8_USCALED: int
        DATA_FORMAT_R8G8B8_SSCALED: int
        DATA_FORMAT_R8G8B8_UINT: int
        DATA_FORMAT_R8G8B8_SINT: int
        DATA_FORMAT_R8G8B8_SRGB: int
        DATA_FORMAT_B8G8R8_UNORM: int
        DATA_FORMAT_B8G8R8_SNORM: int
        DATA_FORMAT_B8G8R8_USCALED: int
        DATA_FORMAT_B8G8R8_SSCALED: int
        DATA_FORMAT_B8G8R8_UINT: int
        DATA_FORMAT_B8G8R8_SINT: int
        DATA_FORMAT_B8G8R8_SRGB: int
        DATA_FORMAT_R8G8B8A8_UNORM: int
        DATA_FORMAT_R8G8B8A8_SNORM: int
        DATA_FORMAT_R8G8B8A8_USCALED: int
        DATA_FORMAT_R8G8B8A8_SSCALED: int
        DATA_FORMAT_R8G8B8A8_UINT: int
        DATA_FORMAT_R8G8B8A8_SINT: int
        DATA_FORMAT_R8G8B8A8_SRGB: int
        DATA_FORMAT_B8G8R8A8_UNORM: int
        DATA_FORMAT_B8G8R8A8_SNORM: int
        DATA_FORMAT_B8G8R8A8_USCALED: int
        DATA_FORMAT_B8G8R8A8_SSCALED: int
        DATA_FORMAT_B8G8R8A8_UINT: int
        DATA_FORMAT_B8G8R8A8_SINT: int
        DATA_FORMAT_B8G8R8A8_SRGB: int
        DATA_FORMAT_A8B8G8R8_UNORM_PACK32: int
        DATA_FORMAT_A8B8G8R8_SNORM_PACK32: int
        DATA_FORMAT_A8B8G8R8_USCALED_PACK32: int
        DATA_FORMAT_A8B8G8R8_SSCALED_PACK32: int
        DATA_FORMAT_A8B8G8R8_UINT_PACK32: int
        DATA_FORMAT_A8B8G8R8_SINT_PACK32: int
        DATA_FORMAT_A8B8G8R8_SRGB_PACK32: int
        DATA_FORMAT_A2R10G10B10_UNORM_PACK32: int
        DATA_FORMAT_A2R10G10B10_SNORM_PACK32: int
        DATA_FORMAT_A2R10G10B10_USCALED_PACK32: int
        DATA_FORMAT_A2R10G10B10_SSCALED_PACK32: int
        DATA_FORMAT_A2R10G10B10_UINT_PACK32: int
        DATA_FORMAT_A2R10G10B10_SINT_PACK32: int
        DATA_FORMAT_A2B10G10R10_UNORM_PACK32: int
        DATA_FORMAT_A2B10G10R10_SNORM_PACK32: int
        DATA_FORMAT_A2B10G10R10_USCALED_PACK32: int
        DATA_FORMAT_A2B10G10R10_SSCALED_PACK32: int
        DATA_FORMAT_A2B10G10R10_UINT_PACK32: int
        DATA_FORMAT_A2B10G10R10_SINT_PACK32: int
        DATA_FORMAT_R16_UNORM: int
        DATA_FORMAT_R16_SNORM: int
        DATA_FORMAT_R16_USCALED: int
        DATA_FORMAT_R16_SSCALED: int
        DATA_FORMAT_R16_UINT: int
        DATA_FORMAT_R16_SINT: int
        DATA_FORMAT_R16_SFLOAT: int
        DATA_FORMAT_R16G16_UNORM: int
        DATA_FORMAT_R16G16_SNORM: int
        DATA_FORMAT_R16G16_USCALED: int
        DATA_FORMAT_R16G16_SSCALED: int
        DATA_FORMAT_R16G16_UINT: int
        DATA_FORMAT_R16G16_SINT: int
        DATA_FORMAT_R16G16_SFLOAT: int
        DATA_FORMAT_R16G16B16_UNORM: int
        DATA_FORMAT_R16G16B16_SNORM: int
        DATA_FORMAT_R16G16B16_USCALED: int
        DATA_FORMAT_R16G16B16_SSCALED: int
        DATA_FORMAT_R16G16B16_UINT: int
        DATA_FORMAT_R16G16B16_SINT: int
        DATA_FORMAT_R16G16B16_SFLOAT: int
        DATA_FORMAT_R16G16B16A16_UNORM: int
        DATA_FORMAT_R16G16B16A16_SNORM: int
        DATA_FORMAT_R16G16B16A16_USCALED: int
        DATA_FORMAT_R16G16B16A16_SSCALED: int
        DATA_FORMAT_R16G16B16A16_UINT: int
        DATA_FORMAT_R16G16B16A16_SINT: int
        DATA_FORMAT_R16G16B16A16_SFLOAT: int
        DATA_FORMAT_R32_UINT: int
        DATA_FORMAT_R32_SINT: int
        DATA_FORMAT_R32_SFLOAT: int
        DATA_FORMAT_R32G32_UINT: int
        DATA_FORMAT_R32G32_SINT: int
        DATA_FORMAT_R32G32_SFLOAT: int
        DATA_FORMAT_R32G32B32_UINT: int
        DATA_FORMAT_R32G32B32_SINT: int
        DATA_FORMAT_R32G32B32_SFLOAT: int
        DATA_FORMAT_R32G32B32A32_UINT: int
        DATA_FORMAT_R32G32B32A32_SINT: int
        DATA_FORMAT_R32G32B32A32_SFLOAT: int
        DATA_FORMAT_R64_UINT: int
        DATA_FORMAT_R64_SINT: int
        DATA_FORMAT_R64_SFLOAT: int
        DATA_FORMAT_R64G64_UINT: int
        DATA_FORMAT_R64G64_SINT: int
        DATA_FORMAT_R64G64_SFLOAT: int
        DATA_FORMAT_R64G64B64_UINT: int
        DATA_FORMAT_R64G64B64_SINT: int
        DATA_FORMAT_R64G64B64_SFLOAT: int
        DATA_FORMAT_R64G64B64A64_UINT: int
        DATA_FORMAT_R64G64B64A64_SINT: int
        DATA_FORMAT_R64G64B64A64_SFLOAT: int
        DATA_FORMAT_B10G11R11_UFLOAT_PACK32: int
        DATA_FORMAT_E5B9G9R9_UFLOAT_PACK32: int
        DATA_FORMAT_D16_UNORM: int
        DATA_FORMAT_X8_D24_UNORM_PACK32: int
        DATA_FORMAT_D32_SFLOAT: int
        DATA_FORMAT_S8_UINT: int
        DATA_FORMAT_D16_UNORM_S8_UINT: int
        DATA_FORMAT_D24_UNORM_S8_UINT: int
        DATA_FORMAT_D32_SFLOAT_S8_UINT: int
        DATA_FORMAT_BC1_RGB_UNORM_BLOCK: int
        DATA_FORMAT_BC1_RGB_SRGB_BLOCK: int
        DATA_FORMAT_BC1_RGBA_UNORM_BLOCK: int
        DATA_FORMAT_BC1_RGBA_SRGB_BLOCK: int
        DATA_FORMAT_BC2_UNORM_BLOCK: int
        DATA_FORMAT_BC2_SRGB_BLOCK: int
        DATA_FORMAT_BC3_UNORM_BLOCK: int
        DATA_FORMAT_BC3_SRGB_BLOCK: int
        DATA_FORMAT_BC4_UNORM_BLOCK: int
        DATA_FORMAT_BC4_SNORM_BLOCK: int
        DATA_FORMAT_BC5_UNORM_BLOCK: int
        DATA_FORMAT_BC5_SNORM_BLOCK: int
        DATA_FORMAT_BC6H_UFLOAT_BLOCK: int
        DATA_FORMAT_BC6H_SFLOAT_BLOCK: int
        DATA_FORMAT_BC7_UNORM_BLOCK: int
        DATA_FORMAT_BC7_SRGB_BLOCK: int
        DATA_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: int
        DATA_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: int
        DATA_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: int
        DATA_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: int
        DATA_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: int
        DATA_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: int
        DATA_FORMAT_EAC_R11_UNORM_BLOCK: int
        DATA_FORMAT_EAC_R11_SNORM_BLOCK: int
        DATA_FORMAT_EAC_R11G11_UNORM_BLOCK: int
        DATA_FORMAT_EAC_R11G11_SNORM_BLOCK: int
        DATA_FORMAT_ASTC_4x4_UNORM_BLOCK: int
        DATA_FORMAT_ASTC_4x4_SRGB_BLOCK: int
        DATA_FORMAT_ASTC_5x4_UNORM_BLOCK: int
        DATA_FORMAT_ASTC_5x4_SRGB_BLOCK: int
        DATA_FORMAT_ASTC_5x5_UNORM_BLOCK: int
        DATA_FORMAT_ASTC_5x5_SRGB_BLOCK: int
        DATA_FORMAT_ASTC_6x5_UNORM_BLOCK: int
        DATA_FORMAT_ASTC_6x5_SRGB_BLOCK: int
        DATA_FORMAT_ASTC_6x6_UNORM_BLOCK: int
        DATA_FORMAT_ASTC_6x6_SRGB_BLOCK: int
        DATA_FORMAT_ASTC_8x5_UNORM_BLOCK: int
        DATA_FORMAT_ASTC_8x5_SRGB_BLOCK: int
        DATA_FORMAT_ASTC_8x6_UNORM_BLOCK: int
        DATA_FORMAT_ASTC_8x6_SRGB_BLOCK: int
        DATA_FORMAT_ASTC_8x8_UNORM_BLOCK: int
        DATA_FORMAT_ASTC_8x8_SRGB_BLOCK: int
        DATA_FORMAT_ASTC_10x5_UNORM_BLOCK: int
        DATA_FORMAT_ASTC_10x5_SRGB_BLOCK: int
        DATA_FORMAT_ASTC_10x6_UNORM_BLOCK: int
        DATA_FORMAT_ASTC_10x6_SRGB_BLOCK: int
        DATA_FORMAT_ASTC_10x8_UNORM_BLOCK: int
        DATA_FORMAT_ASTC_10x8_SRGB_BLOCK: int
        DATA_FORMAT_ASTC_10x10_UNORM_BLOCK: int
        DATA_FORMAT_ASTC_10x10_SRGB_BLOCK: int
        DATA_FORMAT_ASTC_12x10_UNORM_BLOCK: int
        DATA_FORMAT_ASTC_12x10_SRGB_BLOCK: int
        DATA_FORMAT_ASTC_12x12_UNORM_BLOCK: int
        DATA_FORMAT_ASTC_12x12_SRGB_BLOCK: int
        DATA_FORMAT_G8B8G8R8_422_UNORM: int
        DATA_FORMAT_B8G8R8G8_422_UNORM: int
        DATA_FORMAT_G8_B8_R8_3PLANE_420_UNORM: int
        DATA_FORMAT_G8_B8R8_2PLANE_420_UNORM: int
        DATA_FORMAT_G8_B8_R8_3PLANE_422_UNORM: int
        DATA_FORMAT_G8_B8R8_2PLANE_422_UNORM: int
        DATA_FORMAT_G8_B8_R8_3PLANE_444_UNORM: int
        DATA_FORMAT_R10X6_UNORM_PACK16: int
        DATA_FORMAT_R10X6G10X6_UNORM_2PACK16: int
        DATA_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16: int
        DATA_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: int
        DATA_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: int
        DATA_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: int
        DATA_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: int
        DATA_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: int
        DATA_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: int
        DATA_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: int
        DATA_FORMAT_R12X4_UNORM_PACK16: int
        DATA_FORMAT_R12X4G12X4_UNORM_2PACK16: int
        DATA_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16: int
        DATA_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: int
        DATA_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: int
        DATA_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: int
        DATA_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: int
        DATA_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: int
        DATA_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: int
        DATA_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: int
        DATA_FORMAT_G16B16G16R16_422_UNORM: int
        DATA_FORMAT_B16G16R16G16_422_UNORM: int
        DATA_FORMAT_G16_B16_R16_3PLANE_420_UNORM: int
        DATA_FORMAT_G16_B16R16_2PLANE_420_UNORM: int
        DATA_FORMAT_G16_B16_R16_3PLANE_422_UNORM: int
        DATA_FORMAT_G16_B16R16_2PLANE_422_UNORM: int
        DATA_FORMAT_G16_B16_R16_3PLANE_444_UNORM: int
        DATA_FORMAT_MAX: int
    class RenderingDevice.BarrierMask(Enum):
        BARRIER_MASK_RASTER: int
        BARRIER_MASK_COMPUTE: int
        BARRIER_MASK_TRANSFER: int
        BARRIER_MASK_ALL_BARRIERS: int
        BARRIER_MASK_NO_BARRIER: int
    class RenderingDevice.TextureType(Enum):
        TEXTURE_TYPE_1D: int
        TEXTURE_TYPE_2D: int
        TEXTURE_TYPE_3D: int
        TEXTURE_TYPE_CUBE: int
        TEXTURE_TYPE_1D_ARRAY: int
        TEXTURE_TYPE_2D_ARRAY: int
        TEXTURE_TYPE_CUBE_ARRAY: int
        TEXTURE_TYPE_MAX: int
    class RenderingDevice.TextureSamples(Enum):
        TEXTURE_SAMPLES_1: int
        TEXTURE_SAMPLES_2: int
        TEXTURE_SAMPLES_4: int
        TEXTURE_SAMPLES_8: int
        TEXTURE_SAMPLES_16: int
        TEXTURE_SAMPLES_32: int
        TEXTURE_SAMPLES_64: int
        TEXTURE_SAMPLES_MAX: int
    class RenderingDevice.TextureUsageBits(Enum):
        TEXTURE_USAGE_SAMPLING_BIT: int
        TEXTURE_USAGE_COLOR_ATTACHMENT_BIT: int
        TEXTURE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT: int
        TEXTURE_USAGE_STORAGE_BIT: int
        TEXTURE_USAGE_STORAGE_ATOMIC_BIT: int
        TEXTURE_USAGE_CPU_READ_BIT: int
        TEXTURE_USAGE_CAN_UPDATE_BIT: int
        TEXTURE_USAGE_CAN_COPY_FROM_BIT: int
        TEXTURE_USAGE_CAN_COPY_TO_BIT: int
        TEXTURE_USAGE_INPUT_ATTACHMENT_BIT: int
    class RenderingDevice.TextureSwizzle(Enum):
        TEXTURE_SWIZZLE_IDENTITY: int
        TEXTURE_SWIZZLE_ZERO: int
        TEXTURE_SWIZZLE_ONE: int
        TEXTURE_SWIZZLE_R: int
        TEXTURE_SWIZZLE_G: int
        TEXTURE_SWIZZLE_B: int
        TEXTURE_SWIZZLE_A: int
        TEXTURE_SWIZZLE_MAX: int
    class RenderingDevice.TextureSliceType(Enum):
        TEXTURE_SLICE_2D: int
        TEXTURE_SLICE_CUBEMAP: int
        TEXTURE_SLICE_3D: int
    class RenderingDevice.SamplerFilter(Enum):
        SAMPLER_FILTER_NEAREST: int
        SAMPLER_FILTER_LINEAR: int
    class RenderingDevice.SamplerRepeatMode(Enum):
        SAMPLER_REPEAT_MODE_REPEAT: int
        SAMPLER_REPEAT_MODE_MIRRORED_REPEAT: int
        SAMPLER_REPEAT_MODE_CLAMP_TO_EDGE: int
        SAMPLER_REPEAT_MODE_CLAMP_TO_BORDER: int
        SAMPLER_REPEAT_MODE_MIRROR_CLAMP_TO_EDGE: int
        SAMPLER_REPEAT_MODE_MAX: int
    class RenderingDevice.SamplerBorderColor(Enum):
        SAMPLER_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK: int
        SAMPLER_BORDER_COLOR_INT_TRANSPARENT_BLACK: int
        SAMPLER_BORDER_COLOR_FLOAT_OPAQUE_BLACK: int
        SAMPLER_BORDER_COLOR_INT_OPAQUE_BLACK: int
        SAMPLER_BORDER_COLOR_FLOAT_OPAQUE_WHITE: int
        SAMPLER_BORDER_COLOR_INT_OPAQUE_WHITE: int
        SAMPLER_BORDER_COLOR_MAX: int
    class RenderingDevice.VertexFrequency(Enum):
        VERTEX_FREQUENCY_VERTEX: int
        VERTEX_FREQUENCY_INSTANCE: int
    class RenderingDevice.IndexBufferFormat(Enum):
        INDEX_BUFFER_FORMAT_UINT16: int
        INDEX_BUFFER_FORMAT_UINT32: int
    class RenderingDevice.StorageBufferUsage(Enum):
        STORAGE_BUFFER_USAGE_DISPATCH_INDIRECT: int
    class RenderingDevice.UniformType(Enum):
        UNIFORM_TYPE_SAMPLER: int
        UNIFORM_TYPE_SAMPLER_WITH_TEXTURE: int
        UNIFORM_TYPE_TEXTURE: int
        UNIFORM_TYPE_IMAGE: int
        UNIFORM_TYPE_TEXTURE_BUFFER: int
        UNIFORM_TYPE_SAMPLER_WITH_TEXTURE_BUFFER: int
        UNIFORM_TYPE_IMAGE_BUFFER: int
        UNIFORM_TYPE_UNIFORM_BUFFER: int
        UNIFORM_TYPE_STORAGE_BUFFER: int
        UNIFORM_TYPE_INPUT_ATTACHMENT: int
        UNIFORM_TYPE_MAX: int
    class RenderingDevice.RenderPrimitive(Enum):
        RENDER_PRIMITIVE_POINTS: int
        RENDER_PRIMITIVE_LINES: int
        RENDER_PRIMITIVE_LINES_WITH_ADJACENCY: int
        RENDER_PRIMITIVE_LINESTRIPS: int
        RENDER_PRIMITIVE_LINESTRIPS_WITH_ADJACENCY: int
        RENDER_PRIMITIVE_TRIANGLES: int
        RENDER_PRIMITIVE_TRIANGLES_WITH_ADJACENCY: int
        RENDER_PRIMITIVE_TRIANGLE_STRIPS: int
        RENDER_PRIMITIVE_TRIANGLE_STRIPS_WITH_AJACENCY: int
        RENDER_PRIMITIVE_TRIANGLE_STRIPS_WITH_RESTART_INDEX: int
        RENDER_PRIMITIVE_TESSELATION_PATCH: int
        RENDER_PRIMITIVE_MAX: int
    class RenderingDevice.PolygonCullMode(Enum):
        POLYGON_CULL_DISABLED: int
        POLYGON_CULL_FRONT: int
        POLYGON_CULL_BACK: int
    class RenderingDevice.PolygonFrontFace(Enum):
        POLYGON_FRONT_FACE_CLOCKWISE: int
        POLYGON_FRONT_FACE_COUNTER_CLOCKWISE: int
    class RenderingDevice.StencilOperation(Enum):
        STENCIL_OP_KEEP: int
        STENCIL_OP_ZERO: int
        STENCIL_OP_REPLACE: int
        STENCIL_OP_INCREMENT_AND_CLAMP: int
        STENCIL_OP_DECREMENT_AND_CLAMP: int
        STENCIL_OP_INVERT: int
        STENCIL_OP_INCREMENT_AND_WRAP: int
        STENCIL_OP_DECREMENT_AND_WRAP: int
        STENCIL_OP_MAX: int
    class RenderingDevice.CompareOperator(Enum):
        COMPARE_OP_NEVER: int
        COMPARE_OP_LESS: int
        COMPARE_OP_EQUAL: int
        COMPARE_OP_LESS_OR_EQUAL: int
        COMPARE_OP_GREATER: int
        COMPARE_OP_NOT_EQUAL: int
        COMPARE_OP_GREATER_OR_EQUAL: int
        COMPARE_OP_ALWAYS: int
        COMPARE_OP_MAX: int
    class RenderingDevice.LogicOperation(Enum):
        LOGIC_OP_CLEAR: int
        LOGIC_OP_AND: int
        LOGIC_OP_AND_REVERSE: int
        LOGIC_OP_COPY: int
        LOGIC_OP_AND_INVERTED: int
        LOGIC_OP_NO_OP: int
        LOGIC_OP_XOR: int
        LOGIC_OP_OR: int
        LOGIC_OP_NOR: int
        LOGIC_OP_EQUIVALENT: int
        LOGIC_OP_INVERT: int
        LOGIC_OP_OR_REVERSE: int
        LOGIC_OP_COPY_INVERTED: int
        LOGIC_OP_OR_INVERTED: int
        LOGIC_OP_NAND: int
        LOGIC_OP_SET: int
        LOGIC_OP_MAX: int
    class RenderingDevice.BlendFactor(Enum):
        BLEND_FACTOR_ZERO: int
        BLEND_FACTOR_ONE: int
        BLEND_FACTOR_SRC_COLOR: int
        BLEND_FACTOR_ONE_MINUS_SRC_COLOR: int
        BLEND_FACTOR_DST_COLOR: int
        BLEND_FACTOR_ONE_MINUS_DST_COLOR: int
        BLEND_FACTOR_SRC_ALPHA: int
        BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: int
        BLEND_FACTOR_DST_ALPHA: int
        BLEND_FACTOR_ONE_MINUS_DST_ALPHA: int
        BLEND_FACTOR_CONSTANT_COLOR: int
        BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR: int
        BLEND_FACTOR_CONSTANT_ALPHA: int
        BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA: int
        BLEND_FACTOR_SRC_ALPHA_SATURATE: int
        BLEND_FACTOR_SRC1_COLOR: int
        BLEND_FACTOR_ONE_MINUS_SRC1_COLOR: int
        BLEND_FACTOR_SRC1_ALPHA: int
        BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA: int
        BLEND_FACTOR_MAX: int
    class RenderingDevice.BlendOperation(Enum):
        BLEND_OP_ADD: int
        BLEND_OP_SUBTRACT: int
        BLEND_OP_REVERSE_SUBTRACT: int
        BLEND_OP_MINIMUM: int
        BLEND_OP_MAXIMUM: int
        BLEND_OP_MAX: int
    class RenderingDevice.PipelineDynamicStateFlags(Enum):
        DYNAMIC_STATE_LINE_WIDTH: int
        DYNAMIC_STATE_DEPTH_BIAS: int
        DYNAMIC_STATE_BLEND_CONSTANTS: int
        DYNAMIC_STATE_DEPTH_BOUNDS: int
        DYNAMIC_STATE_STENCIL_COMPARE_MASK: int
        DYNAMIC_STATE_STENCIL_WRITE_MASK: int
        DYNAMIC_STATE_STENCIL_REFERENCE: int
    class RenderingDevice.InitialAction(Enum):
        INITIAL_ACTION_CLEAR: int
        INITIAL_ACTION_CLEAR_REGION: int
        INITIAL_ACTION_CLEAR_REGION_CONTINUE: int
        INITIAL_ACTION_KEEP: int
        INITIAL_ACTION_DROP: int
        INITIAL_ACTION_CONTINUE: int
        INITIAL_ACTION_MAX: int
    class RenderingDevice.FinalAction(Enum):
        FINAL_ACTION_READ: int
        FINAL_ACTION_DISCARD: int
        FINAL_ACTION_CONTINUE: int
        FINAL_ACTION_MAX: int
    class RenderingDevice.ShaderStage(Enum):
        SHADER_STAGE_VERTEX: int
        SHADER_STAGE_FRAGMENT: int
        SHADER_STAGE_TESSELATION_CONTROL: int
        SHADER_STAGE_TESSELATION_EVALUATION: int
        SHADER_STAGE_COMPUTE: int
        SHADER_STAGE_MAX: int
        SHADER_STAGE_VERTEX_BIT: int
        SHADER_STAGE_FRAGMENT_BIT: int
        SHADER_STAGE_TESSELATION_CONTROL_BIT: int
        SHADER_STAGE_TESSELATION_EVALUATION_BIT: int
        SHADER_STAGE_COMPUTE_BIT: int
    class RenderingDevice.ShaderLanguage(Enum):
        SHADER_LANGUAGE_GLSL: int
        SHADER_LANGUAGE_HLSL: int
    class RenderingDevice.PipelineSpecializationConstantType(Enum):
        PIPELINE_SPECIALIZATION_CONSTANT_TYPE_BOOL: int
        PIPELINE_SPECIALIZATION_CONSTANT_TYPE_INT: int
        PIPELINE_SPECIALIZATION_CONSTANT_TYPE_FLOAT: int
    class RenderingDevice.Limit(Enum):
        LIMIT_MAX_BOUND_UNIFORM_SETS: int
        LIMIT_MAX_FRAMEBUFFER_COLOR_ATTACHMENTS: int
        LIMIT_MAX_TEXTURES_PER_UNIFORM_SET: int
        LIMIT_MAX_SAMPLERS_PER_UNIFORM_SET: int
        LIMIT_MAX_STORAGE_BUFFERS_PER_UNIFORM_SET: int
        LIMIT_MAX_STORAGE_IMAGES_PER_UNIFORM_SET: int
        LIMIT_MAX_UNIFORM_BUFFERS_PER_UNIFORM_SET: int
        LIMIT_MAX_DRAW_INDEXED_INDEX: int
        LIMIT_MAX_FRAMEBUFFER_HEIGHT: int
        LIMIT_MAX_FRAMEBUFFER_WIDTH: int
        LIMIT_MAX_TEXTURE_ARRAY_LAYERS: int
        LIMIT_MAX_TEXTURE_SIZE_1D: int
        LIMIT_MAX_TEXTURE_SIZE_2D: int
        LIMIT_MAX_TEXTURE_SIZE_3D: int
        LIMIT_MAX_TEXTURE_SIZE_CUBE: int
        LIMIT_MAX_TEXTURES_PER_SHADER_STAGE: int
        LIMIT_MAX_SAMPLERS_PER_SHADER_STAGE: int
        LIMIT_MAX_STORAGE_BUFFERS_PER_SHADER_STAGE: int
        LIMIT_MAX_STORAGE_IMAGES_PER_SHADER_STAGE: int
        LIMIT_MAX_UNIFORM_BUFFERS_PER_SHADER_STAGE: int
        LIMIT_MAX_PUSH_CONSTANT_SIZE: int
        LIMIT_MAX_UNIFORM_BUFFER_SIZE: int
        LIMIT_MAX_VERTEX_INPUT_ATTRIBUTE_OFFSET: int
        LIMIT_MAX_VERTEX_INPUT_ATTRIBUTES: int
        LIMIT_MAX_VERTEX_INPUT_BINDINGS: int
        LIMIT_MAX_VERTEX_INPUT_BINDING_STRIDE: int
        LIMIT_MIN_UNIFORM_BUFFER_OFFSET_ALIGNMENT: int
        LIMIT_MAX_COMPUTE_SHARED_MEMORY_SIZE: int
        LIMIT_MAX_COMPUTE_WORKGROUP_COUNT_X: int
        LIMIT_MAX_COMPUTE_WORKGROUP_COUNT_Y: int
        LIMIT_MAX_COMPUTE_WORKGROUP_COUNT_Z: int
        LIMIT_MAX_COMPUTE_WORKGROUP_INVOCATIONS: int
        LIMIT_MAX_COMPUTE_WORKGROUP_SIZE_X: int
        LIMIT_MAX_COMPUTE_WORKGROUP_SIZE_Y: int
        LIMIT_MAX_COMPUTE_WORKGROUP_SIZE_Z: int
        LIMIT_MAX_VIEWPORT_DIMENSIONS_X: int
        LIMIT_MAX_VIEWPORT_DIMENSIONS_Y: int
    class RenderingDevice.MemoryType(Enum):
        MEMORY_TEXTURES: int
        MEMORY_BUFFERS: int
        MEMORY_TOTAL: int

    # Methods
    def texture_create(self, format: RDTextureFormat, view: RDTextureView, data: GDArray = []) -> RID: ...
    def texture_create_shared(self, view: RDTextureView, with_texture: RID) -> RID: ...
    def texture_create_shared_from_slice(self, view: RDTextureView, with_texture: RID, layer: int, mipmap: int, mipmaps: int = 1, slice_type: RenderingDevice.TextureSliceType = 0) -> RID: ...
    def texture_update(self, texture: RID, layer: int, data: PackedByteArray, post_barrier: RenderingDevice.BarrierMask = 7) -> Error: ...
    def texture_get_data(self, texture: RID, layer: int) -> PackedByteArray: ...
    def texture_is_format_supported_for_usage(self, format: RenderingDevice.DataFormat, usage_flags: RenderingDevice.TextureUsageBits) -> bool: ...
    def texture_is_shared(self, texture: RID) -> bool: ...
    def texture_is_valid(self, texture: RID) -> bool: ...
    def texture_copy(self, from_texture: RID, to_texture: RID, from_pos: Vector3, to_pos: Vector3, size: Vector3, src_mipmap: int, dst_mipmap: int, src_layer: int, dst_layer: int, post_barrier: RenderingDevice.BarrierMask = 7) -> Error: ...
    def texture_clear(self, texture: RID, color: Color, base_mipmap: int, mipmap_count: int, base_layer: int, layer_count: int, post_barrier: RenderingDevice.BarrierMask = 7) -> Error: ...
    def texture_resolve_multisample(self, from_texture: RID, to_texture: RID, post_barrier: RenderingDevice.BarrierMask = 7) -> Error: ...
    def texture_get_native_handle(self, texture: RID) -> int: ...
    def framebuffer_format_create(self, attachments: GDArray, view_count: int = 1) -> int: ...
    def framebuffer_format_create_multipass(self, attachments: GDArray, passes: GDArray, view_count: int = 1) -> int: ...
    def framebuffer_format_create_empty(self, samples: RenderingDevice.TextureSamples = 0) -> int: ...
    def framebuffer_format_get_texture_samples(self, format: int, render_pass: int = 0) -> RenderingDevice.TextureSamples: ...
    def framebuffer_create(self, textures: GDArray, validate_with_format: int = -1, view_count: int = 1) -> RID: ...
    def framebuffer_create_multipass(self, textures: GDArray, passes: GDArray, validate_with_format: int = -1, view_count: int = 1) -> RID: ...
    def framebuffer_create_empty(self, size: Vector2i, samples: RenderingDevice.TextureSamples = 0, validate_with_format: int = -1) -> RID: ...
    def framebuffer_get_format(self, framebuffer: RID) -> int: ...
    def framebuffer_is_valid(self, framebuffer: RID) -> bool: ...
    def sampler_create(self, state: RDSamplerState) -> RID: ...
    def sampler_is_format_supported_for_filter(self, format: RenderingDevice.DataFormat, sampler_filter: RenderingDevice.SamplerFilter) -> bool: ...
    def vertex_buffer_create(self, size_bytes: int, data: PackedByteArray = PackedByteArray(), use_as_storage: bool = False) -> RID: ...
    def vertex_format_create(self, vertex_descriptions: GDArray) -> int: ...
    def vertex_array_create(self, vertex_count: int, vertex_format: int, src_buffers: GDArray, offsets: PackedInt64Array = PackedInt64Array()) -> RID: ...
    def index_buffer_create(self, size_indices: int, format: RenderingDevice.IndexBufferFormat, data: PackedByteArray = PackedByteArray(), use_restart_indices: bool = False) -> RID: ...
    def index_array_create(self, index_buffer: RID, index_offset: int, index_count: int) -> RID: ...
    def shader_compile_spirv_from_source(self, shader_source: RDShaderSource, allow_cache: bool = True) -> RDShaderSPIRV: ...
    def shader_compile_binary_from_spirv(self, spirv_data: RDShaderSPIRV, name: GDString | str = "") -> PackedByteArray: ...
    def shader_create_from_spirv(self, spirv_data: RDShaderSPIRV, name: GDString | str = "") -> RID: ...
    def shader_create_from_bytecode(self, binary_data: PackedByteArray) -> RID: ...
    def shader_get_vertex_input_attribute_mask(self, shader: RID) -> int: ...
    def uniform_buffer_create(self, size_bytes: int, data: PackedByteArray = PackedByteArray()) -> RID: ...
    def storage_buffer_create(self, size_bytes: int, data: PackedByteArray = PackedByteArray(), usage: RenderingDevice.StorageBufferUsage = 0) -> RID: ...
    def texture_buffer_create(self, size_bytes: int, format: RenderingDevice.DataFormat, data: PackedByteArray = PackedByteArray()) -> RID: ...
    def uniform_set_create(self, uniforms: GDArray, shader: RID, shader_set: int) -> RID: ...
    def uniform_set_is_valid(self, uniform_set: RID) -> bool: ...
    def buffer_update(self, buffer: RID, offset: int, size_bytes: int, data: PackedByteArray, post_barrier: RenderingDevice.BarrierMask = 7) -> Error: ...
    def buffer_clear(self, buffer: RID, offset: int, size_bytes: int, post_barrier: RenderingDevice.BarrierMask = 7) -> Error: ...
    def buffer_get_data(self, buffer: RID, offset_bytes: int = 0, size_bytes: int = 0) -> PackedByteArray: ...
    def render_pipeline_create(self, shader: RID, framebuffer_format: int, vertex_format: int, primitive: RenderingDevice.RenderPrimitive, rasterization_state: RDPipelineRasterizationState, multisample_state: RDPipelineMultisampleState, stencil_state: RDPipelineDepthStencilState, color_blend_state: RDPipelineColorBlendState, dynamic_state_flags: RenderingDevice.PipelineDynamicStateFlags = 0, for_render_pass: int = 0, specialization_constants: GDArray = Array[RDPipelineSpecializationConstant]([])) -> RID: ...
    def render_pipeline_is_valid(self, render_pipeline: RID) -> bool: ...
    def compute_pipeline_create(self, shader: RID, specialization_constants: GDArray = Array[RDPipelineSpecializationConstant]([])) -> RID: ...
    def compute_pipeline_is_valid(self, compute_pipeline: RID) -> bool: ...
    def screen_get_width(self, screen: int = 0) -> int: ...
    def screen_get_height(self, screen: int = 0) -> int: ...
    def screen_get_framebuffer_format(self) -> int: ...
    def draw_list_begin_for_screen(self, screen: int = 0, clear_color: Color = Color(0, 0, 0, 1)) -> int: ...
    def draw_list_begin(self, framebuffer: RID, initial_color_action: RenderingDevice.InitialAction, final_color_action: RenderingDevice.FinalAction, initial_depth_action: RenderingDevice.InitialAction, final_depth_action: RenderingDevice.FinalAction, clear_color_values: PackedColorArray = PackedColorArray(), clear_depth: float = 1.0, clear_stencil: int = 0, region: Rect2 = Rect2(0, 0, 0, 0), storage_textures: GDArray = Array[RID]([])) -> int: ...
    def draw_list_begin_split(self, framebuffer: RID, splits: int, initial_color_action: RenderingDevice.InitialAction, final_color_action: RenderingDevice.FinalAction, initial_depth_action: RenderingDevice.InitialAction, final_depth_action: RenderingDevice.FinalAction, clear_color_values: PackedColorArray = PackedColorArray(), clear_depth: float = 1.0, clear_stencil: int = 0, region: Rect2 = Rect2(0, 0, 0, 0), storage_textures: GDArray = Array[RID]([])) -> PackedInt64Array: ...
    def draw_list_set_blend_constants(self, draw_list: int, color: Color) -> None: ...
    def draw_list_bind_render_pipeline(self, draw_list: int, render_pipeline: RID) -> None: ...
    def draw_list_bind_uniform_set(self, draw_list: int, uniform_set: RID, set_index: int) -> None: ...
    def draw_list_bind_vertex_array(self, draw_list: int, vertex_array: RID) -> None: ...
    def draw_list_bind_index_array(self, draw_list: int, index_array: RID) -> None: ...
    def draw_list_set_push_constant(self, draw_list: int, buffer: PackedByteArray, size_bytes: int) -> None: ...
    def draw_list_draw(self, draw_list: int, use_indices: bool, instances: int, procedural_vertex_count: int = 0) -> None: ...
    def draw_list_enable_scissor(self, draw_list: int, rect: Rect2 = Rect2(0, 0, 0, 0)) -> None: ...
    def draw_list_disable_scissor(self, draw_list: int) -> None: ...
    def draw_list_switch_to_next_pass(self) -> int: ...
    def draw_list_switch_to_next_pass_split(self, splits: int) -> PackedInt64Array: ...
    def draw_list_end(self, post_barrier: RenderingDevice.BarrierMask = 7) -> None: ...
    def compute_list_begin(self, allow_draw_overlap: bool = False) -> int: ...
    def compute_list_bind_compute_pipeline(self, compute_list: int, compute_pipeline: RID) -> None: ...
    def compute_list_set_push_constant(self, compute_list: int, buffer: PackedByteArray, size_bytes: int) -> None: ...
    def compute_list_bind_uniform_set(self, compute_list: int, uniform_set: RID, set_index: int) -> None: ...
    def compute_list_dispatch(self, compute_list: int, x_groups: int, y_groups: int, z_groups: int) -> None: ...
    def compute_list_add_barrier(self, compute_list: int) -> None: ...
    def compute_list_end(self, post_barrier: RenderingDevice.BarrierMask = 7) -> None: ...
    def free_rid(self, rid: RID) -> None: ...
    def capture_timestamp(self, name: GDString | str) -> None: ...
    def get_captured_timestamps_count(self) -> int: ...
    def get_captured_timestamps_frame(self) -> int: ...
    def get_captured_timestamp_gpu_time(self, index: int) -> int: ...
    def get_captured_timestamp_cpu_time(self, index: int) -> int: ...
    def get_captured_timestamp_name(self, index: int) -> GDString: ...
    def limit_get(self, limit: RenderingDevice.Limit) -> int: ...
    def get_frame_delay(self) -> int: ...
    def submit(self) -> None: ...
    def sync(self) -> None: ...
    def barrier(self, from_: RenderingDevice.BarrierMask = 7, to: RenderingDevice.BarrierMask = 7) -> None: ...
    def full_barrier(self) -> None: ...
    def create_local_device(self) -> RenderingDevice: ...
    def set_resource_name(self, id: RID, name: GDString | str) -> None: ...
    def draw_command_begin_label(self, name: GDString | str, color: Color) -> None: ...
    def draw_command_insert_label(self, name: GDString | str, color: Color) -> None: ...
    def draw_command_end_label(self) -> None: ...
    def get_device_vendor_name(self) -> GDString: ...
    def get_device_name(self) -> GDString: ...
    def get_device_pipeline_cache_uuid(self) -> GDString: ...
    def get_memory_usage(self, type: RenderingDevice.MemoryType) -> int: ...
    def get_driver_resource(self, resource: RenderingDevice.DriverResource, rid: RID, index: int) -> int: ...

    # Constants
    INVALID_ID: int
    INVALID_FORMAT_ID: int


class RenderingServer(TypeInUse(Object)):

    # Enums
    class RenderingServer.TextureLayeredType(Enum):
        TEXTURE_LAYERED_2D_ARRAY: int
        TEXTURE_LAYERED_CUBEMAP: int
        TEXTURE_LAYERED_CUBEMAP_ARRAY: int
    class RenderingServer.CubeMapLayer(Enum):
        CUBEMAP_LAYER_LEFT: int
        CUBEMAP_LAYER_RIGHT: int
        CUBEMAP_LAYER_BOTTOM: int
        CUBEMAP_LAYER_TOP: int
        CUBEMAP_LAYER_FRONT: int
        CUBEMAP_LAYER_BACK: int
    class RenderingServer.ShaderMode(Enum):
        SHADER_SPATIAL: int
        SHADER_CANVAS_ITEM: int
        SHADER_PARTICLES: int
        SHADER_SKY: int
        SHADER_FOG: int
        SHADER_MAX: int
    class RenderingServer.ArrayType(Enum):
        ARRAY_VERTEX: int
        ARRAY_NORMAL: int
        ARRAY_TANGENT: int
        ARRAY_COLOR: int
        ARRAY_TEX_UV: int
        ARRAY_TEX_UV2: int
        ARRAY_CUSTOM0: int
        ARRAY_CUSTOM1: int
        ARRAY_CUSTOM2: int
        ARRAY_CUSTOM3: int
        ARRAY_BONES: int
        ARRAY_WEIGHTS: int
        ARRAY_INDEX: int
        ARRAY_MAX: int
    class RenderingServer.ArrayCustomFormat(Enum):
        ARRAY_CUSTOM_RGBA8_UNORM: int
        ARRAY_CUSTOM_RGBA8_SNORM: int
        ARRAY_CUSTOM_RG_HALF: int
        ARRAY_CUSTOM_RGBA_HALF: int
        ARRAY_CUSTOM_R_FLOAT: int
        ARRAY_CUSTOM_RG_FLOAT: int
        ARRAY_CUSTOM_RGB_FLOAT: int
        ARRAY_CUSTOM_RGBA_FLOAT: int
        ARRAY_CUSTOM_MAX: int
    class RenderingServer.ArrayFormat(Enum):
        ARRAY_FORMAT_VERTEX: int
        ARRAY_FORMAT_NORMAL: int
        ARRAY_FORMAT_TANGENT: int
        ARRAY_FORMAT_COLOR: int
        ARRAY_FORMAT_TEX_UV: int
        ARRAY_FORMAT_TEX_UV2: int
        ARRAY_FORMAT_CUSTOM0: int
        ARRAY_FORMAT_CUSTOM1: int
        ARRAY_FORMAT_CUSTOM2: int
        ARRAY_FORMAT_CUSTOM3: int
        ARRAY_FORMAT_BONES: int
        ARRAY_FORMAT_WEIGHTS: int
        ARRAY_FORMAT_INDEX: int
        ARRAY_FORMAT_BLEND_SHAPE_MASK: int
        ARRAY_FORMAT_CUSTOM_BASE: int
        ARRAY_FORMAT_CUSTOM_BITS: int
        ARRAY_FORMAT_CUSTOM0_SHIFT: int
        ARRAY_FORMAT_CUSTOM1_SHIFT: int
        ARRAY_FORMAT_CUSTOM2_SHIFT: int
        ARRAY_FORMAT_CUSTOM3_SHIFT: int
        ARRAY_FORMAT_CUSTOM_MASK: int
        ARRAY_COMPRESS_FLAGS_BASE: int
        ARRAY_FLAG_USE_2D_VERTICES: int
        ARRAY_FLAG_USE_DYNAMIC_UPDATE: int
        ARRAY_FLAG_USE_8_BONE_WEIGHTS: int
        ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY: int
    class RenderingServer.PrimitiveType(Enum):
        PRIMITIVE_POINTS: int
        PRIMITIVE_LINES: int
        PRIMITIVE_LINE_STRIP: int
        PRIMITIVE_TRIANGLES: int
        PRIMITIVE_TRIANGLE_STRIP: int
        PRIMITIVE_MAX: int
    class RenderingServer.BlendShapeMode(Enum):
        BLEND_SHAPE_MODE_NORMALIZED: int
        BLEND_SHAPE_MODE_RELATIVE: int
    class RenderingServer.MultimeshTransformFormat(Enum):
        MULTIMESH_TRANSFORM_2D: int
        MULTIMESH_TRANSFORM_3D: int
    class RenderingServer.LightProjectorFilter(Enum):
        LIGHT_PROJECTOR_FILTER_NEAREST: int
        LIGHT_PROJECTOR_FILTER_LINEAR: int
        LIGHT_PROJECTOR_FILTER_NEAREST_MIPMAPS: int
        LIGHT_PROJECTOR_FILTER_LINEAR_MIPMAPS: int
        LIGHT_PROJECTOR_FILTER_NEAREST_MIPMAPS_ANISOTROPIC: int
        LIGHT_PROJECTOR_FILTER_LINEAR_MIPMAPS_ANISOTROPIC: int
    class RenderingServer.LightType(Enum):
        LIGHT_DIRECTIONAL: int
        LIGHT_OMNI: int
        LIGHT_SPOT: int
    class RenderingServer.LightParam(Enum):
        LIGHT_PARAM_ENERGY: int
        LIGHT_PARAM_INDIRECT_ENERGY: int
        LIGHT_PARAM_VOLUMETRIC_FOG_ENERGY: int
        LIGHT_PARAM_SPECULAR: int
        LIGHT_PARAM_RANGE: int
        LIGHT_PARAM_SIZE: int
        LIGHT_PARAM_ATTENUATION: int
        LIGHT_PARAM_SPOT_ANGLE: int
        LIGHT_PARAM_SPOT_ATTENUATION: int
        LIGHT_PARAM_SHADOW_MAX_DISTANCE: int
        LIGHT_PARAM_SHADOW_SPLIT_1_OFFSET: int
        LIGHT_PARAM_SHADOW_SPLIT_2_OFFSET: int
        LIGHT_PARAM_SHADOW_SPLIT_3_OFFSET: int
        LIGHT_PARAM_SHADOW_FADE_START: int
        LIGHT_PARAM_SHADOW_NORMAL_BIAS: int
        LIGHT_PARAM_SHADOW_BIAS: int
        LIGHT_PARAM_SHADOW_PANCAKE_SIZE: int
        LIGHT_PARAM_SHADOW_OPACITY: int
        LIGHT_PARAM_SHADOW_BLUR: int
        LIGHT_PARAM_TRANSMITTANCE_BIAS: int
        LIGHT_PARAM_INTENSITY: int
        LIGHT_PARAM_MAX: int
    class RenderingServer.LightBakeMode(Enum):
        LIGHT_BAKE_DISABLED: int
        LIGHT_BAKE_STATIC: int
        LIGHT_BAKE_DYNAMIC: int
    class RenderingServer.LightOmniShadowMode(Enum):
        LIGHT_OMNI_SHADOW_DUAL_PARABOLOID: int
        LIGHT_OMNI_SHADOW_CUBE: int
    class RenderingServer.LightDirectionalShadowMode(Enum):
        LIGHT_DIRECTIONAL_SHADOW_ORTHOGONAL: int
        LIGHT_DIRECTIONAL_SHADOW_PARALLEL_2_SPLITS: int
        LIGHT_DIRECTIONAL_SHADOW_PARALLEL_4_SPLITS: int
    class RenderingServer.LightDirectionalSkyMode(Enum):
        LIGHT_DIRECTIONAL_SKY_MODE_LIGHT_AND_SKY: int
        LIGHT_DIRECTIONAL_SKY_MODE_LIGHT_ONLY: int
        LIGHT_DIRECTIONAL_SKY_MODE_SKY_ONLY: int
    class RenderingServer.ShadowQuality(Enum):
        SHADOW_QUALITY_HARD: int
        SHADOW_QUALITY_SOFT_VERY_LOW: int
        SHADOW_QUALITY_SOFT_LOW: int
        SHADOW_QUALITY_SOFT_MEDIUM: int
        SHADOW_QUALITY_SOFT_HIGH: int
        SHADOW_QUALITY_SOFT_ULTRA: int
        SHADOW_QUALITY_MAX: int
    class RenderingServer.ReflectionProbeUpdateMode(Enum):
        REFLECTION_PROBE_UPDATE_ONCE: int
        REFLECTION_PROBE_UPDATE_ALWAYS: int
    class RenderingServer.ReflectionProbeAmbientMode(Enum):
        REFLECTION_PROBE_AMBIENT_DISABLED: int
        REFLECTION_PROBE_AMBIENT_ENVIRONMENT: int
        REFLECTION_PROBE_AMBIENT_COLOR: int
    class RenderingServer.DecalTexture(Enum):
        DECAL_TEXTURE_ALBEDO: int
        DECAL_TEXTURE_NORMAL: int
        DECAL_TEXTURE_ORM: int
        DECAL_TEXTURE_EMISSION: int
        DECAL_TEXTURE_MAX: int
    class RenderingServer.DecalFilter(Enum):
        DECAL_FILTER_NEAREST: int
        DECAL_FILTER_LINEAR: int
        DECAL_FILTER_NEAREST_MIPMAPS: int
        DECAL_FILTER_LINEAR_MIPMAPS: int
        DECAL_FILTER_NEAREST_MIPMAPS_ANISOTROPIC: int
        DECAL_FILTER_LINEAR_MIPMAPS_ANISOTROPIC: int
    class RenderingServer.VoxelGIQuality(Enum):
        VOXEL_GI_QUALITY_LOW: int
        VOXEL_GI_QUALITY_HIGH: int
    class RenderingServer.ParticlesMode(Enum):
        PARTICLES_MODE_2D: int
        PARTICLES_MODE_3D: int
    class RenderingServer.ParticlesTransformAlign(Enum):
        PARTICLES_TRANSFORM_ALIGN_DISABLED: int
        PARTICLES_TRANSFORM_ALIGN_Z_BILLBOARD: int
        PARTICLES_TRANSFORM_ALIGN_Y_TO_VELOCITY: int
        PARTICLES_TRANSFORM_ALIGN_Z_BILLBOARD_Y_TO_VELOCITY: int
    class RenderingServer.ParticlesDrawOrder(Enum):
        PARTICLES_DRAW_ORDER_INDEX: int
        PARTICLES_DRAW_ORDER_LIFETIME: int
        PARTICLES_DRAW_ORDER_REVERSE_LIFETIME: int
        PARTICLES_DRAW_ORDER_VIEW_DEPTH: int
    class RenderingServer.ParticlesCollisionType(Enum):
        PARTICLES_COLLISION_TYPE_SPHERE_ATTRACT: int
        PARTICLES_COLLISION_TYPE_BOX_ATTRACT: int
        PARTICLES_COLLISION_TYPE_VECTOR_FIELD_ATTRACT: int
        PARTICLES_COLLISION_TYPE_SPHERE_COLLIDE: int
        PARTICLES_COLLISION_TYPE_BOX_COLLIDE: int
        PARTICLES_COLLISION_TYPE_SDF_COLLIDE: int
        PARTICLES_COLLISION_TYPE_HEIGHTFIELD_COLLIDE: int
    class RenderingServer.ParticlesCollisionHeightfieldResolution(Enum):
        PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_256: int
        PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_512: int
        PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_1024: int
        PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_2048: int
        PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_4096: int
        PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_8192: int
        PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_MAX: int
    class RenderingServer.FogVolumeShape(Enum):
        FOG_VOLUME_SHAPE_ELLIPSOID: int
        FOG_VOLUME_SHAPE_CONE: int
        FOG_VOLUME_SHAPE_CYLINDER: int
        FOG_VOLUME_SHAPE_BOX: int
        FOG_VOLUME_SHAPE_WORLD: int
        FOG_VOLUME_SHAPE_MAX: int
    class RenderingServer.ViewportScaling3DMode(Enum):
        VIEWPORT_SCALING_3D_MODE_BILINEAR: int
        VIEWPORT_SCALING_3D_MODE_FSR: int
        VIEWPORT_SCALING_3D_MODE_MAX: int
    class RenderingServer.ViewportUpdateMode(Enum):
        VIEWPORT_UPDATE_DISABLED: int
        VIEWPORT_UPDATE_ONCE: int
        VIEWPORT_UPDATE_WHEN_VISIBLE: int
        VIEWPORT_UPDATE_WHEN_PARENT_VISIBLE: int
        VIEWPORT_UPDATE_ALWAYS: int
    class RenderingServer.ViewportClearMode(Enum):
        VIEWPORT_CLEAR_ALWAYS: int
        VIEWPORT_CLEAR_NEVER: int
        VIEWPORT_CLEAR_ONLY_NEXT_FRAME: int
    class RenderingServer.ViewportEnvironmentMode(Enum):
        VIEWPORT_ENVIRONMENT_DISABLED: int
        VIEWPORT_ENVIRONMENT_ENABLED: int
        VIEWPORT_ENVIRONMENT_INHERIT: int
        VIEWPORT_ENVIRONMENT_MAX: int
    class RenderingServer.ViewportSDFOversize(Enum):
        VIEWPORT_SDF_OVERSIZE_100_PERCENT: int
        VIEWPORT_SDF_OVERSIZE_120_PERCENT: int
        VIEWPORT_SDF_OVERSIZE_150_PERCENT: int
        VIEWPORT_SDF_OVERSIZE_200_PERCENT: int
        VIEWPORT_SDF_OVERSIZE_MAX: int
    class RenderingServer.ViewportSDFScale(Enum):
        VIEWPORT_SDF_SCALE_100_PERCENT: int
        VIEWPORT_SDF_SCALE_50_PERCENT: int
        VIEWPORT_SDF_SCALE_25_PERCENT: int
        VIEWPORT_SDF_SCALE_MAX: int
    class RenderingServer.ViewportMSAA(Enum):
        VIEWPORT_MSAA_DISABLED: int
        VIEWPORT_MSAA_2X: int
        VIEWPORT_MSAA_4X: int
        VIEWPORT_MSAA_8X: int
        VIEWPORT_MSAA_MAX: int
    class RenderingServer.ViewportScreenSpaceAA(Enum):
        VIEWPORT_SCREEN_SPACE_AA_DISABLED: int
        VIEWPORT_SCREEN_SPACE_AA_FXAA: int
        VIEWPORT_SCREEN_SPACE_AA_MAX: int
    class RenderingServer.ViewportOcclusionCullingBuildQuality(Enum):
        VIEWPORT_OCCLUSION_BUILD_QUALITY_LOW: int
        VIEWPORT_OCCLUSION_BUILD_QUALITY_MEDIUM: int
        VIEWPORT_OCCLUSION_BUILD_QUALITY_HIGH: int
    class RenderingServer.ViewportRenderInfo(Enum):
        VIEWPORT_RENDER_INFO_OBJECTS_IN_FRAME: int
        VIEWPORT_RENDER_INFO_PRIMITIVES_IN_FRAME: int
        VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME: int
        VIEWPORT_RENDER_INFO_MAX: int
    class RenderingServer.ViewportRenderInfoType(Enum):
        VIEWPORT_RENDER_INFO_TYPE_VISIBLE: int
        VIEWPORT_RENDER_INFO_TYPE_SHADOW: int
        VIEWPORT_RENDER_INFO_TYPE_MAX: int
    class RenderingServer.ViewportDebugDraw(Enum):
        VIEWPORT_DEBUG_DRAW_DISABLED: int
        VIEWPORT_DEBUG_DRAW_UNSHADED: int
        VIEWPORT_DEBUG_DRAW_LIGHTING: int
        VIEWPORT_DEBUG_DRAW_OVERDRAW: int
        VIEWPORT_DEBUG_DRAW_WIREFRAME: int
        VIEWPORT_DEBUG_DRAW_NORMAL_BUFFER: int
        VIEWPORT_DEBUG_DRAW_VOXEL_GI_ALBEDO: int
        VIEWPORT_DEBUG_DRAW_VOXEL_GI_LIGHTING: int
        VIEWPORT_DEBUG_DRAW_VOXEL_GI_EMISSION: int
        VIEWPORT_DEBUG_DRAW_SHADOW_ATLAS: int
        VIEWPORT_DEBUG_DRAW_DIRECTIONAL_SHADOW_ATLAS: int
        VIEWPORT_DEBUG_DRAW_SCENE_LUMINANCE: int
        VIEWPORT_DEBUG_DRAW_SSAO: int
        VIEWPORT_DEBUG_DRAW_SSIL: int
        VIEWPORT_DEBUG_DRAW_PSSM_SPLITS: int
        VIEWPORT_DEBUG_DRAW_DECAL_ATLAS: int
        VIEWPORT_DEBUG_DRAW_SDFGI: int
        VIEWPORT_DEBUG_DRAW_SDFGI_PROBES: int
        VIEWPORT_DEBUG_DRAW_GI_BUFFER: int
        VIEWPORT_DEBUG_DRAW_DISABLE_LOD: int
        VIEWPORT_DEBUG_DRAW_CLUSTER_OMNI_LIGHTS: int
        VIEWPORT_DEBUG_DRAW_CLUSTER_SPOT_LIGHTS: int
        VIEWPORT_DEBUG_DRAW_CLUSTER_DECALS: int
        VIEWPORT_DEBUG_DRAW_CLUSTER_REFLECTION_PROBES: int
        VIEWPORT_DEBUG_DRAW_OCCLUDERS: int
        VIEWPORT_DEBUG_DRAW_MOTION_VECTORS: int
    class RenderingServer.ViewportVRSMode(Enum):
        VIEWPORT_VRS_DISABLED: int
        VIEWPORT_VRS_TEXTURE: int
        VIEWPORT_VRS_XR: int
        VIEWPORT_VRS_MAX: int
    class RenderingServer.SkyMode(Enum):
        SKY_MODE_AUTOMATIC: int
        SKY_MODE_QUALITY: int
        SKY_MODE_INCREMENTAL: int
        SKY_MODE_REALTIME: int
    class RenderingServer.EnvironmentBG(Enum):
        ENV_BG_CLEAR_COLOR: int
        ENV_BG_COLOR: int
        ENV_BG_SKY: int
        ENV_BG_CANVAS: int
        ENV_BG_KEEP: int
        ENV_BG_CAMERA_FEED: int
        ENV_BG_MAX: int
    class RenderingServer.EnvironmentAmbientSource(Enum):
        ENV_AMBIENT_SOURCE_BG: int
        ENV_AMBIENT_SOURCE_DISABLED: int
        ENV_AMBIENT_SOURCE_COLOR: int
        ENV_AMBIENT_SOURCE_SKY: int
    class RenderingServer.EnvironmentReflectionSource(Enum):
        ENV_REFLECTION_SOURCE_BG: int
        ENV_REFLECTION_SOURCE_DISABLED: int
        ENV_REFLECTION_SOURCE_SKY: int
    class RenderingServer.EnvironmentGlowBlendMode(Enum):
        ENV_GLOW_BLEND_MODE_ADDITIVE: int
        ENV_GLOW_BLEND_MODE_SCREEN: int
        ENV_GLOW_BLEND_MODE_SOFTLIGHT: int
        ENV_GLOW_BLEND_MODE_REPLACE: int
        ENV_GLOW_BLEND_MODE_MIX: int
    class RenderingServer.EnvironmentToneMapper(Enum):
        ENV_TONE_MAPPER_LINEAR: int
        ENV_TONE_MAPPER_REINHARD: int
        ENV_TONE_MAPPER_FILMIC: int
        ENV_TONE_MAPPER_ACES: int
    class RenderingServer.EnvironmentSSRRoughnessQuality(Enum):
        ENV_SSR_ROUGHNESS_QUALITY_DISABLED: int
        ENV_SSR_ROUGHNESS_QUALITY_LOW: int
        ENV_SSR_ROUGHNESS_QUALITY_MEDIUM: int
        ENV_SSR_ROUGHNESS_QUALITY_HIGH: int
    class RenderingServer.EnvironmentSSAOQuality(Enum):
        ENV_SSAO_QUALITY_VERY_LOW: int
        ENV_SSAO_QUALITY_LOW: int
        ENV_SSAO_QUALITY_MEDIUM: int
        ENV_SSAO_QUALITY_HIGH: int
        ENV_SSAO_QUALITY_ULTRA: int
    class RenderingServer.EnvironmentSSILQuality(Enum):
        ENV_SSIL_QUALITY_VERY_LOW: int
        ENV_SSIL_QUALITY_LOW: int
        ENV_SSIL_QUALITY_MEDIUM: int
        ENV_SSIL_QUALITY_HIGH: int
        ENV_SSIL_QUALITY_ULTRA: int
    class RenderingServer.EnvironmentSDFGIYScale(Enum):
        ENV_SDFGI_Y_SCALE_50_PERCENT: int
        ENV_SDFGI_Y_SCALE_75_PERCENT: int
        ENV_SDFGI_Y_SCALE_100_PERCENT: int
    class RenderingServer.EnvironmentSDFGIRayCount(Enum):
        ENV_SDFGI_RAY_COUNT_4: int
        ENV_SDFGI_RAY_COUNT_8: int
        ENV_SDFGI_RAY_COUNT_16: int
        ENV_SDFGI_RAY_COUNT_32: int
        ENV_SDFGI_RAY_COUNT_64: int
        ENV_SDFGI_RAY_COUNT_96: int
        ENV_SDFGI_RAY_COUNT_128: int
        ENV_SDFGI_RAY_COUNT_MAX: int
    class RenderingServer.EnvironmentSDFGIFramesToConverge(Enum):
        ENV_SDFGI_CONVERGE_IN_5_FRAMES: int
        ENV_SDFGI_CONVERGE_IN_10_FRAMES: int
        ENV_SDFGI_CONVERGE_IN_15_FRAMES: int
        ENV_SDFGI_CONVERGE_IN_20_FRAMES: int
        ENV_SDFGI_CONVERGE_IN_25_FRAMES: int
        ENV_SDFGI_CONVERGE_IN_30_FRAMES: int
        ENV_SDFGI_CONVERGE_MAX: int
    class RenderingServer.EnvironmentSDFGIFramesToUpdateLight(Enum):
        ENV_SDFGI_UPDATE_LIGHT_IN_1_FRAME: int
        ENV_SDFGI_UPDATE_LIGHT_IN_2_FRAMES: int
        ENV_SDFGI_UPDATE_LIGHT_IN_4_FRAMES: int
        ENV_SDFGI_UPDATE_LIGHT_IN_8_FRAMES: int
        ENV_SDFGI_UPDATE_LIGHT_IN_16_FRAMES: int
        ENV_SDFGI_UPDATE_LIGHT_MAX: int
    class RenderingServer.SubSurfaceScatteringQuality(Enum):
        SUB_SURFACE_SCATTERING_QUALITY_DISABLED: int
        SUB_SURFACE_SCATTERING_QUALITY_LOW: int
        SUB_SURFACE_SCATTERING_QUALITY_MEDIUM: int
        SUB_SURFACE_SCATTERING_QUALITY_HIGH: int
    class RenderingServer.DOFBokehShape(Enum):
        DOF_BOKEH_BOX: int
        DOF_BOKEH_HEXAGON: int
        DOF_BOKEH_CIRCLE: int
    class RenderingServer.DOFBlurQuality(Enum):
        DOF_BLUR_QUALITY_VERY_LOW: int
        DOF_BLUR_QUALITY_LOW: int
        DOF_BLUR_QUALITY_MEDIUM: int
        DOF_BLUR_QUALITY_HIGH: int
    class RenderingServer.InstanceType(Enum):
        INSTANCE_NONE: int
        INSTANCE_MESH: int
        INSTANCE_MULTIMESH: int
        INSTANCE_PARTICLES: int
        INSTANCE_PARTICLES_COLLISION: int
        INSTANCE_LIGHT: int
        INSTANCE_REFLECTION_PROBE: int
        INSTANCE_DECAL: int
        INSTANCE_VOXEL_GI: int
        INSTANCE_LIGHTMAP: int
        INSTANCE_OCCLUDER: int
        INSTANCE_VISIBLITY_NOTIFIER: int
        INSTANCE_FOG_VOLUME: int
        INSTANCE_MAX: int
        INSTANCE_GEOMETRY_MASK: int
    class RenderingServer.InstanceFlags(Enum):
        INSTANCE_FLAG_USE_BAKED_LIGHT: int
        INSTANCE_FLAG_USE_DYNAMIC_GI: int
        INSTANCE_FLAG_DRAW_NEXT_FRAME_IF_VISIBLE: int
        INSTANCE_FLAG_IGNORE_OCCLUSION_CULLING: int
        INSTANCE_FLAG_MAX: int
    class RenderingServer.ShadowCastingSetting(Enum):
        SHADOW_CASTING_SETTING_OFF: int
        SHADOW_CASTING_SETTING_ON: int
        SHADOW_CASTING_SETTING_DOUBLE_SIDED: int
        SHADOW_CASTING_SETTING_SHADOWS_ONLY: int
    class RenderingServer.VisibilityRangeFadeMode(Enum):
        VISIBILITY_RANGE_FADE_DISABLED: int
        VISIBILITY_RANGE_FADE_SELF: int
        VISIBILITY_RANGE_FADE_DEPENDENCIES: int
    class RenderingServer.BakeChannels(Enum):
        BAKE_CHANNEL_ALBEDO_ALPHA: int
        BAKE_CHANNEL_NORMAL: int
        BAKE_CHANNEL_ORM: int
        BAKE_CHANNEL_EMISSION: int
    class RenderingServer.CanvasTextureChannel(Enum):
        CANVAS_TEXTURE_CHANNEL_DIFFUSE: int
        CANVAS_TEXTURE_CHANNEL_NORMAL: int
        CANVAS_TEXTURE_CHANNEL_SPECULAR: int
    class RenderingServer.NinePatchAxisMode(Enum):
        NINE_PATCH_STRETCH: int
        NINE_PATCH_TILE: int
        NINE_PATCH_TILE_FIT: int
    class RenderingServer.CanvasItemTextureFilter(Enum):
        CANVAS_ITEM_TEXTURE_FILTER_DEFAULT: int
        CANVAS_ITEM_TEXTURE_FILTER_NEAREST: int
        CANVAS_ITEM_TEXTURE_FILTER_LINEAR: int
        CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS: int
        CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS: int
        CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC: int
        CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC: int
        CANVAS_ITEM_TEXTURE_FILTER_MAX: int
    class RenderingServer.CanvasItemTextureRepeat(Enum):
        CANVAS_ITEM_TEXTURE_REPEAT_DEFAULT: int
        CANVAS_ITEM_TEXTURE_REPEAT_DISABLED: int
        CANVAS_ITEM_TEXTURE_REPEAT_ENABLED: int
        CANVAS_ITEM_TEXTURE_REPEAT_MIRROR: int
        CANVAS_ITEM_TEXTURE_REPEAT_MAX: int
    class RenderingServer.CanvasGroupMode(Enum):
        CANVAS_GROUP_MODE_DISABLED: int
        CANVAS_GROUP_MODE_CLIP_ONLY: int
        CANVAS_GROUP_MODE_CLIP_AND_DRAW: int
        CANVAS_GROUP_MODE_TRANSPARENT: int
    class RenderingServer.CanvasLightMode(Enum):
        CANVAS_LIGHT_MODE_POINT: int
        CANVAS_LIGHT_MODE_DIRECTIONAL: int
    class RenderingServer.CanvasLightBlendMode(Enum):
        CANVAS_LIGHT_BLEND_MODE_ADD: int
        CANVAS_LIGHT_BLEND_MODE_SUB: int
        CANVAS_LIGHT_BLEND_MODE_MIX: int
    class RenderingServer.CanvasLightShadowFilter(Enum):
        CANVAS_LIGHT_FILTER_NONE: int
        CANVAS_LIGHT_FILTER_PCF5: int
        CANVAS_LIGHT_FILTER_PCF13: int
        CANVAS_LIGHT_FILTER_MAX: int
    class RenderingServer.CanvasOccluderPolygonCullMode(Enum):
        CANVAS_OCCLUDER_POLYGON_CULL_DISABLED: int
        CANVAS_OCCLUDER_POLYGON_CULL_CLOCKWISE: int
        CANVAS_OCCLUDER_POLYGON_CULL_COUNTER_CLOCKWISE: int
    class RenderingServer.GlobalShaderParameterType(Enum):
        GLOBAL_VAR_TYPE_BOOL: int
        GLOBAL_VAR_TYPE_BVEC2: int
        GLOBAL_VAR_TYPE_BVEC3: int
        GLOBAL_VAR_TYPE_BVEC4: int
        GLOBAL_VAR_TYPE_INT: int
        GLOBAL_VAR_TYPE_IVEC2: int
        GLOBAL_VAR_TYPE_IVEC3: int
        GLOBAL_VAR_TYPE_IVEC4: int
        GLOBAL_VAR_TYPE_RECT2I: int
        GLOBAL_VAR_TYPE_UINT: int
        GLOBAL_VAR_TYPE_UVEC2: int
        GLOBAL_VAR_TYPE_UVEC3: int
        GLOBAL_VAR_TYPE_UVEC4: int
        GLOBAL_VAR_TYPE_FLOAT: int
        GLOBAL_VAR_TYPE_VEC2: int
        GLOBAL_VAR_TYPE_VEC3: int
        GLOBAL_VAR_TYPE_VEC4: int
        GLOBAL_VAR_TYPE_COLOR: int
        GLOBAL_VAR_TYPE_RECT2: int
        GLOBAL_VAR_TYPE_MAT2: int
        GLOBAL_VAR_TYPE_MAT3: int
        GLOBAL_VAR_TYPE_MAT4: int
        GLOBAL_VAR_TYPE_TRANSFORM_2D: int
        GLOBAL_VAR_TYPE_TRANSFORM: int
        GLOBAL_VAR_TYPE_SAMPLER2D: int
        GLOBAL_VAR_TYPE_SAMPLER2DARRAY: int
        GLOBAL_VAR_TYPE_SAMPLER3D: int
        GLOBAL_VAR_TYPE_SAMPLERCUBE: int
        GLOBAL_VAR_TYPE_MAX: int
    class RenderingServer.RenderingInfo(Enum):
        RENDERING_INFO_TOTAL_OBJECTS_IN_FRAME: int
        RENDERING_INFO_TOTAL_PRIMITIVES_IN_FRAME: int
        RENDERING_INFO_TOTAL_DRAW_CALLS_IN_FRAME: int
        RENDERING_INFO_TEXTURE_MEM_USED: int
        RENDERING_INFO_BUFFER_MEM_USED: int
        RENDERING_INFO_VIDEO_MEM_USED: int
    class RenderingServer.Features(Enum):
        FEATURE_SHADERS: int
        FEATURE_MULTITHREADED: int

    # Methods
    def texture_2d_create(self, image: Image) -> RID: ...
    def texture_2d_layered_create(self, layers: GDArray, layered_type: RenderingServer.TextureLayeredType) -> RID: ...
    def texture_3d_create(self, format: Image.Format, width: int, height: int, depth: int, mipmaps: bool, data: GDArray) -> RID: ...
    def texture_proxy_create(self, base: RID) -> RID: ...
    def texture_2d_update(self, texture: RID, image: Image, layer: int) -> None: ...
    def texture_3d_update(self, texture: RID, data: GDArray) -> None: ...
    def texture_proxy_update(self, texture: RID, proxy_to: RID) -> None: ...
    def texture_2d_placeholder_create(self) -> RID: ...
    def texture_2d_layered_placeholder_create(self, layered_type: RenderingServer.TextureLayeredType) -> RID: ...
    def texture_3d_placeholder_create(self) -> RID: ...
    def texture_2d_get(self, texture: RID) -> Image: ...
    def texture_2d_layer_get(self, texture: RID, layer: int) -> Image: ...
    def texture_3d_get(self, texture: RID) -> GDArray: ...
    def texture_replace(self, texture: RID, by_texture: RID) -> None: ...
    def texture_set_size_override(self, texture: RID, width: int, height: int) -> None: ...
    def texture_set_path(self, texture: RID, path: GDString | str) -> None: ...
    def texture_get_path(self, texture: RID) -> GDString: ...
    def texture_set_force_redraw_if_visible(self, texture: RID, enable: bool) -> None: ...
    def texture_get_rd_texture(self, texture: RID, srgb: bool = False) -> RID: ...
    def texture_get_native_handle(self, texture: RID, srgb: bool = False) -> int: ...
    def shader_create(self) -> RID: ...
    def shader_set_code(self, shader: RID, code: GDString | str) -> None: ...
    def shader_set_path_hint(self, shader: RID, path: GDString | str) -> None: ...
    def shader_get_code(self, shader: RID) -> GDString: ...
    def get_shader_parameter_list(self, shader: RID) -> GDArray: ...
    def shader_get_parameter_default(self, shader: RID, name: StringName | str) -> GDAny: ...
    def shader_set_default_texture_parameter(self, shader: RID, name: StringName | str, texture: RID, index: int = 0) -> None: ...
    def shader_get_default_texture_parameter(self, shader: RID, name: StringName | str, index: int = 0) -> RID: ...
    def material_create(self) -> RID: ...
    def material_set_shader(self, shader_material: RID, shader: RID) -> None: ...
    def material_set_param(self, material: RID, parameter: StringName | str, value: GDAny) -> None: ...
    def material_get_param(self, material: RID, parameter: StringName | str) -> GDAny: ...
    def material_set_render_priority(self, material: RID, priority: int) -> None: ...
    def material_set_next_pass(self, material: RID, next_material: RID) -> None: ...
    def mesh_create_from_surfaces(self, surfaces: GDArray, blend_shape_count: int = 0) -> RID: ...
    def mesh_create(self) -> RID: ...
    def mesh_surface_get_format_offset(self, format: RenderingServer.ArrayFormat, vertex_count: int, array_index: int) -> int: ...
    def mesh_surface_get_format_vertex_stride(self, format: RenderingServer.ArrayFormat, vertex_count: int) -> int: ...
    def mesh_surface_get_format_attribute_stride(self, format: RenderingServer.ArrayFormat, vertex_count: int) -> int: ...
    def mesh_surface_get_format_skin_stride(self, format: RenderingServer.ArrayFormat, vertex_count: int) -> int: ...
    def mesh_add_surface(self, mesh: RID, surface: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def mesh_add_surface_from_arrays(self, mesh: RID, primitive: RenderingServer.PrimitiveType, arrays: GDArray, blend_shapes: GDArray = [], lods: GDDictionary | Mapping[IntoGDAny, IntoGDAny] = {}, compress_format: RenderingServer.ArrayFormat = 0) -> None: ...
    def mesh_get_blend_shape_count(self, mesh: RID) -> int: ...
    def mesh_set_blend_shape_mode(self, mesh: RID, mode: RenderingServer.BlendShapeMode) -> None: ...
    def mesh_get_blend_shape_mode(self, mesh: RID) -> RenderingServer.BlendShapeMode: ...
    def mesh_surface_set_material(self, mesh: RID, surface: int, material: RID) -> None: ...
    def mesh_surface_get_material(self, mesh: RID, surface: int) -> RID: ...
    def mesh_get_surface(self, mesh: RID, surface: int) -> GDDictionary: ...
    def mesh_surface_get_arrays(self, mesh: RID, surface: int) -> GDArray: ...
    def mesh_surface_get_blend_shape_arrays(self, mesh: RID, surface: int) -> GDArray: ...
    def mesh_get_surface_count(self, mesh: RID) -> int: ...
    def mesh_set_custom_aabb(self, mesh: RID, aabb: AABB) -> None: ...
    def mesh_get_custom_aabb(self, mesh: RID) -> AABB: ...
    def mesh_clear(self, mesh: RID) -> None: ...
    def mesh_surface_update_vertex_region(self, mesh: RID, surface: int, offset: int, data: PackedByteArray) -> None: ...
    def mesh_surface_update_attribute_region(self, mesh: RID, surface: int, offset: int, data: PackedByteArray) -> None: ...
    def mesh_surface_update_skin_region(self, mesh: RID, surface: int, offset: int, data: PackedByteArray) -> None: ...
    def mesh_set_shadow_mesh(self, mesh: RID, shadow_mesh: RID) -> None: ...
    def multimesh_create(self) -> RID: ...
    def multimesh_allocate_data(self, multimesh: RID, instances: int, transform_format: RenderingServer.MultimeshTransformFormat, color_format: bool = False, custom_data_format: bool = False) -> None: ...
    def multimesh_get_instance_count(self, multimesh: RID) -> int: ...
    def multimesh_set_mesh(self, multimesh: RID, mesh: RID) -> None: ...
    def multimesh_instance_set_transform(self, multimesh: RID, index: int, transform: Transform3D) -> None: ...
    def multimesh_instance_set_transform_2d(self, multimesh: RID, index: int, transform: Transform2D) -> None: ...
    def multimesh_instance_set_color(self, multimesh: RID, index: int, color: Color) -> None: ...
    def multimesh_instance_set_custom_data(self, multimesh: RID, index: int, custom_data: Color) -> None: ...
    def multimesh_get_mesh(self, multimesh: RID) -> RID: ...
    def multimesh_get_aabb(self, multimesh: RID) -> AABB: ...
    def multimesh_instance_get_transform(self, multimesh: RID, index: int) -> Transform3D: ...
    def multimesh_instance_get_transform_2d(self, multimesh: RID, index: int) -> Transform2D: ...
    def multimesh_instance_get_color(self, multimesh: RID, index: int) -> Color: ...
    def multimesh_instance_get_custom_data(self, multimesh: RID, index: int) -> Color: ...
    def multimesh_set_visible_instances(self, multimesh: RID, visible: int) -> None: ...
    def multimesh_get_visible_instances(self, multimesh: RID) -> int: ...
    def multimesh_set_buffer(self, multimesh: RID, buffer: PackedFloat32Array) -> None: ...
    def multimesh_get_buffer(self, multimesh: RID) -> PackedFloat32Array: ...
    def skeleton_create(self) -> RID: ...
    def skeleton_allocate_data(self, skeleton: RID, bones: int, is_2d_skeleton: bool = False) -> None: ...
    def skeleton_get_bone_count(self, skeleton: RID) -> int: ...
    def skeleton_bone_set_transform(self, skeleton: RID, bone: int, transform: Transform3D) -> None: ...
    def skeleton_bone_get_transform(self, skeleton: RID, bone: int) -> Transform3D: ...
    def skeleton_bone_set_transform_2d(self, skeleton: RID, bone: int, transform: Transform2D) -> None: ...
    def skeleton_bone_get_transform_2d(self, skeleton: RID, bone: int) -> Transform2D: ...
    def skeleton_set_base_transform_2d(self, skeleton: RID, base_transform: Transform2D) -> None: ...
    def directional_light_create(self) -> RID: ...
    def omni_light_create(self) -> RID: ...
    def spot_light_create(self) -> RID: ...
    def light_set_color(self, light: RID, color: Color) -> None: ...
    def light_set_param(self, light: RID, param: RenderingServer.LightParam, value: float) -> None: ...
    def light_set_shadow(self, light: RID, enabled: bool) -> None: ...
    def light_set_projector(self, light: RID, texture: RID) -> None: ...
    def light_set_negative(self, light: RID, enable: bool) -> None: ...
    def light_set_cull_mask(self, light: RID, mask: int) -> None: ...
    def light_set_distance_fade(self, decal: RID, enabled: bool, begin: float, shadow: float, length: float) -> None: ...
    def light_set_reverse_cull_face_mode(self, light: RID, enabled: bool) -> None: ...
    def light_set_bake_mode(self, light: RID, bake_mode: RenderingServer.LightBakeMode) -> None: ...
    def light_set_max_sdfgi_cascade(self, light: RID, cascade: int) -> None: ...
    def light_omni_set_shadow_mode(self, light: RID, mode: RenderingServer.LightOmniShadowMode) -> None: ...
    def light_directional_set_shadow_mode(self, light: RID, mode: RenderingServer.LightDirectionalShadowMode) -> None: ...
    def light_directional_set_blend_splits(self, light: RID, enable: bool) -> None: ...
    def light_directional_set_sky_mode(self, light: RID, mode: RenderingServer.LightDirectionalSkyMode) -> None: ...
    def light_projectors_set_filter(self, filter: RenderingServer.LightProjectorFilter) -> None: ...
    def positional_soft_shadow_filter_set_quality(self, quality: RenderingServer.ShadowQuality) -> None: ...
    def directional_soft_shadow_filter_set_quality(self, quality: RenderingServer.ShadowQuality) -> None: ...
    def directional_shadow_atlas_set_size(self, size: int, is_16bits: bool) -> None: ...
    def reflection_probe_create(self) -> RID: ...
    def reflection_probe_set_update_mode(self, probe: RID, mode: RenderingServer.ReflectionProbeUpdateMode) -> None: ...
    def reflection_probe_set_intensity(self, probe: RID, intensity: float) -> None: ...
    def reflection_probe_set_ambient_mode(self, probe: RID, mode: RenderingServer.ReflectionProbeAmbientMode) -> None: ...
    def reflection_probe_set_ambient_color(self, probe: RID, color: Color) -> None: ...
    def reflection_probe_set_ambient_energy(self, probe: RID, energy: float) -> None: ...
    def reflection_probe_set_max_distance(self, probe: RID, distance: float) -> None: ...
    def reflection_probe_set_size(self, probe: RID, size: Vector3) -> None: ...
    def reflection_probe_set_origin_offset(self, probe: RID, offset: Vector3) -> None: ...
    def reflection_probe_set_as_interior(self, probe: RID, enable: bool) -> None: ...
    def reflection_probe_set_enable_box_projection(self, probe: RID, enable: bool) -> None: ...
    def reflection_probe_set_enable_shadows(self, probe: RID, enable: bool) -> None: ...
    def reflection_probe_set_cull_mask(self, probe: RID, layers: int) -> None: ...
    def reflection_probe_set_resolution(self, probe: RID, resolution: int) -> None: ...
    def reflection_probe_set_mesh_lod_threshold(self, probe: RID, pixels: float) -> None: ...
    def decal_create(self) -> RID: ...
    def decal_set_size(self, decal: RID, size: Vector3) -> None: ...
    def decal_set_texture(self, decal: RID, type: RenderingServer.DecalTexture, texture: RID) -> None: ...
    def decal_set_emission_energy(self, decal: RID, energy: float) -> None: ...
    def decal_set_albedo_mix(self, decal: RID, albedo_mix: float) -> None: ...
    def decal_set_modulate(self, decal: RID, color: Color) -> None: ...
    def decal_set_cull_mask(self, decal: RID, mask: int) -> None: ...
    def decal_set_distance_fade(self, decal: RID, enabled: bool, begin: float, length: float) -> None: ...
    def decal_set_fade(self, decal: RID, above: float, below: float) -> None: ...
    def decal_set_normal_fade(self, decal: RID, fade: float) -> None: ...
    def decals_set_filter(self, filter: RenderingServer.DecalFilter) -> None: ...
    def gi_set_use_half_resolution(self, half_resolution: bool) -> None: ...
    def voxel_gi_create(self) -> RID: ...
    def voxel_gi_allocate_data(self, voxel_gi: RID, to_cell_xform: Transform3D, aabb: AABB, octree_size: Vector3i, octree_cells: PackedByteArray, data_cells: PackedByteArray, distance_field: PackedByteArray, level_counts: PackedInt32Array) -> None: ...
    def voxel_gi_get_octree_size(self, voxel_gi: RID) -> Vector3i: ...
    def voxel_gi_get_octree_cells(self, voxel_gi: RID) -> PackedByteArray: ...
    def voxel_gi_get_data_cells(self, voxel_gi: RID) -> PackedByteArray: ...
    def voxel_gi_get_distance_field(self, voxel_gi: RID) -> PackedByteArray: ...
    def voxel_gi_get_level_counts(self, voxel_gi: RID) -> PackedInt32Array: ...
    def voxel_gi_get_to_cell_xform(self, voxel_gi: RID) -> Transform3D: ...
    def voxel_gi_set_dynamic_range(self, voxel_gi: RID, range: float) -> None: ...
    def voxel_gi_set_propagation(self, voxel_gi: RID, amount: float) -> None: ...
    def voxel_gi_set_energy(self, voxel_gi: RID, energy: float) -> None: ...
    def voxel_gi_set_baked_exposure_normalization(self, voxel_gi: RID, baked_exposure: float) -> None: ...
    def voxel_gi_set_bias(self, voxel_gi: RID, bias: float) -> None: ...
    def voxel_gi_set_normal_bias(self, voxel_gi: RID, bias: float) -> None: ...
    def voxel_gi_set_interior(self, voxel_gi: RID, enable: bool) -> None: ...
    def voxel_gi_set_use_two_bounces(self, voxel_gi: RID, enable: bool) -> None: ...
    def voxel_gi_set_quality(self, quality: RenderingServer.VoxelGIQuality) -> None: ...
    def lightmap_create(self) -> RID: ...
    def lightmap_set_textures(self, lightmap: RID, light: RID, uses_sh: bool) -> None: ...
    def lightmap_set_probe_bounds(self, lightmap: RID, bounds: AABB) -> None: ...
    def lightmap_set_probe_interior(self, lightmap: RID, interior: bool) -> None: ...
    def lightmap_set_probe_capture_data(self, lightmap: RID, points: PackedVector3Array, point_sh: PackedColorArray, tetrahedra: PackedInt32Array, bsp_tree: PackedInt32Array) -> None: ...
    def lightmap_get_probe_capture_points(self, lightmap: RID) -> PackedVector3Array: ...
    def lightmap_get_probe_capture_sh(self, lightmap: RID) -> PackedColorArray: ...
    def lightmap_get_probe_capture_tetrahedra(self, lightmap: RID) -> PackedInt32Array: ...
    def lightmap_get_probe_capture_bsp_tree(self, lightmap: RID) -> PackedInt32Array: ...
    def lightmap_set_baked_exposure_normalization(self, lightmap: RID, baked_exposure: float) -> None: ...
    def lightmap_set_probe_capture_update_speed(self, speed: float) -> None: ...
    def particles_create(self) -> RID: ...
    def particles_set_mode(self, particles: RID, mode: RenderingServer.ParticlesMode) -> None: ...
    def particles_set_emitting(self, particles: RID, emitting: bool) -> None: ...
    def particles_get_emitting(self, particles: RID) -> bool: ...
    def particles_set_amount(self, particles: RID, amount: int) -> None: ...
    def particles_set_lifetime(self, particles: RID, lifetime: float) -> None: ...
    def particles_set_one_shot(self, particles: RID, one_shot: bool) -> None: ...
    def particles_set_pre_process_time(self, particles: RID, time: float) -> None: ...
    def particles_set_explosiveness_ratio(self, particles: RID, ratio: float) -> None: ...
    def particles_set_randomness_ratio(self, particles: RID, ratio: float) -> None: ...
    def particles_set_custom_aabb(self, particles: RID, aabb: AABB) -> None: ...
    def particles_set_speed_scale(self, particles: RID, scale: float) -> None: ...
    def particles_set_use_local_coordinates(self, particles: RID, enable: bool) -> None: ...
    def particles_set_process_material(self, particles: RID, material: RID) -> None: ...
    def particles_set_fixed_fps(self, particles: RID, fps: int) -> None: ...
    def particles_set_interpolate(self, particles: RID, enable: bool) -> None: ...
    def particles_set_fractional_delta(self, particles: RID, enable: bool) -> None: ...
    def particles_set_collision_base_size(self, particles: RID, size: float) -> None: ...
    def particles_set_transform_align(self, particles: RID, align: RenderingServer.ParticlesTransformAlign) -> None: ...
    def particles_set_trails(self, particles: RID, enable: bool, length_sec: float) -> None: ...
    def particles_set_trail_bind_poses(self, particles: RID, bind_poses: GDArray) -> None: ...
    def particles_is_inactive(self, particles: RID) -> bool: ...
    def particles_request_process(self, particles: RID) -> None: ...
    def particles_restart(self, particles: RID) -> None: ...
    def particles_set_subemitter(self, particles: RID, subemitter_particles: RID) -> None: ...
    def particles_emit(self, particles: RID, transform: Transform3D, velocity: Vector3, color: Color, custom: Color, emit_flags: int) -> None: ...
    def particles_set_draw_order(self, particles: RID, order: RenderingServer.ParticlesDrawOrder) -> None: ...
    def particles_set_draw_passes(self, particles: RID, count: int) -> None: ...
    def particles_set_draw_pass_mesh(self, particles: RID, pass_: int, mesh: RID) -> None: ...
    def particles_get_current_aabb(self, particles: RID) -> AABB: ...
    def particles_set_emission_transform(self, particles: RID, transform: Transform3D) -> None: ...
    def particles_collision_create(self) -> RID: ...
    def particles_collision_set_collision_type(self, particles_collision: RID, type: RenderingServer.ParticlesCollisionType) -> None: ...
    def particles_collision_set_cull_mask(self, particles_collision: RID, mask: int) -> None: ...
    def particles_collision_set_sphere_radius(self, particles_collision: RID, radius: float) -> None: ...
    def particles_collision_set_box_extents(self, particles_collision: RID, extents: Vector3) -> None: ...
    def particles_collision_set_attractor_strength(self, particles_collision: RID, strength: float) -> None: ...
    def particles_collision_set_attractor_directionality(self, particles_collision: RID, amount: float) -> None: ...
    def particles_collision_set_attractor_attenuation(self, particles_collision: RID, curve: float) -> None: ...
    def particles_collision_set_field_texture(self, particles_collision: RID, texture: RID) -> None: ...
    def particles_collision_height_field_update(self, particles_collision: RID) -> None: ...
    def particles_collision_set_height_field_resolution(self, particles_collision: RID, resolution: RenderingServer.ParticlesCollisionHeightfieldResolution) -> None: ...
    def fog_volume_create(self) -> RID: ...
    def fog_volume_set_shape(self, fog_volume: RID, shape: RenderingServer.FogVolumeShape) -> None: ...
    def fog_volume_set_size(self, fog_volume: RID, size: Vector3) -> None: ...
    def fog_volume_set_material(self, fog_volume: RID, material: RID) -> None: ...
    def visibility_notifier_create(self) -> RID: ...
    def visibility_notifier_set_aabb(self, notifier: RID, aabb: AABB) -> None: ...
    def visibility_notifier_set_callbacks(self, notifier: RID, enter_callable: GDCallable, exit_callable: GDCallable) -> None: ...
    def occluder_create(self) -> RID: ...
    def occluder_set_mesh(self, occluder: RID, vertices: PackedVector3Array, indices: PackedInt32Array) -> None: ...
    def camera_create(self) -> RID: ...
    def camera_set_perspective(self, camera: RID, fovy_degrees: float, z_near: float, z_far: float) -> None: ...
    def camera_set_orthogonal(self, camera: RID, size: float, z_near: float, z_far: float) -> None: ...
    def camera_set_frustum(self, camera: RID, size: float, offset: Vector2, z_near: float, z_far: float) -> None: ...
    def camera_set_transform(self, camera: RID, transform: Transform3D) -> None: ...
    def camera_set_cull_mask(self, camera: RID, layers: int) -> None: ...
    def camera_set_environment(self, camera: RID, env: RID) -> None: ...
    def camera_set_camera_attributes(self, camera: RID, effects: RID) -> None: ...
    def camera_set_use_vertical_aspect(self, camera: RID, enable: bool) -> None: ...
    def viewport_create(self) -> RID: ...
    def viewport_set_use_xr(self, viewport: RID, use_xr: bool) -> None: ...
    def viewport_set_size(self, viewport: RID, width: int, height: int) -> None: ...
    def viewport_set_active(self, viewport: RID, active: bool) -> None: ...
    def viewport_set_parent_viewport(self, viewport: RID, parent_viewport: RID) -> None: ...
    def viewport_attach_to_screen(self, viewport: RID, rect: Rect2 = Rect2(0, 0, 0, 0), screen: int = 0) -> None: ...
    def viewport_set_render_direct_to_screen(self, viewport: RID, enabled: bool) -> None: ...
    def viewport_set_canvas_cull_mask(self, viewport: RID, canvas_cull_mask: int) -> None: ...
    def viewport_set_scaling_3d_mode(self, viewport: RID, scaling_3d_mode: RenderingServer.ViewportScaling3DMode) -> None: ...
    def viewport_set_scaling_3d_scale(self, viewport: RID, scale: float) -> None: ...
    def viewport_set_fsr_sharpness(self, viewport: RID, sharpness: float) -> None: ...
    def viewport_set_texture_mipmap_bias(self, viewport: RID, mipmap_bias: float) -> None: ...
    def viewport_set_update_mode(self, viewport: RID, update_mode: RenderingServer.ViewportUpdateMode) -> None: ...
    def viewport_set_clear_mode(self, viewport: RID, clear_mode: RenderingServer.ViewportClearMode) -> None: ...
    def viewport_get_render_target(self, viewport: RID) -> RID: ...
    def viewport_get_texture(self, viewport: RID) -> RID: ...
    def viewport_set_disable_3d(self, viewport: RID, disable: bool) -> None: ...
    def viewport_set_disable_2d(self, viewport: RID, disable: bool) -> None: ...
    def viewport_set_environment_mode(self, viewport: RID, mode: RenderingServer.ViewportEnvironmentMode) -> None: ...
    def viewport_attach_camera(self, viewport: RID, camera: RID) -> None: ...
    def viewport_set_scenario(self, viewport: RID, scenario: RID) -> None: ...
    def viewport_attach_canvas(self, viewport: RID, canvas: RID) -> None: ...
    def viewport_remove_canvas(self, viewport: RID, canvas: RID) -> None: ...
    def viewport_set_snap_2d_transforms_to_pixel(self, viewport: RID, enabled: bool) -> None: ...
    def viewport_set_snap_2d_vertices_to_pixel(self, viewport: RID, enabled: bool) -> None: ...
    def viewport_set_default_canvas_item_texture_filter(self, viewport: RID, filter: RenderingServer.CanvasItemTextureFilter) -> None: ...
    def viewport_set_default_canvas_item_texture_repeat(self, viewport: RID, repeat: RenderingServer.CanvasItemTextureRepeat) -> None: ...
    def viewport_set_canvas_transform(self, viewport: RID, canvas: RID, offset: Transform2D) -> None: ...
    def viewport_set_canvas_stacking(self, viewport: RID, canvas: RID, layer: int, sublayer: int) -> None: ...
    def viewport_set_transparent_background(self, viewport: RID, enabled: bool) -> None: ...
    def viewport_set_global_canvas_transform(self, viewport: RID, transform: Transform2D) -> None: ...
    def viewport_set_sdf_oversize_and_scale(self, viewport: RID, oversize: RenderingServer.ViewportSDFOversize, scale: RenderingServer.ViewportSDFScale) -> None: ...
    def viewport_set_positional_shadow_atlas_size(self, viewport: RID, size: int, use_16_bits: bool = False) -> None: ...
    def viewport_set_positional_shadow_atlas_quadrant_subdivision(self, viewport: RID, quadrant: int, subdivision: int) -> None: ...
    def viewport_set_msaa_3d(self, viewport: RID, msaa: RenderingServer.ViewportMSAA) -> None: ...
    def viewport_set_msaa_2d(self, viewport: RID, msaa: RenderingServer.ViewportMSAA) -> None: ...
    def viewport_set_screen_space_aa(self, viewport: RID, mode: RenderingServer.ViewportScreenSpaceAA) -> None: ...
    def viewport_set_use_taa(self, viewport: RID, enable: bool) -> None: ...
    def viewport_set_use_debanding(self, viewport: RID, enable: bool) -> None: ...
    def viewport_set_use_occlusion_culling(self, viewport: RID, enable: bool) -> None: ...
    def viewport_set_occlusion_rays_per_thread(self, rays_per_thread: int) -> None: ...
    def viewport_set_occlusion_culling_build_quality(self, quality: RenderingServer.ViewportOcclusionCullingBuildQuality) -> None: ...
    def viewport_get_render_info(self, viewport: RID, type: RenderingServer.ViewportRenderInfoType, info: RenderingServer.ViewportRenderInfo) -> int: ...
    def viewport_set_debug_draw(self, viewport: RID, draw: RenderingServer.ViewportDebugDraw) -> None: ...
    def viewport_set_measure_render_time(self, viewport: RID, enable: bool) -> None: ...
    def viewport_get_measured_render_time_cpu(self, viewport: RID) -> float: ...
    def viewport_get_measured_render_time_gpu(self, viewport: RID) -> float: ...
    def viewport_set_vrs_mode(self, viewport: RID, mode: RenderingServer.ViewportVRSMode) -> None: ...
    def viewport_set_vrs_texture(self, viewport: RID, texture: RID) -> None: ...
    def sky_create(self) -> RID: ...
    def sky_set_radiance_size(self, sky: RID, radiance_size: int) -> None: ...
    def sky_set_mode(self, sky: RID, mode: RenderingServer.SkyMode) -> None: ...
    def sky_set_material(self, sky: RID, material: RID) -> None: ...
    def sky_bake_panorama(self, sky: RID, energy: float, bake_irradiance: bool, size: Vector2i) -> Image: ...
    def environment_create(self) -> RID: ...
    def environment_set_background(self, env: RID, bg: RenderingServer.EnvironmentBG) -> None: ...
    def environment_set_sky(self, env: RID, sky: RID) -> None: ...
    def environment_set_sky_custom_fov(self, env: RID, scale: float) -> None: ...
    def environment_set_sky_orientation(self, env: RID, orientation: Basis) -> None: ...
    def environment_set_bg_color(self, env: RID, color: Color) -> None: ...
    def environment_set_bg_energy(self, env: RID, multiplier: float, exposure_value: float) -> None: ...
    def environment_set_canvas_max_layer(self, env: RID, max_layer: int) -> None: ...
    def environment_set_ambient_light(self, env: RID, color: Color, ambient: RenderingServer.EnvironmentAmbientSource = 0, energy: float = 1.0, sky_contibution: float = 0.0, reflection_source: RenderingServer.EnvironmentReflectionSource = 0) -> None: ...
    def environment_set_glow(self, env: RID, enable: bool, levels: PackedFloat32Array, intensity: float, strength: float, mix: float, bloom_threshold: float, blend_mode: RenderingServer.EnvironmentGlowBlendMode, hdr_bleed_threshold: float, hdr_bleed_scale: float, hdr_luminance_cap: float, glow_map_strength: float, glow_map: RID) -> None: ...
    def environment_set_tonemap(self, env: RID, tone_mapper: RenderingServer.EnvironmentToneMapper, exposure: float, white: float) -> None: ...
    def environment_set_adjustment(self, env: RID, enable: bool, brightness: float, contrast: float, saturation: float, use_1d_color_correction: bool, color_correction: RID) -> None: ...
    def environment_set_ssr(self, env: RID, enable: bool, max_steps: int, fade_in: float, fade_out: float, depth_tolerance: float) -> None: ...
    def environment_set_ssao(self, env: RID, enable: bool, radius: float, intensity: float, power: float, detail: float, horizon: float, sharpness: float, light_affect: float, ao_channel_affect: float) -> None: ...
    def environment_set_fog(self, env: RID, enable: bool, light_color: Color, light_energy: float, sun_scatter: float, density: float, height: float, height_density: float, aerial_perspective: float, sky_affect: float) -> None: ...
    def environment_set_sdfgi(self, env: RID, enable: bool, cascades: int, min_cell_size: float, y_scale: RenderingServer.EnvironmentSDFGIYScale, use_occlusion: bool, bounce_feedback: float, read_sky: bool, energy: float, normal_bias: float, probe_bias: float) -> None: ...
    def environment_set_volumetric_fog(self, env: RID, enable: bool, density: float, albedo: Color, emission: Color, emission_energy: float, anisotropy: float, length: float, p_detail_spread: float, gi_inject: float, temporal_reprojection: bool, temporal_reprojection_amount: float, ambient_inject: float, sky_affect: float) -> None: ...
    def environment_glow_set_use_bicubic_upscale(self, enable: bool) -> None: ...
    def environment_set_ssr_roughness_quality(self, quality: RenderingServer.EnvironmentSSRRoughnessQuality) -> None: ...
    def environment_set_ssao_quality(self, quality: RenderingServer.EnvironmentSSAOQuality, half_size: bool, adaptive_target: float, blur_passes: int, fadeout_from: float, fadeout_to: float) -> None: ...
    def environment_set_ssil_quality(self, quality: RenderingServer.EnvironmentSSILQuality, half_size: bool, adaptive_target: float, blur_passes: int, fadeout_from: float, fadeout_to: float) -> None: ...
    def environment_set_sdfgi_ray_count(self, ray_count: RenderingServer.EnvironmentSDFGIRayCount) -> None: ...
    def environment_set_sdfgi_frames_to_converge(self, frames: RenderingServer.EnvironmentSDFGIFramesToConverge) -> None: ...
    def environment_set_sdfgi_frames_to_update_light(self, frames: RenderingServer.EnvironmentSDFGIFramesToUpdateLight) -> None: ...
    def environment_set_volumetric_fog_volume_size(self, size: int, depth: int) -> None: ...
    def environment_set_volumetric_fog_filter_active(self, active: bool) -> None: ...
    def environment_bake_panorama(self, environment: RID, bake_irradiance: bool, size: Vector2i) -> Image: ...
    def screen_space_roughness_limiter_set_active(self, enable: bool, amount: float, limit: float) -> None: ...
    def sub_surface_scattering_set_quality(self, quality: RenderingServer.SubSurfaceScatteringQuality) -> None: ...
    def sub_surface_scattering_set_scale(self, scale: float, depth_scale: float) -> None: ...
    def camera_attributes_create(self) -> RID: ...
    def camera_attributes_set_dof_blur_quality(self, quality: RenderingServer.DOFBlurQuality, use_jitter: bool) -> None: ...
    def camera_attributes_set_dof_blur_bokeh_shape(self, shape: RenderingServer.DOFBokehShape) -> None: ...
    def camera_attributes_set_dof_blur(self, camera_attributes: RID, far_enable: bool, far_distance: float, far_transition: float, near_enable: bool, near_distance: float, near_transition: float, amount: float) -> None: ...
    def camera_attributes_set_exposure(self, camera_attributes: RID, multiplier: float, normalization: float) -> None: ...
    def camera_attributes_set_auto_exposure(self, camera_attributes: RID, enable: bool, min_sensitivity: float, max_sensitivity: float, speed: float, scale: float) -> None: ...
    def scenario_create(self) -> RID: ...
    def scenario_set_environment(self, scenario: RID, environment: RID) -> None: ...
    def scenario_set_fallback_environment(self, scenario: RID, environment: RID) -> None: ...
    def scenario_set_camera_attributes(self, scenario: RID, effects: RID) -> None: ...
    def instance_create2(self, base: RID, scenario: RID) -> RID: ...
    def instance_create(self) -> RID: ...
    def instance_set_base(self, instance: RID, base: RID) -> None: ...
    def instance_set_scenario(self, instance: RID, scenario: RID) -> None: ...
    def instance_set_layer_mask(self, instance: RID, mask: int) -> None: ...
    def instance_set_pivot_data(self, instance: RID, sorting_offset: float, use_aabb_center: bool) -> None: ...
    def instance_set_transform(self, instance: RID, transform: Transform3D) -> None: ...
    def instance_attach_object_instance_id(self, instance: RID, id: int) -> None: ...
    def instance_set_blend_shape_weight(self, instance: RID, shape: int, weight: float) -> None: ...
    def instance_set_surface_override_material(self, instance: RID, surface: int, material: RID) -> None: ...
    def instance_set_visible(self, instance: RID, visible: bool) -> None: ...
    def instance_geometry_set_transparency(self, instance: RID, transparency: float) -> None: ...
    def instance_set_custom_aabb(self, instance: RID, aabb: AABB) -> None: ...
    def instance_attach_skeleton(self, instance: RID, skeleton: RID) -> None: ...
    def instance_set_extra_visibility_margin(self, instance: RID, margin: float) -> None: ...
    def instance_set_visibility_parent(self, instance: RID, parent: RID) -> None: ...
    def instance_set_ignore_culling(self, instance: RID, enabled: bool) -> None: ...
    def instance_geometry_set_flag(self, instance: RID, flag: RenderingServer.InstanceFlags, enabled: bool) -> None: ...
    def instance_geometry_set_cast_shadows_setting(self, instance: RID, shadow_casting_setting: RenderingServer.ShadowCastingSetting) -> None: ...
    def instance_geometry_set_material_override(self, instance: RID, material: RID) -> None: ...
    def instance_geometry_set_material_overlay(self, instance: RID, material: RID) -> None: ...
    def instance_geometry_set_visibility_range(self, instance: RID, min: float, max: float, min_margin: float, max_margin: float, fade_mode: RenderingServer.VisibilityRangeFadeMode) -> None: ...
    def instance_geometry_set_lightmap(self, instance: RID, lightmap: RID, lightmap_uv_scale: Rect2, lightmap_slice: int) -> None: ...
    def instance_geometry_set_lod_bias(self, instance: RID, lod_bias: float) -> None: ...
    def instance_geometry_set_shader_parameter(self, instance: RID, parameter: StringName | str, value: GDAny) -> None: ...
    def instance_geometry_get_shader_parameter(self, instance: RID, parameter: StringName | str) -> GDAny: ...
    def instance_geometry_get_shader_parameter_default_value(self, instance: RID, parameter: StringName | str) -> GDAny: ...
    def instance_geometry_get_shader_parameter_list(self, instance: RID) -> GDArray: ...
    def instances_cull_aabb(self, aabb: AABB, scenario: RID = RID()) -> PackedInt64Array: ...
    def instances_cull_ray(self, from_: Vector3, to: Vector3, scenario: RID = RID()) -> PackedInt64Array: ...
    def instances_cull_convex(self, convex: GDArray, scenario: RID = RID()) -> PackedInt64Array: ...
    def bake_render_uv2(self, base: RID, material_overrides: GDArray, image_size: Vector2i) -> GDArray: ...
    def canvas_create(self) -> RID: ...
    def canvas_set_item_mirroring(self, canvas: RID, item: RID, mirroring: Vector2) -> None: ...
    def canvas_set_modulate(self, canvas: RID, color: Color) -> None: ...
    def canvas_set_disable_scale(self, disable: bool) -> None: ...
    def canvas_texture_create(self) -> RID: ...
    def canvas_texture_set_channel(self, canvas_texture: RID, channel: RenderingServer.CanvasTextureChannel, texture: RID) -> None: ...
    def canvas_texture_set_shading_parameters(self, canvas_texture: RID, base_color: Color, shininess: float) -> None: ...
    def canvas_texture_set_texture_filter(self, canvas_texture: RID, filter: RenderingServer.CanvasItemTextureFilter) -> None: ...
    def canvas_texture_set_texture_repeat(self, canvas_texture: RID, repeat: RenderingServer.CanvasItemTextureRepeat) -> None: ...
    def canvas_item_create(self) -> RID: ...
    def canvas_item_set_parent(self, item: RID, parent: RID) -> None: ...
    def canvas_item_set_default_texture_filter(self, item: RID, filter: RenderingServer.CanvasItemTextureFilter) -> None: ...
    def canvas_item_set_default_texture_repeat(self, item: RID, repeat: RenderingServer.CanvasItemTextureRepeat) -> None: ...
    def canvas_item_set_visible(self, item: RID, visible: bool) -> None: ...
    def canvas_item_set_light_mask(self, item: RID, mask: int) -> None: ...
    def canvas_item_set_visibility_layer(self, item: RID, visibility_layer: int) -> None: ...
    def canvas_item_set_transform(self, item: RID, transform: Transform2D) -> None: ...
    def canvas_item_set_clip(self, item: RID, clip: bool) -> None: ...
    def canvas_item_set_distance_field_mode(self, item: RID, enabled: bool) -> None: ...
    def canvas_item_set_custom_rect(self, item: RID, use_custom_rect: bool, rect: Rect2 = Rect2(0, 0, 0, 0)) -> None: ...
    def canvas_item_set_modulate(self, item: RID, color: Color) -> None: ...
    def canvas_item_set_self_modulate(self, item: RID, color: Color) -> None: ...
    def canvas_item_set_draw_behind_parent(self, item: RID, enabled: bool) -> None: ...
    def canvas_item_add_line(self, item: RID, from_: Vector2, to: Vector2, color: Color, width: float = -1.0, antialiased: bool = False) -> None: ...
    def canvas_item_add_polyline(self, item: RID, points: PackedVector2Array, colors: PackedColorArray, width: float = -1.0, antialiased: bool = False) -> None: ...
    def canvas_item_add_multiline(self, item: RID, points: PackedVector2Array, colors: PackedColorArray, width: float = -1.0) -> None: ...
    def canvas_item_add_rect(self, item: RID, rect: Rect2, color: Color) -> None: ...
    def canvas_item_add_circle(self, item: RID, pos: Vector2, radius: float, color: Color) -> None: ...
    def canvas_item_add_texture_rect(self, item: RID, rect: Rect2, texture: RID, tile: bool = False, modulate: Color = Color(1, 1, 1, 1), transpose: bool = False) -> None: ...
    def canvas_item_add_msdf_texture_rect_region(self, item: RID, rect: Rect2, texture: RID, src_rect: Rect2, modulate: Color = Color(1, 1, 1, 1), outline_size: int = 0, px_range: float = 1.0, scale: float = 1.0) -> None: ...
    def canvas_item_add_lcd_texture_rect_region(self, item: RID, rect: Rect2, texture: RID, src_rect: Rect2, modulate: Color) -> None: ...
    def canvas_item_add_texture_rect_region(self, item: RID, rect: Rect2, texture: RID, src_rect: Rect2, modulate: Color = Color(1, 1, 1, 1), transpose: bool = False, clip_uv: bool = True) -> None: ...
    def canvas_item_add_nine_patch(self, item: RID, rect: Rect2, source: Rect2, texture: RID, topleft: Vector2, bottomright: Vector2, x_axis_mode: RenderingServer.NinePatchAxisMode = 0, y_axis_mode: RenderingServer.NinePatchAxisMode = 0, draw_center: bool = True, modulate: Color = Color(1, 1, 1, 1)) -> None: ...
    def canvas_item_add_primitive(self, item: RID, points: PackedVector2Array, colors: PackedColorArray, uvs: PackedVector2Array, texture: RID) -> None: ...
    def canvas_item_add_polygon(self, item: RID, points: PackedVector2Array, colors: PackedColorArray, uvs: PackedVector2Array = PackedVector2Array(), texture: RID = RID()) -> None: ...
    def canvas_item_add_triangle_array(self, item: RID, indices: PackedInt32Array, points: PackedVector2Array, colors: PackedColorArray, uvs: PackedVector2Array = PackedVector2Array(), bones: PackedInt32Array = PackedInt32Array(), weights: PackedFloat32Array = PackedFloat32Array(), texture: RID = RID(), count: int = -1) -> None: ...
    def canvas_item_add_mesh(self, item: RID, mesh: RID, transform: Transform2D = Transform2D(1, 0, 0, 1, 0, 0), modulate: Color = Color(1, 1, 1, 1), texture: RID = RID()) -> None: ...
    def canvas_item_add_multimesh(self, item: RID, mesh: RID, texture: RID = RID()) -> None: ...
    def canvas_item_add_particles(self, item: RID, particles: RID, texture: RID) -> None: ...
    def canvas_item_add_set_transform(self, item: RID, transform: Transform2D) -> None: ...
    def canvas_item_add_clip_ignore(self, item: RID, ignore: bool) -> None: ...
    def canvas_item_add_animation_slice(self, item: RID, animation_length: float, slice_begin: float, slice_end: float, offset: float = 0.0) -> None: ...
    def canvas_item_set_sort_children_by_y(self, item: RID, enabled: bool) -> None: ...
    def canvas_item_set_z_index(self, item: RID, z_index: int) -> None: ...
    def canvas_item_set_z_as_relative_to_parent(self, item: RID, enabled: bool) -> None: ...
    def canvas_item_set_copy_to_backbuffer(self, item: RID, enabled: bool, rect: Rect2) -> None: ...
    def canvas_item_clear(self, item: RID) -> None: ...
    def canvas_item_set_draw_index(self, item: RID, index: int) -> None: ...
    def canvas_item_set_material(self, item: RID, material: RID) -> None: ...
    def canvas_item_set_use_parent_material(self, item: RID, enabled: bool) -> None: ...
    def canvas_item_set_visibility_notifier(self, item: RID, enable: bool, area: Rect2, enter_callable: GDCallable, exit_callable: GDCallable) -> None: ...
    def canvas_item_set_canvas_group_mode(self, item: RID, mode: RenderingServer.CanvasGroupMode, clear_margin: float = 5.0, fit_empty: bool = False, fit_margin: float = 0.0, blur_mipmaps: bool = False) -> None: ...
    def canvas_light_create(self) -> RID: ...
    def canvas_light_attach_to_canvas(self, light: RID, canvas: RID) -> None: ...
    def canvas_light_set_enabled(self, light: RID, enabled: bool) -> None: ...
    def canvas_light_set_texture_scale(self, light: RID, scale: float) -> None: ...
    def canvas_light_set_transform(self, light: RID, transform: Transform2D) -> None: ...
    def canvas_light_set_texture(self, light: RID, texture: RID) -> None: ...
    def canvas_light_set_texture_offset(self, light: RID, offset: Vector2) -> None: ...
    def canvas_light_set_color(self, light: RID, color: Color) -> None: ...
    def canvas_light_set_height(self, light: RID, height: float) -> None: ...
    def canvas_light_set_energy(self, light: RID, energy: float) -> None: ...
    def canvas_light_set_z_range(self, light: RID, min_z: int, max_z: int) -> None: ...
    def canvas_light_set_layer_range(self, light: RID, min_layer: int, max_layer: int) -> None: ...
    def canvas_light_set_item_cull_mask(self, light: RID, mask: int) -> None: ...
    def canvas_light_set_item_shadow_cull_mask(self, light: RID, mask: int) -> None: ...
    def canvas_light_set_mode(self, light: RID, mode: RenderingServer.CanvasLightMode) -> None: ...
    def canvas_light_set_shadow_enabled(self, light: RID, enabled: bool) -> None: ...
    def canvas_light_set_shadow_filter(self, light: RID, filter: RenderingServer.CanvasLightShadowFilter) -> None: ...
    def canvas_light_set_shadow_color(self, light: RID, color: Color) -> None: ...
    def canvas_light_set_shadow_smooth(self, light: RID, smooth: float) -> None: ...
    def canvas_light_set_blend_mode(self, light: RID, mode: RenderingServer.CanvasLightBlendMode) -> None: ...
    def canvas_light_occluder_create(self) -> RID: ...
    def canvas_light_occluder_attach_to_canvas(self, occluder: RID, canvas: RID) -> None: ...
    def canvas_light_occluder_set_enabled(self, occluder: RID, enabled: bool) -> None: ...
    def canvas_light_occluder_set_polygon(self, occluder: RID, polygon: RID) -> None: ...
    def canvas_light_occluder_set_as_sdf_collision(self, occluder: RID, enable: bool) -> None: ...
    def canvas_light_occluder_set_transform(self, occluder: RID, transform: Transform2D) -> None: ...
    def canvas_light_occluder_set_light_mask(self, occluder: RID, mask: int) -> None: ...
    def canvas_occluder_polygon_create(self) -> RID: ...
    def canvas_occluder_polygon_set_shape(self, occluder_polygon: RID, shape: PackedVector2Array, closed: bool) -> None: ...
    def canvas_occluder_polygon_set_cull_mode(self, occluder_polygon: RID, mode: RenderingServer.CanvasOccluderPolygonCullMode) -> None: ...
    def canvas_set_shadow_texture_size(self, size: int) -> None: ...
    def global_shader_parameter_add(self, name: StringName | str, type: RenderingServer.GlobalShaderParameterType, default_value: GDAny) -> None: ...
    def global_shader_parameter_remove(self, name: StringName | str) -> None: ...
    def global_shader_parameter_get_list(self) -> GDArray: ...
    def global_shader_parameter_set(self, name: StringName | str, value: GDAny) -> None: ...
    def global_shader_parameter_set_override(self, name: StringName | str, value: GDAny) -> None: ...
    def global_shader_parameter_get(self, name: StringName | str) -> GDAny: ...
    def global_shader_parameter_get_type(self, name: StringName | str) -> RenderingServer.GlobalShaderParameterType: ...
    def free_rid(self, rid: RID) -> None: ...
    def request_frame_drawn_callback(self, callable: GDCallable) -> None: ...
    def has_changed(self) -> bool: ...
    def get_rendering_info(self, info: RenderingServer.RenderingInfo) -> int: ...
    def get_video_adapter_name(self) -> GDString: ...
    def get_video_adapter_vendor(self) -> GDString: ...
    def get_video_adapter_type(self) -> RenderingDevice.DeviceType: ...
    def get_video_adapter_api_version(self) -> GDString: ...
    def make_sphere_mesh(self, latitudes: int, longitudes: int, radius: float) -> RID: ...
    def get_test_cube(self) -> RID: ...
    def get_test_texture(self) -> RID: ...
    def get_white_texture(self) -> RID: ...
    def set_boot_image(self, image: Image, color: Color, scale: bool, use_filter: bool = True) -> None: ...
    def get_default_clear_color(self) -> Color: ...
    def set_default_clear_color(self, color: Color) -> None: ...
    def has_feature(self, feature: RenderingServer.Features) -> bool: ...
    def has_os_feature(self, feature: GDString | str) -> bool: ...
    def set_debug_generate_wireframes(self, generate: bool) -> None: ...
    def is_render_loop_enabled(self) -> bool: ...
    def set_render_loop_enabled(self, enabled: bool) -> None: ...
    def get_frame_setup_time_cpu(self) -> float: ...
    def force_sync(self) -> None: ...
    def force_draw(self, swap_buffers: bool = True, frame_step: float = 0.0) -> None: ...
    def get_rendering_device(self) -> RenderingDevice: ...
    def create_local_rendering_device(self) -> RenderingDevice: ...

    # Signals
    def frame_pre_draw(self) -> None: ...
    def frame_post_draw(self) -> None: ...

    # Properties
    render_loop_enabled: bool

    # Constants
    NO_INDEX_ARRAY: int
    ARRAY_WEIGHTS_SIZE: int
    CANVAS_ITEM_Z_MIN: int
    CANVAS_ITEM_Z_MAX: int
    MAX_GLOW_LEVELS: int
    MAX_CURSORS: int
    MAX_2D_DIRECTIONAL_LIGHTS: int
    MATERIAL_RENDER_PRIORITY_MIN: int
    MATERIAL_RENDER_PRIORITY_MAX: int
    ARRAY_CUSTOM_COUNT: int
    PARTICLES_EMIT_FLAG_POSITION: int
    PARTICLES_EMIT_FLAG_ROTATION_SCALE: int
    PARTICLES_EMIT_FLAG_VELOCITY: int
    PARTICLES_EMIT_FLAG_COLOR: int
    PARTICLES_EMIT_FLAG_CUSTOM: int


class Resource(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_path(self, path: GDString | str) -> None: ...
    def take_over_path(self, path: GDString | str) -> None: ...
    def get_path(self) -> GDString: ...
    def set_name(self, name: GDString | str) -> None: ...
    def get_name(self) -> GDString: ...
    def get_rid(self) -> RID: ...
    def set_local_to_scene(self, enable: bool) -> None: ...
    def is_local_to_scene(self) -> bool: ...
    def get_local_scene(self) -> Node: ...
    def setup_local_to_scene(self) -> None: ...
    def emit_changed(self) -> None: ...
    def duplicate(self, subresources: bool = False) -> Resource: ...

    # Signals
    def changed(self) -> None: ...
    def setup_local_to_scene_requested(self) -> None: ...

    # Properties
    resource_local_to_scene: bool
    resource_path: GDString
    resource_name: GDString


class ResourceFormatLoader(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class ResourceFormatLoader.CacheMode(Enum):
        CACHE_MODE_IGNORE: int
        CACHE_MODE_REUSE: int
        CACHE_MODE_REPLACE: int


class ResourceFormatSaver(TypeInUse(RefCounted)):
    def __init__(self): ...


class ResourceImporter(TypeInUse(RefCounted)):

    # Enums
    class ResourceImporter.ImportOrder(Enum):
        IMPORT_ORDER_DEFAULT: int
        IMPORT_ORDER_SCENE: int


class ResourceLoader(TypeInUse(Object)):
    @classmethod
    def new(cls) -> ResourceLoader: ...

    # Enums
    class ResourceLoader.ThreadLoadStatus(Enum):
        THREAD_LOAD_INVALID_RESOURCE: int
        THREAD_LOAD_IN_PROGRESS: int
        THREAD_LOAD_FAILED: int
        THREAD_LOAD_LOADED: int
    class ResourceLoader.CacheMode(Enum):
        CACHE_MODE_IGNORE: int
        CACHE_MODE_REUSE: int
        CACHE_MODE_REPLACE: int

    # Methods
    def load_threaded_request(self, path: GDString | str, type_hint: GDString | str = "", use_sub_threads: bool = False, cache_mode: ResourceLoader.CacheMode = 1) -> Error: ...
    def load_threaded_get_status(self, path: GDString | str, progress: GDArray = []) -> ResourceLoader.ThreadLoadStatus: ...
    def load_threaded_get(self, path: GDString | str) -> Resource: ...
    def load(self, path: GDString | str, type_hint: GDString | str = "", cache_mode: ResourceLoader.CacheMode = 1) -> Resource: ...
    def get_recognized_extensions_for_type(self, type: GDString | str) -> PackedStringArray: ...
    def add_resource_format_loader(self, format_loader: ResourceFormatLoader, at_front: bool = False) -> None: ...
    def remove_resource_format_loader(self, format_loader: ResourceFormatLoader) -> None: ...
    def set_abort_on_missing_resources(self, abort: bool) -> None: ...
    def get_dependencies(self, path: GDString | str) -> PackedStringArray: ...
    def has_cached(self, path: GDString | str) -> bool: ...
    def exists(self, path: GDString | str, type_hint: GDString | str = "") -> bool: ...
    def get_resource_uid(self, path: GDString | str) -> int: ...


class ResourceSaver(TypeInUse(Object)):
    @classmethod
    def new(cls) -> ResourceSaver: ...

    # Enums
    class ResourceSaver.SaverFlags(Enum):
        FLAG_NONE: int
        FLAG_RELATIVE_PATHS: int
        FLAG_BUNDLE_RESOURCES: int
        FLAG_CHANGE_PATH: int
        FLAG_OMIT_EDITOR_PROPERTIES: int
        FLAG_SAVE_BIG_ENDIAN: int
        FLAG_COMPRESS: int
        FLAG_REPLACE_SUBRESOURCE_PATHS: int

    # Methods
    def save(self, resource: Resource, path: GDString | str = "", flags: ResourceSaver.SaverFlags = 0) -> Error: ...
    def get_recognized_extensions(self, type: Resource) -> PackedStringArray: ...
    def add_resource_format_saver(self, format_saver: ResourceFormatSaver, at_front: bool = False) -> None: ...
    def remove_resource_format_saver(self, format_saver: ResourceFormatSaver) -> None: ...


class ResourceUID(TypeInUse(Object)):

    # Methods
    def id_to_text(self, id: int) -> GDString: ...
    def text_to_id(self, text_id: GDString | str) -> int: ...
    def create_id(self) -> int: ...
    def has_id(self, id: int) -> bool: ...
    def add_id(self, id: int, path: GDString | str) -> None: ...
    def set_id(self, id: int, path: GDString | str) -> None: ...
    def get_id_path(self, id: int) -> GDString: ...
    def remove_id(self, id: int) -> None: ...

    # Constants
    INVALID_ID: int


class RichTextEffect(TypeInUse(Resource)):
    def __init__(self): ...


class SceneReplicationConfig(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_properties(self) -> GDArray: ...
    def add_property(self, path: NodePath | str, index: int = -1) -> None: ...
    def has_property(self, path: NodePath | str) -> bool: ...
    def remove_property(self, path: NodePath | str) -> None: ...
    def property_get_index(self, path: NodePath | str) -> int: ...
    def property_get_spawn(self, path: NodePath | str) -> bool: ...
    def property_set_spawn(self, path: NodePath | str, enabled: bool) -> None: ...
    def property_get_sync(self, path: NodePath | str) -> bool: ...
    def property_set_sync(self, path: NodePath | str, enabled: bool) -> None: ...
    def property_get_watch(self, path: NodePath | str) -> bool: ...
    def property_set_watch(self, path: NodePath | str, enabled: bool) -> None: ...


class SceneState(TypeInUse(RefCounted)):

    # Enums
    class SceneState.GenEditState(Enum):
        GEN_EDIT_STATE_DISABLED: int
        GEN_EDIT_STATE_INSTANCE: int
        GEN_EDIT_STATE_MAIN: int
        GEN_EDIT_STATE_MAIN_INHERITED: int

    # Methods
    def get_node_count(self) -> int: ...
    def get_node_type(self, idx: int) -> StringName: ...
    def get_node_name(self, idx: int) -> StringName: ...
    def get_node_path(self, idx: int, for_parent: bool = False) -> NodePath: ...
    def get_node_owner_path(self, idx: int) -> NodePath: ...
    def is_node_instance_placeholder(self, idx: int) -> bool: ...
    def get_node_instance_placeholder(self, idx: int) -> GDString: ...
    def get_node_instance(self, idx: int) -> PackedScene: ...
    def get_node_groups(self, idx: int) -> PackedStringArray: ...
    def get_node_index(self, idx: int) -> int: ...
    def get_node_property_count(self, idx: int) -> int: ...
    def get_node_property_name(self, idx: int, prop_idx: int) -> StringName: ...
    def get_node_property_value(self, idx: int, prop_idx: int) -> GDAny: ...
    def get_connection_count(self) -> int: ...
    def get_connection_source(self, idx: int) -> NodePath: ...
    def get_connection_signal(self, idx: int) -> StringName: ...
    def get_connection_target(self, idx: int) -> NodePath: ...
    def get_connection_method(self, idx: int) -> StringName: ...
    def get_connection_flags(self, idx: int) -> int: ...
    def get_connection_binds(self, idx: int) -> GDArray: ...
    def get_connection_unbinds(self, idx: int) -> int: ...


class SceneTreeTimer(TypeInUse(RefCounted)):

    # Methods
    def set_time_left(self, time: float) -> None: ...
    def get_time_left(self) -> float: ...

    # Signals
    def timeout(self) -> None: ...

    # Properties
    time_left: float


class Script(TypeInUse(Resource)):

    # Methods
    def can_instantiate(self) -> bool: ...
    def instance_has(self, base_object: GDObject) -> bool: ...
    def has_source_code(self) -> bool: ...
    def get_source_code(self) -> GDString: ...
    def set_source_code(self, source: GDString | str) -> None: ...
    def reload(self, keep_state: bool = False) -> Error: ...
    def get_base_script(self) -> Script: ...
    def get_instance_base_type(self) -> StringName: ...
    def has_script_signal(self, signal_name: StringName | str) -> bool: ...
    def get_script_property_list(self) -> GDArray: ...
    def get_script_method_list(self) -> GDArray: ...
    def get_script_signal_list(self) -> GDArray: ...
    def get_script_constant_map(self) -> GDDictionary: ...
    def get_property_default_value(self, property: StringName | str) -> GDAny: ...
    def is_tool(self) -> bool: ...

    # Properties
    source_code: GDString


class ScriptExtension(TypeInUse(Script)):
    def __init__(self): ...


class ScriptLanguage(TypeInUse(Object)):
    pass


class ScriptLanguageExtension(TypeInUse(ScriptLanguage)):
    @classmethod
    def new(cls) -> ScriptLanguageExtension: ...

    # Enums
    class ScriptLanguageExtension.LookupResultType(Enum):
        LOOKUP_RESULT_SCRIPT_LOCATION: int
        LOOKUP_RESULT_CLASS: int
        LOOKUP_RESULT_CLASS_CONSTANT: int
        LOOKUP_RESULT_CLASS_PROPERTY: int
        LOOKUP_RESULT_CLASS_METHOD: int
        LOOKUP_RESULT_CLASS_SIGNAL: int
        LOOKUP_RESULT_CLASS_ENUM: int
        LOOKUP_RESULT_CLASS_TBD_GLOBALSCOPE: int
        LOOKUP_RESULT_CLASS_ANNOTATION: int
        LOOKUP_RESULT_MAX: int
    class ScriptLanguageExtension.CodeCompletionLocation(Enum):
        LOCATION_LOCAL: int
        LOCATION_PARENT_MASK: int
        LOCATION_OTHER_USER_CODE: int
        LOCATION_OTHER: int
    class ScriptLanguageExtension.CodeCompletionKind(Enum):
        CODE_COMPLETION_KIND_CLASS: int
        CODE_COMPLETION_KIND_FUNCTION: int
        CODE_COMPLETION_KIND_SIGNAL: int
        CODE_COMPLETION_KIND_VARIABLE: int
        CODE_COMPLETION_KIND_MEMBER: int
        CODE_COMPLETION_KIND_ENUM: int
        CODE_COMPLETION_KIND_CONSTANT: int
        CODE_COMPLETION_KIND_NODE_PATH: int
        CODE_COMPLETION_KIND_FILE_PATH: int
        CODE_COMPLETION_KIND_PLAIN_TEXT: int
        CODE_COMPLETION_KIND_MAX: int


class Semaphore(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def wait(self) -> None: ...
    def try_wait(self) -> bool: ...
    def post(self) -> None: ...


class Shader(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class Shader.Mode(Enum):
        MODE_SPATIAL: int
        MODE_CANVAS_ITEM: int
        MODE_PARTICLES: int
        MODE_SKY: int
        MODE_FOG: int

    # Methods
    def get_mode(self) -> Shader.Mode: ...
    def set_code(self, code: GDString | str) -> None: ...
    def get_code(self) -> GDString: ...
    def set_default_texture_parameter(self, name: StringName | str, texture: Texture2D, index: int = 0) -> None: ...
    def get_default_texture_parameter(self, name: StringName | str, index: int = 0) -> Texture2D: ...
    def get_shader_uniform_list(self, get_groups: bool = False) -> GDArray: ...

    # Properties
    code: GDString


class ShaderInclude(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_code(self, code: GDString | str) -> None: ...
    def get_code(self) -> GDString: ...

    # Properties
    code: GDString


class Shape2D(TypeInUse(Resource)):

    # Methods
    def set_custom_solver_bias(self, bias: float) -> None: ...
    def get_custom_solver_bias(self) -> float: ...
    def collide(self, local_xform: Transform2D, with_shape: Shape2D, shape_xform: Transform2D) -> bool: ...
    def collide_with_motion(self, local_xform: Transform2D, local_motion: Vector2, with_shape: Shape2D, shape_xform: Transform2D, shape_motion: Vector2) -> bool: ...
    def collide_and_get_contacts(self, local_xform: Transform2D, with_shape: Shape2D, shape_xform: Transform2D) -> PackedVector2Array: ...
    def collide_with_motion_and_get_contacts(self, local_xform: Transform2D, local_motion: Vector2, with_shape: Shape2D, shape_xform: Transform2D, shape_motion: Vector2) -> PackedVector2Array: ...
    def draw(self, canvas_item: RID, color: Color) -> None: ...
    def get_rect(self) -> Rect2: ...

    # Properties
    custom_solver_bias: float


class Shape3D(TypeInUse(Resource)):

    # Methods
    def set_custom_solver_bias(self, bias: float) -> None: ...
    def get_custom_solver_bias(self) -> float: ...
    def set_margin(self, margin: float) -> None: ...
    def get_margin(self) -> float: ...
    def get_debug_mesh(self) -> ArrayMesh: ...

    # Properties
    custom_solver_bias: float
    margin: float


class Shortcut(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_events(self, events: GDArray) -> None: ...
    def get_events(self) -> GDArray: ...
    def has_valid_event(self) -> bool: ...
    def matches_event(self, event: InputEvent) -> bool: ...
    def get_as_text(self) -> GDString: ...

    # Properties
    events: GDArray


class SkeletonModification2D(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_enabled(self, enabled: bool) -> None: ...
    def get_enabled(self) -> bool: ...
    def get_modification_stack(self) -> SkeletonModificationStack2D: ...
    def set_is_setup(self, is_setup: bool) -> None: ...
    def get_is_setup(self) -> bool: ...
    def set_execution_mode(self, execution_mode: int) -> None: ...
    def get_execution_mode(self) -> int: ...
    def clamp_angle(self, angle: float, min: float, max: float, invert: bool) -> float: ...
    def set_editor_draw_gizmo(self, draw_gizmo: bool) -> None: ...
    def get_editor_draw_gizmo(self) -> bool: ...

    # Properties
    enabled: bool
    execution_mode: int


class SkeletonModification2DCCDIK(TypeInUse(SkeletonModification2D)):
    def __init__(self): ...

    # Methods
    def set_target_node(self, target_nodepath: NodePath | str) -> None: ...
    def get_target_node(self) -> NodePath: ...
    def set_tip_node(self, tip_nodepath: NodePath | str) -> None: ...
    def get_tip_node(self) -> NodePath: ...
    def set_ccdik_data_chain_length(self, length: int) -> None: ...
    def get_ccdik_data_chain_length(self) -> int: ...
    def set_ccdik_joint_bone2d_node(self, joint_idx: int, bone2d_nodepath: NodePath | str) -> None: ...
    def get_ccdik_joint_bone2d_node(self, joint_idx: int) -> NodePath: ...
    def set_ccdik_joint_bone_index(self, joint_idx: int, bone_idx: int) -> None: ...
    def get_ccdik_joint_bone_index(self, joint_idx: int) -> int: ...
    def set_ccdik_joint_rotate_from_joint(self, joint_idx: int, rotate_from_joint: bool) -> None: ...
    def get_ccdik_joint_rotate_from_joint(self, joint_idx: int) -> bool: ...
    def set_ccdik_joint_enable_constraint(self, joint_idx: int, enable_constraint: bool) -> None: ...
    def get_ccdik_joint_enable_constraint(self, joint_idx: int) -> bool: ...
    def set_ccdik_joint_constraint_angle_min(self, joint_idx: int, angle_min: float) -> None: ...
    def get_ccdik_joint_constraint_angle_min(self, joint_idx: int) -> float: ...
    def set_ccdik_joint_constraint_angle_max(self, joint_idx: int, angle_max: float) -> None: ...
    def get_ccdik_joint_constraint_angle_max(self, joint_idx: int) -> float: ...
    def set_ccdik_joint_constraint_angle_invert(self, joint_idx: int, invert: bool) -> None: ...
    def get_ccdik_joint_constraint_angle_invert(self, joint_idx: int) -> bool: ...

    # Properties
    target_nodepath: NodePath
    tip_nodepath: NodePath
    ccdik_data_chain_length: int


class SkeletonModification2DFABRIK(TypeInUse(SkeletonModification2D)):
    def __init__(self): ...

    # Methods
    def set_target_node(self, target_nodepath: NodePath | str) -> None: ...
    def get_target_node(self) -> NodePath: ...
    def set_fabrik_data_chain_length(self, length: int) -> None: ...
    def get_fabrik_data_chain_length(self) -> int: ...
    def set_fabrik_joint_bone2d_node(self, joint_idx: int, bone2d_nodepath: NodePath | str) -> None: ...
    def get_fabrik_joint_bone2d_node(self, joint_idx: int) -> NodePath: ...
    def set_fabrik_joint_bone_index(self, joint_idx: int, bone_idx: int) -> None: ...
    def get_fabrik_joint_bone_index(self, joint_idx: int) -> int: ...
    def set_fabrik_joint_magnet_position(self, joint_idx: int, magnet_position: Vector2) -> None: ...
    def get_fabrik_joint_magnet_position(self, joint_idx: int) -> Vector2: ...
    def set_fabrik_joint_use_target_rotation(self, joint_idx: int, use_target_rotation: bool) -> None: ...
    def get_fabrik_joint_use_target_rotation(self, joint_idx: int) -> bool: ...

    # Properties
    target_nodepath: NodePath
    fabrik_data_chain_length: int


class SkeletonModification2DJiggle(TypeInUse(SkeletonModification2D)):
    def __init__(self): ...

    # Methods
    def set_target_node(self, target_nodepath: NodePath | str) -> None: ...
    def get_target_node(self) -> NodePath: ...
    def set_jiggle_data_chain_length(self, length: int) -> None: ...
    def get_jiggle_data_chain_length(self) -> int: ...
    def set_stiffness(self, stiffness: float) -> None: ...
    def get_stiffness(self) -> float: ...
    def set_mass(self, mass: float) -> None: ...
    def get_mass(self) -> float: ...
    def set_damping(self, damping: float) -> None: ...
    def get_damping(self) -> float: ...
    def set_use_gravity(self, use_gravity: bool) -> None: ...
    def get_use_gravity(self) -> bool: ...
    def set_gravity(self, gravity: Vector2) -> None: ...
    def get_gravity(self) -> Vector2: ...
    def set_use_colliders(self, use_colliders: bool) -> None: ...
    def get_use_colliders(self) -> bool: ...
    def set_collision_mask(self, collision_mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_jiggle_joint_bone2d_node(self, joint_idx: int, bone2d_node: NodePath | str) -> None: ...
    def get_jiggle_joint_bone2d_node(self, joint_idx: int) -> NodePath: ...
    def set_jiggle_joint_bone_index(self, joint_idx: int, bone_idx: int) -> None: ...
    def get_jiggle_joint_bone_index(self, joint_idx: int) -> int: ...
    def set_jiggle_joint_override(self, joint_idx: int, override: bool) -> None: ...
    def get_jiggle_joint_override(self, joint_idx: int) -> bool: ...
    def set_jiggle_joint_stiffness(self, joint_idx: int, stiffness: float) -> None: ...
    def get_jiggle_joint_stiffness(self, joint_idx: int) -> float: ...
    def set_jiggle_joint_mass(self, joint_idx: int, mass: float) -> None: ...
    def get_jiggle_joint_mass(self, joint_idx: int) -> float: ...
    def set_jiggle_joint_damping(self, joint_idx: int, damping: float) -> None: ...
    def get_jiggle_joint_damping(self, joint_idx: int) -> float: ...
    def set_jiggle_joint_use_gravity(self, joint_idx: int, use_gravity: bool) -> None: ...
    def get_jiggle_joint_use_gravity(self, joint_idx: int) -> bool: ...
    def set_jiggle_joint_gravity(self, joint_idx: int, gravity: Vector2) -> None: ...
    def get_jiggle_joint_gravity(self, joint_idx: int) -> Vector2: ...

    # Properties
    target_nodepath: NodePath
    jiggle_data_chain_length: int
    stiffness: float
    mass: float
    damping: float
    use_gravity: bool
    gravity: Vector2


class SkeletonModification2DLookAt(TypeInUse(SkeletonModification2D)):
    def __init__(self): ...

    # Methods
    def set_bone2d_node(self, bone2d_nodepath: NodePath | str) -> None: ...
    def get_bone2d_node(self) -> NodePath: ...
    def set_bone_index(self, bone_idx: int) -> None: ...
    def get_bone_index(self) -> int: ...
    def set_target_node(self, target_nodepath: NodePath | str) -> None: ...
    def get_target_node(self) -> NodePath: ...
    def set_additional_rotation(self, rotation: float) -> None: ...
    def get_additional_rotation(self) -> float: ...
    def set_enable_constraint(self, enable_constraint: bool) -> None: ...
    def get_enable_constraint(self) -> bool: ...
    def set_constraint_angle_min(self, angle_min: float) -> None: ...
    def get_constraint_angle_min(self) -> float: ...
    def set_constraint_angle_max(self, angle_max: float) -> None: ...
    def get_constraint_angle_max(self) -> float: ...
    def set_constraint_angle_invert(self, invert: bool) -> None: ...
    def get_constraint_angle_invert(self) -> bool: ...

    # Properties
    bone_index: int
    bone2d_node: NodePath
    target_nodepath: NodePath


class SkeletonModification2DPhysicalBones(TypeInUse(SkeletonModification2D)):
    def __init__(self): ...

    # Methods
    def set_physical_bone_chain_length(self, length: int) -> None: ...
    def get_physical_bone_chain_length(self) -> int: ...
    def set_physical_bone_node(self, joint_idx: int, physicalbone2d_node: NodePath | str) -> None: ...
    def get_physical_bone_node(self, joint_idx: int) -> NodePath: ...
    def fetch_physical_bones(self) -> None: ...
    def start_simulation(self, bones: GDArray = []) -> None: ...
    def stop_simulation(self, bones: GDArray = []) -> None: ...

    # Properties
    physical_bone_chain_length: int


class SkeletonModification2DStackHolder(TypeInUse(SkeletonModification2D)):
    def __init__(self): ...

    # Methods
    def set_held_modification_stack(self, held_modification_stack: SkeletonModificationStack2D) -> None: ...
    def get_held_modification_stack(self) -> SkeletonModificationStack2D: ...


class SkeletonModification2DTwoBoneIK(TypeInUse(SkeletonModification2D)):
    def __init__(self): ...

    # Methods
    def set_target_node(self, target_nodepath: NodePath | str) -> None: ...
    def get_target_node(self) -> NodePath: ...
    def set_target_minimum_distance(self, minimum_distance: float) -> None: ...
    def get_target_minimum_distance(self) -> float: ...
    def set_target_maximum_distance(self, maximum_distance: float) -> None: ...
    def get_target_maximum_distance(self) -> float: ...
    def set_flip_bend_direction(self, flip_direction: bool) -> None: ...
    def get_flip_bend_direction(self) -> bool: ...
    def set_joint_one_bone2d_node(self, bone2d_node: NodePath | str) -> None: ...
    def get_joint_one_bone2d_node(self) -> NodePath: ...
    def set_joint_one_bone_idx(self, bone_idx: int) -> None: ...
    def get_joint_one_bone_idx(self) -> int: ...
    def set_joint_two_bone2d_node(self, bone2d_node: NodePath | str) -> None: ...
    def get_joint_two_bone2d_node(self) -> NodePath: ...
    def set_joint_two_bone_idx(self, bone_idx: int) -> None: ...
    def get_joint_two_bone_idx(self) -> int: ...

    # Properties
    target_nodepath: NodePath
    target_minimum_distance: float
    target_maximum_distance: float
    flip_bend_direction: bool


class SkeletonModificationStack2D(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def setup(self) -> None: ...
    def execute(self, delta: float, execution_mode: int) -> None: ...
    def enable_all_modifications(self, enabled: bool) -> None: ...
    def get_modification(self, mod_idx: int) -> SkeletonModification2D: ...
    def add_modification(self, modification: SkeletonModification2D) -> None: ...
    def delete_modification(self, mod_idx: int) -> None: ...
    def set_modification(self, mod_idx: int, modification: SkeletonModification2D) -> None: ...
    def set_modification_count(self, count: int) -> None: ...
    def get_modification_count(self) -> int: ...
    def get_is_setup(self) -> bool: ...
    def set_enabled(self, enabled: bool) -> None: ...
    def get_enabled(self) -> bool: ...
    def set_strength(self, strength: float) -> None: ...
    def get_strength(self) -> float: ...
    def get_skeleton(self) -> Skeleton2D: ...

    # Properties
    enabled: bool
    strength: float
    modification_count: int


class SkeletonProfile(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class SkeletonProfile.TailDirection(Enum):
        TAIL_DIRECTION_AVERAGE_CHILDREN: int
        TAIL_DIRECTION_SPECIFIC_CHILD: int
        TAIL_DIRECTION_END: int

    # Methods
    def set_root_bone(self, bone_name: StringName | str) -> None: ...
    def get_root_bone(self) -> StringName: ...
    def set_scale_base_bone(self, bone_name: StringName | str) -> None: ...
    def get_scale_base_bone(self) -> StringName: ...
    def set_group_size(self, size: int) -> None: ...
    def get_group_size(self) -> int: ...
    def get_group_name(self, group_idx: int) -> StringName: ...
    def set_group_name(self, group_idx: int, group_name: StringName | str) -> None: ...
    def get_texture(self, group_idx: int) -> Texture2D: ...
    def set_texture(self, group_idx: int, texture: Texture2D) -> None: ...
    def set_bone_size(self, size: int) -> None: ...
    def get_bone_size(self) -> int: ...
    def find_bone(self, bone_name: StringName | str) -> int: ...
    def get_bone_name(self, bone_idx: int) -> StringName: ...
    def set_bone_name(self, bone_idx: int, bone_name: StringName | str) -> None: ...
    def get_bone_parent(self, bone_idx: int) -> StringName: ...
    def set_bone_parent(self, bone_idx: int, bone_parent: StringName | str) -> None: ...
    def get_tail_direction(self, bone_idx: int) -> SkeletonProfile.TailDirection: ...
    def set_tail_direction(self, bone_idx: int, tail_direction: SkeletonProfile.TailDirection) -> None: ...
    def get_bone_tail(self, bone_idx: int) -> StringName: ...
    def set_bone_tail(self, bone_idx: int, bone_tail: StringName | str) -> None: ...
    def get_reference_pose(self, bone_idx: int) -> Transform3D: ...
    def set_reference_pose(self, bone_idx: int, bone_name: Transform3D) -> None: ...
    def get_handle_offset(self, bone_idx: int) -> Vector2: ...
    def set_handle_offset(self, bone_idx: int, handle_offset: Vector2) -> None: ...
    def get_group(self, bone_idx: int) -> StringName: ...
    def set_group(self, bone_idx: int, group: StringName | str) -> None: ...

    # Signals
    def profile_updated(self) -> None: ...

    # Properties
    root_bone: StringName
    scale_base_bone: StringName
    group_size: int
    bone_size: int


class SkeletonProfileHumanoid(TypeInUse(SkeletonProfile)):
    def __init__(self): ...


class Skin(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_bind_count(self, bind_count: int) -> None: ...
    def get_bind_count(self) -> int: ...
    def add_bind(self, bone: int, pose: Transform3D) -> None: ...
    def add_named_bind(self, name: GDString | str, pose: Transform3D) -> None: ...
    def set_bind_pose(self, bind_index: int, pose: Transform3D) -> None: ...
    def get_bind_pose(self, bind_index: int) -> Transform3D: ...
    def set_bind_name(self, bind_index: int, name: StringName | str) -> None: ...
    def get_bind_name(self, bind_index: int) -> StringName: ...
    def set_bind_bone(self, bind_index: int, bone: int) -> None: ...
    def get_bind_bone(self, bind_index: int) -> int: ...
    def clear_binds(self) -> None: ...


class SkinReference(TypeInUse(RefCounted)):

    # Methods
    def get_skeleton(self) -> RID: ...
    def get_skin(self) -> Skin: ...


class Sky(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class Sky.RadianceSize(Enum):
        RADIANCE_SIZE_32: int
        RADIANCE_SIZE_64: int
        RADIANCE_SIZE_128: int
        RADIANCE_SIZE_256: int
        RADIANCE_SIZE_512: int
        RADIANCE_SIZE_1024: int
        RADIANCE_SIZE_2048: int
        RADIANCE_SIZE_MAX: int
    class Sky.ProcessMode(Enum):
        PROCESS_MODE_AUTOMATIC: int
        PROCESS_MODE_QUALITY: int
        PROCESS_MODE_INCREMENTAL: int
        PROCESS_MODE_REALTIME: int

    # Methods
    def set_radiance_size(self, size: Sky.RadianceSize) -> None: ...
    def get_radiance_size(self) -> Sky.RadianceSize: ...
    def set_process_mode(self, mode: Sky.ProcessMode) -> None: ...
    def get_process_mode(self) -> Sky.ProcessMode: ...
    def set_material(self, material: Material) -> None: ...
    def get_material(self) -> Material: ...

    # Properties
    sky_material: ShaderMaterial | PanoramaSkyMaterial | ProceduralSkyMaterial | PhysicalSkyMaterial
    process_mode: int
    radiance_size: int


class SphereShape3D(TypeInUse(Shape3D)):
    def __init__(self): ...

    # Methods
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...

    # Properties
    radius: float


class SpriteFrames(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def add_animation(self, anim: StringName | str) -> None: ...
    def has_animation(self, anim: StringName | str) -> bool: ...
    def remove_animation(self, anim: StringName | str) -> None: ...
    def rename_animation(self, anim: StringName | str, newname: StringName | str) -> None: ...
    def get_animation_names(self) -> PackedStringArray: ...
    def set_animation_speed(self, anim: StringName | str, fps: float) -> None: ...
    def get_animation_speed(self, anim: StringName | str) -> float: ...
    def set_animation_loop(self, anim: StringName | str, loop: bool) -> None: ...
    def get_animation_loop(self, anim: StringName | str) -> bool: ...
    def add_frame(self, anim: StringName | str, texture: Texture2D, duration: float = 1.0, at_position: int = -1) -> None: ...
    def set_frame(self, anim: StringName | str, idx: int, texture: Texture2D, duration: float = 1.0) -> None: ...
    def remove_frame(self, anim: StringName | str, idx: int) -> None: ...
    def get_frame_count(self, anim: StringName | str) -> int: ...
    def get_frame_texture(self, anim: StringName | str, idx: int) -> Texture2D: ...
    def get_frame_duration(self, anim: StringName | str, idx: int) -> float: ...
    def clear(self, anim: StringName | str) -> None: ...
    def clear_all(self) -> None: ...

    # Properties
    animations: GDArray


class StreamPeer(TypeInUse(RefCounted)):

    # Methods
    def put_data(self, data: PackedByteArray) -> Error: ...
    def put_partial_data(self, data: PackedByteArray) -> GDArray: ...
    def get_data(self, bytes: int) -> GDArray: ...
    def get_partial_data(self, bytes: int) -> GDArray: ...
    def get_available_bytes(self) -> int: ...
    def set_big_endian(self, enable: bool) -> None: ...
    def is_big_endian_enabled(self) -> bool: ...
    def put_8(self, value: int) -> None: ...
    def put_u8(self, value: int) -> None: ...
    def put_16(self, value: int) -> None: ...
    def put_u16(self, value: int) -> None: ...
    def put_32(self, value: int) -> None: ...
    def put_u32(self, value: int) -> None: ...
    def put_64(self, value: int) -> None: ...
    def put_u64(self, value: int) -> None: ...
    def put_float(self, value: float) -> None: ...
    def put_double(self, value: float) -> None: ...
    def put_string(self, value: GDString | str) -> None: ...
    def put_utf8_string(self, value: GDString | str) -> None: ...
    def put_var(self, value: GDAny, full_objects: bool = False) -> None: ...
    def get_8(self) -> int: ...
    def get_u8(self) -> int: ...
    def get_16(self) -> int: ...
    def get_u16(self) -> int: ...
    def get_32(self) -> int: ...
    def get_u32(self) -> int: ...
    def get_64(self) -> int: ...
    def get_u64(self) -> int: ...
    def get_float(self) -> float: ...
    def get_double(self) -> float: ...
    def get_string(self, bytes: int = -1) -> GDString: ...
    def get_utf8_string(self, bytes: int = -1) -> GDString: ...
    def get_var(self, allow_objects: bool = False) -> GDAny: ...

    # Properties
    big_endian: bool


class StreamPeerBuffer(TypeInUse(StreamPeer)):
    def __init__(self): ...

    # Methods
    def seek(self, position: int) -> None: ...
    def get_size(self) -> int: ...
    def get_position(self) -> int: ...
    def resize(self, size: int) -> None: ...
    def set_data_array(self, data: PackedByteArray) -> None: ...
    def get_data_array(self) -> PackedByteArray: ...
    def clear(self) -> None: ...
    def duplicate(self) -> StreamPeerBuffer: ...

    # Properties
    data_array: PackedByteArray


class StreamPeerExtension(TypeInUse(StreamPeer)):
    def __init__(self): ...


class StreamPeerGZIP(TypeInUse(StreamPeer)):
    def __init__(self): ...

    # Methods
    def start_compression(self, use_deflate: bool = False, buffer_size: int = 65535) -> Error: ...
    def start_decompression(self, use_deflate: bool = False, buffer_size: int = 65535) -> Error: ...
    def finish(self) -> Error: ...
    def clear(self) -> None: ...


class StreamPeerTCP(TypeInUse(StreamPeer)):
    def __init__(self): ...

    # Enums
    class StreamPeerTCP.Status(Enum):
        STATUS_NONE: int
        STATUS_CONNECTING: int
        STATUS_CONNECTED: int
        STATUS_ERROR: int

    # Methods
    def bind(self, port: int, host: GDString | str = "*") -> Error: ...
    def connect_to_host(self, host: GDString | str, port: int) -> Error: ...
    def poll(self) -> Error: ...
    def get_status(self) -> StreamPeerTCP.Status: ...
    def get_connected_host(self) -> GDString: ...
    def get_connected_port(self) -> int: ...
    def get_local_port(self) -> int: ...
    def disconnect_from_host(self) -> None: ...
    def set_no_delay(self, enabled: bool) -> None: ...


class StreamPeerTLS(TypeInUse(StreamPeer)):
    def __init__(self): ...

    # Enums
    class StreamPeerTLS.Status(Enum):
        STATUS_DISCONNECTED: int
        STATUS_HANDSHAKING: int
        STATUS_CONNECTED: int
        STATUS_ERROR: int
        STATUS_ERROR_HOSTNAME_MISMATCH: int

    # Methods
    def poll(self) -> None: ...
    def accept_stream(self, stream: StreamPeer, server_options: TLSOptions) -> Error: ...
    def connect_to_stream(self, stream: StreamPeer, common_name: GDString | str, client_options: TLSOptions = None) -> Error: ...
    def get_status(self) -> StreamPeerTLS.Status: ...
    def get_stream(self) -> StreamPeer: ...
    def disconnect_from_stream(self) -> None: ...


class StyleBox(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_minimum_size(self) -> Vector2: ...
    def set_content_margin(self, margin: Side, offset: float) -> None: ...
    def set_content_margin_all(self, offset: float) -> None: ...
    def get_content_margin(self, margin: Side) -> float: ...
    def get_margin(self, margin: Side) -> float: ...
    def get_offset(self) -> Vector2: ...
    def draw(self, canvas_item: RID, rect: Rect2) -> None: ...
    def get_current_item_drawn(self) -> CanvasItem: ...
    def test_mask(self, point: Vector2, rect: Rect2) -> bool: ...

    # Properties
    content_margin_left: float
    content_margin_top: float
    content_margin_right: float
    content_margin_bottom: float


class StyleBoxEmpty(TypeInUse(StyleBox)):
    def __init__(self): ...


class StyleBoxFlat(TypeInUse(StyleBox)):
    def __init__(self): ...

    # Methods
    def set_bg_color(self, color: Color) -> None: ...
    def get_bg_color(self) -> Color: ...
    def set_border_color(self, color: Color) -> None: ...
    def get_border_color(self) -> Color: ...
    def set_border_width_all(self, width: int) -> None: ...
    def get_border_width_min(self) -> int: ...
    def set_border_width(self, margin: Side, width: int) -> None: ...
    def get_border_width(self, margin: Side) -> int: ...
    def set_border_blend(self, blend: bool) -> None: ...
    def get_border_blend(self) -> bool: ...
    def set_corner_radius_all(self, radius: int) -> None: ...
    def set_corner_radius(self, corner: Corner, radius: int) -> None: ...
    def get_corner_radius(self, corner: Corner) -> int: ...
    def set_expand_margin(self, margin: Side, size: float) -> None: ...
    def set_expand_margin_all(self, size: float) -> None: ...
    def get_expand_margin(self, margin: Side) -> float: ...
    def set_draw_center(self, draw_center: bool) -> None: ...
    def is_draw_center_enabled(self) -> bool: ...
    def set_skew(self, skew: Vector2) -> None: ...
    def get_skew(self) -> Vector2: ...
    def set_shadow_color(self, color: Color) -> None: ...
    def get_shadow_color(self) -> Color: ...
    def set_shadow_size(self, size: int) -> None: ...
    def get_shadow_size(self) -> int: ...
    def set_shadow_offset(self, offset: Vector2) -> None: ...
    def get_shadow_offset(self) -> Vector2: ...
    def set_anti_aliased(self, anti_aliased: bool) -> None: ...
    def is_anti_aliased(self) -> bool: ...
    def set_aa_size(self, size: float) -> None: ...
    def get_aa_size(self) -> float: ...
    def set_corner_detail(self, detail: int) -> None: ...
    def get_corner_detail(self) -> int: ...

    # Properties
    bg_color: Color
    draw_center: bool
    skew: Vector2
    border_width_left: int
    border_width_top: int
    border_width_right: int
    border_width_bottom: int
    border_color: Color
    border_blend: bool
    corner_radius_top_left: int
    corner_radius_top_right: int
    corner_radius_bottom_right: int
    corner_radius_bottom_left: int
    corner_detail: int
    expand_margin_left: float
    expand_margin_top: float
    expand_margin_right: float
    expand_margin_bottom: float
    shadow_color: Color
    shadow_size: int
    shadow_offset: Vector2
    anti_aliasing: bool
    anti_aliasing_size: float


class StyleBoxLine(TypeInUse(StyleBox)):
    def __init__(self): ...

    # Methods
    def set_color(self, color: Color) -> None: ...
    def get_color(self) -> Color: ...
    def set_thickness(self, thickness: int) -> None: ...
    def get_thickness(self) -> int: ...
    def set_grow_begin(self, offset: float) -> None: ...
    def get_grow_begin(self) -> float: ...
    def set_grow_end(self, offset: float) -> None: ...
    def get_grow_end(self) -> float: ...
    def set_vertical(self, vertical: bool) -> None: ...
    def is_vertical(self) -> bool: ...

    # Properties
    color: Color
    grow_begin: float
    grow_end: float
    thickness: int
    vertical: bool


class StyleBoxTexture(TypeInUse(StyleBox)):
    def __init__(self): ...

    # Enums
    class StyleBoxTexture.AxisStretchMode(Enum):
        AXIS_STRETCH_MODE_STRETCH: int
        AXIS_STRETCH_MODE_TILE: int
        AXIS_STRETCH_MODE_TILE_FIT: int

    # Methods
    def set_texture(self, texture: Texture2D) -> None: ...
    def get_texture(self) -> Texture2D: ...
    def set_texture_margin(self, margin: Side, size: float) -> None: ...
    def set_texture_margin_all(self, size: float) -> None: ...
    def get_texture_margin(self, margin: Side) -> float: ...
    def set_expand_margin(self, margin: Side, size: float) -> None: ...
    def set_expand_margin_all(self, size: float) -> None: ...
    def get_expand_margin(self, margin: Side) -> float: ...
    def set_region_rect(self, region: Rect2) -> None: ...
    def get_region_rect(self) -> Rect2: ...
    def set_draw_center(self, enable: bool) -> None: ...
    def is_draw_center_enabled(self) -> bool: ...
    def set_modulate(self, color: Color) -> None: ...
    def get_modulate(self) -> Color: ...
    def set_h_axis_stretch_mode(self, mode: StyleBoxTexture.AxisStretchMode) -> None: ...
    def get_h_axis_stretch_mode(self) -> StyleBoxTexture.AxisStretchMode: ...
    def set_v_axis_stretch_mode(self, mode: StyleBoxTexture.AxisStretchMode) -> None: ...
    def get_v_axis_stretch_mode(self) -> StyleBoxTexture.AxisStretchMode: ...

    # Properties
    texture: Texture2D
    texture_margin_left: float
    texture_margin_top: float
    texture_margin_right: float
    texture_margin_bottom: float
    expand_margin_left: float
    expand_margin_top: float
    expand_margin_right: float
    expand_margin_bottom: float
    axis_stretch_horizontal: int
    axis_stretch_vertical: int
    region_rect: Rect2
    modulate_color: Color
    draw_center: bool


class SurfaceTool(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class SurfaceTool.CustomFormat(Enum):
        CUSTOM_RGBA8_UNORM: int
        CUSTOM_RGBA8_SNORM: int
        CUSTOM_RG_HALF: int
        CUSTOM_RGBA_HALF: int
        CUSTOM_R_FLOAT: int
        CUSTOM_RG_FLOAT: int
        CUSTOM_RGB_FLOAT: int
        CUSTOM_RGBA_FLOAT: int
        CUSTOM_MAX: int
    class SurfaceTool.SkinWeightCount(Enum):
        SKIN_4_WEIGHTS: int
        SKIN_8_WEIGHTS: int

    # Methods
    def set_skin_weight_count(self, count: SurfaceTool.SkinWeightCount) -> None: ...
    def get_skin_weight_count(self) -> SurfaceTool.SkinWeightCount: ...
    def set_custom_format(self, channel_index: int, format: SurfaceTool.CustomFormat) -> None: ...
    def get_custom_format(self, channel_index: int) -> SurfaceTool.CustomFormat: ...
    def begin(self, primitive: Mesh.PrimitiveType) -> None: ...
    def add_vertex(self, vertex: Vector3) -> None: ...
    def set_color(self, color: Color) -> None: ...
    def set_normal(self, normal: Vector3) -> None: ...
    def set_tangent(self, tangent: Plane) -> None: ...
    def set_uv(self, uv: Vector2) -> None: ...
    def set_uv2(self, uv2: Vector2) -> None: ...
    def set_bones(self, bones: PackedInt32Array) -> None: ...
    def set_weights(self, weights: PackedFloat32Array) -> None: ...
    def set_custom(self, channel_index: int, custom_color: Color) -> None: ...
    def set_smooth_group(self, index: int) -> None: ...
    def add_triangle_fan(self, vertices: PackedVector3Array, uvs: PackedVector2Array = PackedVector2Array(), colors: PackedColorArray = PackedColorArray(), uv2s: PackedVector2Array = PackedVector2Array(), normals: PackedVector3Array = PackedVector3Array(), tangents: GDArray = Array[Plane]([])) -> None: ...
    def add_index(self, index: int) -> None: ...
    def index(self) -> None: ...
    def deindex(self) -> None: ...
    def generate_normals(self, flip: bool = False) -> None: ...
    def generate_tangents(self) -> None: ...
    def optimize_indices_for_cache(self) -> None: ...
    def get_aabb(self) -> AABB: ...
    def generate_lod(self, nd_threshold: float, target_index_count: int = 3) -> PackedInt32Array: ...
    def set_material(self, material: Material) -> None: ...
    def get_primitive_type(self) -> Mesh.PrimitiveType: ...
    def clear(self) -> None: ...
    def create_from(self, existing: Mesh, surface: int) -> None: ...
    def create_from_blend_shape(self, existing: Mesh, surface: int, blend_shape: GDString | str) -> None: ...
    def append_from(self, existing: Mesh, surface: int, transform: Transform3D) -> None: ...
    def commit(self, existing: ArrayMesh = None, flags: int = 0) -> ArrayMesh: ...
    def commit_to_arrays(self) -> GDArray: ...


class SyntaxHighlighter(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_line_syntax_highlighting(self, line: int) -> GDDictionary: ...
    def update_cache(self) -> None: ...
    def clear_highlighting_cache(self) -> None: ...
    def get_text_edit(self) -> TextEdit: ...


class TCPServer(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def listen(self, port: int, bind_address: GDString | str = "*") -> Error: ...
    def is_connection_available(self) -> bool: ...
    def is_listening(self) -> bool: ...
    def get_local_port(self) -> int: ...
    def take_connection(self) -> StreamPeerTCP: ...
    def stop(self) -> None: ...


class TLSOptions(TypeInUse(RefCounted)):

    # Methods
    def client(self, trusted_chain: X509Certificate = None, common_name_override: GDString | str = "") -> TLSOptions: ...
    def client_unsafe(self, trusted_chain: X509Certificate = None) -> TLSOptions: ...
    def server(self, key: CryptoKey, certificate: X509Certificate) -> TLSOptions: ...


class TextLine(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def clear(self) -> None: ...
    def set_direction(self, direction: TextServer.Direction) -> None: ...
    def get_direction(self) -> TextServer.Direction: ...
    def set_orientation(self, orientation: TextServer.Orientation) -> None: ...
    def get_orientation(self) -> TextServer.Orientation: ...
    def set_preserve_invalid(self, enabled: bool) -> None: ...
    def get_preserve_invalid(self) -> bool: ...
    def set_preserve_control(self, enabled: bool) -> None: ...
    def get_preserve_control(self) -> bool: ...
    def set_bidi_override(self, override: GDArray) -> None: ...
    def add_string(self, text: GDString | str, font: Font, font_size: int, language: GDString | str = "", meta: GDAny = None) -> bool: ...
    def add_object(self, key: GDAny, size: Vector2, inline_align: InlineAlignment = 5, length: int = 1, baseline: float = 0.0) -> bool: ...
    def resize_object(self, key: GDAny, size: Vector2, inline_align: InlineAlignment = 5, baseline: float = 0.0) -> bool: ...
    def set_width(self, width: float) -> None: ...
    def get_width(self) -> float: ...
    def set_horizontal_alignment(self, alignment: HorizontalAlignment) -> None: ...
    def get_horizontal_alignment(self) -> HorizontalAlignment: ...
    def tab_align(self, tab_stops: PackedFloat32Array) -> None: ...
    def set_flags(self, flags: TextServer.JustificationFlag) -> None: ...
    def get_flags(self) -> TextServer.JustificationFlag: ...
    def set_text_overrun_behavior(self, overrun_behavior: TextServer.OverrunBehavior) -> None: ...
    def get_text_overrun_behavior(self) -> TextServer.OverrunBehavior: ...
    def get_objects(self) -> GDArray: ...
    def get_object_rect(self, key: GDAny) -> Rect2: ...
    def get_size(self) -> Vector2: ...
    def get_rid(self) -> RID: ...
    def get_line_ascent(self) -> float: ...
    def get_line_descent(self) -> float: ...
    def get_line_width(self) -> float: ...
    def get_line_underline_position(self) -> float: ...
    def get_line_underline_thickness(self) -> float: ...
    def draw(self, canvas: RID, pos: Vector2, color: Color = Color(1, 1, 1, 1)) -> None: ...
    def draw_outline(self, canvas: RID, pos: Vector2, outline_size: int = 1, color: Color = Color(1, 1, 1, 1)) -> None: ...
    def hit_test(self, coords: float) -> int: ...

    # Properties
    direction: int
    orientation: int
    preserve_invalid: bool
    preserve_control: bool
    width: float
    alignment: int
    flags: int
    text_overrun_behavior: int


class TextParagraph(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def clear(self) -> None: ...
    def set_direction(self, direction: TextServer.Direction) -> None: ...
    def get_direction(self) -> TextServer.Direction: ...
    def set_custom_punctuation(self, custom_punctuation: GDString | str) -> None: ...
    def get_custom_punctuation(self) -> GDString: ...
    def set_orientation(self, orientation: TextServer.Orientation) -> None: ...
    def get_orientation(self) -> TextServer.Orientation: ...
    def set_preserve_invalid(self, enabled: bool) -> None: ...
    def get_preserve_invalid(self) -> bool: ...
    def set_preserve_control(self, enabled: bool) -> None: ...
    def get_preserve_control(self) -> bool: ...
    def set_bidi_override(self, override: GDArray) -> None: ...
    def set_dropcap(self, text: GDString | str, font: Font, font_size: int, dropcap_margins: Rect2 = Rect2(0, 0, 0, 0), language: GDString | str = "") -> bool: ...
    def clear_dropcap(self) -> None: ...
    def add_string(self, text: GDString | str, font: Font, font_size: int, language: GDString | str = "", meta: GDAny = None) -> bool: ...
    def add_object(self, key: GDAny, size: Vector2, inline_align: InlineAlignment = 5, length: int = 1, baseline: float = 0.0) -> bool: ...
    def resize_object(self, key: GDAny, size: Vector2, inline_align: InlineAlignment = 5, baseline: float = 0.0) -> bool: ...
    def set_alignment(self, alignment: HorizontalAlignment) -> None: ...
    def get_alignment(self) -> HorizontalAlignment: ...
    def tab_align(self, tab_stops: PackedFloat32Array) -> None: ...
    def set_break_flags(self, flags: TextServer.LineBreakFlag) -> None: ...
    def get_break_flags(self) -> TextServer.LineBreakFlag: ...
    def set_justification_flags(self, flags: TextServer.JustificationFlag) -> None: ...
    def get_justification_flags(self) -> TextServer.JustificationFlag: ...
    def set_text_overrun_behavior(self, overrun_behavior: TextServer.OverrunBehavior) -> None: ...
    def get_text_overrun_behavior(self) -> TextServer.OverrunBehavior: ...
    def set_width(self, width: float) -> None: ...
    def get_width(self) -> float: ...
    def get_non_wrapped_size(self) -> Vector2: ...
    def get_size(self) -> Vector2: ...
    def get_rid(self) -> RID: ...
    def get_line_rid(self, line: int) -> RID: ...
    def get_dropcap_rid(self) -> RID: ...
    def get_line_count(self) -> int: ...
    def set_max_lines_visible(self, max_lines_visible: int) -> None: ...
    def get_max_lines_visible(self) -> int: ...
    def get_line_objects(self, line: int) -> GDArray: ...
    def get_line_object_rect(self, line: int, key: GDAny) -> Rect2: ...
    def get_line_size(self, line: int) -> Vector2: ...
    def get_line_range(self, line: int) -> Vector2i: ...
    def get_line_ascent(self, line: int) -> float: ...
    def get_line_descent(self, line: int) -> float: ...
    def get_line_width(self, line: int) -> float: ...
    def get_line_underline_position(self, line: int) -> float: ...
    def get_line_underline_thickness(self, line: int) -> float: ...
    def get_dropcap_size(self) -> Vector2: ...
    def get_dropcap_lines(self) -> int: ...
    def draw(self, canvas: RID, pos: Vector2, color: Color = Color(1, 1, 1, 1), dc_color: Color = Color(1, 1, 1, 1)) -> None: ...
    def draw_outline(self, canvas: RID, pos: Vector2, outline_size: int = 1, color: Color = Color(1, 1, 1, 1), dc_color: Color = Color(1, 1, 1, 1)) -> None: ...
    def draw_line(self, canvas: RID, pos: Vector2, line: int, color: Color = Color(1, 1, 1, 1)) -> None: ...
    def draw_line_outline(self, canvas: RID, pos: Vector2, line: int, outline_size: int = 1, color: Color = Color(1, 1, 1, 1)) -> None: ...
    def draw_dropcap(self, canvas: RID, pos: Vector2, color: Color = Color(1, 1, 1, 1)) -> None: ...
    def draw_dropcap_outline(self, canvas: RID, pos: Vector2, outline_size: int = 1, color: Color = Color(1, 1, 1, 1)) -> None: ...
    def hit_test(self, coords: Vector2) -> int: ...

    # Properties
    direction: int
    custom_punctuation: GDString
    orientation: int
    preserve_invalid: bool
    preserve_control: bool
    alignment: int
    break_flags: int
    justification_flags: int
    text_overrun_behavior: int
    width: float
    max_lines_visible: int


class TextServer(TypeInUse(RefCounted)):

    # Enums
    class TextServer.FontAntialiasing(Enum):
        FONT_ANTIALIASING_NONE: int
        FONT_ANTIALIASING_GRAY: int
        FONT_ANTIALIASING_LCD: int
    class TextServer.FontLCDSubpixelLayout(Enum):
        FONT_LCD_SUBPIXEL_LAYOUT_NONE: int
        FONT_LCD_SUBPIXEL_LAYOUT_HRGB: int
        FONT_LCD_SUBPIXEL_LAYOUT_HBGR: int
        FONT_LCD_SUBPIXEL_LAYOUT_VRGB: int
        FONT_LCD_SUBPIXEL_LAYOUT_VBGR: int
        FONT_LCD_SUBPIXEL_LAYOUT_MAX: int
    class TextServer.Direction(Enum):
        DIRECTION_AUTO: int
        DIRECTION_LTR: int
        DIRECTION_RTL: int
        DIRECTION_INHERITED: int
    class TextServer.Orientation(Enum):
        ORIENTATION_HORIZONTAL: int
        ORIENTATION_VERTICAL: int
    class TextServer.JustificationFlag(Enum):
        JUSTIFICATION_NONE: int
        JUSTIFICATION_KASHIDA: int
        JUSTIFICATION_WORD_BOUND: int
        JUSTIFICATION_TRIM_EDGE_SPACES: int
        JUSTIFICATION_AFTER_LAST_TAB: int
        JUSTIFICATION_CONSTRAIN_ELLIPSIS: int
        JUSTIFICATION_SKIP_LAST_LINE: int
        JUSTIFICATION_SKIP_LAST_LINE_WITH_VISIBLE_CHARS: int
        JUSTIFICATION_DO_NOT_SKIP_SINGLE_LINE: int
    class TextServer.AutowrapMode(Enum):
        AUTOWRAP_OFF: int
        AUTOWRAP_ARBITRARY: int
        AUTOWRAP_WORD: int
        AUTOWRAP_WORD_SMART: int
    class TextServer.LineBreakFlag(Enum):
        BREAK_NONE: int
        BREAK_MANDATORY: int
        BREAK_WORD_BOUND: int
        BREAK_GRAPHEME_BOUND: int
        BREAK_ADAPTIVE: int
        BREAK_TRIM_EDGE_SPACES: int
    class TextServer.VisibleCharactersBehavior(Enum):
        VC_CHARS_BEFORE_SHAPING: int
        VC_CHARS_AFTER_SHAPING: int
        VC_GLYPHS_AUTO: int
        VC_GLYPHS_LTR: int
        VC_GLYPHS_RTL: int
    class TextServer.OverrunBehavior(Enum):
        OVERRUN_NO_TRIMMING: int
        OVERRUN_TRIM_CHAR: int
        OVERRUN_TRIM_WORD: int
        OVERRUN_TRIM_ELLIPSIS: int
        OVERRUN_TRIM_WORD_ELLIPSIS: int
    class TextServer.TextOverrunFlag(Enum):
        OVERRUN_NO_TRIM: int
        OVERRUN_TRIM: int
        OVERRUN_TRIM_WORD_ONLY: int
        OVERRUN_ADD_ELLIPSIS: int
        OVERRUN_ENFORCE_ELLIPSIS: int
        OVERRUN_JUSTIFICATION_AWARE: int
    class TextServer.GraphemeFlag(Enum):
        GRAPHEME_IS_VALID: int
        GRAPHEME_IS_RTL: int
        GRAPHEME_IS_VIRTUAL: int
        GRAPHEME_IS_SPACE: int
        GRAPHEME_IS_BREAK_HARD: int
        GRAPHEME_IS_BREAK_SOFT: int
        GRAPHEME_IS_TAB: int
        GRAPHEME_IS_ELONGATION: int
        GRAPHEME_IS_PUNCTUATION: int
        GRAPHEME_IS_UNDERSCORE: int
        GRAPHEME_IS_CONNECTED: int
        GRAPHEME_IS_SAFE_TO_INSERT_TATWEEL: int
        GRAPHEME_IS_EMBEDDED_OBJECT: int
    class TextServer.Hinting(Enum):
        HINTING_NONE: int
        HINTING_LIGHT: int
        HINTING_NORMAL: int
    class TextServer.SubpixelPositioning(Enum):
        SUBPIXEL_POSITIONING_DISABLED: int
        SUBPIXEL_POSITIONING_AUTO: int
        SUBPIXEL_POSITIONING_ONE_HALF: int
        SUBPIXEL_POSITIONING_ONE_QUARTER: int
        SUBPIXEL_POSITIONING_ONE_HALF_MAX_SIZE: int
        SUBPIXEL_POSITIONING_ONE_QUARTER_MAX_SIZE: int
    class TextServer.Feature(Enum):
        FEATURE_SIMPLE_LAYOUT: int
        FEATURE_BIDI_LAYOUT: int
        FEATURE_VERTICAL_LAYOUT: int
        FEATURE_SHAPING: int
        FEATURE_KASHIDA_JUSTIFICATION: int
        FEATURE_BREAK_ITERATORS: int
        FEATURE_FONT_BITMAP: int
        FEATURE_FONT_DYNAMIC: int
        FEATURE_FONT_MSDF: int
        FEATURE_FONT_SYSTEM: int
        FEATURE_FONT_VARIABLE: int
        FEATURE_CONTEXT_SENSITIVE_CASE_CONVERSION: int
        FEATURE_USE_SUPPORT_DATA: int
        FEATURE_UNICODE_IDENTIFIERS: int
        FEATURE_UNICODE_SECURITY: int
    class TextServer.ContourPointTag(Enum):
        CONTOUR_CURVE_TAG_ON: int
        CONTOUR_CURVE_TAG_OFF_CONIC: int
        CONTOUR_CURVE_TAG_OFF_CUBIC: int
    class TextServer.SpacingType(Enum):
        SPACING_GLYPH: int
        SPACING_SPACE: int
        SPACING_TOP: int
        SPACING_BOTTOM: int
        SPACING_MAX: int
    class TextServer.FontStyle(Enum):
        FONT_BOLD: int
        FONT_ITALIC: int
        FONT_FIXED_WIDTH: int
    class TextServer.StructuredTextParser(Enum):
        STRUCTURED_TEXT_DEFAULT: int
        STRUCTURED_TEXT_URI: int
        STRUCTURED_TEXT_FILE: int
        STRUCTURED_TEXT_EMAIL: int
        STRUCTURED_TEXT_LIST: int
        STRUCTURED_TEXT_GDSCRIPT: int
        STRUCTURED_TEXT_CUSTOM: int

    # Methods
    def has_feature(self, feature: TextServer.Feature) -> bool: ...
    def get_name(self) -> GDString: ...
    def get_features(self) -> int: ...
    def load_support_data(self, filename: GDString | str) -> bool: ...
    def get_support_data_filename(self) -> GDString: ...
    def get_support_data_info(self) -> GDString: ...
    def save_support_data(self, filename: GDString | str) -> bool: ...
    def is_locale_right_to_left(self, locale: GDString | str) -> bool: ...
    def name_to_tag(self, name: GDString | str) -> int: ...
    def tag_to_name(self, tag: int) -> GDString: ...
    def has(self, rid: RID) -> bool: ...
    def free_rid(self, rid: RID) -> None: ...
    def create_font(self) -> RID: ...
    def font_set_data(self, font_rid: RID, data: PackedByteArray) -> None: ...
    def font_set_face_index(self, font_rid: RID, face_index: int) -> None: ...
    def font_get_face_index(self, font_rid: RID) -> int: ...
    def font_get_face_count(self, font_rid: RID) -> int: ...
    def font_set_style(self, font_rid: RID, style: TextServer.FontStyle) -> None: ...
    def font_get_style(self, font_rid: RID) -> TextServer.FontStyle: ...
    def font_set_name(self, font_rid: RID, name: GDString | str) -> None: ...
    def font_get_name(self, font_rid: RID) -> GDString: ...
    def font_get_ot_name_strings(self, font_rid: RID) -> GDDictionary: ...
    def font_set_style_name(self, font_rid: RID, name: GDString | str) -> None: ...
    def font_get_style_name(self, font_rid: RID) -> GDString: ...
    def font_set_weight(self, font_rid: RID, weight: int) -> None: ...
    def font_get_weight(self, font_rid: RID) -> int: ...
    def font_set_stretch(self, font_rid: RID, weight: int) -> None: ...
    def font_get_stretch(self, font_rid: RID) -> int: ...
    def font_set_antialiasing(self, font_rid: RID, antialiasing: TextServer.FontAntialiasing) -> None: ...
    def font_get_antialiasing(self, font_rid: RID) -> TextServer.FontAntialiasing: ...
    def font_set_generate_mipmaps(self, font_rid: RID, generate_mipmaps: bool) -> None: ...
    def font_get_generate_mipmaps(self, font_rid: RID) -> bool: ...
    def font_set_multichannel_signed_distance_field(self, font_rid: RID, msdf: bool) -> None: ...
    def font_is_multichannel_signed_distance_field(self, font_rid: RID) -> bool: ...
    def font_set_msdf_pixel_range(self, font_rid: RID, msdf_pixel_range: int) -> None: ...
    def font_get_msdf_pixel_range(self, font_rid: RID) -> int: ...
    def font_set_msdf_size(self, font_rid: RID, msdf_size: int) -> None: ...
    def font_get_msdf_size(self, font_rid: RID) -> int: ...
    def font_set_fixed_size(self, font_rid: RID, fixed_size: int) -> None: ...
    def font_get_fixed_size(self, font_rid: RID) -> int: ...
    def font_set_allow_system_fallback(self, font_rid: RID, allow_system_fallback: bool) -> None: ...
    def font_is_allow_system_fallback(self, font_rid: RID) -> bool: ...
    def font_set_force_autohinter(self, font_rid: RID, force_autohinter: bool) -> None: ...
    def font_is_force_autohinter(self, font_rid: RID) -> bool: ...
    def font_set_hinting(self, font_rid: RID, hinting: TextServer.Hinting) -> None: ...
    def font_get_hinting(self, font_rid: RID) -> TextServer.Hinting: ...
    def font_set_subpixel_positioning(self, font_rid: RID, subpixel_positioning: TextServer.SubpixelPositioning) -> None: ...
    def font_get_subpixel_positioning(self, font_rid: RID) -> TextServer.SubpixelPositioning: ...
    def font_set_embolden(self, font_rid: RID, strength: float) -> None: ...
    def font_get_embolden(self, font_rid: RID) -> float: ...
    def font_set_transform(self, font_rid: RID, transform: Transform2D) -> None: ...
    def font_get_transform(self, font_rid: RID) -> Transform2D: ...
    def font_set_variation_coordinates(self, font_rid: RID, variation_coordinates: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def font_get_variation_coordinates(self, font_rid: RID) -> GDDictionary: ...
    def font_set_oversampling(self, font_rid: RID, oversampling: float) -> None: ...
    def font_get_oversampling(self, font_rid: RID) -> float: ...
    def font_get_size_cache_list(self, font_rid: RID) -> GDArray: ...
    def font_clear_size_cache(self, font_rid: RID) -> None: ...
    def font_remove_size_cache(self, font_rid: RID, size: Vector2i) -> None: ...
    def font_set_ascent(self, font_rid: RID, size: int, ascent: float) -> None: ...
    def font_get_ascent(self, font_rid: RID, size: int) -> float: ...
    def font_set_descent(self, font_rid: RID, size: int, descent: float) -> None: ...
    def font_get_descent(self, font_rid: RID, size: int) -> float: ...
    def font_set_underline_position(self, font_rid: RID, size: int, underline_position: float) -> None: ...
    def font_get_underline_position(self, font_rid: RID, size: int) -> float: ...
    def font_set_underline_thickness(self, font_rid: RID, size: int, underline_thickness: float) -> None: ...
    def font_get_underline_thickness(self, font_rid: RID, size: int) -> float: ...
    def font_set_scale(self, font_rid: RID, size: int, scale: float) -> None: ...
    def font_get_scale(self, font_rid: RID, size: int) -> float: ...
    def font_get_texture_count(self, font_rid: RID, size: Vector2i) -> int: ...
    def font_clear_textures(self, font_rid: RID, size: Vector2i) -> None: ...
    def font_remove_texture(self, font_rid: RID, size: Vector2i, texture_index: int) -> None: ...
    def font_set_texture_image(self, font_rid: RID, size: Vector2i, texture_index: int, image: Image) -> None: ...
    def font_get_texture_image(self, font_rid: RID, size: Vector2i, texture_index: int) -> Image: ...
    def font_set_texture_offsets(self, font_rid: RID, size: Vector2i, texture_index: int, offset: PackedInt32Array) -> None: ...
    def font_get_texture_offsets(self, font_rid: RID, size: Vector2i, texture_index: int) -> PackedInt32Array: ...
    def font_get_glyph_list(self, font_rid: RID, size: Vector2i) -> PackedInt32Array: ...
    def font_clear_glyphs(self, font_rid: RID, size: Vector2i) -> None: ...
    def font_remove_glyph(self, font_rid: RID, size: Vector2i, glyph: int) -> None: ...
    def font_get_glyph_advance(self, font_rid: RID, size: int, glyph: int) -> Vector2: ...
    def font_set_glyph_advance(self, font_rid: RID, size: int, glyph: int, advance: Vector2) -> None: ...
    def font_get_glyph_offset(self, font_rid: RID, size: Vector2i, glyph: int) -> Vector2: ...
    def font_set_glyph_offset(self, font_rid: RID, size: Vector2i, glyph: int, offset: Vector2) -> None: ...
    def font_get_glyph_size(self, font_rid: RID, size: Vector2i, glyph: int) -> Vector2: ...
    def font_set_glyph_size(self, font_rid: RID, size: Vector2i, glyph: int, gl_size: Vector2) -> None: ...
    def font_get_glyph_uv_rect(self, font_rid: RID, size: Vector2i, glyph: int) -> Rect2: ...
    def font_set_glyph_uv_rect(self, font_rid: RID, size: Vector2i, glyph: int, uv_rect: Rect2) -> None: ...
    def font_get_glyph_texture_idx(self, font_rid: RID, size: Vector2i, glyph: int) -> int: ...
    def font_set_glyph_texture_idx(self, font_rid: RID, size: Vector2i, glyph: int, texture_idx: int) -> None: ...
    def font_get_glyph_texture_rid(self, font_rid: RID, size: Vector2i, glyph: int) -> RID: ...
    def font_get_glyph_texture_size(self, font_rid: RID, size: Vector2i, glyph: int) -> Vector2: ...
    def font_get_glyph_contours(self, font: RID, size: int, index: int) -> GDDictionary: ...
    def font_get_kerning_list(self, font_rid: RID, size: int) -> GDArray: ...
    def font_clear_kerning_map(self, font_rid: RID, size: int) -> None: ...
    def font_remove_kerning(self, font_rid: RID, size: int, glyph_pair: Vector2i) -> None: ...
    def font_set_kerning(self, font_rid: RID, size: int, glyph_pair: Vector2i, kerning: Vector2) -> None: ...
    def font_get_kerning(self, font_rid: RID, size: int, glyph_pair: Vector2i) -> Vector2: ...
    def font_get_glyph_index(self, font_rid: RID, size: int, char_: int, variation_selector: int) -> int: ...
    def font_get_char_from_glyph_index(self, font_rid: RID, size: int, glyph_index: int) -> int: ...
    def font_has_char(self, font_rid: RID, char_: int) -> bool: ...
    def font_get_supported_chars(self, font_rid: RID) -> GDString: ...
    def font_render_range(self, font_rid: RID, size: Vector2i, start: int, end: int) -> None: ...
    def font_render_glyph(self, font_rid: RID, size: Vector2i, index: int) -> None: ...
    def font_draw_glyph(self, font_rid: RID, canvas: RID, size: int, pos: Vector2, index: int, color: Color = Color(1, 1, 1, 1)) -> None: ...
    def font_draw_glyph_outline(self, font_rid: RID, canvas: RID, size: int, outline_size: int, pos: Vector2, index: int, color: Color = Color(1, 1, 1, 1)) -> None: ...
    def font_is_language_supported(self, font_rid: RID, language: GDString | str) -> bool: ...
    def font_set_language_support_override(self, font_rid: RID, language: GDString | str, supported: bool) -> None: ...
    def font_get_language_support_override(self, font_rid: RID, language: GDString | str) -> bool: ...
    def font_remove_language_support_override(self, font_rid: RID, language: GDString | str) -> None: ...
    def font_get_language_support_overrides(self, font_rid: RID) -> PackedStringArray: ...
    def font_is_script_supported(self, font_rid: RID, script: GDString | str) -> bool: ...
    def font_set_script_support_override(self, font_rid: RID, script: GDString | str, supported: bool) -> None: ...
    def font_get_script_support_override(self, font_rid: RID, script: GDString | str) -> bool: ...
    def font_remove_script_support_override(self, font_rid: RID, script: GDString | str) -> None: ...
    def font_get_script_support_overrides(self, font_rid: RID) -> PackedStringArray: ...
    def font_set_opentype_feature_overrides(self, font_rid: RID, overrides: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def font_get_opentype_feature_overrides(self, font_rid: RID) -> GDDictionary: ...
    def font_supported_feature_list(self, font_rid: RID) -> GDDictionary: ...
    def font_supported_variation_list(self, font_rid: RID) -> GDDictionary: ...
    def font_get_global_oversampling(self) -> float: ...
    def font_set_global_oversampling(self, oversampling: float) -> None: ...
    def get_hex_code_box_size(self, size: int, index: int) -> Vector2: ...
    def draw_hex_code_box(self, canvas: RID, size: int, pos: Vector2, index: int, color: Color) -> None: ...
    def create_shaped_text(self, direction: TextServer.Direction = 0, orientation: TextServer.Orientation = 0) -> RID: ...
    def shaped_text_clear(self, rid: RID) -> None: ...
    def shaped_text_set_direction(self, shaped: RID, direction: TextServer.Direction = 0) -> None: ...
    def shaped_text_get_direction(self, shaped: RID) -> TextServer.Direction: ...
    def shaped_text_get_inferred_direction(self, shaped: RID) -> TextServer.Direction: ...
    def shaped_text_set_bidi_override(self, shaped: RID, override: GDArray) -> None: ...
    def shaped_text_set_custom_punctuation(self, shaped: RID, punct: GDString | str) -> None: ...
    def shaped_text_get_custom_punctuation(self, shaped: RID) -> GDString: ...
    def shaped_text_set_orientation(self, shaped: RID, orientation: TextServer.Orientation = 0) -> None: ...
    def shaped_text_get_orientation(self, shaped: RID) -> TextServer.Orientation: ...
    def shaped_text_set_preserve_invalid(self, shaped: RID, enabled: bool) -> None: ...
    def shaped_text_get_preserve_invalid(self, shaped: RID) -> bool: ...
    def shaped_text_set_preserve_control(self, shaped: RID, enabled: bool) -> None: ...
    def shaped_text_get_preserve_control(self, shaped: RID) -> bool: ...
    def shaped_text_set_spacing(self, shaped: RID, spacing: TextServer.SpacingType, value: int) -> None: ...
    def shaped_text_get_spacing(self, shaped: RID, spacing: TextServer.SpacingType) -> int: ...
    def shaped_text_add_string(self, shaped: RID, text: GDString | str, fonts: GDArray, size: int, opentype_features: GDDictionary | Mapping[IntoGDAny, IntoGDAny] = {}, language: GDString | str = "", meta: GDAny = None) -> bool: ...
    def shaped_text_add_object(self, shaped: RID, key: GDAny, size: Vector2, inline_align: InlineAlignment = 5, length: int = 1, baseline: float = 0.0) -> bool: ...
    def shaped_text_resize_object(self, shaped: RID, key: GDAny, size: Vector2, inline_align: InlineAlignment = 5, baseline: float = 0.0) -> bool: ...
    def shaped_get_span_count(self, shaped: RID) -> int: ...
    def shaped_get_span_meta(self, shaped: RID, index: int) -> GDAny: ...
    def shaped_set_span_update_font(self, shaped: RID, index: int, fonts: GDArray, size: int, opentype_features: GDDictionary | Mapping[IntoGDAny, IntoGDAny] = {}) -> None: ...
    def shaped_text_substr(self, shaped: RID, start: int, length: int) -> RID: ...
    def shaped_text_get_parent(self, shaped: RID) -> RID: ...
    def shaped_text_fit_to_width(self, shaped: RID, width: float, justification_flags: TextServer.JustificationFlag = 3) -> float: ...
    def shaped_text_tab_align(self, shaped: RID, tab_stops: PackedFloat32Array) -> float: ...
    def shaped_text_shape(self, shaped: RID) -> bool: ...
    def shaped_text_is_ready(self, shaped: RID) -> bool: ...
    def shaped_text_has_visible_chars(self, shaped: RID) -> bool: ...
    def shaped_text_get_glyphs(self, shaped: RID) -> GDArray: ...
    def shaped_text_sort_logical(self, shaped: RID) -> GDArray: ...
    def shaped_text_get_glyph_count(self, shaped: RID) -> int: ...
    def shaped_text_get_range(self, shaped: RID) -> Vector2i: ...
    def shaped_text_get_line_breaks_adv(self, shaped: RID, width: PackedFloat32Array, start: int = 0, once: bool = True, break_flags: TextServer.LineBreakFlag = 3) -> PackedInt32Array: ...
    def shaped_text_get_line_breaks(self, shaped: RID, width: float, start: int = 0, break_flags: TextServer.LineBreakFlag = 3) -> PackedInt32Array: ...
    def shaped_text_get_word_breaks(self, shaped: RID, grapheme_flags: TextServer.GraphemeFlag = 264) -> PackedInt32Array: ...
    def shaped_text_get_trim_pos(self, shaped: RID) -> int: ...
    def shaped_text_get_ellipsis_pos(self, shaped: RID) -> int: ...
    def shaped_text_get_ellipsis_glyphs(self, shaped: RID) -> GDArray: ...
    def shaped_text_get_ellipsis_glyph_count(self, shaped: RID) -> int: ...
    def shaped_text_overrun_trim_to_width(self, shaped: RID, width: float = 0, overrun_trim_flags: TextServer.TextOverrunFlag = 0) -> None: ...
    def shaped_text_get_objects(self, shaped: RID) -> GDArray: ...
    def shaped_text_get_object_rect(self, shaped: RID, key: GDAny) -> Rect2: ...
    def shaped_text_get_size(self, shaped: RID) -> Vector2: ...
    def shaped_text_get_ascent(self, shaped: RID) -> float: ...
    def shaped_text_get_descent(self, shaped: RID) -> float: ...
    def shaped_text_get_width(self, shaped: RID) -> float: ...
    def shaped_text_get_underline_position(self, shaped: RID) -> float: ...
    def shaped_text_get_underline_thickness(self, shaped: RID) -> float: ...
    def shaped_text_get_carets(self, shaped: RID, position: int) -> GDDictionary: ...
    def shaped_text_get_selection(self, shaped: RID, start: int, end: int) -> PackedVector2Array: ...
    def shaped_text_hit_test_grapheme(self, shaped: RID, coords: float) -> int: ...
    def shaped_text_hit_test_position(self, shaped: RID, coords: float) -> int: ...
    def shaped_text_get_grapheme_bounds(self, shaped: RID, pos: int) -> Vector2: ...
    def shaped_text_next_grapheme_pos(self, shaped: RID, pos: int) -> int: ...
    def shaped_text_prev_grapheme_pos(self, shaped: RID, pos: int) -> int: ...
    def shaped_text_draw(self, shaped: RID, canvas: RID, pos: Vector2, clip_l: float = -1, clip_r: float = -1, color: Color = Color(1, 1, 1, 1)) -> None: ...
    def shaped_text_draw_outline(self, shaped: RID, canvas: RID, pos: Vector2, clip_l: float = -1, clip_r: float = -1, outline_size: int = 1, color: Color = Color(1, 1, 1, 1)) -> None: ...
    def shaped_text_get_dominant_direction_in_range(self, shaped: RID, start: int, end: int) -> TextServer.Direction: ...
    def format_number(self, number: GDString | str, language: GDString | str = "") -> GDString: ...
    def parse_number(self, number: GDString | str, language: GDString | str = "") -> GDString: ...
    def percent_sign(self, language: GDString | str = "") -> GDString: ...
    def string_get_word_breaks(self, string: GDString | str, language: GDString | str = "", chars_per_line: int = 0) -> PackedInt32Array: ...
    def is_confusable(self, string: GDString | str, dict: PackedStringArray) -> int: ...
    def spoof_check(self, string: GDString | str) -> bool: ...
    def strip_diacritics(self, string: GDString | str) -> GDString: ...
    def is_valid_identifier(self, string: GDString | str) -> bool: ...
    def string_to_upper(self, string: GDString | str, language: GDString | str = "") -> GDString: ...
    def string_to_lower(self, string: GDString | str, language: GDString | str = "") -> GDString: ...
    def parse_structured_text(self, parser_type: TextServer.StructuredTextParser, args: GDArray, text: GDString | str) -> GDArray: ...


class TextServerExtension(TypeInUse(TextServer)):
    def __init__(self): ...


class TextServerManager(TypeInUse(Object)):
    @classmethod
    def new(cls) -> TextServerManager: ...

    # Methods
    def add_interface(self, interface: TextServer) -> None: ...
    def get_interface_count(self) -> int: ...
    def remove_interface(self, interface: TextServer) -> None: ...
    def get_interface(self, idx: int) -> TextServer: ...
    def get_interfaces(self) -> GDArray: ...
    def find_interface(self, name: GDString | str) -> TextServer: ...
    def set_primary_interface(self, index: TextServer) -> None: ...
    def get_primary_interface(self) -> TextServer: ...

    # Signals
    def interface_added(self, interface_name: StringName | str) -> None: ...
    def interface_removed(self, interface_name: StringName | str) -> None: ...


class Texture(TypeInUse(Resource)):
    def __init__(self): ...


class Texture2D(TypeInUse(Texture)):
    def __init__(self): ...

    # Methods
    def get_width(self) -> int: ...
    def get_height(self) -> int: ...
    def get_size(self) -> Vector2: ...
    def has_alpha(self) -> bool: ...
    def draw(self, canvas_item: RID, position: Vector2, modulate: Color = Color(1, 1, 1, 1), transpose: bool = False) -> None: ...
    def draw_rect(self, canvas_item: RID, rect: Rect2, tile: bool, modulate: Color = Color(1, 1, 1, 1), transpose: bool = False) -> None: ...
    def draw_rect_region(self, canvas_item: RID, rect: Rect2, src_rect: Rect2, modulate: Color = Color(1, 1, 1, 1), transpose: bool = False, clip_uv: bool = True) -> None: ...
    def get_image(self) -> Image: ...
    def create_placeholder(self) -> Resource: ...


class Texture3D(TypeInUse(Texture)):
    def __init__(self): ...

    # Methods
    def get_format(self) -> Image.Format: ...
    def get_width(self) -> int: ...
    def get_height(self) -> int: ...
    def get_depth(self) -> int: ...
    def has_mipmaps(self) -> bool: ...
    def get_data(self) -> GDArray: ...
    def create_placeholder(self) -> Resource: ...


class TextureLayered(TypeInUse(Texture)):
    def __init__(self): ...

    # Enums
    class TextureLayered.LayeredType(Enum):
        LAYERED_TYPE_2D_ARRAY: int
        LAYERED_TYPE_CUBEMAP: int
        LAYERED_TYPE_CUBEMAP_ARRAY: int

    # Methods
    def get_format(self) -> Image.Format: ...
    def get_layered_type(self) -> TextureLayered.LayeredType: ...
    def get_width(self) -> int: ...
    def get_height(self) -> int: ...
    def get_layers(self) -> int: ...
    def has_mipmaps(self) -> bool: ...
    def get_layer_data(self, layer: int) -> Image: ...


class Theme(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class Theme.DataType(Enum):
        DATA_TYPE_COLOR: int
        DATA_TYPE_CONSTANT: int
        DATA_TYPE_FONT: int
        DATA_TYPE_FONT_SIZE: int
        DATA_TYPE_ICON: int
        DATA_TYPE_STYLEBOX: int
        DATA_TYPE_MAX: int

    # Methods
    def set_icon(self, name: StringName | str, theme_type: StringName | str, texture: Texture2D) -> None: ...
    def get_icon(self, name: StringName | str, theme_type: StringName | str) -> Texture2D: ...
    def has_icon(self, name: StringName | str, theme_type: StringName | str) -> bool: ...
    def rename_icon(self, old_name: StringName | str, name: StringName | str, theme_type: StringName | str) -> None: ...
    def clear_icon(self, name: StringName | str, theme_type: StringName | str) -> None: ...
    def get_icon_list(self, theme_type: GDString | str) -> PackedStringArray: ...
    def get_icon_type_list(self) -> PackedStringArray: ...
    def set_stylebox(self, name: StringName | str, theme_type: StringName | str, texture: StyleBox) -> None: ...
    def get_stylebox(self, name: StringName | str, theme_type: StringName | str) -> StyleBox: ...
    def has_stylebox(self, name: StringName | str, theme_type: StringName | str) -> bool: ...
    def rename_stylebox(self, old_name: StringName | str, name: StringName | str, theme_type: StringName | str) -> None: ...
    def clear_stylebox(self, name: StringName | str, theme_type: StringName | str) -> None: ...
    def get_stylebox_list(self, theme_type: GDString | str) -> PackedStringArray: ...
    def get_stylebox_type_list(self) -> PackedStringArray: ...
    def set_font(self, name: StringName | str, theme_type: StringName | str, font: Font) -> None: ...
    def get_font(self, name: StringName | str, theme_type: StringName | str) -> Font: ...
    def has_font(self, name: StringName | str, theme_type: StringName | str) -> bool: ...
    def rename_font(self, old_name: StringName | str, name: StringName | str, theme_type: StringName | str) -> None: ...
    def clear_font(self, name: StringName | str, theme_type: StringName | str) -> None: ...
    def get_font_list(self, theme_type: GDString | str) -> PackedStringArray: ...
    def get_font_type_list(self) -> PackedStringArray: ...
    def set_font_size(self, name: StringName | str, theme_type: StringName | str, font_size: int) -> None: ...
    def get_font_size(self, name: StringName | str, theme_type: StringName | str) -> int: ...
    def has_font_size(self, name: StringName | str, theme_type: StringName | str) -> bool: ...
    def rename_font_size(self, old_name: StringName | str, name: StringName | str, theme_type: StringName | str) -> None: ...
    def clear_font_size(self, name: StringName | str, theme_type: StringName | str) -> None: ...
    def get_font_size_list(self, theme_type: GDString | str) -> PackedStringArray: ...
    def get_font_size_type_list(self) -> PackedStringArray: ...
    def set_color(self, name: StringName | str, theme_type: StringName | str, color: Color) -> None: ...
    def get_color(self, name: StringName | str, theme_type: StringName | str) -> Color: ...
    def has_color(self, name: StringName | str, theme_type: StringName | str) -> bool: ...
    def rename_color(self, old_name: StringName | str, name: StringName | str, theme_type: StringName | str) -> None: ...
    def clear_color(self, name: StringName | str, theme_type: StringName | str) -> None: ...
    def get_color_list(self, theme_type: GDString | str) -> PackedStringArray: ...
    def get_color_type_list(self) -> PackedStringArray: ...
    def set_constant(self, name: StringName | str, theme_type: StringName | str, constant: int) -> None: ...
    def get_constant(self, name: StringName | str, theme_type: StringName | str) -> int: ...
    def has_constant(self, name: StringName | str, theme_type: StringName | str) -> bool: ...
    def rename_constant(self, old_name: StringName | str, name: StringName | str, theme_type: StringName | str) -> None: ...
    def clear_constant(self, name: StringName | str, theme_type: StringName | str) -> None: ...
    def get_constant_list(self, theme_type: GDString | str) -> PackedStringArray: ...
    def get_constant_type_list(self) -> PackedStringArray: ...
    def set_default_base_scale(self, base_scale: float) -> None: ...
    def get_default_base_scale(self) -> float: ...
    def has_default_base_scale(self) -> bool: ...
    def set_default_font(self, font: Font) -> None: ...
    def get_default_font(self) -> Font: ...
    def has_default_font(self) -> bool: ...
    def set_default_font_size(self, font_size: int) -> None: ...
    def get_default_font_size(self) -> int: ...
    def has_default_font_size(self) -> bool: ...
    def set_theme_item(self, data_type: Theme.DataType, name: StringName | str, theme_type: StringName | str, value: GDAny) -> None: ...
    def get_theme_item(self, data_type: Theme.DataType, name: StringName | str, theme_type: StringName | str) -> GDAny: ...
    def has_theme_item(self, data_type: Theme.DataType, name: StringName | str, theme_type: StringName | str) -> bool: ...
    def rename_theme_item(self, data_type: Theme.DataType, old_name: StringName | str, name: StringName | str, theme_type: StringName | str) -> None: ...
    def clear_theme_item(self, data_type: Theme.DataType, name: StringName | str, theme_type: StringName | str) -> None: ...
    def get_theme_item_list(self, data_type: Theme.DataType, theme_type: GDString | str) -> PackedStringArray: ...
    def get_theme_item_type_list(self, data_type: Theme.DataType) -> PackedStringArray: ...
    def set_type_variation(self, theme_type: StringName | str, base_type: StringName | str) -> None: ...
    def is_type_variation(self, theme_type: StringName | str, base_type: StringName | str) -> bool: ...
    def clear_type_variation(self, theme_type: StringName | str) -> None: ...
    def get_type_variation_base(self, theme_type: StringName | str) -> StringName: ...
    def get_type_variation_list(self, base_type: StringName | str) -> PackedStringArray: ...
    def add_type(self, theme_type: StringName | str) -> None: ...
    def remove_type(self, theme_type: StringName | str) -> None: ...
    def get_type_list(self) -> PackedStringArray: ...
    def merge_with(self, other: Theme) -> None: ...
    def clear(self) -> None: ...

    # Properties
    default_base_scale: float
    default_font: Font
    default_font_size: int


class ThemeDB(TypeInUse(Object)):
    @classmethod
    def new(cls) -> ThemeDB: ...

    # Methods
    def get_default_theme(self) -> Theme: ...
    def get_project_theme(self) -> Theme: ...
    def set_fallback_base_scale(self, base_scale: float) -> None: ...
    def get_fallback_base_scale(self) -> float: ...
    def set_fallback_font(self, font: Font) -> None: ...
    def get_fallback_font(self) -> Font: ...
    def set_fallback_font_size(self, font_size: int) -> None: ...
    def get_fallback_font_size(self) -> int: ...
    def set_fallback_icon(self, icon: Texture2D) -> None: ...
    def get_fallback_icon(self) -> Texture2D: ...
    def set_fallback_stylebox(self, stylebox: StyleBox) -> None: ...
    def get_fallback_stylebox(self) -> StyleBox: ...

    # Signals
    def fallback_changed(self) -> None: ...

    # Properties
    fallback_base_scale: float
    fallback_font: Font
    fallback_font_size: int
    fallback_icon: Texture2D
    fallback_stylebox: StyleBox


class Thread(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class Thread.Priority(Enum):
        PRIORITY_LOW: int
        PRIORITY_NORMAL: int
        PRIORITY_HIGH: int

    # Methods
    def start(self, callable: GDCallable, priority: Thread.Priority = 1) -> Error: ...
    def get_id(self) -> GDString: ...
    def is_started(self) -> bool: ...
    def is_alive(self) -> bool: ...
    def wait_to_finish(self) -> GDAny: ...
    def set_thread_safety_checks_enabled(self, enabled: bool) -> None: ...


class TileData(TypeInUse(Object)):
    @classmethod
    def new(cls) -> TileData: ...

    # Methods
    def set_flip_h(self, flip_h: bool) -> None: ...
    def get_flip_h(self) -> bool: ...
    def set_flip_v(self, flip_v: bool) -> None: ...
    def get_flip_v(self) -> bool: ...
    def set_transpose(self, transpose: bool) -> None: ...
    def get_transpose(self) -> bool: ...
    def set_material(self, material: Material) -> None: ...
    def get_material(self) -> Material: ...
    def set_texture_origin(self, texture_origin: Vector2i) -> None: ...
    def get_texture_origin(self) -> Vector2i: ...
    def set_modulate(self, modulate: Color) -> None: ...
    def get_modulate(self) -> Color: ...
    def set_z_index(self, z_index: int) -> None: ...
    def get_z_index(self) -> int: ...
    def set_y_sort_origin(self, y_sort_origin: int) -> None: ...
    def get_y_sort_origin(self) -> int: ...
    def set_occluder(self, layer_id: int, occluder_polygon: OccluderPolygon2D) -> None: ...
    def get_occluder(self, layer_id: int) -> OccluderPolygon2D: ...
    def set_constant_linear_velocity(self, layer_id: int, velocity: Vector2) -> None: ...
    def get_constant_linear_velocity(self, layer_id: int) -> Vector2: ...
    def set_constant_angular_velocity(self, layer_id: int, velocity: float) -> None: ...
    def get_constant_angular_velocity(self, layer_id: int) -> float: ...
    def set_collision_polygons_count(self, layer_id: int, polygons_count: int) -> None: ...
    def get_collision_polygons_count(self, layer_id: int) -> int: ...
    def add_collision_polygon(self, layer_id: int) -> None: ...
    def remove_collision_polygon(self, layer_id: int, polygon_index: int) -> None: ...
    def set_collision_polygon_points(self, layer_id: int, polygon_index: int, polygon: PackedVector2Array) -> None: ...
    def get_collision_polygon_points(self, layer_id: int, polygon_index: int) -> PackedVector2Array: ...
    def set_collision_polygon_one_way(self, layer_id: int, polygon_index: int, one_way: bool) -> None: ...
    def is_collision_polygon_one_way(self, layer_id: int, polygon_index: int) -> bool: ...
    def set_collision_polygon_one_way_margin(self, layer_id: int, polygon_index: int, one_way_margin: float) -> None: ...
    def get_collision_polygon_one_way_margin(self, layer_id: int, polygon_index: int) -> float: ...
    def set_terrain_set(self, terrain_set: int) -> None: ...
    def get_terrain_set(self) -> int: ...
    def set_terrain(self, terrain: int) -> None: ...
    def get_terrain(self) -> int: ...
    def set_terrain_peering_bit(self, peering_bit: TileSet.CellNeighbor, terrain: int) -> None: ...
    def get_terrain_peering_bit(self, peering_bit: TileSet.CellNeighbor) -> int: ...
    def set_navigation_polygon(self, layer_id: int, navigation_polygon: NavigationPolygon) -> None: ...
    def get_navigation_polygon(self, layer_id: int) -> NavigationPolygon: ...
    def set_probability(self, probability: float) -> None: ...
    def get_probability(self) -> float: ...
    def set_custom_data(self, layer_name: GDString | str, value: GDAny) -> None: ...
    def get_custom_data(self, layer_name: GDString | str) -> GDAny: ...
    def set_custom_data_by_layer_id(self, layer_id: int, value: GDAny) -> None: ...
    def get_custom_data_by_layer_id(self, layer_id: int) -> GDAny: ...

    # Signals
    def changed(self) -> None: ...

    # Properties
    flip_h: bool
    flip_v: bool
    transpose: bool
    texture_origin: Vector2i
    modulate: Color
    material: CanvasItemMaterial | ShaderMaterial
    z_index: int
    y_sort_origin: int
    terrain_set: int
    terrain: int
    probability: float


class TileMapPattern(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_cell(self, coords: Vector2i, source_id: int = -1, atlas_coords: Vector2i = Vector2i(-1, -1), alternative_tile: int = -1) -> None: ...
    def has_cell(self, coords: Vector2i) -> bool: ...
    def remove_cell(self, coords: Vector2i, update_size: bool) -> None: ...
    def get_cell_source_id(self, coords: Vector2i) -> int: ...
    def get_cell_atlas_coords(self, coords: Vector2i) -> Vector2i: ...
    def get_cell_alternative_tile(self, coords: Vector2i) -> int: ...
    def get_used_cells(self) -> GDArray: ...
    def get_size(self) -> Vector2i: ...
    def set_size(self, size: Vector2i) -> None: ...
    def is_empty(self) -> bool: ...


class TileSet(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class TileSet.TileShape(Enum):
        TILE_SHAPE_SQUARE: int
        TILE_SHAPE_ISOMETRIC: int
        TILE_SHAPE_HALF_OFFSET_SQUARE: int
        TILE_SHAPE_HEXAGON: int
    class TileSet.TileLayout(Enum):
        TILE_LAYOUT_STACKED: int
        TILE_LAYOUT_STACKED_OFFSET: int
        TILE_LAYOUT_STAIRS_RIGHT: int
        TILE_LAYOUT_STAIRS_DOWN: int
        TILE_LAYOUT_DIAMOND_RIGHT: int
        TILE_LAYOUT_DIAMOND_DOWN: int
    class TileSet.TileOffsetAxis(Enum):
        TILE_OFFSET_AXIS_HORIZONTAL: int
        TILE_OFFSET_AXIS_VERTICAL: int
    class TileSet.CellNeighbor(Enum):
        CELL_NEIGHBOR_RIGHT_SIDE: int
        CELL_NEIGHBOR_RIGHT_CORNER: int
        CELL_NEIGHBOR_BOTTOM_RIGHT_SIDE: int
        CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER: int
        CELL_NEIGHBOR_BOTTOM_SIDE: int
        CELL_NEIGHBOR_BOTTOM_CORNER: int
        CELL_NEIGHBOR_BOTTOM_LEFT_SIDE: int
        CELL_NEIGHBOR_BOTTOM_LEFT_CORNER: int
        CELL_NEIGHBOR_LEFT_SIDE: int
        CELL_NEIGHBOR_LEFT_CORNER: int
        CELL_NEIGHBOR_TOP_LEFT_SIDE: int
        CELL_NEIGHBOR_TOP_LEFT_CORNER: int
        CELL_NEIGHBOR_TOP_SIDE: int
        CELL_NEIGHBOR_TOP_CORNER: int
        CELL_NEIGHBOR_TOP_RIGHT_SIDE: int
        CELL_NEIGHBOR_TOP_RIGHT_CORNER: int
    class TileSet.TerrainMode(Enum):
        TERRAIN_MODE_MATCH_CORNERS_AND_SIDES: int
        TERRAIN_MODE_MATCH_CORNERS: int
        TERRAIN_MODE_MATCH_SIDES: int

    # Methods
    def get_next_source_id(self) -> int: ...
    def add_source(self, source: TileSetSource, atlas_source_id_override: int = -1) -> int: ...
    def remove_source(self, source_id: int) -> None: ...
    def set_source_id(self, source_id: int, new_source_id: int) -> None: ...
    def get_source_count(self) -> int: ...
    def get_source_id(self, index: int) -> int: ...
    def has_source(self, source_id: int) -> bool: ...
    def get_source(self, source_id: int) -> TileSetSource: ...
    def set_tile_shape(self, shape: TileSet.TileShape) -> None: ...
    def get_tile_shape(self) -> TileSet.TileShape: ...
    def set_tile_layout(self, layout: TileSet.TileLayout) -> None: ...
    def get_tile_layout(self) -> TileSet.TileLayout: ...
    def set_tile_offset_axis(self, alignment: TileSet.TileOffsetAxis) -> None: ...
    def get_tile_offset_axis(self) -> TileSet.TileOffsetAxis: ...
    def set_tile_size(self, size: Vector2i) -> None: ...
    def get_tile_size(self) -> Vector2i: ...
    def set_uv_clipping(self, uv_clipping: bool) -> None: ...
    def is_uv_clipping(self) -> bool: ...
    def get_occlusion_layers_count(self) -> int: ...
    def add_occlusion_layer(self, to_position: int = -1) -> None: ...
    def move_occlusion_layer(self, layer_index: int, to_position: int) -> None: ...
    def remove_occlusion_layer(self, layer_index: int) -> None: ...
    def set_occlusion_layer_light_mask(self, layer_index: int, light_mask: int) -> None: ...
    def get_occlusion_layer_light_mask(self, layer_index: int) -> int: ...
    def set_occlusion_layer_sdf_collision(self, layer_index: int, sdf_collision: bool) -> None: ...
    def get_occlusion_layer_sdf_collision(self, layer_index: int) -> bool: ...
    def get_physics_layers_count(self) -> int: ...
    def add_physics_layer(self, to_position: int = -1) -> None: ...
    def move_physics_layer(self, layer_index: int, to_position: int) -> None: ...
    def remove_physics_layer(self, layer_index: int) -> None: ...
    def set_physics_layer_collision_layer(self, layer_index: int, layer: int) -> None: ...
    def get_physics_layer_collision_layer(self, layer_index: int) -> int: ...
    def set_physics_layer_collision_mask(self, layer_index: int, mask: int) -> None: ...
    def get_physics_layer_collision_mask(self, layer_index: int) -> int: ...
    def set_physics_layer_physics_material(self, layer_index: int, physics_material: PhysicsMaterial) -> None: ...
    def get_physics_layer_physics_material(self, layer_index: int) -> PhysicsMaterial: ...
    def get_terrain_sets_count(self) -> int: ...
    def add_terrain_set(self, to_position: int = -1) -> None: ...
    def move_terrain_set(self, terrain_set: int, to_position: int) -> None: ...
    def remove_terrain_set(self, terrain_set: int) -> None: ...
    def set_terrain_set_mode(self, terrain_set: int, mode: TileSet.TerrainMode) -> None: ...
    def get_terrain_set_mode(self, terrain_set: int) -> TileSet.TerrainMode: ...
    def get_terrains_count(self, terrain_set: int) -> int: ...
    def add_terrain(self, terrain_set: int, to_position: int = -1) -> None: ...
    def move_terrain(self, terrain_set: int, terrain_index: int, to_position: int) -> None: ...
    def remove_terrain(self, terrain_set: int, terrain_index: int) -> None: ...
    def set_terrain_name(self, terrain_set: int, terrain_index: int, name: GDString | str) -> None: ...
    def get_terrain_name(self, terrain_set: int, terrain_index: int) -> GDString: ...
    def set_terrain_color(self, terrain_set: int, terrain_index: int, color: Color) -> None: ...
    def get_terrain_color(self, terrain_set: int, terrain_index: int) -> Color: ...
    def get_navigation_layers_count(self) -> int: ...
    def add_navigation_layer(self, to_position: int = -1) -> None: ...
    def move_navigation_layer(self, layer_index: int, to_position: int) -> None: ...
    def remove_navigation_layer(self, layer_index: int) -> None: ...
    def set_navigation_layer_layers(self, layer_index: int, layers: int) -> None: ...
    def get_navigation_layer_layers(self, layer_index: int) -> int: ...
    def set_navigation_layer_layer_value(self, layer_index: int, layer_number: int, value: bool) -> None: ...
    def get_navigation_layer_layer_value(self, layer_index: int, layer_number: int) -> bool: ...
    def get_custom_data_layers_count(self) -> int: ...
    def add_custom_data_layer(self, to_position: int = -1) -> None: ...
    def move_custom_data_layer(self, layer_index: int, to_position: int) -> None: ...
    def remove_custom_data_layer(self, layer_index: int) -> None: ...
    def get_custom_data_layer_by_name(self, layer_name: GDString | str) -> int: ...
    def set_custom_data_layer_name(self, layer_index: int, layer_name: GDString | str) -> None: ...
    def get_custom_data_layer_name(self, layer_index: int) -> GDString: ...
    def set_custom_data_layer_type(self, layer_index: int, layer_type: VariantType) -> None: ...
    def get_custom_data_layer_type(self, layer_index: int) -> VariantType: ...
    def set_source_level_tile_proxy(self, source_from: int, source_to: int) -> None: ...
    def get_source_level_tile_proxy(self, source_from: int) -> int: ...
    def has_source_level_tile_proxy(self, source_from: int) -> bool: ...
    def remove_source_level_tile_proxy(self, source_from: int) -> None: ...
    def set_coords_level_tile_proxy(self, p_source_from: int, coords_from: Vector2i, source_to: int, coords_to: Vector2i) -> None: ...
    def get_coords_level_tile_proxy(self, source_from: int, coords_from: Vector2i) -> GDArray: ...
    def has_coords_level_tile_proxy(self, source_from: int, coords_from: Vector2i) -> bool: ...
    def remove_coords_level_tile_proxy(self, source_from: int, coords_from: Vector2i) -> None: ...
    def set_alternative_level_tile_proxy(self, source_from: int, coords_from: Vector2i, alternative_from: int, source_to: int, coords_to: Vector2i, alternative_to: int) -> None: ...
    def get_alternative_level_tile_proxy(self, source_from: int, coords_from: Vector2i, alternative_from: int) -> GDArray: ...
    def has_alternative_level_tile_proxy(self, source_from: int, coords_from: Vector2i, alternative_from: int) -> bool: ...
    def remove_alternative_level_tile_proxy(self, source_from: int, coords_from: Vector2i, alternative_from: int) -> None: ...
    def map_tile_proxy(self, source_from: int, coords_from: Vector2i, alternative_from: int) -> GDArray: ...
    def cleanup_invalid_tile_proxies(self) -> None: ...
    def clear_tile_proxies(self) -> None: ...
    def add_pattern(self, pattern: TileMapPattern, index: int = -1) -> int: ...
    def get_pattern(self, index: int = -1) -> TileMapPattern: ...
    def remove_pattern(self, index: int) -> None: ...
    def get_patterns_count(self) -> int: ...

    # Properties
    tile_shape: int
    tile_layout: int
    tile_offset_axis: int
    tile_size: Vector2i
    uv_clipping: bool


class TileSetSource(TypeInUse(Resource)):

    # Methods
    def get_tiles_count(self) -> int: ...
    def get_tile_id(self, index: int) -> Vector2i: ...
    def has_tile(self, atlas_coords: Vector2i) -> bool: ...
    def get_alternative_tiles_count(self, atlas_coords: Vector2i) -> int: ...
    def get_alternative_tile_id(self, atlas_coords: Vector2i, index: int) -> int: ...
    def has_alternative_tile(self, atlas_coords: Vector2i, alternative_tile: int) -> bool: ...


class Time(TypeInUse(Object)):
    @classmethod
    def new(cls) -> Time: ...

    # Enums
    class Time.Month(Enum):
        MONTH_JANUARY: int
        MONTH_FEBRUARY: int
        MONTH_MARCH: int
        MONTH_APRIL: int
        MONTH_MAY: int
        MONTH_JUNE: int
        MONTH_JULY: int
        MONTH_AUGUST: int
        MONTH_SEPTEMBER: int
        MONTH_OCTOBER: int
        MONTH_NOVEMBER: int
        MONTH_DECEMBER: int
    class Time.Weekday(Enum):
        WEEKDAY_SUNDAY: int
        WEEKDAY_MONDAY: int
        WEEKDAY_TUESDAY: int
        WEEKDAY_WEDNESDAY: int
        WEEKDAY_THURSDAY: int
        WEEKDAY_FRIDAY: int
        WEEKDAY_SATURDAY: int

    # Methods
    def get_datetime_dict_from_unix_time(self, unix_time_val: int) -> GDDictionary: ...
    def get_date_dict_from_unix_time(self, unix_time_val: int) -> GDDictionary: ...
    def get_time_dict_from_unix_time(self, unix_time_val: int) -> GDDictionary: ...
    def get_datetime_string_from_unix_time(self, unix_time_val: int, use_space: bool = False) -> GDString: ...
    def get_date_string_from_unix_time(self, unix_time_val: int) -> GDString: ...
    def get_time_string_from_unix_time(self, unix_time_val: int) -> GDString: ...
    def get_datetime_dict_from_datetime_string(self, datetime: GDString | str, weekday: bool) -> GDDictionary: ...
    def get_datetime_string_from_datetime_dict(self, datetime: GDDictionary | Mapping[IntoGDAny, IntoGDAny], use_space: bool) -> GDString: ...
    def get_unix_time_from_datetime_dict(self, datetime: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> int: ...
    def get_unix_time_from_datetime_string(self, datetime: GDString | str) -> int: ...
    def get_offset_string_from_offset_minutes(self, offset_minutes: int) -> GDString: ...
    def get_datetime_dict_from_system(self, utc: bool = False) -> GDDictionary: ...
    def get_date_dict_from_system(self, utc: bool = False) -> GDDictionary: ...
    def get_time_dict_from_system(self, utc: bool = False) -> GDDictionary: ...
    def get_datetime_string_from_system(self, utc: bool = False, use_space: bool = False) -> GDString: ...
    def get_date_string_from_system(self, utc: bool = False) -> GDString: ...
    def get_time_string_from_system(self, utc: bool = False) -> GDString: ...
    def get_time_zone_from_system(self) -> GDDictionary: ...
    def get_unix_time_from_system(self) -> float: ...
    def get_ticks_msec(self) -> int: ...
    def get_ticks_usec(self) -> int: ...


class Translation(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_locale(self, locale: GDString | str) -> None: ...
    def get_locale(self) -> GDString: ...
    def add_message(self, src_message: StringName | str, xlated_message: StringName | str, context: StringName | str = "") -> None: ...
    def add_plural_message(self, src_message: StringName | str, xlated_messages: PackedStringArray, context: StringName | str = "") -> None: ...
    def get_message(self, src_message: StringName | str, context: StringName | str = "") -> StringName: ...
    def get_plural_message(self, src_message: StringName | str, src_plural_message: StringName | str, n: int, context: StringName | str = "") -> StringName: ...
    def erase_message(self, src_message: StringName | str, context: StringName | str = "") -> None: ...
    def get_message_list(self) -> PackedStringArray: ...
    def get_translated_message_list(self) -> PackedStringArray: ...
    def get_message_count(self) -> int: ...

    # Properties
    messages: GDDictionary
    locale: GDString


class TranslationServer(TypeInUse(Object)):
    @classmethod
    def new(cls) -> TranslationServer: ...

    # Methods
    def set_locale(self, locale: GDString | str) -> None: ...
    def get_locale(self) -> GDString: ...
    def get_tool_locale(self) -> GDString: ...
    def compare_locales(self, locale_a: GDString | str, locale_b: GDString | str) -> int: ...
    def standardize_locale(self, locale: GDString | str) -> GDString: ...
    def get_all_languages(self) -> PackedStringArray: ...
    def get_language_name(self, language: GDString | str) -> GDString: ...
    def get_all_scripts(self) -> PackedStringArray: ...
    def get_script_name(self, script: GDString | str) -> GDString: ...
    def get_all_countries(self) -> PackedStringArray: ...
    def get_country_name(self, country: GDString | str) -> GDString: ...
    def get_locale_name(self, locale: GDString | str) -> GDString: ...
    def translate(self, message: StringName | str, context: StringName | str = "") -> StringName: ...
    def translate_plural(self, message: StringName | str, plural_message: StringName | str, n: int, context: StringName | str = "") -> StringName: ...
    def add_translation(self, translation: Translation) -> None: ...
    def remove_translation(self, translation: Translation) -> None: ...
    def get_translation_object(self, locale: GDString | str) -> Translation: ...
    def clear(self) -> None: ...
    def get_loaded_locales(self) -> PackedStringArray: ...
    def is_pseudolocalization_enabled(self) -> bool: ...
    def set_pseudolocalization_enabled(self, enabled: bool) -> None: ...
    def reload_pseudolocalization(self) -> None: ...
    def pseudolocalize(self, message: StringName | str) -> StringName: ...

    # Properties
    pseudolocalization_enabled: bool


class TreeItem(TypeInUse(Object)):

    # Enums
    class TreeItem.TreeCellMode(Enum):
        CELL_MODE_STRING: int
        CELL_MODE_CHECK: int
        CELL_MODE_RANGE: int
        CELL_MODE_ICON: int
        CELL_MODE_CUSTOM: int

    # Methods
    def set_cell_mode(self, column: int, mode: TreeItem.TreeCellMode) -> None: ...
    def get_cell_mode(self, column: int) -> TreeItem.TreeCellMode: ...
    def set_edit_multiline(self, column: int, multiline: bool) -> None: ...
    def is_edit_multiline(self, column: int) -> bool: ...
    def set_checked(self, column: int, checked: bool) -> None: ...
    def set_indeterminate(self, column: int, indeterminate: bool) -> None: ...
    def is_checked(self, column: int) -> bool: ...
    def is_indeterminate(self, column: int) -> bool: ...
    def propagate_check(self, column: int, emit_signal: bool = True) -> None: ...
    def set_text(self, column: int, text: GDString | str) -> None: ...
    def get_text(self, column: int) -> GDString: ...
    def set_text_direction(self, column: int, direction: Control.TextDirection) -> None: ...
    def get_text_direction(self, column: int) -> Control.TextDirection: ...
    def set_autowrap_mode(self, column: int, autowrap_mode: TextServer.AutowrapMode) -> None: ...
    def get_autowrap_mode(self, column: int) -> TextServer.AutowrapMode: ...
    def set_structured_text_bidi_override(self, column: int, parser: TextServer.StructuredTextParser) -> None: ...
    def get_structured_text_bidi_override(self, column: int) -> TextServer.StructuredTextParser: ...
    def set_structured_text_bidi_override_options(self, column: int, args: GDArray) -> None: ...
    def get_structured_text_bidi_override_options(self, column: int) -> GDArray: ...
    def set_language(self, column: int, language: GDString | str) -> None: ...
    def get_language(self, column: int) -> GDString: ...
    def set_suffix(self, column: int, text: GDString | str) -> None: ...
    def get_suffix(self, column: int) -> GDString: ...
    def set_icon(self, column: int, texture: Texture2D) -> None: ...
    def get_icon(self, column: int) -> Texture2D: ...
    def set_icon_region(self, column: int, region: Rect2) -> None: ...
    def get_icon_region(self, column: int) -> Rect2: ...
    def set_icon_max_width(self, column: int, width: int) -> None: ...
    def get_icon_max_width(self, column: int) -> int: ...
    def set_icon_modulate(self, column: int, modulate: Color) -> None: ...
    def get_icon_modulate(self, column: int) -> Color: ...
    def set_range(self, column: int, value: float) -> None: ...
    def get_range(self, column: int) -> float: ...
    def set_range_config(self, column: int, min: float, max: float, step: float, expr: bool = False) -> None: ...
    def get_range_config(self, column: int) -> GDDictionary: ...
    def set_metadata(self, column: int, meta: GDAny) -> None: ...
    def get_metadata(self, column: int) -> GDAny: ...
    def set_custom_draw(self, column: int, object: GDObject, callback: StringName | str) -> None: ...
    def set_collapsed(self, enable: bool) -> None: ...
    def is_collapsed(self) -> bool: ...
    def set_collapsed_recursive(self, enable: bool) -> None: ...
    def is_any_collapsed(self, only_visible: bool = False) -> bool: ...
    def set_visible(self, enable: bool) -> None: ...
    def is_visible(self) -> bool: ...
    def uncollapse_tree(self) -> None: ...
    def set_custom_minimum_height(self, height: int) -> None: ...
    def get_custom_minimum_height(self) -> int: ...
    def set_selectable(self, column: int, selectable: bool) -> None: ...
    def is_selectable(self, column: int) -> bool: ...
    def is_selected(self, column: int) -> bool: ...
    def select(self, column: int) -> None: ...
    def deselect(self, column: int) -> None: ...
    def set_editable(self, column: int, enabled: bool) -> None: ...
    def is_editable(self, column: int) -> bool: ...
    def set_custom_color(self, column: int, color: Color) -> None: ...
    def get_custom_color(self, column: int) -> Color: ...
    def clear_custom_color(self, column: int) -> None: ...
    def set_custom_font(self, column: int, font: Font) -> None: ...
    def get_custom_font(self, column: int) -> Font: ...
    def set_custom_font_size(self, column: int, font_size: int) -> None: ...
    def get_custom_font_size(self, column: int) -> int: ...
    def set_custom_bg_color(self, column: int, color: Color, just_outline: bool = False) -> None: ...
    def clear_custom_bg_color(self, column: int) -> None: ...
    def get_custom_bg_color(self, column: int) -> Color: ...
    def set_custom_as_button(self, column: int, enable: bool) -> None: ...
    def is_custom_set_as_button(self, column: int) -> bool: ...
    def add_button(self, column: int, button: Texture2D, id: int = -1, disabled: bool = False, tooltip_text: GDString | str = "") -> None: ...
    def get_button_count(self, column: int) -> int: ...
    def get_button_tooltip_text(self, column: int, button_index: int) -> GDString: ...
    def get_button_id(self, column: int, button_index: int) -> int: ...
    def get_button_by_id(self, column: int, id: int) -> int: ...
    def get_button(self, column: int, button_index: int) -> Texture2D: ...
    def set_button(self, column: int, button_index: int, button: Texture2D) -> None: ...
    def erase_button(self, column: int, button_index: int) -> None: ...
    def set_button_disabled(self, column: int, button_index: int, disabled: bool) -> None: ...
    def set_button_color(self, column: int, button_index: int, color: Color) -> None: ...
    def is_button_disabled(self, column: int, button_index: int) -> bool: ...
    def set_tooltip_text(self, column: int, tooltip: GDString | str) -> None: ...
    def get_tooltip_text(self, column: int) -> GDString: ...
    def set_text_alignment(self, column: int, text_alignment: HorizontalAlignment) -> None: ...
    def get_text_alignment(self, column: int) -> HorizontalAlignment: ...
    def set_expand_right(self, column: int, enable: bool) -> None: ...
    def get_expand_right(self, column: int) -> bool: ...
    def set_disable_folding(self, disable: bool) -> None: ...
    def is_folding_disabled(self) -> bool: ...
    def create_child(self, index: int = -1) -> TreeItem: ...
    def add_child(self, child: TreeItem) -> None: ...
    def remove_child(self, child: TreeItem) -> None: ...
    def get_tree(self) -> Tree: ...
    def get_next(self) -> TreeItem: ...
    def get_prev(self) -> TreeItem: ...
    def get_parent(self) -> TreeItem: ...
    def get_first_child(self) -> TreeItem: ...
    def get_next_in_tree(self, wrap: bool = False) -> TreeItem: ...
    def get_prev_in_tree(self, wrap: bool = False) -> TreeItem: ...
    def get_next_visible(self, wrap: bool = False) -> TreeItem: ...
    def get_prev_visible(self, wrap: bool = False) -> TreeItem: ...
    def get_child(self, index: int) -> TreeItem: ...
    def get_child_count(self) -> int: ...
    def get_children(self) -> GDArray: ...
    def get_index(self) -> int: ...
    def move_before(self, item: TreeItem) -> None: ...
    def move_after(self, item: TreeItem) -> None: ...
    def call_recursive(self, method: StringName | str) -> None: ...

    # Properties
    collapsed: bool
    visible: bool
    disable_folding: bool
    custom_minimum_height: int


class TriangleMesh(TypeInUse(RefCounted)):
    def __init__(self): ...


class Tween(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class Tween.TweenProcessMode(Enum):
        TWEEN_PROCESS_PHYSICS: int
        TWEEN_PROCESS_IDLE: int
    class Tween.TweenPauseMode(Enum):
        TWEEN_PAUSE_BOUND: int
        TWEEN_PAUSE_STOP: int
        TWEEN_PAUSE_PROCESS: int
    class Tween.TransitionType(Enum):
        TRANS_LINEAR: int
        TRANS_SINE: int
        TRANS_QUINT: int
        TRANS_QUART: int
        TRANS_QUAD: int
        TRANS_EXPO: int
        TRANS_ELASTIC: int
        TRANS_CUBIC: int
        TRANS_CIRC: int
        TRANS_BOUNCE: int
        TRANS_BACK: int
        TRANS_SPRING: int
    class Tween.EaseType(Enum):
        EASE_IN: int
        EASE_OUT: int
        EASE_IN_OUT: int
        EASE_OUT_IN: int

    # Methods
    def tween_property(self, object: GDObject, property: NodePath | str, final_val: GDAny, duration: float) -> PropertyTweener: ...
    def tween_interval(self, time: float) -> IntervalTweener: ...
    def tween_callback(self, callback: GDCallable) -> CallbackTweener: ...
    def tween_method(self, method: GDCallable, from_: GDAny, to: GDAny, duration: float) -> MethodTweener: ...
    def custom_step(self, delta: float) -> bool: ...
    def stop(self) -> None: ...
    def pause(self) -> None: ...
    def play(self) -> None: ...
    def kill(self) -> None: ...
    def get_total_elapsed_time(self) -> float: ...
    def is_running(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def bind_node(self, node: Node) -> Tween: ...
    def set_process_mode(self, mode: Tween.TweenProcessMode) -> Tween: ...
    def set_pause_mode(self, mode: Tween.TweenPauseMode) -> Tween: ...
    def set_parallel(self, parallel: bool = True) -> Tween: ...
    def set_loops(self, loops: int = 0) -> Tween: ...
    def get_loops_left(self) -> int: ...
    def set_speed_scale(self, speed: float) -> Tween: ...
    def set_trans(self, trans: Tween.TransitionType) -> Tween: ...
    def set_ease(self, ease: Tween.EaseType) -> Tween: ...
    def parallel(self) -> Tween: ...
    def chain(self) -> Tween: ...
    def interpolate_value(self, initial_value: GDAny, delta_value: GDAny, elapsed_time: float, duration: float, trans_type: Tween.TransitionType, ease_type: Tween.EaseType) -> GDAny: ...

    # Signals
    def step_finished(self, idx: int) -> None: ...
    def loop_finished(self, loop_count: int) -> None: ...
    def finished(self) -> None: ...


class Tweener(TypeInUse(RefCounted)):

    # Signals
    def finished(self) -> None: ...


class UDPServer(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def listen(self, port: int, bind_address: GDString | str = "*") -> Error: ...
    def poll(self) -> Error: ...
    def is_connection_available(self) -> bool: ...
    def get_local_port(self) -> int: ...
    def is_listening(self) -> bool: ...
    def take_connection(self) -> PacketPeerUDP: ...
    def stop(self) -> None: ...
    def set_max_pending_connections(self, max_pending_connections: int) -> None: ...
    def get_max_pending_connections(self) -> int: ...

    # Properties
    max_pending_connections: int


class UPNP(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class UPNP.UPNPResult(Enum):
        UPNP_RESULT_SUCCESS: int
        UPNP_RESULT_NOT_AUTHORIZED: int
        UPNP_RESULT_PORT_MAPPING_NOT_FOUND: int
        UPNP_RESULT_INCONSISTENT_PARAMETERS: int
        UPNP_RESULT_NO_SUCH_ENTRY_IN_ARRAY: int
        UPNP_RESULT_ACTION_FAILED: int
        UPNP_RESULT_SRC_IP_WILDCARD_NOT_PERMITTED: int
        UPNP_RESULT_EXT_PORT_WILDCARD_NOT_PERMITTED: int
        UPNP_RESULT_INT_PORT_WILDCARD_NOT_PERMITTED: int
        UPNP_RESULT_REMOTE_HOST_MUST_BE_WILDCARD: int
        UPNP_RESULT_EXT_PORT_MUST_BE_WILDCARD: int
        UPNP_RESULT_NO_PORT_MAPS_AVAILABLE: int
        UPNP_RESULT_CONFLICT_WITH_OTHER_MECHANISM: int
        UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING: int
        UPNP_RESULT_SAME_PORT_VALUES_REQUIRED: int
        UPNP_RESULT_ONLY_PERMANENT_LEASE_SUPPORTED: int
        UPNP_RESULT_INVALID_GATEWAY: int
        UPNP_RESULT_INVALID_PORT: int
        UPNP_RESULT_INVALID_PROTOCOL: int
        UPNP_RESULT_INVALID_DURATION: int
        UPNP_RESULT_INVALID_ARGS: int
        UPNP_RESULT_INVALID_RESPONSE: int
        UPNP_RESULT_INVALID_PARAM: int
        UPNP_RESULT_HTTP_ERROR: int
        UPNP_RESULT_SOCKET_ERROR: int
        UPNP_RESULT_MEM_ALLOC_ERROR: int
        UPNP_RESULT_NO_GATEWAY: int
        UPNP_RESULT_NO_DEVICES: int
        UPNP_RESULT_UNKNOWN_ERROR: int

    # Methods
    def get_device_count(self) -> int: ...
    def get_device(self, index: int) -> UPNPDevice: ...
    def add_device(self, device: UPNPDevice) -> None: ...
    def set_device(self, index: int, device: UPNPDevice) -> None: ...
    def remove_device(self, index: int) -> None: ...
    def clear_devices(self) -> None: ...
    def get_gateway(self) -> UPNPDevice: ...
    def discover(self, timeout: int = 2000, ttl: int = 2, device_filter: GDString | str = "InternetGatewayDevice") -> int: ...
    def query_external_address(self) -> GDString: ...
    def add_port_mapping(self, port: int, port_internal: int = 0, desc: GDString | str = "", proto: GDString | str = "UDP", duration: int = 0) -> int: ...
    def delete_port_mapping(self, port: int, proto: GDString | str = "UDP") -> int: ...
    def set_discover_multicast_if(self, m_if: GDString | str) -> None: ...
    def get_discover_multicast_if(self) -> GDString: ...
    def set_discover_local_port(self, port: int) -> None: ...
    def get_discover_local_port(self) -> int: ...
    def set_discover_ipv6(self, ipv6: bool) -> None: ...
    def is_discover_ipv6(self) -> bool: ...

    # Properties
    discover_multicast_if: GDString
    discover_local_port: int
    discover_ipv6: bool


class UPNPDevice(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class UPNPDevice.IGDStatus(Enum):
        IGD_STATUS_OK: int
        IGD_STATUS_HTTP_ERROR: int
        IGD_STATUS_HTTP_EMPTY: int
        IGD_STATUS_NO_URLS: int
        IGD_STATUS_NO_IGD: int
        IGD_STATUS_DISCONNECTED: int
        IGD_STATUS_UNKNOWN_DEVICE: int
        IGD_STATUS_INVALID_CONTROL: int
        IGD_STATUS_MALLOC_ERROR: int
        IGD_STATUS_UNKNOWN_ERROR: int

    # Methods
    def is_valid_gateway(self) -> bool: ...
    def query_external_address(self) -> GDString: ...
    def add_port_mapping(self, port: int, port_internal: int = 0, desc: GDString | str = "", proto: GDString | str = "UDP", duration: int = 0) -> int: ...
    def delete_port_mapping(self, port: int, proto: GDString | str = "UDP") -> int: ...
    def set_description_url(self, url: GDString | str) -> None: ...
    def get_description_url(self) -> GDString: ...
    def set_service_type(self, type: GDString | str) -> None: ...
    def get_service_type(self) -> GDString: ...
    def set_igd_control_url(self, url: GDString | str) -> None: ...
    def get_igd_control_url(self) -> GDString: ...
    def set_igd_service_type(self, type: GDString | str) -> None: ...
    def get_igd_service_type(self) -> GDString: ...
    def set_igd_our_addr(self, addr: GDString | str) -> None: ...
    def get_igd_our_addr(self) -> GDString: ...
    def set_igd_status(self, status: UPNPDevice.IGDStatus) -> None: ...
    def get_igd_status(self) -> UPNPDevice.IGDStatus: ...

    # Properties
    description_url: GDString
    service_type: GDString
    igd_control_url: GDString
    igd_service_type: GDString
    igd_our_addr: GDString
    igd_status: int


class UndoRedo(TypeInUse(Object)):
    @classmethod
    def new(cls) -> UndoRedo: ...

    # Enums
    class UndoRedo.MergeMode(Enum):
        MERGE_DISABLE: int
        MERGE_ENDS: int
        MERGE_ALL: int

    # Methods
    def create_action(self, name: GDString | str, merge_mode: UndoRedo.MergeMode = 0, backward_undo_ops: bool = False) -> None: ...
    def commit_action(self, execute: bool = True) -> None: ...
    def is_committing_action(self) -> bool: ...
    def add_do_method(self, callable: GDCallable) -> None: ...
    def add_undo_method(self, callable: GDCallable) -> None: ...
    def add_do_property(self, object: GDObject, property: StringName | str, value: GDAny) -> None: ...
    def add_undo_property(self, object: GDObject, property: StringName | str, value: GDAny) -> None: ...
    def add_do_reference(self, object: GDObject) -> None: ...
    def add_undo_reference(self, object: GDObject) -> None: ...
    def start_force_keep_in_merge_ends(self) -> None: ...
    def end_force_keep_in_merge_ends(self) -> None: ...
    def get_history_count(self) -> int: ...
    def get_current_action(self) -> int: ...
    def get_action_name(self, id: int) -> GDString: ...
    def clear_history(self, increase_version: bool = True) -> None: ...
    def get_current_action_name(self) -> GDString: ...
    def has_undo(self) -> bool: ...
    def has_redo(self) -> bool: ...
    def get_version(self) -> int: ...
    def redo(self) -> bool: ...
    def undo(self) -> bool: ...

    # Signals
    def version_changed(self) -> None: ...


class VideoStream(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_file(self, file: GDString | str) -> None: ...
    def get_file(self) -> GDString: ...

    # Properties
    file: GDString


class VideoStreamPlayback(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def mix_audio(self, num_frames: int, buffer: PackedFloat32Array = PackedFloat32Array(), offset: int = 0) -> int: ...


class VideoStreamTheora(TypeInUse(VideoStream)):
    def __init__(self): ...


class ViewportTexture(TypeInUse(Texture2D)):
    def __init__(self): ...

    # Methods
    def set_viewport_path_in_scene(self, path: NodePath | str) -> None: ...
    def get_viewport_path_in_scene(self) -> NodePath: ...

    # Properties
    viewport_path: NodePath


class VisualShader(TypeInUse(Shader)):
    def __init__(self): ...

    # Enums
    class VisualShader.Type(Enum):
        TYPE_VERTEX: int
        TYPE_FRAGMENT: int
        TYPE_LIGHT: int
        TYPE_START: int
        TYPE_PROCESS: int
        TYPE_COLLIDE: int
        TYPE_START_CUSTOM: int
        TYPE_PROCESS_CUSTOM: int
        TYPE_SKY: int
        TYPE_FOG: int
        TYPE_MAX: int
    class VisualShader.VaryingMode(Enum):
        VARYING_MODE_VERTEX_TO_FRAG_LIGHT: int
        VARYING_MODE_FRAG_TO_LIGHT: int
        VARYING_MODE_MAX: int
    class VisualShader.VaryingType(Enum):
        VARYING_TYPE_FLOAT: int
        VARYING_TYPE_INT: int
        VARYING_TYPE_UINT: int
        VARYING_TYPE_VECTOR_2D: int
        VARYING_TYPE_VECTOR_3D: int
        VARYING_TYPE_VECTOR_4D: int
        VARYING_TYPE_BOOLEAN: int
        VARYING_TYPE_TRANSFORM: int
        VARYING_TYPE_MAX: int

    # Methods
    def set_mode(self, mode: Shader.Mode) -> None: ...
    def add_node(self, type: VisualShader.Type, node: VisualShaderNode, position: Vector2, id: int) -> None: ...
    def get_node(self, type: VisualShader.Type, id: int) -> VisualShaderNode: ...
    def set_node_position(self, type: VisualShader.Type, id: int, position: Vector2) -> None: ...
    def get_node_position(self, type: VisualShader.Type, id: int) -> Vector2: ...
    def get_node_list(self, type: VisualShader.Type) -> PackedInt32Array: ...
    def get_valid_node_id(self, type: VisualShader.Type) -> int: ...
    def remove_node(self, type: VisualShader.Type, id: int) -> None: ...
    def replace_node(self, type: VisualShader.Type, id: int, new_class: StringName | str) -> None: ...
    def is_node_connection(self, type: VisualShader.Type, from_node: int, from_port: int, to_node: int, to_port: int) -> bool: ...
    def can_connect_nodes(self, type: VisualShader.Type, from_node: int, from_port: int, to_node: int, to_port: int) -> bool: ...
    def connect_nodes(self, type: VisualShader.Type, from_node: int, from_port: int, to_node: int, to_port: int) -> Error: ...
    def disconnect_nodes(self, type: VisualShader.Type, from_node: int, from_port: int, to_node: int, to_port: int) -> None: ...
    def connect_nodes_forced(self, type: VisualShader.Type, from_node: int, from_port: int, to_node: int, to_port: int) -> None: ...
    def get_node_connections(self, type: VisualShader.Type) -> GDArray: ...
    def set_graph_offset(self, offset: Vector2) -> None: ...
    def get_graph_offset(self) -> Vector2: ...
    def add_varying(self, name: GDString | str, mode: VisualShader.VaryingMode, type: VisualShader.VaryingType) -> None: ...
    def remove_varying(self, name: GDString | str) -> None: ...
    def has_varying(self, name: GDString | str) -> bool: ...

    # Properties
    graph_offset: Vector2

    # Constants
    NODE_ID_INVALID: int
    NODE_ID_OUTPUT: int


class VisualShaderNode(TypeInUse(Resource)):

    # Enums
    class VisualShaderNode.PortType(Enum):
        PORT_TYPE_SCALAR: int
        PORT_TYPE_SCALAR_INT: int
        PORT_TYPE_SCALAR_UINT: int
        PORT_TYPE_VECTOR_2D: int
        PORT_TYPE_VECTOR_3D: int
        PORT_TYPE_VECTOR_4D: int
        PORT_TYPE_BOOLEAN: int
        PORT_TYPE_TRANSFORM: int
        PORT_TYPE_SAMPLER: int
        PORT_TYPE_MAX: int

    # Methods
    def set_output_port_for_preview(self, port: int) -> None: ...
    def get_output_port_for_preview(self) -> int: ...
    def set_input_port_default_value(self, port: int, value: GDAny, prev_value: GDAny = None) -> None: ...
    def get_input_port_default_value(self, port: int) -> GDAny: ...
    def remove_input_port_default_value(self, port: int) -> None: ...
    def clear_default_input_values(self) -> None: ...
    def set_default_input_values(self, values: GDArray) -> None: ...
    def get_default_input_values(self) -> GDArray: ...

    # Properties
    output_port_for_preview: int
    default_input_values: GDArray
    expanded_output_ports: GDArray


class VisualShaderNodeBillboard(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeBillboard.BillboardType(Enum):
        BILLBOARD_TYPE_DISABLED: int
        BILLBOARD_TYPE_ENABLED: int
        BILLBOARD_TYPE_FIXED_Y: int
        BILLBOARD_TYPE_PARTICLES: int
        BILLBOARD_TYPE_MAX: int

    # Methods
    def set_billboard_type(self, billboard_type: VisualShaderNodeBillboard.BillboardType) -> None: ...
    def get_billboard_type(self) -> VisualShaderNodeBillboard.BillboardType: ...
    def set_keep_scale_enabled(self, enabled: bool) -> None: ...
    def is_keep_scale_enabled(self) -> bool: ...

    # Properties
    billboard_type: int
    keep_scale: bool


class VisualShaderNodeClamp(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeClamp.OpType(Enum):
        OP_TYPE_FLOAT: int
        OP_TYPE_INT: int
        OP_TYPE_UINT: int
        OP_TYPE_VECTOR_2D: int
        OP_TYPE_VECTOR_3D: int
        OP_TYPE_VECTOR_4D: int
        OP_TYPE_MAX: int

    # Methods
    def set_op_type(self, op_type: VisualShaderNodeClamp.OpType) -> None: ...
    def get_op_type(self) -> VisualShaderNodeClamp.OpType: ...

    # Properties
    op_type: int


class VisualShaderNodeColorFunc(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeColorFunc.Function(Enum):
        FUNC_GRAYSCALE: int
        FUNC_HSV2RGB: int
        FUNC_RGB2HSV: int
        FUNC_SEPIA: int
        FUNC_MAX: int

    # Methods
    def set_function(self, func: VisualShaderNodeColorFunc.Function) -> None: ...
    def get_function(self) -> VisualShaderNodeColorFunc.Function: ...

    # Properties
    function: int


class VisualShaderNodeColorOp(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeColorOp.Operator(Enum):
        OP_SCREEN: int
        OP_DIFFERENCE: int
        OP_DARKEN: int
        OP_LIGHTEN: int
        OP_OVERLAY: int
        OP_DODGE: int
        OP_BURN: int
        OP_SOFT_LIGHT: int
        OP_HARD_LIGHT: int
        OP_MAX: int

    # Methods
    def set_operator(self, op: VisualShaderNodeColorOp.Operator) -> None: ...
    def get_operator(self) -> VisualShaderNodeColorOp.Operator: ...

    # Properties
    operator: int


class VisualShaderNodeCompare(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeCompare.ComparisonType(Enum):
        CTYPE_SCALAR: int
        CTYPE_SCALAR_INT: int
        CTYPE_SCALAR_UINT: int
        CTYPE_VECTOR_2D: int
        CTYPE_VECTOR_3D: int
        CTYPE_VECTOR_4D: int
        CTYPE_BOOLEAN: int
        CTYPE_TRANSFORM: int
        CTYPE_MAX: int
    class VisualShaderNodeCompare.Function(Enum):
        FUNC_EQUAL: int
        FUNC_NOT_EQUAL: int
        FUNC_GREATER_THAN: int
        FUNC_GREATER_THAN_EQUAL: int
        FUNC_LESS_THAN: int
        FUNC_LESS_THAN_EQUAL: int
        FUNC_MAX: int
    class VisualShaderNodeCompare.Condition(Enum):
        COND_ALL: int
        COND_ANY: int
        COND_MAX: int

    # Methods
    def set_comparison_type(self, type: VisualShaderNodeCompare.ComparisonType) -> None: ...
    def get_comparison_type(self) -> VisualShaderNodeCompare.ComparisonType: ...
    def set_function(self, func: VisualShaderNodeCompare.Function) -> None: ...
    def get_function(self) -> VisualShaderNodeCompare.Function: ...
    def set_condition(self, condition: VisualShaderNodeCompare.Condition) -> None: ...
    def get_condition(self) -> VisualShaderNodeCompare.Condition: ...

    # Properties
    type: int
    function: int
    condition: int


class VisualShaderNodeConstant(TypeInUse(VisualShaderNode)):
    pass


class VisualShaderNodeCubemap(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeCubemap.Source(Enum):
        SOURCE_TEXTURE: int
        SOURCE_PORT: int
        SOURCE_MAX: int
    class VisualShaderNodeCubemap.TextureType(Enum):
        TYPE_DATA: int
        TYPE_COLOR: int
        TYPE_NORMAL_MAP: int
        TYPE_MAX: int

    # Methods
    def set_source(self, value: VisualShaderNodeCubemap.Source) -> None: ...
    def get_source(self) -> VisualShaderNodeCubemap.Source: ...
    def set_cube_map(self, value: Cubemap) -> None: ...
    def get_cube_map(self) -> Cubemap: ...
    def set_texture_type(self, value: VisualShaderNodeCubemap.TextureType) -> None: ...
    def get_texture_type(self) -> VisualShaderNodeCubemap.TextureType: ...

    # Properties
    source: int
    cube_map: Cubemap
    texture_type: int


class VisualShaderNodeCustom(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Properties
    initialized: bool


class VisualShaderNodeDerivativeFunc(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeDerivativeFunc.OpType(Enum):
        OP_TYPE_SCALAR: int
        OP_TYPE_VECTOR_2D: int
        OP_TYPE_VECTOR_3D: int
        OP_TYPE_VECTOR_4D: int
        OP_TYPE_MAX: int
    class VisualShaderNodeDerivativeFunc.Function(Enum):
        FUNC_SUM: int
        FUNC_X: int
        FUNC_Y: int
        FUNC_MAX: int
    class VisualShaderNodeDerivativeFunc.Precision(Enum):
        PRECISION_NONE: int
        PRECISION_COARSE: int
        PRECISION_FINE: int
        PRECISION_MAX: int

    # Methods
    def set_op_type(self, type: VisualShaderNodeDerivativeFunc.OpType) -> None: ...
    def get_op_type(self) -> VisualShaderNodeDerivativeFunc.OpType: ...
    def set_function(self, func: VisualShaderNodeDerivativeFunc.Function) -> None: ...
    def get_function(self) -> VisualShaderNodeDerivativeFunc.Function: ...
    def set_precision(self, precision: VisualShaderNodeDerivativeFunc.Precision) -> None: ...
    def get_precision(self) -> VisualShaderNodeDerivativeFunc.Precision: ...

    # Properties
    op_type: int
    function: int
    precision: int


class VisualShaderNodeDeterminant(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeDistanceFade(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeDotProduct(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeFloatConstant(TypeInUse(VisualShaderNodeConstant)):
    def __init__(self): ...

    # Methods
    def set_constant(self, constant: float) -> None: ...
    def get_constant(self) -> float: ...

    # Properties
    constant: float


class VisualShaderNodeFloatFunc(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeFloatFunc.Function(Enum):
        FUNC_SIN: int
        FUNC_COS: int
        FUNC_TAN: int
        FUNC_ASIN: int
        FUNC_ACOS: int
        FUNC_ATAN: int
        FUNC_SINH: int
        FUNC_COSH: int
        FUNC_TANH: int
        FUNC_LOG: int
        FUNC_EXP: int
        FUNC_SQRT: int
        FUNC_ABS: int
        FUNC_SIGN: int
        FUNC_FLOOR: int
        FUNC_ROUND: int
        FUNC_CEIL: int
        FUNC_FRACT: int
        FUNC_SATURATE: int
        FUNC_NEGATE: int
        FUNC_ACOSH: int
        FUNC_ASINH: int
        FUNC_ATANH: int
        FUNC_DEGREES: int
        FUNC_EXP2: int
        FUNC_INVERSE_SQRT: int
        FUNC_LOG2: int
        FUNC_RADIANS: int
        FUNC_RECIPROCAL: int
        FUNC_ROUNDEVEN: int
        FUNC_TRUNC: int
        FUNC_ONEMINUS: int
        FUNC_MAX: int

    # Methods
    def set_function(self, func: VisualShaderNodeFloatFunc.Function) -> None: ...
    def get_function(self) -> VisualShaderNodeFloatFunc.Function: ...

    # Properties
    function: int


class VisualShaderNodeFloatOp(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeFloatOp.Operator(Enum):
        OP_ADD: int
        OP_SUB: int
        OP_MUL: int
        OP_DIV: int
        OP_MOD: int
        OP_POW: int
        OP_MAX: int
        OP_MIN: int
        OP_ATAN2: int
        OP_STEP: int
        OP_ENUM_SIZE: int

    # Methods
    def set_operator(self, op: VisualShaderNodeFloatOp.Operator) -> None: ...
    def get_operator(self) -> VisualShaderNodeFloatOp.Operator: ...

    # Properties
    operator: int


class VisualShaderNodeFresnel(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeIf(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeInput(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Methods
    def set_input_name(self, name: GDString | str) -> None: ...
    def get_input_name(self) -> GDString: ...
    def get_input_real_name(self) -> GDString: ...

    # Signals
    def input_type_changed(self) -> None: ...

    # Properties
    input_name: StringName


class VisualShaderNodeIntConstant(TypeInUse(VisualShaderNodeConstant)):
    def __init__(self): ...

    # Methods
    def set_constant(self, constant: int) -> None: ...
    def get_constant(self) -> int: ...

    # Properties
    constant: int


class VisualShaderNodeIntFunc(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeIntFunc.Function(Enum):
        FUNC_ABS: int
        FUNC_NEGATE: int
        FUNC_SIGN: int
        FUNC_BITWISE_NOT: int
        FUNC_MAX: int

    # Methods
    def set_function(self, func: VisualShaderNodeIntFunc.Function) -> None: ...
    def get_function(self) -> VisualShaderNodeIntFunc.Function: ...

    # Properties
    function: int


class VisualShaderNodeIntOp(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeIntOp.Operator(Enum):
        OP_ADD: int
        OP_SUB: int
        OP_MUL: int
        OP_DIV: int
        OP_MOD: int
        OP_MAX: int
        OP_MIN: int
        OP_BITWISE_AND: int
        OP_BITWISE_OR: int
        OP_BITWISE_XOR: int
        OP_BITWISE_LEFT_SHIFT: int
        OP_BITWISE_RIGHT_SHIFT: int
        OP_ENUM_SIZE: int

    # Methods
    def set_operator(self, op: VisualShaderNodeIntOp.Operator) -> None: ...
    def get_operator(self) -> VisualShaderNodeIntOp.Operator: ...

    # Properties
    operator: int


class VisualShaderNodeIs(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeIs.Function(Enum):
        FUNC_IS_INF: int
        FUNC_IS_NAN: int
        FUNC_MAX: int

    # Methods
    def set_function(self, func: VisualShaderNodeIs.Function) -> None: ...
    def get_function(self) -> VisualShaderNodeIs.Function: ...

    # Properties
    function: int


class VisualShaderNodeLinearSceneDepth(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeMix(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeMix.OpType(Enum):
        OP_TYPE_SCALAR: int
        OP_TYPE_VECTOR_2D: int
        OP_TYPE_VECTOR_2D_SCALAR: int
        OP_TYPE_VECTOR_3D: int
        OP_TYPE_VECTOR_3D_SCALAR: int
        OP_TYPE_VECTOR_4D: int
        OP_TYPE_VECTOR_4D_SCALAR: int
        OP_TYPE_MAX: int

    # Methods
    def set_op_type(self, op_type: VisualShaderNodeMix.OpType) -> None: ...
    def get_op_type(self) -> VisualShaderNodeMix.OpType: ...

    # Properties
    op_type: int


class VisualShaderNodeMultiplyAdd(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeMultiplyAdd.OpType(Enum):
        OP_TYPE_SCALAR: int
        OP_TYPE_VECTOR_2D: int
        OP_TYPE_VECTOR_3D: int
        OP_TYPE_VECTOR_4D: int
        OP_TYPE_MAX: int

    # Methods
    def set_op_type(self, type: VisualShaderNodeMultiplyAdd.OpType) -> None: ...
    def get_op_type(self) -> VisualShaderNodeMultiplyAdd.OpType: ...

    # Properties
    op_type: int


class VisualShaderNodeOuterProduct(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeOutput(TypeInUse(VisualShaderNode)):
    pass


class VisualShaderNodeParameter(TypeInUse(VisualShaderNode)):

    # Enums
    class VisualShaderNodeParameter.Qualifier(Enum):
        QUAL_NONE: int
        QUAL_GLOBAL: int
        QUAL_INSTANCE: int
        QUAL_MAX: int

    # Methods
    def set_parameter_name(self, name: GDString | str) -> None: ...
    def get_parameter_name(self) -> GDString: ...
    def set_qualifier(self, qualifier: VisualShaderNodeParameter.Qualifier) -> None: ...
    def get_qualifier(self) -> VisualShaderNodeParameter.Qualifier: ...

    # Properties
    parameter_name: StringName
    qualifier: int


class VisualShaderNodeParameterRef(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Methods
    def set_parameter_name(self, name: GDString | str) -> None: ...
    def get_parameter_name(self) -> GDString: ...

    # Properties
    parameter_name: StringName
    param_type: int


class VisualShaderNodeParticleAccelerator(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeParticleAccelerator.Mode(Enum):
        MODE_LINEAR: int
        MODE_RADIAL: int
        MODE_TANGENTIAL: int
        MODE_MAX: int

    # Methods
    def set_mode(self, mode: VisualShaderNodeParticleAccelerator.Mode) -> None: ...
    def get_mode(self) -> VisualShaderNodeParticleAccelerator.Mode: ...

    # Properties
    mode: int


class VisualShaderNodeParticleConeVelocity(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeParticleEmit(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeParticleEmit.EmitFlags(Enum):
        EMIT_FLAG_POSITION: int
        EMIT_FLAG_ROT_SCALE: int
        EMIT_FLAG_VELOCITY: int
        EMIT_FLAG_COLOR: int
        EMIT_FLAG_CUSTOM: int

    # Methods
    def set_flags(self, flags: VisualShaderNodeParticleEmit.EmitFlags) -> None: ...
    def get_flags(self) -> VisualShaderNodeParticleEmit.EmitFlags: ...

    # Properties
    flags: int


class VisualShaderNodeParticleEmitter(TypeInUse(VisualShaderNode)):

    # Methods
    def set_mode_2d(self, enabled: bool) -> None: ...
    def is_mode_2d(self) -> bool: ...

    # Properties
    mode_2d: bool


class VisualShaderNodeParticleMeshEmitter(TypeInUse(VisualShaderNodeParticleEmitter)):
    def __init__(self): ...

    # Methods
    def set_mesh(self, mesh: Mesh) -> None: ...
    def get_mesh(self) -> Mesh: ...
    def set_use_all_surfaces(self, enabled: bool) -> None: ...
    def is_use_all_surfaces(self) -> bool: ...
    def set_surface_index(self, surface_index: int) -> None: ...
    def get_surface_index(self) -> int: ...

    # Properties
    mesh: Mesh
    use_all_surfaces: bool
    surface_index: int


class VisualShaderNodeParticleMultiplyByAxisAngle(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Methods
    def set_degrees_mode(self, enabled: bool) -> None: ...
    def is_degrees_mode(self) -> bool: ...

    # Properties
    degrees_mode: bool


class VisualShaderNodeParticleOutput(TypeInUse(VisualShaderNodeOutput)):
    def __init__(self): ...


class VisualShaderNodeParticleRandomness(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeParticleRandomness.OpType(Enum):
        OP_TYPE_SCALAR: int
        OP_TYPE_VECTOR_2D: int
        OP_TYPE_VECTOR_3D: int
        OP_TYPE_VECTOR_4D: int
        OP_TYPE_MAX: int

    # Methods
    def set_op_type(self, type: VisualShaderNodeParticleRandomness.OpType) -> None: ...
    def get_op_type(self) -> VisualShaderNodeParticleRandomness.OpType: ...

    # Properties
    op_type: int


class VisualShaderNodeParticleRingEmitter(TypeInUse(VisualShaderNodeParticleEmitter)):
    def __init__(self): ...


class VisualShaderNodeParticleSphereEmitter(TypeInUse(VisualShaderNodeParticleEmitter)):
    def __init__(self): ...


class VisualShaderNodeProximityFade(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeRandomRange(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeRemap(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeResizableBase(TypeInUse(VisualShaderNode)):

    # Methods
    def set_size(self, size: Vector2) -> None: ...
    def get_size(self) -> Vector2: ...

    # Properties
    size: Vector2


class VisualShaderNodeSDFRaymarch(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeSDFToScreenUV(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeSample3D(TypeInUse(VisualShaderNode)):

    # Enums
    class VisualShaderNodeSample3D.Source(Enum):
        SOURCE_TEXTURE: int
        SOURCE_PORT: int
        SOURCE_MAX: int

    # Methods
    def set_source(self, value: VisualShaderNodeSample3D.Source) -> None: ...
    def get_source(self) -> VisualShaderNodeSample3D.Source: ...

    # Properties
    source: int


class VisualShaderNodeScreenUVToSDF(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeSmoothStep(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeSmoothStep.OpType(Enum):
        OP_TYPE_SCALAR: int
        OP_TYPE_VECTOR_2D: int
        OP_TYPE_VECTOR_2D_SCALAR: int
        OP_TYPE_VECTOR_3D: int
        OP_TYPE_VECTOR_3D_SCALAR: int
        OP_TYPE_VECTOR_4D: int
        OP_TYPE_VECTOR_4D_SCALAR: int
        OP_TYPE_MAX: int

    # Methods
    def set_op_type(self, op_type: VisualShaderNodeSmoothStep.OpType) -> None: ...
    def get_op_type(self) -> VisualShaderNodeSmoothStep.OpType: ...

    # Properties
    op_type: int


class VisualShaderNodeStep(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeStep.OpType(Enum):
        OP_TYPE_SCALAR: int
        OP_TYPE_VECTOR_2D: int
        OP_TYPE_VECTOR_2D_SCALAR: int
        OP_TYPE_VECTOR_3D: int
        OP_TYPE_VECTOR_3D_SCALAR: int
        OP_TYPE_VECTOR_4D: int
        OP_TYPE_VECTOR_4D_SCALAR: int
        OP_TYPE_MAX: int

    # Methods
    def set_op_type(self, op_type: VisualShaderNodeStep.OpType) -> None: ...
    def get_op_type(self) -> VisualShaderNodeStep.OpType: ...

    # Properties
    op_type: int


class VisualShaderNodeSwitch(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeSwitch.OpType(Enum):
        OP_TYPE_FLOAT: int
        OP_TYPE_INT: int
        OP_TYPE_UINT: int
        OP_TYPE_VECTOR_2D: int
        OP_TYPE_VECTOR_3D: int
        OP_TYPE_VECTOR_4D: int
        OP_TYPE_BOOLEAN: int
        OP_TYPE_TRANSFORM: int
        OP_TYPE_MAX: int

    # Methods
    def set_op_type(self, type: VisualShaderNodeSwitch.OpType) -> None: ...
    def get_op_type(self) -> VisualShaderNodeSwitch.OpType: ...

    # Properties
    op_type: int


class VisualShaderNodeTexture(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeTexture.Source(Enum):
        SOURCE_TEXTURE: int
        SOURCE_SCREEN: int
        SOURCE_2D_TEXTURE: int
        SOURCE_2D_NORMAL: int
        SOURCE_DEPTH: int
        SOURCE_PORT: int
        SOURCE_3D_NORMAL: int
        SOURCE_ROUGHNESS: int
        SOURCE_MAX: int
    class VisualShaderNodeTexture.TextureType(Enum):
        TYPE_DATA: int
        TYPE_COLOR: int
        TYPE_NORMAL_MAP: int
        TYPE_MAX: int

    # Methods
    def set_source(self, value: VisualShaderNodeTexture.Source) -> None: ...
    def get_source(self) -> VisualShaderNodeTexture.Source: ...
    def set_texture(self, value: Texture2D) -> None: ...
    def get_texture(self) -> Texture2D: ...
    def set_texture_type(self, value: VisualShaderNodeTexture.TextureType) -> None: ...
    def get_texture_type(self) -> VisualShaderNodeTexture.TextureType: ...

    # Properties
    source: int
    texture: Texture2D
    texture_type: int


class VisualShaderNodeTexture2DArray(TypeInUse(VisualShaderNodeSample3D)):
    def __init__(self): ...

    # Methods
    def set_texture_array(self, value: Texture2DArray) -> None: ...
    def get_texture_array(self) -> Texture2DArray: ...

    # Properties
    texture_array: Texture2DArray


class VisualShaderNodeTexture3D(TypeInUse(VisualShaderNodeSample3D)):
    def __init__(self): ...

    # Methods
    def set_texture(self, value: Texture3D) -> None: ...
    def get_texture(self) -> Texture3D: ...

    # Properties
    texture: Texture3D


class VisualShaderNodeTextureParameter(TypeInUse(VisualShaderNodeParameter)):

    # Enums
    class VisualShaderNodeTextureParameter.TextureType(Enum):
        TYPE_DATA: int
        TYPE_COLOR: int
        TYPE_NORMAL_MAP: int
        TYPE_ANISOTROPY: int
        TYPE_MAX: int
    class VisualShaderNodeTextureParameter.ColorDefault(Enum):
        COLOR_DEFAULT_WHITE: int
        COLOR_DEFAULT_BLACK: int
        COLOR_DEFAULT_TRANSPARENT: int
        COLOR_DEFAULT_MAX: int
    class VisualShaderNodeTextureParameter.TextureFilter(Enum):
        FILTER_DEFAULT: int
        FILTER_NEAREST: int
        FILTER_LINEAR: int
        FILTER_NEAREST_MIPMAP: int
        FILTER_LINEAR_MIPMAP: int
        FILTER_NEAREST_MIPMAP_ANISOTROPIC: int
        FILTER_LINEAR_MIPMAP_ANISOTROPIC: int
        FILTER_MAX: int
    class VisualShaderNodeTextureParameter.TextureRepeat(Enum):
        REPEAT_DEFAULT: int
        REPEAT_ENABLED: int
        REPEAT_DISABLED: int
        REPEAT_MAX: int
    class VisualShaderNodeTextureParameter.TextureSource(Enum):
        SOURCE_NONE: int
        SOURCE_SCREEN: int
        SOURCE_DEPTH: int
        SOURCE_NORMAL_ROUGHNESS: int
        SOURCE_MAX: int

    # Methods
    def set_texture_type(self, type: VisualShaderNodeTextureParameter.TextureType) -> None: ...
    def get_texture_type(self) -> VisualShaderNodeTextureParameter.TextureType: ...
    def set_color_default(self, color: VisualShaderNodeTextureParameter.ColorDefault) -> None: ...
    def get_color_default(self) -> VisualShaderNodeTextureParameter.ColorDefault: ...
    def set_texture_filter(self, filter: VisualShaderNodeTextureParameter.TextureFilter) -> None: ...
    def get_texture_filter(self) -> VisualShaderNodeTextureParameter.TextureFilter: ...
    def set_texture_repeat(self, repeat: VisualShaderNodeTextureParameter.TextureRepeat) -> None: ...
    def get_texture_repeat(self) -> VisualShaderNodeTextureParameter.TextureRepeat: ...
    def set_texture_source(self, source: VisualShaderNodeTextureParameter.TextureSource) -> None: ...
    def get_texture_source(self) -> VisualShaderNodeTextureParameter.TextureSource: ...

    # Properties
    texture_type: int
    color_default: int
    texture_filter: int
    texture_repeat: int
    texture_source: int


class VisualShaderNodeTextureParameterTriplanar(TypeInUse(VisualShaderNodeTextureParameter)):
    def __init__(self): ...


class VisualShaderNodeTextureSDF(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeTextureSDFNormal(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeTransformCompose(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeTransformConstant(TypeInUse(VisualShaderNodeConstant)):
    def __init__(self): ...

    # Methods
    def set_constant(self, constant: Transform3D) -> None: ...
    def get_constant(self) -> Transform3D: ...

    # Properties
    constant: Transform3D


class VisualShaderNodeTransformDecompose(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeTransformFunc(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeTransformFunc.Function(Enum):
        FUNC_INVERSE: int
        FUNC_TRANSPOSE: int
        FUNC_MAX: int

    # Methods
    def set_function(self, func: VisualShaderNodeTransformFunc.Function) -> None: ...
    def get_function(self) -> VisualShaderNodeTransformFunc.Function: ...

    # Properties
    function: int


class VisualShaderNodeTransformOp(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeTransformOp.Operator(Enum):
        OP_AxB: int
        OP_BxA: int
        OP_AxB_COMP: int
        OP_BxA_COMP: int
        OP_ADD: int
        OP_A_MINUS_B: int
        OP_B_MINUS_A: int
        OP_A_DIV_B: int
        OP_B_DIV_A: int
        OP_MAX: int

    # Methods
    def set_operator(self, op: VisualShaderNodeTransformOp.Operator) -> None: ...
    def get_operator(self) -> VisualShaderNodeTransformOp.Operator: ...

    # Properties
    operator: int


class VisualShaderNodeTransformParameter(TypeInUse(VisualShaderNodeParameter)):
    def __init__(self): ...

    # Methods
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: Transform3D) -> None: ...
    def get_default_value(self) -> Transform3D: ...

    # Properties
    default_value_enabled: bool
    default_value: Transform3D


class VisualShaderNodeTransformVecMult(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeTransformVecMult.Operator(Enum):
        OP_AxB: int
        OP_BxA: int
        OP_3x3_AxB: int
        OP_3x3_BxA: int
        OP_MAX: int

    # Methods
    def set_operator(self, op: VisualShaderNodeTransformVecMult.Operator) -> None: ...
    def get_operator(self) -> VisualShaderNodeTransformVecMult.Operator: ...

    # Properties
    operator: int


class VisualShaderNodeUIntConstant(TypeInUse(VisualShaderNodeConstant)):
    def __init__(self): ...

    # Methods
    def set_constant(self, constant: int) -> None: ...
    def get_constant(self) -> int: ...

    # Properties
    constant: int


class VisualShaderNodeUIntFunc(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeUIntFunc.Function(Enum):
        FUNC_NEGATE: int
        FUNC_BITWISE_NOT: int
        FUNC_MAX: int

    # Methods
    def set_function(self, func: VisualShaderNodeUIntFunc.Function) -> None: ...
    def get_function(self) -> VisualShaderNodeUIntFunc.Function: ...

    # Properties
    function: int


class VisualShaderNodeUIntOp(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeUIntOp.Operator(Enum):
        OP_ADD: int
        OP_SUB: int
        OP_MUL: int
        OP_DIV: int
        OP_MOD: int
        OP_MAX: int
        OP_MIN: int
        OP_BITWISE_AND: int
        OP_BITWISE_OR: int
        OP_BITWISE_XOR: int
        OP_BITWISE_LEFT_SHIFT: int
        OP_BITWISE_RIGHT_SHIFT: int
        OP_ENUM_SIZE: int

    # Methods
    def set_operator(self, op: VisualShaderNodeUIntOp.Operator) -> None: ...
    def get_operator(self) -> VisualShaderNodeUIntOp.Operator: ...

    # Properties
    operator: int


class VisualShaderNodeUIntParameter(TypeInUse(VisualShaderNodeParameter)):
    def __init__(self): ...

    # Methods
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: int) -> None: ...
    def get_default_value(self) -> int: ...

    # Properties
    default_value_enabled: bool
    default_value: int


class VisualShaderNodeUVFunc(TypeInUse(VisualShaderNode)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeUVFunc.Function(Enum):
        FUNC_PANNING: int
        FUNC_SCALING: int
        FUNC_MAX: int

    # Methods
    def set_function(self, func: VisualShaderNodeUVFunc.Function) -> None: ...
    def get_function(self) -> VisualShaderNodeUVFunc.Function: ...

    # Properties
    function: int


class VisualShaderNodeUVPolarCoord(TypeInUse(VisualShaderNode)):
    def __init__(self): ...


class VisualShaderNodeVarying(TypeInUse(VisualShaderNode)):

    # Methods
    def set_varying_name(self, name: GDString | str) -> None: ...
    def get_varying_name(self) -> GDString: ...
    def set_varying_type(self, type: VisualShader.VaryingType) -> None: ...
    def get_varying_type(self) -> VisualShader.VaryingType: ...

    # Properties
    varying_name: StringName
    varying_type: int


class VisualShaderNodeVaryingGetter(TypeInUse(VisualShaderNodeVarying)):
    def __init__(self): ...


class VisualShaderNodeVaryingSetter(TypeInUse(VisualShaderNodeVarying)):
    def __init__(self): ...


class VisualShaderNodeVec2Constant(TypeInUse(VisualShaderNodeConstant)):
    def __init__(self): ...

    # Methods
    def set_constant(self, constant: Vector2) -> None: ...
    def get_constant(self) -> Vector2: ...

    # Properties
    constant: Vector2


class VisualShaderNodeVec2Parameter(TypeInUse(VisualShaderNodeParameter)):
    def __init__(self): ...

    # Methods
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: Vector2) -> None: ...
    def get_default_value(self) -> Vector2: ...

    # Properties
    default_value_enabled: bool
    default_value: Vector2


class VisualShaderNodeVec3Constant(TypeInUse(VisualShaderNodeConstant)):
    def __init__(self): ...

    # Methods
    def set_constant(self, constant: Vector3) -> None: ...
    def get_constant(self) -> Vector3: ...

    # Properties
    constant: Vector3


class VisualShaderNodeVec3Parameter(TypeInUse(VisualShaderNodeParameter)):
    def __init__(self): ...

    # Methods
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: Vector3) -> None: ...
    def get_default_value(self) -> Vector3: ...

    # Properties
    default_value_enabled: bool
    default_value: Vector3


class VisualShaderNodeVec4Constant(TypeInUse(VisualShaderNodeConstant)):
    def __init__(self): ...

    # Methods
    def set_constant(self, constant: Quaternion) -> None: ...
    def get_constant(self) -> Quaternion: ...

    # Properties
    constant: Quaternion


class VisualShaderNodeVec4Parameter(TypeInUse(VisualShaderNodeParameter)):
    def __init__(self): ...

    # Methods
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: Vector4) -> None: ...
    def get_default_value(self) -> Vector4: ...

    # Properties
    default_value_enabled: bool
    default_value: Vector4


class VisualShaderNodeVectorBase(TypeInUse(VisualShaderNode)):

    # Enums
    class VisualShaderNodeVectorBase.OpType(Enum):
        OP_TYPE_VECTOR_2D: int
        OP_TYPE_VECTOR_3D: int
        OP_TYPE_VECTOR_4D: int
        OP_TYPE_MAX: int

    # Methods
    def set_op_type(self, type: VisualShaderNodeVectorBase.OpType) -> None: ...
    def get_op_type(self) -> VisualShaderNodeVectorBase.OpType: ...

    # Properties
    op_type: int


class VisualShaderNodeVectorCompose(TypeInUse(VisualShaderNodeVectorBase)):
    def __init__(self): ...


class VisualShaderNodeVectorDecompose(TypeInUse(VisualShaderNodeVectorBase)):
    def __init__(self): ...


class VisualShaderNodeVectorDistance(TypeInUse(VisualShaderNodeVectorBase)):
    def __init__(self): ...


class VisualShaderNodeVectorFunc(TypeInUse(VisualShaderNodeVectorBase)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeVectorFunc.Function(Enum):
        FUNC_NORMALIZE: int
        FUNC_SATURATE: int
        FUNC_NEGATE: int
        FUNC_RECIPROCAL: int
        FUNC_ABS: int
        FUNC_ACOS: int
        FUNC_ACOSH: int
        FUNC_ASIN: int
        FUNC_ASINH: int
        FUNC_ATAN: int
        FUNC_ATANH: int
        FUNC_CEIL: int
        FUNC_COS: int
        FUNC_COSH: int
        FUNC_DEGREES: int
        FUNC_EXP: int
        FUNC_EXP2: int
        FUNC_FLOOR: int
        FUNC_FRACT: int
        FUNC_INVERSE_SQRT: int
        FUNC_LOG: int
        FUNC_LOG2: int
        FUNC_RADIANS: int
        FUNC_ROUND: int
        FUNC_ROUNDEVEN: int
        FUNC_SIGN: int
        FUNC_SIN: int
        FUNC_SINH: int
        FUNC_SQRT: int
        FUNC_TAN: int
        FUNC_TANH: int
        FUNC_TRUNC: int
        FUNC_ONEMINUS: int
        FUNC_MAX: int

    # Methods
    def set_function(self, func: VisualShaderNodeVectorFunc.Function) -> None: ...
    def get_function(self) -> VisualShaderNodeVectorFunc.Function: ...

    # Properties
    function: int


class VisualShaderNodeVectorLen(TypeInUse(VisualShaderNodeVectorBase)):
    def __init__(self): ...


class VisualShaderNodeVectorOp(TypeInUse(VisualShaderNodeVectorBase)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeVectorOp.Operator(Enum):
        OP_ADD: int
        OP_SUB: int
        OP_MUL: int
        OP_DIV: int
        OP_MOD: int
        OP_POW: int
        OP_MAX: int
        OP_MIN: int
        OP_CROSS: int
        OP_ATAN2: int
        OP_REFLECT: int
        OP_STEP: int
        OP_ENUM_SIZE: int

    # Methods
    def set_operator(self, op: VisualShaderNodeVectorOp.Operator) -> None: ...
    def get_operator(self) -> VisualShaderNodeVectorOp.Operator: ...

    # Properties
    operator: int


class VisualShaderNodeVectorRefract(TypeInUse(VisualShaderNodeVectorBase)):
    def __init__(self): ...


class VoxelGIData(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def allocate(self, to_cell_xform: Transform3D, aabb: AABB, octree_size: Vector3, octree_cells: PackedByteArray, data_cells: PackedByteArray, distance_field: PackedByteArray, level_counts: PackedInt32Array) -> None: ...
    def get_bounds(self) -> AABB: ...
    def get_octree_size(self) -> Vector3: ...
    def get_to_cell_xform(self) -> Transform3D: ...
    def get_octree_cells(self) -> PackedByteArray: ...
    def get_data_cells(self) -> PackedByteArray: ...
    def get_level_counts(self) -> PackedInt32Array: ...
    def set_dynamic_range(self, dynamic_range: float) -> None: ...
    def get_dynamic_range(self) -> float: ...
    def set_energy(self, energy: float) -> None: ...
    def get_energy(self) -> float: ...
    def set_bias(self, bias: float) -> None: ...
    def get_bias(self) -> float: ...
    def set_normal_bias(self, bias: float) -> None: ...
    def get_normal_bias(self) -> float: ...
    def set_propagation(self, propagation: float) -> None: ...
    def get_propagation(self) -> float: ...
    def set_interior(self, interior: bool) -> None: ...
    def is_interior(self) -> bool: ...
    def set_use_two_bounces(self, enable: bool) -> None: ...
    def is_using_two_bounces(self) -> bool: ...

    # Properties
    dynamic_range: float
    energy: float
    bias: float
    normal_bias: float
    propagation: float
    use_two_bounces: bool
    interior: bool


class WeakRef(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def get_ref(self) -> GDAny: ...


class WebRTCPeerConnection(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class WebRTCPeerConnection.ConnectionState(Enum):
        STATE_NEW: int
        STATE_CONNECTING: int
        STATE_CONNECTED: int
        STATE_DISCONNECTED: int
        STATE_FAILED: int
        STATE_CLOSED: int
    class WebRTCPeerConnection.GatheringState(Enum):
        GATHERING_STATE_NEW: int
        GATHERING_STATE_GATHERING: int
        GATHERING_STATE_COMPLETE: int
    class WebRTCPeerConnection.SignalingState(Enum):
        SIGNALING_STATE_STABLE: int
        SIGNALING_STATE_HAVE_LOCAL_OFFER: int
        SIGNALING_STATE_HAVE_REMOTE_OFFER: int
        SIGNALING_STATE_HAVE_LOCAL_PRANSWER: int
        SIGNALING_STATE_HAVE_REMOTE_PRANSWER: int
        SIGNALING_STATE_CLOSED: int

    # Methods
    def set_default_extension(self, extension_class: StringName | str) -> None: ...
    def initialize(self, configuration: GDDictionary | Mapping[IntoGDAny, IntoGDAny] = {}) -> Error: ...
    def create_data_channel(self, label: GDString | str, options: GDDictionary | Mapping[IntoGDAny, IntoGDAny] = {}) -> WebRTCDataChannel: ...
    def create_offer(self) -> Error: ...
    def set_local_description(self, type: GDString | str, sdp: GDString | str) -> Error: ...
    def set_remote_description(self, type: GDString | str, sdp: GDString | str) -> Error: ...
    def add_ice_candidate(self, media: GDString | str, index: int, name: GDString | str) -> Error: ...
    def poll(self) -> Error: ...
    def close(self) -> None: ...
    def get_connection_state(self) -> WebRTCPeerConnection.ConnectionState: ...
    def get_gathering_state(self) -> WebRTCPeerConnection.GatheringState: ...
    def get_signaling_state(self) -> WebRTCPeerConnection.SignalingState: ...

    # Signals
    def session_description_created(self, type: GDString | str, sdp: GDString | str) -> None: ...
    def ice_candidate_created(self, media: GDString | str, index: int, name: GDString | str) -> None: ...
    def data_channel_received(self, channel: WebRTCDataChannel) -> None: ...


class WebRTCPeerConnectionExtension(TypeInUse(WebRTCPeerConnection)):
    def __init__(self): ...


class WorkerThreadPool(TypeInUse(Object)):

    # Methods
    def add_task(self, action: GDCallable, high_priority: bool = False, description: GDString | str = "") -> int: ...
    def is_task_completed(self, task_id: int) -> bool: ...
    def wait_for_task_completion(self, task_id: int) -> Error: ...
    def add_group_task(self, action: GDCallable, elements: int, tasks_needed: int = -1, high_priority: bool = False, description: GDString | str = "") -> int: ...
    def is_group_task_completed(self, group_id: int) -> bool: ...
    def get_group_processed_element_count(self, group_id: int) -> int: ...
    def wait_for_group_task_completion(self, group_id: int) -> None: ...


class World2D(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_canvas(self) -> RID: ...
    def get_space(self) -> RID: ...
    def get_navigation_map(self) -> RID: ...
    def get_direct_space_state(self) -> PhysicsDirectSpaceState2D: ...

    # Properties
    canvas: RID
    space: RID
    navigation_map: RID
    direct_space_state: PhysicsDirectSpaceState2D


class World3D(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_space(self) -> RID: ...
    def get_navigation_map(self) -> RID: ...
    def get_scenario(self) -> RID: ...
    def set_environment(self, env: Environment) -> None: ...
    def get_environment(self) -> Environment: ...
    def set_fallback_environment(self, env: Environment) -> None: ...
    def get_fallback_environment(self) -> Environment: ...
    def set_camera_attributes(self, attributes: CameraAttributes) -> None: ...
    def get_camera_attributes(self) -> CameraAttributes: ...
    def get_direct_space_state(self) -> PhysicsDirectSpaceState3D: ...

    # Properties
    environment: Environment
    fallback_environment: Environment
    camera_attributes: CameraAttributesPractical | CameraAttributesPhysical
    space: RID
    navigation_map: RID
    scenario: RID
    direct_space_state: PhysicsDirectSpaceState3D


class WorldBoundaryShape2D(TypeInUse(Shape2D)):
    def __init__(self): ...

    # Methods
    def set_normal(self, normal: Vector2) -> None: ...
    def get_normal(self) -> Vector2: ...
    def set_distance(self, distance: float) -> None: ...
    def get_distance(self) -> float: ...

    # Properties
    normal: Vector2
    distance: float


class WorldBoundaryShape3D(TypeInUse(Shape3D)):
    def __init__(self): ...

    # Methods
    def set_plane(self, plane: Plane) -> None: ...
    def get_plane(self) -> Plane: ...

    # Properties
    plane: Plane


class X509Certificate(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def save(self, path: GDString | str) -> Error: ...
    def load(self, path: GDString | str) -> Error: ...
    def save_to_string(self) -> GDString: ...
    def load_from_string(self, string: GDString | str) -> Error: ...


class XMLParser(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class XMLParser.NodeType(Enum):
        NODE_NONE: int
        NODE_ELEMENT: int
        NODE_ELEMENT_END: int
        NODE_TEXT: int
        NODE_COMMENT: int
        NODE_CDATA: int
        NODE_UNKNOWN: int

    # Methods
    def read(self) -> Error: ...
    def get_node_type(self) -> XMLParser.NodeType: ...
    def get_node_name(self) -> GDString: ...
    def get_node_data(self) -> GDString: ...
    def get_node_offset(self) -> int: ...
    def get_attribute_count(self) -> int: ...
    def get_attribute_name(self, idx: int) -> GDString: ...
    def get_attribute_value(self, idx: int) -> GDString: ...
    def has_attribute(self, name: GDString | str) -> bool: ...
    def get_named_attribute_value(self, name: GDString | str) -> GDString: ...
    def get_named_attribute_value_safe(self, name: GDString | str) -> GDString: ...
    def is_empty(self) -> bool: ...
    def get_current_line(self) -> int: ...
    def skip_section(self) -> None: ...
    def seek(self, position: int) -> Error: ...
    def open(self, file: GDString | str) -> Error: ...
    def open_buffer(self, buffer: PackedByteArray) -> Error: ...


class XRInterface(TypeInUse(RefCounted)):

    # Enums
    class XRInterface.Capabilities(Enum):
        XR_NONE: int
        XR_MONO: int
        XR_STEREO: int
        XR_QUAD: int
        XR_VR: int
        XR_AR: int
        XR_EXTERNAL: int
    class XRInterface.TrackingStatus(Enum):
        XR_NORMAL_TRACKING: int
        XR_EXCESSIVE_MOTION: int
        XR_INSUFFICIENT_FEATURES: int
        XR_UNKNOWN_TRACKING: int
        XR_NOT_TRACKING: int
    class XRInterface.PlayAreaMode(Enum):
        XR_PLAY_AREA_UNKNOWN: int
        XR_PLAY_AREA_3DOF: int
        XR_PLAY_AREA_SITTING: int
        XR_PLAY_AREA_ROOMSCALE: int
        XR_PLAY_AREA_STAGE: int
    class XRInterface.EnvironmentBlendMode(Enum):
        XR_ENV_BLEND_MODE_OPAQUE: int
        XR_ENV_BLEND_MODE_ADDITIVE: int
        XR_ENV_BLEND_MODE_ALPHA_BLEND: int

    # Methods
    def get_name(self) -> StringName: ...
    def get_capabilities(self) -> int: ...
    def is_primary(self) -> bool: ...
    def set_primary(self, primary: bool) -> None: ...
    def is_initialized(self) -> bool: ...
    def initialize(self) -> bool: ...
    def uninitialize(self) -> None: ...
    def get_system_info(self) -> GDDictionary: ...
    def get_tracking_status(self) -> XRInterface.TrackingStatus: ...
    def get_render_target_size(self) -> Vector2: ...
    def get_view_count(self) -> int: ...
    def trigger_haptic_pulse(self, action_name: GDString | str, tracker_name: StringName | str, frequency: float, amplitude: float, duration_sec: float, delay_sec: float) -> None: ...
    def supports_play_area_mode(self, mode: XRInterface.PlayAreaMode) -> bool: ...
    def get_play_area_mode(self) -> XRInterface.PlayAreaMode: ...
    def set_play_area_mode(self, mode: XRInterface.PlayAreaMode) -> bool: ...
    def get_play_area(self) -> PackedVector3Array: ...
    def get_anchor_detection_is_enabled(self) -> bool: ...
    def set_anchor_detection_is_enabled(self, enable: bool) -> None: ...
    def get_camera_feed_id(self) -> int: ...
    def is_passthrough_supported(self) -> bool: ...
    def is_passthrough_enabled(self) -> bool: ...
    def start_passthrough(self) -> bool: ...
    def stop_passthrough(self) -> None: ...
    def get_transform_for_view(self, view: int, cam_transform: Transform3D) -> Transform3D: ...
    def get_projection_for_view(self, view: int, aspect: float, near: float, far: float) -> Projection: ...
    def get_supported_environment_blend_modes(self) -> GDArray: ...
    def set_environment_blend_mode(self, mode: XRInterface.EnvironmentBlendMode) -> bool: ...

    # Signals
    def play_area_changed(self, mode: int) -> None: ...

    # Properties
    interface_is_primary: bool
    xr_play_area_mode: int
    ar_is_anchor_detection_enabled: bool


class XRInterfaceExtension(TypeInUse(XRInterface)):
    def __init__(self): ...

    # Methods
    def get_color_texture(self) -> RID: ...
    def get_depth_texture(self) -> RID: ...
    def get_velocity_texture(self) -> RID: ...
    def add_blit(self, render_target: RID, src_rect: Rect2, dst_rect: Rect2i, use_layer: bool, layer: int, apply_lens_distortion: bool, eye_center: Vector2, k1: float, k2: float, upscale: float, aspect_ratio: float) -> None: ...
    def get_render_target_texture(self, render_target: RID) -> RID: ...


class XRPose(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class XRPose.TrackingConfidence(Enum):
        XR_TRACKING_CONFIDENCE_NONE: int
        XR_TRACKING_CONFIDENCE_LOW: int
        XR_TRACKING_CONFIDENCE_HIGH: int

    # Methods
    def set_has_tracking_data(self, has_tracking_data: bool) -> None: ...
    def get_has_tracking_data(self) -> bool: ...
    def set_name(self, name: StringName | str) -> None: ...
    def get_name(self) -> StringName: ...
    def set_transform(self, transform: Transform3D) -> None: ...
    def get_transform(self) -> Transform3D: ...
    def get_adjusted_transform(self) -> Transform3D: ...
    def set_linear_velocity(self, velocity: Vector3) -> None: ...
    def get_linear_velocity(self) -> Vector3: ...
    def set_angular_velocity(self, velocity: Vector3) -> None: ...
    def get_angular_velocity(self) -> Vector3: ...
    def set_tracking_confidence(self, tracking_confidence: XRPose.TrackingConfidence) -> None: ...
    def get_tracking_confidence(self) -> XRPose.TrackingConfidence: ...

    # Properties
    has_tracking_data: bool
    name: GDString
    transform: GDString
    linear_velocity: GDString
    angular_velocity: GDString
    tracking_confidence: int


class XRPositionalTracker(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class XRPositionalTracker.TrackerHand(Enum):
        TRACKER_HAND_UNKNOWN: int
        TRACKER_HAND_LEFT: int
        TRACKER_HAND_RIGHT: int

    # Methods
    def get_tracker_type(self) -> XRServer.TrackerType: ...
    def set_tracker_type(self, type: XRServer.TrackerType) -> None: ...
    def get_tracker_name(self) -> StringName: ...
    def set_tracker_name(self, name: StringName | str) -> None: ...
    def get_tracker_desc(self) -> GDString: ...
    def set_tracker_desc(self, description: GDString | str) -> None: ...
    def get_tracker_profile(self) -> GDString: ...
    def set_tracker_profile(self, profile: GDString | str) -> None: ...
    def get_tracker_hand(self) -> XRPositionalTracker.TrackerHand: ...
    def set_tracker_hand(self, hand: XRPositionalTracker.TrackerHand) -> None: ...
    def has_pose(self, name: StringName | str) -> bool: ...
    def get_pose(self, name: StringName | str) -> XRPose: ...
    def invalidate_pose(self, name: StringName | str) -> None: ...
    def set_pose(self, name: StringName | str, transform: Transform3D, linear_velocity: Vector3, angular_velocity: Vector3, tracking_confidence: XRPose.TrackingConfidence) -> None: ...
    def get_input(self, name: StringName | str) -> GDAny: ...
    def set_input(self, name: StringName | str, value: GDAny) -> None: ...

    # Signals
    def pose_changed(self, pose: XRPose) -> None: ...
    def button_pressed(self, name: GDString | str) -> None: ...
    def button_released(self, name: GDString | str) -> None: ...
    def input_float_changed(self, name: GDString | str, value: float) -> None: ...
    def input_vector2_changed(self, name: GDString | str, vector: Vector2) -> None: ...
    def profile_changed(self, role: GDString | str) -> None: ...

    # Properties
    type: int
    name: GDString
    description: GDString
    profile: GDString
    hand: int


class XRServer(TypeInUse(Object)):
    @classmethod
    def new(cls) -> XRServer: ...

    # Enums
    class XRServer.TrackerType(Enum):
        TRACKER_HEAD: int
        TRACKER_CONTROLLER: int
        TRACKER_BASESTATION: int
        TRACKER_ANCHOR: int
        TRACKER_ANY_KNOWN: int
        TRACKER_UNKNOWN: int
        TRACKER_ANY: int
    class XRServer.RotationMode(Enum):
        RESET_FULL_ROTATION: int
        RESET_BUT_KEEP_TILT: int
        DONT_RESET_ROTATION: int

    # Methods
    def get_world_scale(self) -> float: ...
    def set_world_scale(self, scale: float) -> None: ...
    def get_world_origin(self) -> Transform3D: ...
    def set_world_origin(self, world_origin: Transform3D) -> None: ...
    def get_reference_frame(self) -> Transform3D: ...
    def center_on_hmd(self, rotation_mode: XRServer.RotationMode, keep_height: bool) -> None: ...
    def get_hmd_transform(self) -> Transform3D: ...
    def add_interface(self, interface: XRInterface) -> None: ...
    def get_interface_count(self) -> int: ...
    def remove_interface(self, interface: XRInterface) -> None: ...
    def get_interface(self, idx: int) -> XRInterface: ...
    def get_interfaces(self) -> GDArray: ...
    def find_interface(self, name: GDString | str) -> XRInterface: ...
    def add_tracker(self, tracker: XRPositionalTracker) -> None: ...
    def remove_tracker(self, tracker: XRPositionalTracker) -> None: ...
    def get_trackers(self, tracker_types: int) -> GDDictionary: ...
    def get_tracker(self, tracker_name: StringName | str) -> XRPositionalTracker: ...
    def get_primary_interface(self) -> XRInterface: ...
    def set_primary_interface(self, interface: XRInterface) -> None: ...

    # Signals
    def interface_added(self, interface_name: StringName | str) -> None: ...
    def interface_removed(self, interface_name: StringName | str) -> None: ...
    def tracker_added(self, tracker_name: StringName | str, type: int) -> None: ...
    def tracker_updated(self, tracker_name: StringName | str, type: int) -> None: ...
    def tracker_removed(self, tracker_name: StringName | str, type: int) -> None: ...

    # Properties
    world_scale: float
    world_origin: Vector3
    primary_interface: GDObject


class ZIPPacker(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class ZIPPacker.ZipAppend(Enum):
        APPEND_CREATE: int
        APPEND_CREATEAFTER: int
        APPEND_ADDINZIP: int

    # Methods
    def open(self, path: GDString | str, append: ZIPPacker.ZipAppend = 0) -> Error: ...
    def start_file(self, path: GDString | str) -> Error: ...
    def write_file(self, data: PackedByteArray) -> Error: ...
    def close_file(self) -> Error: ...
    def close(self) -> Error: ...


class ZIPReader(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def open(self, path: GDString | str) -> Error: ...
    def close(self) -> Error: ...
    def get_files(self) -> PackedStringArray: ...
    def read_file(self, path: GDString | str, case_sensitive: bool = True) -> PackedByteArray: ...


class AESContext(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class AESContext.Mode(Enum):
        MODE_ECB_ENCRYPT: int
        MODE_ECB_DECRYPT: int
        MODE_CBC_ENCRYPT: int
        MODE_CBC_DECRYPT: int
        MODE_MAX: int

    # Methods
    def start(self, mode: AESContext.Mode, key: PackedByteArray, iv: PackedByteArray = PackedByteArray()) -> Error: ...
    def update(self, src: PackedByteArray) -> PackedByteArray: ...
    def get_iv_state(self) -> PackedByteArray: ...
    def finish(self) -> None: ...


class AStar2D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def get_available_point_id(self) -> int: ...
    def add_point(self, id: int, position: Vector2, weight_scale: float = 1.0) -> None: ...
    def get_point_position(self, id: int) -> Vector2: ...
    def set_point_position(self, id: int, position: Vector2) -> None: ...
    def get_point_weight_scale(self, id: int) -> float: ...
    def set_point_weight_scale(self, id: int, weight_scale: float) -> None: ...
    def remove_point(self, id: int) -> None: ...
    def has_point(self, id: int) -> bool: ...
    def get_point_connections(self, id: int) -> PackedInt64Array: ...
    def get_point_ids(self) -> PackedInt64Array: ...
    def set_point_disabled(self, id: int, disabled: bool = True) -> None: ...
    def is_point_disabled(self, id: int) -> bool: ...
    def connect_points(self, id: int, to_id: int, bidirectional: bool = True) -> None: ...
    def disconnect_points(self, id: int, to_id: int, bidirectional: bool = True) -> None: ...
    def are_points_connected(self, id: int, to_id: int, bidirectional: bool = True) -> bool: ...
    def get_point_count(self) -> int: ...
    def get_point_capacity(self) -> int: ...
    def reserve_space(self, num_nodes: int) -> None: ...
    def clear(self) -> None: ...
    def get_closest_point(self, to_position: Vector2, include_disabled: bool = False) -> int: ...
    def get_closest_position_in_segment(self, to_position: Vector2) -> Vector2: ...
    def get_point_path(self, from_id: int, to_id: int) -> PackedVector2Array: ...
    def get_id_path(self, from_id: int, to_id: int) -> PackedInt64Array: ...


class AStar3D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def get_available_point_id(self) -> int: ...
    def add_point(self, id: int, position: Vector3, weight_scale: float = 1.0) -> None: ...
    def get_point_position(self, id: int) -> Vector3: ...
    def set_point_position(self, id: int, position: Vector3) -> None: ...
    def get_point_weight_scale(self, id: int) -> float: ...
    def set_point_weight_scale(self, id: int, weight_scale: float) -> None: ...
    def remove_point(self, id: int) -> None: ...
    def has_point(self, id: int) -> bool: ...
    def get_point_connections(self, id: int) -> PackedInt64Array: ...
    def get_point_ids(self) -> PackedInt64Array: ...
    def set_point_disabled(self, id: int, disabled: bool = True) -> None: ...
    def is_point_disabled(self, id: int) -> bool: ...
    def connect_points(self, id: int, to_id: int, bidirectional: bool = True) -> None: ...
    def disconnect_points(self, id: int, to_id: int, bidirectional: bool = True) -> None: ...
    def are_points_connected(self, id: int, to_id: int, bidirectional: bool = True) -> bool: ...
    def get_point_count(self) -> int: ...
    def get_point_capacity(self) -> int: ...
    def reserve_space(self, num_nodes: int) -> None: ...
    def clear(self) -> None: ...
    def get_closest_point(self, to_position: Vector3, include_disabled: bool = False) -> int: ...
    def get_closest_position_in_segment(self, to_position: Vector3) -> Vector3: ...
    def get_point_path(self, from_id: int, to_id: int) -> PackedVector3Array: ...
    def get_id_path(self, from_id: int, to_id: int) -> PackedInt64Array: ...


class AStarGrid2D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class AStarGrid2D.Heuristic(Enum):
        HEURISTIC_EUCLIDEAN: int
        HEURISTIC_MANHATTAN: int
        HEURISTIC_OCTILE: int
        HEURISTIC_CHEBYSHEV: int
        HEURISTIC_MAX: int
    class AStarGrid2D.DiagonalMode(Enum):
        DIAGONAL_MODE_ALWAYS: int
        DIAGONAL_MODE_NEVER: int
        DIAGONAL_MODE_AT_LEAST_ONE_WALKABLE: int
        DIAGONAL_MODE_ONLY_IF_NO_OBSTACLES: int
        DIAGONAL_MODE_MAX: int

    # Methods
    def set_region(self, region: Rect2i) -> None: ...
    def get_region(self) -> Rect2i: ...
    def set_size(self, size: Vector2i) -> None: ...
    def get_size(self) -> Vector2i: ...
    def set_offset(self, offset: Vector2) -> None: ...
    def get_offset(self) -> Vector2: ...
    def set_cell_size(self, cell_size: Vector2) -> None: ...
    def get_cell_size(self) -> Vector2: ...
    def is_in_bounds(self, x: int, y: int) -> bool: ...
    def is_in_boundsv(self, id: Vector2i) -> bool: ...
    def is_dirty(self) -> bool: ...
    def update(self) -> None: ...
    def set_jumping_enabled(self, enabled: bool) -> None: ...
    def is_jumping_enabled(self) -> bool: ...
    def set_diagonal_mode(self, mode: AStarGrid2D.DiagonalMode) -> None: ...
    def get_diagonal_mode(self) -> AStarGrid2D.DiagonalMode: ...
    def set_default_compute_heuristic(self, heuristic: AStarGrid2D.Heuristic) -> None: ...
    def get_default_compute_heuristic(self) -> AStarGrid2D.Heuristic: ...
    def set_default_estimate_heuristic(self, heuristic: AStarGrid2D.Heuristic) -> None: ...
    def get_default_estimate_heuristic(self) -> AStarGrid2D.Heuristic: ...
    def set_point_solid(self, id: Vector2i, solid: bool = True) -> None: ...
    def is_point_solid(self, id: Vector2i) -> bool: ...
    def set_point_weight_scale(self, id: Vector2i, weight_scale: float) -> None: ...
    def get_point_weight_scale(self, id: Vector2i) -> float: ...
    def clear(self) -> None: ...
    def get_point_position(self, id: Vector2i) -> Vector2: ...
    def get_point_path(self, from_id: Vector2i, to_id: Vector2i) -> PackedVector2Array: ...
    def get_id_path(self, from_id: Vector2i, to_id: Vector2i) -> GDArray: ...

    # Properties
    region: Rect2i
    size: Vector2i
    offset: Vector2
    cell_size: Vector2
    jumping_enabled: bool
    default_compute_heuristic: int
    default_estimate_heuristic: int
    diagonal_mode: int


class AnimatedTexture(TypeInUse(Texture2D)):
    def __init__(self): ...

    # Methods
    def set_frames(self, frames: int) -> None: ...
    def get_frames(self) -> int: ...
    def set_current_frame(self, frame: int) -> None: ...
    def get_current_frame(self) -> int: ...
    def set_pause(self, pause: bool) -> None: ...
    def get_pause(self) -> bool: ...
    def set_one_shot(self, one_shot: bool) -> None: ...
    def get_one_shot(self) -> bool: ...
    def set_speed_scale(self, scale: float) -> None: ...
    def get_speed_scale(self) -> float: ...
    def set_frame_texture(self, frame: int, texture: Texture2D) -> None: ...
    def get_frame_texture(self, frame: int) -> Texture2D: ...
    def set_frame_duration(self, frame: int, duration: float) -> None: ...
    def get_frame_duration(self, frame: int) -> float: ...

    # Properties
    frames: int
    current_frame: int
    pause: bool
    one_shot: bool
    speed_scale: float

    # Constants
    MAX_FRAMES: int


class Animation(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class Animation.TrackType(Enum):
        TYPE_VALUE: int
        TYPE_POSITION_3D: int
        TYPE_ROTATION_3D: int
        TYPE_SCALE_3D: int
        TYPE_BLEND_SHAPE: int
        TYPE_METHOD: int
        TYPE_BEZIER: int
        TYPE_AUDIO: int
        TYPE_ANIMATION: int
    class Animation.InterpolationType(Enum):
        INTERPOLATION_NEAREST: int
        INTERPOLATION_LINEAR: int
        INTERPOLATION_CUBIC: int
        INTERPOLATION_LINEAR_ANGLE: int
        INTERPOLATION_CUBIC_ANGLE: int
    class Animation.UpdateMode(Enum):
        UPDATE_CONTINUOUS: int
        UPDATE_DISCRETE: int
        UPDATE_CAPTURE: int
    class Animation.LoopMode(Enum):
        LOOP_NONE: int
        LOOP_LINEAR: int
        LOOP_PINGPONG: int
    class Animation.LoopedFlag(Enum):
        LOOPED_FLAG_NONE: int
        LOOPED_FLAG_END: int
        LOOPED_FLAG_START: int
    class Animation.FindMode(Enum):
        FIND_MODE_NEAREST: int
        FIND_MODE_APPROX: int
        FIND_MODE_EXACT: int

    # Methods
    def add_track(self, type: Animation.TrackType, at_position: int = -1) -> int: ...
    def remove_track(self, track_idx: int) -> None: ...
    def get_track_count(self) -> int: ...
    def track_get_type(self, track_idx: int) -> Animation.TrackType: ...
    def track_get_path(self, track_idx: int) -> NodePath: ...
    def track_set_path(self, track_idx: int, path: NodePath | str) -> None: ...
    def find_track(self, path: NodePath | str, type: Animation.TrackType) -> int: ...
    def track_move_up(self, track_idx: int) -> None: ...
    def track_move_down(self, track_idx: int) -> None: ...
    def track_move_to(self, track_idx: int, to_idx: int) -> None: ...
    def track_swap(self, track_idx: int, with_idx: int) -> None: ...
    def track_set_imported(self, track_idx: int, imported: bool) -> None: ...
    def track_is_imported(self, track_idx: int) -> bool: ...
    def track_set_enabled(self, track_idx: int, enabled: bool) -> None: ...
    def track_is_enabled(self, track_idx: int) -> bool: ...
    def position_track_insert_key(self, track_idx: int, time: float, position: Vector3) -> int: ...
    def rotation_track_insert_key(self, track_idx: int, time: float, rotation: Quaternion) -> int: ...
    def scale_track_insert_key(self, track_idx: int, time: float, scale: Vector3) -> int: ...
    def blend_shape_track_insert_key(self, track_idx: int, time: float, amount: float) -> int: ...
    def position_track_interpolate(self, track_idx: int, time_sec: float) -> Vector3: ...
    def rotation_track_interpolate(self, track_idx: int, time_sec: float) -> Quaternion: ...
    def scale_track_interpolate(self, track_idx: int, time_sec: float) -> Vector3: ...
    def blend_shape_track_interpolate(self, track_idx: int, time_sec: float) -> float: ...
    def track_insert_key(self, track_idx: int, time: float, key: GDAny, transition: float = 1) -> int: ...
    def track_remove_key(self, track_idx: int, key_idx: int) -> None: ...
    def track_remove_key_at_time(self, track_idx: int, time: float) -> None: ...
    def track_set_key_value(self, track_idx: int, key: int, value: GDAny) -> None: ...
    def track_set_key_transition(self, track_idx: int, key_idx: int, transition: float) -> None: ...
    def track_set_key_time(self, track_idx: int, key_idx: int, time: float) -> None: ...
    def track_get_key_transition(self, track_idx: int, key_idx: int) -> float: ...
    def track_get_key_count(self, track_idx: int) -> int: ...
    def track_get_key_value(self, track_idx: int, key_idx: int) -> GDAny: ...
    def track_get_key_time(self, track_idx: int, key_idx: int) -> float: ...
    def track_find_key(self, track_idx: int, time: float, find_mode: Animation.FindMode = 0) -> int: ...
    def track_set_interpolation_type(self, track_idx: int, interpolation: Animation.InterpolationType) -> None: ...
    def track_get_interpolation_type(self, track_idx: int) -> Animation.InterpolationType: ...
    def track_set_interpolation_loop_wrap(self, track_idx: int, interpolation: bool) -> None: ...
    def track_get_interpolation_loop_wrap(self, track_idx: int) -> bool: ...
    def track_is_compressed(self, track_idx: int) -> bool: ...
    def value_track_set_update_mode(self, track_idx: int, mode: Animation.UpdateMode) -> None: ...
    def value_track_get_update_mode(self, track_idx: int) -> Animation.UpdateMode: ...
    def value_track_interpolate(self, track_idx: int, time_sec: float) -> GDAny: ...
    def method_track_get_name(self, track_idx: int, key_idx: int) -> StringName: ...
    def method_track_get_params(self, track_idx: int, key_idx: int) -> GDArray: ...
    def bezier_track_insert_key(self, track_idx: int, time: float, value: float, in_handle: Vector2 = Vector2(0, 0), out_handle: Vector2 = Vector2(0, 0)) -> int: ...
    def bezier_track_set_key_value(self, track_idx: int, key_idx: int, value: float) -> None: ...
    def bezier_track_set_key_in_handle(self, track_idx: int, key_idx: int, in_handle: Vector2, balanced_value_time_ratio: float = 1.0) -> None: ...
    def bezier_track_set_key_out_handle(self, track_idx: int, key_idx: int, out_handle: Vector2, balanced_value_time_ratio: float = 1.0) -> None: ...
    def bezier_track_get_key_value(self, track_idx: int, key_idx: int) -> float: ...
    def bezier_track_get_key_in_handle(self, track_idx: int, key_idx: int) -> Vector2: ...
    def bezier_track_get_key_out_handle(self, track_idx: int, key_idx: int) -> Vector2: ...
    def bezier_track_interpolate(self, track_idx: int, time: float) -> float: ...
    def audio_track_insert_key(self, track_idx: int, time: float, stream: Resource, start_offset: float = 0, end_offset: float = 0) -> int: ...
    def audio_track_set_key_stream(self, track_idx: int, key_idx: int, stream: Resource) -> None: ...
    def audio_track_set_key_start_offset(self, track_idx: int, key_idx: int, offset: float) -> None: ...
    def audio_track_set_key_end_offset(self, track_idx: int, key_idx: int, offset: float) -> None: ...
    def audio_track_get_key_stream(self, track_idx: int, key_idx: int) -> Resource: ...
    def audio_track_get_key_start_offset(self, track_idx: int, key_idx: int) -> float: ...
    def audio_track_get_key_end_offset(self, track_idx: int, key_idx: int) -> float: ...
    def audio_track_set_use_blend(self, track_idx: int, enable: bool) -> None: ...
    def audio_track_is_use_blend(self, track_idx: int) -> bool: ...
    def animation_track_insert_key(self, track_idx: int, time: float, animation: StringName | str) -> int: ...
    def animation_track_set_key_animation(self, track_idx: int, key_idx: int, animation: StringName | str) -> None: ...
    def animation_track_get_key_animation(self, track_idx: int, key_idx: int) -> StringName: ...
    def set_length(self, time_sec: float) -> None: ...
    def get_length(self) -> float: ...
    def set_loop_mode(self, loop_mode: Animation.LoopMode) -> None: ...
    def get_loop_mode(self) -> Animation.LoopMode: ...
    def set_step(self, size_sec: float) -> None: ...
    def get_step(self) -> float: ...
    def clear(self) -> None: ...
    def copy_track(self, track_idx: int, to_animation: Animation) -> None: ...
    def compress(self, page_size: int = 8192, fps: int = 120, split_tolerance: float = 4.0) -> None: ...

    # Properties
    length: float
    loop_mode: int
    step: float


class AnimationLibrary(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def add_animation(self, name: StringName | str, animation: Animation) -> Error: ...
    def remove_animation(self, name: StringName | str) -> None: ...
    def rename_animation(self, name: StringName | str, newname: StringName | str) -> None: ...
    def has_animation(self, name: StringName | str) -> bool: ...
    def get_animation(self, name: StringName | str) -> Animation: ...
    def get_animation_list(self) -> GDArray: ...

    # Signals
    def animation_added(self, name: StringName | str) -> None: ...
    def animation_removed(self, name: StringName | str) -> None: ...
    def animation_renamed(self, name: StringName | str, to_name: StringName | str) -> None: ...
    def animation_changed(self, name: StringName | str) -> None: ...


class AnimationNode(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class AnimationNode.FilterAction(Enum):
        FILTER_IGNORE: int
        FILTER_PASS: int
        FILTER_STOP: int
        FILTER_BLEND: int

    # Methods
    def add_input(self, name: GDString | str) -> bool: ...
    def remove_input(self, index: int) -> None: ...
    def set_input_name(self, input: int, name: GDString | str) -> bool: ...
    def get_input_name(self, input: int) -> GDString: ...
    def get_input_count(self) -> int: ...
    def find_input(self, name: GDString | str) -> int: ...
    def set_filter_path(self, path: NodePath | str, enable: bool) -> None: ...
    def is_path_filtered(self, path: NodePath | str) -> bool: ...
    def set_filter_enabled(self, enable: bool) -> None: ...
    def is_filter_enabled(self) -> bool: ...
    def blend_animation(self, animation: StringName | str, time: float, delta: float, seeked: bool, is_external_seeking: bool, blend: float, looped_flag: Animation.LoopedFlag = 0) -> None: ...
    def blend_node(self, name: StringName | str, node: AnimationNode, time: float, seek: bool, is_external_seeking: bool, blend: float, filter: AnimationNode.FilterAction = 0, sync: bool = True, test_only: bool = False) -> float: ...
    def blend_input(self, input_index: int, time: float, seek: bool, is_external_seeking: bool, blend: float, filter: AnimationNode.FilterAction = 0, sync: bool = True, test_only: bool = False) -> float: ...
    def set_parameter(self, name: StringName | str, value: GDAny) -> None: ...
    def get_parameter(self, name: StringName | str) -> GDAny: ...

    # Signals
    def tree_changed(self) -> None: ...
    def animation_node_renamed(self, object_id: int, old_name: GDString | str, new_name: GDString | str) -> None: ...
    def animation_node_removed(self, object_id: int, name: GDString | str) -> None: ...

    # Properties
    filter_enabled: bool
    filters: GDArray


class AnimationNodeOutput(TypeInUse(AnimationNode)):
    def __init__(self): ...


class AnimationNodeStateMachinePlayback(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def travel(self, to_node: StringName | str, reset_on_teleport: bool = True) -> None: ...
    def start(self, node: StringName | str, reset: bool = True) -> None: ...
    def next(self) -> None: ...
    def stop(self) -> None: ...
    def is_playing(self) -> bool: ...
    def get_current_node(self) -> StringName: ...
    def get_current_play_position(self) -> float: ...
    def get_current_length(self) -> float: ...
    def get_fading_from_node(self) -> StringName: ...
    def get_travel_path(self) -> GDArray: ...


class AnimationNodeStateMachineTransition(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class AnimationNodeStateMachineTransition.SwitchMode(Enum):
        SWITCH_MODE_IMMEDIATE: int
        SWITCH_MODE_SYNC: int
        SWITCH_MODE_AT_END: int
    class AnimationNodeStateMachineTransition.AdvanceMode(Enum):
        ADVANCE_MODE_DISABLED: int
        ADVANCE_MODE_ENABLED: int
        ADVANCE_MODE_AUTO: int

    # Methods
    def set_switch_mode(self, mode: AnimationNodeStateMachineTransition.SwitchMode) -> None: ...
    def get_switch_mode(self) -> AnimationNodeStateMachineTransition.SwitchMode: ...
    def set_advance_mode(self, mode: AnimationNodeStateMachineTransition.AdvanceMode) -> None: ...
    def get_advance_mode(self) -> AnimationNodeStateMachineTransition.AdvanceMode: ...
    def set_advance_condition(self, name: StringName | str) -> None: ...
    def get_advance_condition(self) -> StringName: ...
    def set_xfade_time(self, secs: float) -> None: ...
    def get_xfade_time(self) -> float: ...
    def set_xfade_curve(self, curve: Curve) -> None: ...
    def get_xfade_curve(self) -> Curve: ...
    def set_reset(self, reset: bool) -> None: ...
    def is_reset(self) -> bool: ...
    def set_priority(self, priority: int) -> None: ...
    def get_priority(self) -> int: ...
    def set_advance_expression(self, text: GDString | str) -> None: ...
    def get_advance_expression(self) -> GDString: ...

    # Signals
    def advance_condition_changed(self) -> None: ...

    # Properties
    xfade_time: float
    xfade_curve: Curve
    reset: bool
    priority: int
    switch_mode: int
    advance_mode: int
    advance_condition: StringName
    advance_expression: GDString


class AnimationNodeSync(TypeInUse(AnimationNode)):
    def __init__(self): ...

    # Methods
    def set_use_sync(self, enable: bool) -> None: ...
    def is_using_sync(self) -> bool: ...

    # Properties
    sync: bool


class AnimationNodeTimeScale(TypeInUse(AnimationNode)):
    def __init__(self): ...


class AnimationNodeTimeSeek(TypeInUse(AnimationNode)):
    def __init__(self): ...


class AnimationNodeTransition(TypeInUse(AnimationNodeSync)):
    def __init__(self): ...

    # Methods
    def set_input_count(self, input_count: int) -> None: ...
    def set_input_as_auto_advance(self, input: int, enable: bool) -> None: ...
    def is_input_set_as_auto_advance(self, input: int) -> bool: ...
    def set_input_reset(self, input: int, enable: bool) -> None: ...
    def is_input_reset(self, input: int) -> bool: ...
    def set_xfade_time(self, time: float) -> None: ...
    def get_xfade_time(self) -> float: ...
    def set_xfade_curve(self, curve: Curve) -> None: ...
    def get_xfade_curve(self) -> Curve: ...
    def set_allow_transition_to_self(self, enable: bool) -> None: ...
    def is_allow_transition_to_self(self) -> bool: ...

    # Properties
    xfade_time: float
    xfade_curve: Curve
    allow_transition_to_self: bool
    input_count: int


class AnimationRootNode(TypeInUse(AnimationNode)):
    def __init__(self): ...


class AtlasTexture(TypeInUse(Texture2D)):
    def __init__(self): ...

    # Methods
    def set_atlas(self, atlas: Texture2D) -> None: ...
    def get_atlas(self) -> Texture2D: ...
    def set_region(self, region: Rect2) -> None: ...
    def get_region(self) -> Rect2: ...
    def set_margin(self, margin: Rect2) -> None: ...
    def get_margin(self) -> Rect2: ...
    def set_filter_clip(self, enable: bool) -> None: ...
    def has_filter_clip(self) -> bool: ...

    # Properties
    atlas: Texture2D
    region: Rect2
    margin: Rect2
    filter_clip: bool


class AudioBusLayout(TypeInUse(Resource)):
    def __init__(self): ...


class AudioEffect(TypeInUse(Resource)):
    def __init__(self): ...


class AudioEffectAmplify(TypeInUse(AudioEffect)):
    def __init__(self): ...

    # Methods
    def set_volume_db(self, volume: float) -> None: ...
    def get_volume_db(self) -> float: ...

    # Properties
    volume_db: float


class AudioEffectCapture(TypeInUse(AudioEffect)):
    def __init__(self): ...

    # Methods
    def can_get_buffer(self, frames: int) -> bool: ...
    def get_buffer(self, frames: int) -> PackedVector2Array: ...
    def clear_buffer(self) -> None: ...
    def set_buffer_length(self, buffer_length_seconds: float) -> None: ...
    def get_buffer_length(self) -> float: ...
    def get_frames_available(self) -> int: ...
    def get_discarded_frames(self) -> int: ...
    def get_buffer_length_frames(self) -> int: ...
    def get_pushed_frames(self) -> int: ...

    # Properties
    buffer_length: float


class AudioEffectChorus(TypeInUse(AudioEffect)):
    def __init__(self): ...

    # Methods
    def set_voice_count(self, voices: int) -> None: ...
    def get_voice_count(self) -> int: ...
    def set_voice_delay_ms(self, voice_idx: int, delay_ms: float) -> None: ...
    def get_voice_delay_ms(self, voice_idx: int) -> float: ...
    def set_voice_rate_hz(self, voice_idx: int, rate_hz: float) -> None: ...
    def get_voice_rate_hz(self, voice_idx: int) -> float: ...
    def set_voice_depth_ms(self, voice_idx: int, depth_ms: float) -> None: ...
    def get_voice_depth_ms(self, voice_idx: int) -> float: ...
    def set_voice_level_db(self, voice_idx: int, level_db: float) -> None: ...
    def get_voice_level_db(self, voice_idx: int) -> float: ...
    def set_voice_cutoff_hz(self, voice_idx: int, cutoff_hz: float) -> None: ...
    def get_voice_cutoff_hz(self, voice_idx: int) -> float: ...
    def set_voice_pan(self, voice_idx: int, pan: float) -> None: ...
    def get_voice_pan(self, voice_idx: int) -> float: ...
    def set_wet(self, amount: float) -> None: ...
    def get_wet(self) -> float: ...
    def set_dry(self, amount: float) -> None: ...
    def get_dry(self) -> float: ...

    # Properties
    voice_count: int
    dry: float
    wet: float


class AudioEffectCompressor(TypeInUse(AudioEffect)):
    def __init__(self): ...

    # Methods
    def set_threshold(self, threshold: float) -> None: ...
    def get_threshold(self) -> float: ...
    def set_ratio(self, ratio: float) -> None: ...
    def get_ratio(self) -> float: ...
    def set_gain(self, gain: float) -> None: ...
    def get_gain(self) -> float: ...
    def set_attack_us(self, attack_us: float) -> None: ...
    def get_attack_us(self) -> float: ...
    def set_release_ms(self, release_ms: float) -> None: ...
    def get_release_ms(self) -> float: ...
    def set_mix(self, mix: float) -> None: ...
    def get_mix(self) -> float: ...
    def set_sidechain(self, sidechain: StringName | str) -> None: ...
    def get_sidechain(self) -> StringName: ...

    # Properties
    threshold: float
    ratio: float
    gain: float
    attack_us: float
    release_ms: float
    mix: float
    sidechain: StringName


class AudioEffectDelay(TypeInUse(AudioEffect)):
    def __init__(self): ...

    # Methods
    def set_dry(self, amount: float) -> None: ...
    def get_dry(self) -> float: ...
    def set_tap1_active(self, amount: bool) -> None: ...
    def is_tap1_active(self) -> bool: ...
    def set_tap1_delay_ms(self, amount: float) -> None: ...
    def get_tap1_delay_ms(self) -> float: ...
    def set_tap1_level_db(self, amount: float) -> None: ...
    def get_tap1_level_db(self) -> float: ...
    def set_tap1_pan(self, amount: float) -> None: ...
    def get_tap1_pan(self) -> float: ...
    def set_tap2_active(self, amount: bool) -> None: ...
    def is_tap2_active(self) -> bool: ...
    def set_tap2_delay_ms(self, amount: float) -> None: ...
    def get_tap2_delay_ms(self) -> float: ...
    def set_tap2_level_db(self, amount: float) -> None: ...
    def get_tap2_level_db(self) -> float: ...
    def set_tap2_pan(self, amount: float) -> None: ...
    def get_tap2_pan(self) -> float: ...
    def set_feedback_active(self, amount: bool) -> None: ...
    def is_feedback_active(self) -> bool: ...
    def set_feedback_delay_ms(self, amount: float) -> None: ...
    def get_feedback_delay_ms(self) -> float: ...
    def set_feedback_level_db(self, amount: float) -> None: ...
    def get_feedback_level_db(self) -> float: ...
    def set_feedback_lowpass(self, amount: float) -> None: ...
    def get_feedback_lowpass(self) -> float: ...

    # Properties
    dry: float
    tap1_active: bool
    tap1_delay_ms: float
    tap1_level_db: float
    tap1_pan: float
    tap2_active: bool
    tap2_delay_ms: float
    tap2_level_db: float
    tap2_pan: float
    feedback_active: bool
    feedback_delay_ms: float
    feedback_level_db: float
    feedback_lowpass: float


class AudioEffectDistortion(TypeInUse(AudioEffect)):
    def __init__(self): ...

    # Enums
    class AudioEffectDistortion.Mode(Enum):
        MODE_CLIP: int
        MODE_ATAN: int
        MODE_LOFI: int
        MODE_OVERDRIVE: int
        MODE_WAVESHAPE: int

    # Methods
    def set_mode(self, mode: AudioEffectDistortion.Mode) -> None: ...
    def get_mode(self) -> AudioEffectDistortion.Mode: ...
    def set_pre_gain(self, pre_gain: float) -> None: ...
    def get_pre_gain(self) -> float: ...
    def set_keep_hf_hz(self, keep_hf_hz: float) -> None: ...
    def get_keep_hf_hz(self) -> float: ...
    def set_drive(self, drive: float) -> None: ...
    def get_drive(self) -> float: ...
    def set_post_gain(self, post_gain: float) -> None: ...
    def get_post_gain(self) -> float: ...

    # Properties
    mode: int
    pre_gain: float
    keep_hf_hz: float
    drive: float
    post_gain: float


class AudioEffectEQ(TypeInUse(AudioEffect)):
    def __init__(self): ...

    # Methods
    def set_band_gain_db(self, band_idx: int, volume_db: float) -> None: ...
    def get_band_gain_db(self, band_idx: int) -> float: ...
    def get_band_count(self) -> int: ...


class AudioEffectEQ10(TypeInUse(AudioEffectEQ)):
    def __init__(self): ...


class AudioEffectEQ21(TypeInUse(AudioEffectEQ)):
    def __init__(self): ...


class AudioEffectEQ6(TypeInUse(AudioEffectEQ)):
    def __init__(self): ...


class AudioEffectFilter(TypeInUse(AudioEffect)):
    def __init__(self): ...

    # Enums
    class AudioEffectFilter.FilterDB(Enum):
        FILTER_6DB: int
        FILTER_12DB: int
        FILTER_18DB: int
        FILTER_24DB: int

    # Methods
    def set_cutoff(self, freq: float) -> None: ...
    def get_cutoff(self) -> float: ...
    def set_resonance(self, amount: float) -> None: ...
    def get_resonance(self) -> float: ...
    def set_gain(self, amount: float) -> None: ...
    def get_gain(self) -> float: ...
    def set_db(self, amount: AudioEffectFilter.FilterDB) -> None: ...
    def get_db(self) -> AudioEffectFilter.FilterDB: ...

    # Properties
    cutoff_hz: float
    resonance: float
    gain: float
    db: int


class AudioEffectHighPassFilter(TypeInUse(AudioEffectFilter)):
    def __init__(self): ...


class AudioEffectHighShelfFilter(TypeInUse(AudioEffectFilter)):
    def __init__(self): ...


class AudioEffectInstance(TypeInUse(RefCounted)):
    def __init__(self): ...


class AudioEffectLimiter(TypeInUse(AudioEffect)):
    def __init__(self): ...

    # Methods
    def set_ceiling_db(self, ceiling: float) -> None: ...
    def get_ceiling_db(self) -> float: ...
    def set_threshold_db(self, threshold: float) -> None: ...
    def get_threshold_db(self) -> float: ...
    def set_soft_clip_db(self, soft_clip: float) -> None: ...
    def get_soft_clip_db(self) -> float: ...
    def set_soft_clip_ratio(self, soft_clip: float) -> None: ...
    def get_soft_clip_ratio(self) -> float: ...

    # Properties
    ceiling_db: float
    threshold_db: float
    soft_clip_db: float
    soft_clip_ratio: float


class AudioEffectLowPassFilter(TypeInUse(AudioEffectFilter)):
    def __init__(self): ...


class AudioEffectLowShelfFilter(TypeInUse(AudioEffectFilter)):
    def __init__(self): ...


class AudioEffectNotchFilter(TypeInUse(AudioEffectFilter)):
    def __init__(self): ...


class AudioEffectPanner(TypeInUse(AudioEffect)):
    def __init__(self): ...

    # Methods
    def set_pan(self, cpanume: float) -> None: ...
    def get_pan(self) -> float: ...

    # Properties
    pan: float


class AudioEffectPhaser(TypeInUse(AudioEffect)):
    def __init__(self): ...

    # Methods
    def set_range_min_hz(self, hz: float) -> None: ...
    def get_range_min_hz(self) -> float: ...
    def set_range_max_hz(self, hz: float) -> None: ...
    def get_range_max_hz(self) -> float: ...
    def set_rate_hz(self, hz: float) -> None: ...
    def get_rate_hz(self) -> float: ...
    def set_feedback(self, fbk: float) -> None: ...
    def get_feedback(self) -> float: ...
    def set_depth(self, depth: float) -> None: ...
    def get_depth(self) -> float: ...

    # Properties
    range_min_hz: float
    range_max_hz: float
    rate_hz: float
    feedback: float
    depth: float


class AudioEffectPitchShift(TypeInUse(AudioEffect)):
    def __init__(self): ...

    # Enums
    class AudioEffectPitchShift.FFTSize(Enum):
        FFT_SIZE_256: int
        FFT_SIZE_512: int
        FFT_SIZE_1024: int
        FFT_SIZE_2048: int
        FFT_SIZE_4096: int
        FFT_SIZE_MAX: int

    # Methods
    def set_pitch_scale(self, rate: float) -> None: ...
    def get_pitch_scale(self) -> float: ...
    def set_oversampling(self, amount: int) -> None: ...
    def get_oversampling(self) -> int: ...
    def set_fft_size(self, size: AudioEffectPitchShift.FFTSize) -> None: ...
    def get_fft_size(self) -> AudioEffectPitchShift.FFTSize: ...

    # Properties
    pitch_scale: float
    oversampling: float
    fft_size: int


class AudioEffectRecord(TypeInUse(AudioEffect)):
    def __init__(self): ...

    # Methods
    def set_recording_active(self, record: bool) -> None: ...
    def is_recording_active(self) -> bool: ...
    def set_format(self, format: AudioStreamWAV.Format) -> None: ...
    def get_format(self) -> AudioStreamWAV.Format: ...
    def get_recording(self) -> AudioStreamWAV: ...

    # Properties
    format: int


class AudioEffectReverb(TypeInUse(AudioEffect)):
    def __init__(self): ...

    # Methods
    def set_predelay_msec(self, msec: float) -> None: ...
    def get_predelay_msec(self) -> float: ...
    def set_predelay_feedback(self, feedback: float) -> None: ...
    def get_predelay_feedback(self) -> float: ...
    def set_room_size(self, size: float) -> None: ...
    def get_room_size(self) -> float: ...
    def set_damping(self, amount: float) -> None: ...
    def get_damping(self) -> float: ...
    def set_spread(self, amount: float) -> None: ...
    def get_spread(self) -> float: ...
    def set_dry(self, amount: float) -> None: ...
    def get_dry(self) -> float: ...
    def set_wet(self, amount: float) -> None: ...
    def get_wet(self) -> float: ...
    def set_hpf(self, amount: float) -> None: ...
    def get_hpf(self) -> float: ...

    # Properties
    predelay_msec: float
    predelay_feedback: float
    room_size: float
    damping: float
    spread: float
    hipass: float
    dry: float
    wet: float


class AudioEffectSpectrumAnalyzer(TypeInUse(AudioEffect)):
    def __init__(self): ...

    # Enums
    class AudioEffectSpectrumAnalyzer.FFTSize(Enum):
        FFT_SIZE_256: int
        FFT_SIZE_512: int
        FFT_SIZE_1024: int
        FFT_SIZE_2048: int
        FFT_SIZE_4096: int
        FFT_SIZE_MAX: int

    # Methods
    def set_buffer_length(self, seconds: float) -> None: ...
    def get_buffer_length(self) -> float: ...
    def set_tap_back_pos(self, seconds: float) -> None: ...
    def get_tap_back_pos(self) -> float: ...
    def set_fft_size(self, size: AudioEffectSpectrumAnalyzer.FFTSize) -> None: ...
    def get_fft_size(self) -> AudioEffectSpectrumAnalyzer.FFTSize: ...

    # Properties
    buffer_length: float
    tap_back_pos: float
    fft_size: int


class AudioEffectSpectrumAnalyzerInstance(TypeInUse(AudioEffectInstance)):

    # Enums
    class AudioEffectSpectrumAnalyzerInstance.MagnitudeMode(Enum):
        MAGNITUDE_AVERAGE: int
        MAGNITUDE_MAX: int

    # Methods
    def get_magnitude_for_frequency_range(self, from_hz: float, to_hz: float, mode: AudioEffectSpectrumAnalyzerInstance.MagnitudeMode = 1) -> Vector2: ...


class AudioEffectStereoEnhance(TypeInUse(AudioEffect)):
    def __init__(self): ...

    # Methods
    def set_pan_pullout(self, amount: float) -> None: ...
    def get_pan_pullout(self) -> float: ...
    def set_time_pullout(self, amount: float) -> None: ...
    def get_time_pullout(self) -> float: ...
    def set_surround(self, amount: float) -> None: ...
    def get_surround(self) -> float: ...

    # Properties
    pan_pullout: float
    time_pullout_ms: float
    surround: float


class AudioServer(TypeInUse(Object)):
    @classmethod
    def new(cls) -> AudioServer: ...

    # Enums
    class AudioServer.SpeakerMode(Enum):
        SPEAKER_MODE_STEREO: int
        SPEAKER_SURROUND_31: int
        SPEAKER_SURROUND_51: int
        SPEAKER_SURROUND_71: int

    # Methods
    def set_bus_count(self, amount: int) -> None: ...
    def get_bus_count(self) -> int: ...
    def remove_bus(self, index: int) -> None: ...
    def add_bus(self, at_position: int = -1) -> None: ...
    def move_bus(self, index: int, to_index: int) -> None: ...
    def set_bus_name(self, bus_idx: int, name: GDString | str) -> None: ...
    def get_bus_name(self, bus_idx: int) -> GDString: ...
    def get_bus_index(self, bus_name: StringName | str) -> int: ...
    def get_bus_channels(self, bus_idx: int) -> int: ...
    def set_bus_volume_db(self, bus_idx: int, volume_db: float) -> None: ...
    def get_bus_volume_db(self, bus_idx: int) -> float: ...
    def set_bus_send(self, bus_idx: int, send: StringName | str) -> None: ...
    def get_bus_send(self, bus_idx: int) -> StringName: ...
    def set_bus_solo(self, bus_idx: int, enable: bool) -> None: ...
    def is_bus_solo(self, bus_idx: int) -> bool: ...
    def set_bus_mute(self, bus_idx: int, enable: bool) -> None: ...
    def is_bus_mute(self, bus_idx: int) -> bool: ...
    def set_bus_bypass_effects(self, bus_idx: int, enable: bool) -> None: ...
    def is_bus_bypassing_effects(self, bus_idx: int) -> bool: ...
    def add_bus_effect(self, bus_idx: int, effect: AudioEffect, at_position: int = -1) -> None: ...
    def remove_bus_effect(self, bus_idx: int, effect_idx: int) -> None: ...
    def get_bus_effect_count(self, bus_idx: int) -> int: ...
    def get_bus_effect(self, bus_idx: int, effect_idx: int) -> AudioEffect: ...
    def get_bus_effect_instance(self, bus_idx: int, effect_idx: int, channel: int = 0) -> AudioEffectInstance: ...
    def swap_bus_effects(self, bus_idx: int, effect_idx: int, by_effect_idx: int) -> None: ...
    def set_bus_effect_enabled(self, bus_idx: int, effect_idx: int, enabled: bool) -> None: ...
    def is_bus_effect_enabled(self, bus_idx: int, effect_idx: int) -> bool: ...
    def get_bus_peak_volume_left_db(self, bus_idx: int, channel: int) -> float: ...
    def get_bus_peak_volume_right_db(self, bus_idx: int, channel: int) -> float: ...
    def set_playback_speed_scale(self, scale: float) -> None: ...
    def get_playback_speed_scale(self) -> float: ...
    def lock(self) -> None: ...
    def unlock(self) -> None: ...
    def get_speaker_mode(self) -> AudioServer.SpeakerMode: ...
    def get_mix_rate(self) -> float: ...
    def get_output_device_list(self) -> PackedStringArray: ...
    def get_output_device(self) -> GDString: ...
    def set_output_device(self, name: GDString | str) -> None: ...
    def get_time_to_next_mix(self) -> float: ...
    def get_time_since_last_mix(self) -> float: ...
    def get_output_latency(self) -> float: ...
    def get_input_device_list(self) -> PackedStringArray: ...
    def get_input_device(self) -> GDString: ...
    def set_input_device(self, name: GDString | str) -> None: ...
    def set_bus_layout(self, bus_layout: AudioBusLayout) -> None: ...
    def generate_bus_layout(self) -> AudioBusLayout: ...
    def set_enable_tagging_used_audio_streams(self, enable: bool) -> None: ...

    # Signals
    def bus_layout_changed(self) -> None: ...

    # Properties
    bus_count: int
    output_device: GDString
    input_device: GDString
    playback_speed_scale: float


class AudioStream(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_length(self) -> float: ...
    def is_monophonic(self) -> bool: ...
    def instantiate_playback(self) -> AudioStreamPlayback: ...


class AudioStreamGenerator(TypeInUse(AudioStream)):
    def __init__(self): ...

    # Methods
    def set_mix_rate(self, hz: float) -> None: ...
    def get_mix_rate(self) -> float: ...
    def set_buffer_length(self, seconds: float) -> None: ...
    def get_buffer_length(self) -> float: ...

    # Properties
    mix_rate: float
    buffer_length: float


class AudioStreamMP3(TypeInUse(AudioStream)):
    def __init__(self): ...

    # Methods
    def set_data(self, data: PackedByteArray) -> None: ...
    def get_data(self) -> PackedByteArray: ...
    def set_loop(self, enable: bool) -> None: ...
    def has_loop(self) -> bool: ...
    def set_loop_offset(self, seconds: float) -> None: ...
    def get_loop_offset(self) -> float: ...
    def set_bpm(self, bpm: float) -> None: ...
    def get_bpm(self) -> float: ...
    def set_beat_count(self, count: int) -> None: ...
    def get_beat_count(self) -> int: ...
    def set_bar_beats(self, count: int) -> None: ...
    def get_bar_beats(self) -> int: ...

    # Properties
    data: PackedByteArray
    bpm: float
    beat_count: int
    bar_beats: int
    loop: bool
    loop_offset: float


class AudioStreamMicrophone(TypeInUse(AudioStream)):
    def __init__(self): ...


class AudioStreamOggVorbis(TypeInUse(AudioStream)):
    def __init__(self): ...

    # Methods
    def set_packet_sequence(self, packet_sequence: OggPacketSequence) -> None: ...
    def get_packet_sequence(self) -> OggPacketSequence: ...
    def set_loop(self, enable: bool) -> None: ...
    def has_loop(self) -> bool: ...
    def set_loop_offset(self, seconds: float) -> None: ...
    def get_loop_offset(self) -> float: ...
    def set_bpm(self, bpm: float) -> None: ...
    def get_bpm(self) -> float: ...
    def set_beat_count(self, count: int) -> None: ...
    def get_beat_count(self) -> int: ...
    def set_bar_beats(self, count: int) -> None: ...
    def get_bar_beats(self) -> int: ...

    # Properties
    packet_sequence: GDObject
    bpm: float
    beat_count: int
    bar_beats: int
    loop: bool
    loop_offset: float


class AudioStreamPlayback(TypeInUse(RefCounted)):
    def __init__(self): ...


class AudioStreamPlaybackPolyphonic(TypeInUse(AudioStreamPlayback)):

    # Methods
    def play_stream(self, stream: AudioStream, from_offset: float = 0, volume_db: float = 0, pitch_scale: float = 1.0) -> int: ...
    def set_stream_volume(self, stream: int, volume_db: float) -> None: ...
    def set_stream_pitch_scale(self, stream: int, pitch_scale: float) -> None: ...
    def is_stream_playing(self, stream: int) -> bool: ...
    def stop_stream(self, stream: int) -> None: ...

    # Constants
    INVALID_ID: int


class AudioStreamPlaybackResampled(TypeInUse(AudioStreamPlayback)):
    def __init__(self): ...

    # Methods
    def begin_resample(self) -> None: ...


class AudioStreamPolyphonic(TypeInUse(AudioStream)):
    def __init__(self): ...

    # Methods
    def set_polyphony(self, voices: int) -> None: ...
    def get_polyphony(self) -> int: ...

    # Properties
    polyphony: int


class AudioStreamRandomizer(TypeInUse(AudioStream)):
    def __init__(self): ...

    # Enums
    class AudioStreamRandomizer.PlaybackMode(Enum):
        PLAYBACK_RANDOM_NO_REPEATS: int
        PLAYBACK_RANDOM: int
        PLAYBACK_SEQUENTIAL: int

    # Methods
    def add_stream(self, index: int, stream: AudioStream, weight: float = 1.0) -> None: ...
    def move_stream(self, index_from: int, index_to: int) -> None: ...
    def remove_stream(self, index: int) -> None: ...
    def set_stream(self, index: int, stream: AudioStream) -> None: ...
    def get_stream(self, index: int) -> AudioStream: ...
    def set_stream_probability_weight(self, index: int, weight: float) -> None: ...
    def get_stream_probability_weight(self, index: int) -> float: ...
    def set_streams_count(self, count: int) -> None: ...
    def get_streams_count(self) -> int: ...
    def set_random_pitch(self, scale: float) -> None: ...
    def get_random_pitch(self) -> float: ...
    def set_random_volume_offset_db(self, db_offset: float) -> None: ...
    def get_random_volume_offset_db(self) -> float: ...
    def set_playback_mode(self, mode: AudioStreamRandomizer.PlaybackMode) -> None: ...
    def get_playback_mode(self) -> AudioStreamRandomizer.PlaybackMode: ...

    # Properties
    streams_count: int
    playback_mode: int
    random_pitch: float
    random_volume_offset_db: float


class AudioStreamWAV(TypeInUse(AudioStream)):
    def __init__(self): ...

    # Enums
    class AudioStreamWAV.Format(Enum):
        FORMAT_8_BITS: int
        FORMAT_16_BITS: int
        FORMAT_IMA_ADPCM: int
    class AudioStreamWAV.LoopMode(Enum):
        LOOP_DISABLED: int
        LOOP_FORWARD: int
        LOOP_PINGPONG: int
        LOOP_BACKWARD: int

    # Methods
    def set_data(self, data: PackedByteArray) -> None: ...
    def get_data(self) -> PackedByteArray: ...
    def set_format(self, format: AudioStreamWAV.Format) -> None: ...
    def get_format(self) -> AudioStreamWAV.Format: ...
    def set_loop_mode(self, loop_mode: AudioStreamWAV.LoopMode) -> None: ...
    def get_loop_mode(self) -> AudioStreamWAV.LoopMode: ...
    def set_loop_begin(self, loop_begin: int) -> None: ...
    def get_loop_begin(self) -> int: ...
    def set_loop_end(self, loop_end: int) -> None: ...
    def get_loop_end(self) -> int: ...
    def set_mix_rate(self, mix_rate: int) -> None: ...
    def get_mix_rate(self) -> int: ...
    def set_stereo(self, stereo: bool) -> None: ...
    def is_stereo(self) -> bool: ...
    def save_to_wav(self, path: GDString | str) -> Error: ...

    # Properties
    data: PackedByteArray
    format: int
    loop_mode: int
    loop_begin: int
    loop_end: int
    mix_rate: int
    stereo: bool


class BitMap(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def create(self, size: Vector2i) -> None: ...
    def create_from_image_alpha(self, image: Image, threshold: float = 0.1) -> None: ...
    def set_bitv(self, position: Vector2i, bit: bool) -> None: ...
    def set_bit(self, x: int, y: int, bit: bool) -> None: ...
    def get_bitv(self, position: Vector2i) -> bool: ...
    def get_bit(self, x: int, y: int) -> bool: ...
    def set_bit_rect(self, rect: Rect2i, bit: bool) -> None: ...
    def get_true_bit_count(self) -> int: ...
    def get_size(self) -> Vector2i: ...
    def resize(self, new_size: Vector2i) -> None: ...
    def grow_mask(self, pixels: int, rect: Rect2i) -> None: ...
    def convert_to_image(self) -> Image: ...
    def opaque_to_polygons(self, rect: Rect2i, epsilon: float = 2.0) -> GDArray: ...

    # Properties
    data: GDDictionary


class BoneMap(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_profile(self) -> SkeletonProfile: ...
    def set_profile(self, profile: SkeletonProfile) -> None: ...
    def get_skeleton_bone_name(self, profile_bone_name: StringName | str) -> StringName: ...
    def set_skeleton_bone_name(self, profile_bone_name: StringName | str, skeleton_bone_name: StringName | str) -> None: ...
    def find_profile_bone_name(self, skeleton_bone_name: StringName | str) -> StringName: ...

    # Signals
    def bone_map_updated(self) -> None: ...
    def profile_updated(self) -> None: ...

    # Properties
    profile: SkeletonProfile


class BoxShape3D(TypeInUse(Shape3D)):
    def __init__(self): ...

    # Methods
    def set_size(self, size: Vector3) -> None: ...
    def get_size(self) -> Vector3: ...

    # Properties
    size: Vector3


class ButtonGroup(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_pressed_button(self) -> BaseButton: ...
    def get_buttons(self) -> GDArray: ...
    def set_allow_unpress(self, enabled: bool) -> None: ...
    def is_allow_unpress(self) -> bool: ...

    # Signals
    def pressed(self, button: BaseButton) -> None: ...

    # Properties
    allow_unpress: bool


class CallbackTweener(TypeInUse(Tweener)):
    def __init__(self): ...

    # Methods
    def set_delay(self, delay: float) -> CallbackTweener: ...


class CameraAttributes(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_exposure_multiplier(self, multiplier: float) -> None: ...
    def get_exposure_multiplier(self) -> float: ...
    def set_exposure_sensitivity(self, sensitivity: float) -> None: ...
    def get_exposure_sensitivity(self) -> float: ...
    def set_auto_exposure_enabled(self, enabled: bool) -> None: ...
    def is_auto_exposure_enabled(self) -> bool: ...
    def set_auto_exposure_speed(self, exposure_speed: float) -> None: ...
    def get_auto_exposure_speed(self) -> float: ...
    def set_auto_exposure_scale(self, exposure_grey: float) -> None: ...
    def get_auto_exposure_scale(self) -> float: ...

    # Properties
    exposure_sensitivity: float
    exposure_multiplier: float
    auto_exposure_enabled: bool
    auto_exposure_scale: float
    auto_exposure_speed: float


class CameraAttributesPhysical(TypeInUse(CameraAttributes)):
    def __init__(self): ...

    # Methods
    def set_aperture(self, aperture: float) -> None: ...
    def get_aperture(self) -> float: ...
    def set_shutter_speed(self, shutter_speed: float) -> None: ...
    def get_shutter_speed(self) -> float: ...
    def set_focal_length(self, focal_length: float) -> None: ...
    def get_focal_length(self) -> float: ...
    def set_focus_distance(self, focus_distance: float) -> None: ...
    def get_focus_distance(self) -> float: ...
    def set_near(self, near: float) -> None: ...
    def get_near(self) -> float: ...
    def set_far(self, far: float) -> None: ...
    def get_far(self) -> float: ...
    def get_fov(self) -> float: ...
    def set_auto_exposure_max_exposure_value(self, exposure_value_max: float) -> None: ...
    def get_auto_exposure_max_exposure_value(self) -> float: ...
    def set_auto_exposure_min_exposure_value(self, exposure_value_min: float) -> None: ...
    def get_auto_exposure_min_exposure_value(self) -> float: ...

    # Properties
    frustum_focus_distance: float
    frustum_focal_length: float
    frustum_near: float
    frustum_far: float
    exposure_aperture: float
    exposure_shutter_speed: float
    auto_exposure_min_exposure_value: float
    auto_exposure_max_exposure_value: float


class CameraAttributesPractical(TypeInUse(CameraAttributes)):
    def __init__(self): ...

    # Methods
    def set_dof_blur_far_enabled(self, enabled: bool) -> None: ...
    def is_dof_blur_far_enabled(self) -> bool: ...
    def set_dof_blur_far_distance(self, distance: float) -> None: ...
    def get_dof_blur_far_distance(self) -> float: ...
    def set_dof_blur_far_transition(self, distance: float) -> None: ...
    def get_dof_blur_far_transition(self) -> float: ...
    def set_dof_blur_near_enabled(self, enabled: bool) -> None: ...
    def is_dof_blur_near_enabled(self) -> bool: ...
    def set_dof_blur_near_distance(self, distance: float) -> None: ...
    def get_dof_blur_near_distance(self) -> float: ...
    def set_dof_blur_near_transition(self, distance: float) -> None: ...
    def get_dof_blur_near_transition(self) -> float: ...
    def set_dof_blur_amount(self, amount: float) -> None: ...
    def get_dof_blur_amount(self) -> float: ...
    def set_auto_exposure_max_sensitivity(self, max_sensitivity: float) -> None: ...
    def get_auto_exposure_max_sensitivity(self) -> float: ...
    def set_auto_exposure_min_sensitivity(self, min_sensitivity: float) -> None: ...
    def get_auto_exposure_min_sensitivity(self) -> float: ...

    # Properties
    dof_blur_far_enabled: bool
    dof_blur_far_distance: float
    dof_blur_far_transition: float
    dof_blur_near_enabled: bool
    dof_blur_near_distance: float
    dof_blur_near_transition: float
    dof_blur_amount: float
    auto_exposure_min_sensitivity: float
    auto_exposure_max_sensitivity: float


class CameraFeed(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class CameraFeed.FeedDataType(Enum):
        FEED_NOIMAGE: int
        FEED_RGB: int
        FEED_YCBCR: int
        FEED_YCBCR_SEP: int
    class CameraFeed.FeedPosition(Enum):
        FEED_UNSPECIFIED: int
        FEED_FRONT: int
        FEED_BACK: int

    # Methods
    def get_id(self) -> int: ...
    def is_active(self) -> bool: ...
    def set_active(self, active: bool) -> None: ...
    def get_name(self) -> GDString: ...
    def get_position(self) -> CameraFeed.FeedPosition: ...
    def get_transform(self) -> Transform2D: ...
    def set_transform(self, transform: Transform2D) -> None: ...
    def get_datatype(self) -> CameraFeed.FeedDataType: ...

    # Properties
    feed_is_active: bool
    feed_transform: Transform2D


class CameraServer(TypeInUse(Object)):
    @classmethod
    def new(cls) -> CameraServer: ...

    # Enums
    class CameraServer.FeedImage(Enum):
        FEED_RGBA_IMAGE: int
        FEED_YCBCR_IMAGE: int
        FEED_Y_IMAGE: int
        FEED_CBCR_IMAGE: int

    # Methods
    def get_feed(self, index: int) -> CameraFeed: ...
    def get_feed_count(self) -> int: ...
    def feeds(self) -> GDArray: ...
    def add_feed(self, feed: CameraFeed) -> None: ...
    def remove_feed(self, feed: CameraFeed) -> None: ...

    # Signals
    def camera_feed_added(self, id: int) -> None: ...
    def camera_feed_removed(self, id: int) -> None: ...


class CameraTexture(TypeInUse(Texture2D)):
    def __init__(self): ...

    # Methods
    def set_camera_feed_id(self, feed_id: int) -> None: ...
    def get_camera_feed_id(self) -> int: ...
    def set_which_feed(self, which_feed: CameraServer.FeedImage) -> None: ...
    def get_which_feed(self) -> CameraServer.FeedImage: ...
    def set_camera_active(self, active: bool) -> None: ...
    def get_camera_active(self) -> bool: ...

    # Properties
    camera_feed_id: int
    which_feed: int
    camera_is_active: bool


class CanvasTexture(TypeInUse(Texture2D)):
    def __init__(self): ...

    # Methods
    def set_diffuse_texture(self, texture: Texture2D) -> None: ...
    def get_diffuse_texture(self) -> Texture2D: ...
    def set_normal_texture(self, texture: Texture2D) -> None: ...
    def get_normal_texture(self) -> Texture2D: ...
    def set_specular_texture(self, texture: Texture2D) -> None: ...
    def get_specular_texture(self) -> Texture2D: ...
    def set_specular_color(self, color: Color) -> None: ...
    def get_specular_color(self) -> Color: ...
    def set_specular_shininess(self, shininess: float) -> None: ...
    def get_specular_shininess(self) -> float: ...
    def set_texture_filter(self, filter: CanvasItem.TextureFilter) -> None: ...
    def get_texture_filter(self) -> CanvasItem.TextureFilter: ...
    def set_texture_repeat(self, repeat: CanvasItem.TextureRepeat) -> None: ...
    def get_texture_repeat(self) -> CanvasItem.TextureRepeat: ...

    # Properties
    diffuse_texture: Texture2D
    normal_texture: Texture2D
    specular_texture: Texture2D
    specular_color: Color
    specular_shininess: float
    texture_filter: int
    texture_repeat: int


class CapsuleShape2D(TypeInUse(Shape2D)):
    def __init__(self): ...

    # Methods
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...

    # Properties
    radius: float
    height: float


class CapsuleShape3D(TypeInUse(Shape3D)):
    def __init__(self): ...

    # Methods
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...

    # Properties
    radius: float
    height: float


class CharFXTransform(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def get_range(self) -> Vector2i: ...
    def set_range(self, range: Vector2i) -> None: ...
    def get_elapsed_time(self) -> float: ...
    def set_elapsed_time(self, time: float) -> None: ...
    def is_visible(self) -> bool: ...
    def set_visibility(self, visibility: bool) -> None: ...
    def is_outline(self) -> bool: ...
    def set_outline(self, outline: bool) -> None: ...
    def get_offset(self) -> Vector2: ...
    def set_offset(self, offset: Vector2) -> None: ...
    def get_color(self) -> Color: ...
    def set_color(self, color: Color) -> None: ...
    def get_environment(self) -> GDDictionary: ...
    def set_environment(self, environment: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def get_glyph_index(self) -> int: ...
    def set_glyph_index(self, glyph_index: int) -> None: ...
    def get_relative_index(self) -> int: ...
    def set_relative_index(self, relative_index: int) -> None: ...
    def get_glyph_count(self) -> int: ...
    def set_glyph_count(self, glyph_count: int) -> None: ...
    def get_glyph_flags(self) -> int: ...
    def set_glyph_flags(self, glyph_flags: int) -> None: ...
    def get_font(self) -> RID: ...
    def set_font(self, font: RID) -> None: ...

    # Properties
    range: Vector2i
    elapsed_time: float
    visible: bool
    outline: bool
    offset: Vector2
    color: Color
    env: GDDictionary
    glyph_index: int
    glyph_count: int
    glyph_flags: int
    relative_index: int
    font: RID


class CircleShape2D(TypeInUse(Shape2D)):
    def __init__(self): ...

    # Methods
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...

    # Properties
    radius: float


class ClassDB(TypeInUse(Object)):
    @classmethod
    def new(cls) -> ClassDB: ...

    # Methods
    def get_class_list(self) -> PackedStringArray: ...
    def get_inheriters_from_class(self, class_: StringName | str) -> PackedStringArray: ...
    def get_parent_class(self, class_: StringName | str) -> StringName: ...
    def class_exists(self, class_: StringName | str) -> bool: ...
    def is_parent_class(self, class_: StringName | str, inherits: StringName | str) -> bool: ...
    def can_instantiate(self, class_: StringName | str) -> bool: ...
    def instantiate(self, class_: StringName | str) -> GDAny: ...
    def class_has_signal(self, class_: StringName | str, signal: StringName | str) -> bool: ...
    def class_get_signal(self, class_: StringName | str, signal: StringName | str) -> GDDictionary: ...
    def class_get_signal_list(self, class_: StringName | str, no_inheritance: bool = False) -> GDArray: ...
    def class_get_property_list(self, class_: StringName | str, no_inheritance: bool = False) -> GDArray: ...
    def class_get_property(self, object: GDObject, property: StringName | str) -> GDAny: ...
    def class_set_property(self, object: GDObject, property: StringName | str, value: GDAny) -> Error: ...
    def class_has_method(self, class_: StringName | str, method: StringName | str, no_inheritance: bool = False) -> bool: ...
    def class_get_method_list(self, class_: StringName | str, no_inheritance: bool = False) -> GDArray: ...
    def class_get_integer_constant_list(self, class_: StringName | str, no_inheritance: bool = False) -> PackedStringArray: ...
    def class_has_integer_constant(self, class_: StringName | str, name: StringName | str) -> bool: ...
    def class_get_integer_constant(self, class_: StringName | str, name: StringName | str) -> int: ...
    def class_has_enum(self, class_: StringName | str, name: StringName | str, no_inheritance: bool = False) -> bool: ...
    def class_get_enum_list(self, class_: StringName | str, no_inheritance: bool = False) -> PackedStringArray: ...
    def class_get_enum_constants(self, class_: StringName | str, enum: StringName | str, no_inheritance: bool = False) -> PackedStringArray: ...
    def class_get_integer_constant_enum(self, class_: StringName | str, name: StringName | str, no_inheritance: bool = False) -> StringName: ...
    def is_class_enabled(self, class_: StringName | str) -> bool: ...


class CodeHighlighter(TypeInUse(SyntaxHighlighter)):
    def __init__(self): ...

    # Methods
    def add_keyword_color(self, keyword: GDString | str, color: Color) -> None: ...
    def remove_keyword_color(self, keyword: GDString | str) -> None: ...
    def has_keyword_color(self, keyword: GDString | str) -> bool: ...
    def get_keyword_color(self, keyword: GDString | str) -> Color: ...
    def set_keyword_colors(self, keywords: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def clear_keyword_colors(self) -> None: ...
    def get_keyword_colors(self) -> GDDictionary: ...
    def add_member_keyword_color(self, member_keyword: GDString | str, color: Color) -> None: ...
    def remove_member_keyword_color(self, member_keyword: GDString | str) -> None: ...
    def has_member_keyword_color(self, member_keyword: GDString | str) -> bool: ...
    def get_member_keyword_color(self, member_keyword: GDString | str) -> Color: ...
    def set_member_keyword_colors(self, member_keyword: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def clear_member_keyword_colors(self) -> None: ...
    def get_member_keyword_colors(self) -> GDDictionary: ...
    def add_color_region(self, start_key: GDString | str, end_key: GDString | str, color: Color, line_only: bool = False) -> None: ...
    def remove_color_region(self, start_key: GDString | str) -> None: ...
    def has_color_region(self, start_key: GDString | str) -> bool: ...
    def set_color_regions(self, color_regions: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def clear_color_regions(self) -> None: ...
    def get_color_regions(self) -> GDDictionary: ...
    def set_function_color(self, color: Color) -> None: ...
    def get_function_color(self) -> Color: ...
    def set_number_color(self, color: Color) -> None: ...
    def get_number_color(self) -> Color: ...
    def set_symbol_color(self, color: Color) -> None: ...
    def get_symbol_color(self) -> Color: ...
    def set_member_variable_color(self, color: Color) -> None: ...
    def get_member_variable_color(self) -> Color: ...

    # Properties
    number_color: Color
    symbol_color: Color
    function_color: Color
    member_variable_color: Color
    keyword_colors: GDDictionary
    member_keyword_colors: GDDictionary
    color_regions: GDDictionary


class CompressedTexture2D(TypeInUse(Texture2D)):
    def __init__(self): ...

    # Methods
    def load(self, path: GDString | str) -> Error: ...
    def get_load_path(self) -> GDString: ...

    # Properties
    load_path: GDString


class CompressedTexture3D(TypeInUse(Texture3D)):
    def __init__(self): ...

    # Methods
    def load(self, path: GDString | str) -> Error: ...
    def get_load_path(self) -> GDString: ...

    # Properties
    load_path: GDString


class CompressedTextureLayered(TypeInUse(TextureLayered)):

    # Methods
    def load(self, path: GDString | str) -> Error: ...
    def get_load_path(self) -> GDString: ...

    # Properties
    load_path: GDString


class ConcavePolygonShape2D(TypeInUse(Shape2D)):
    def __init__(self): ...

    # Methods
    def set_segments(self, segments: PackedVector2Array) -> None: ...
    def get_segments(self) -> PackedVector2Array: ...

    # Properties
    segments: PackedVector2Array


class ConcavePolygonShape3D(TypeInUse(Shape3D)):
    def __init__(self): ...

    # Methods
    def set_faces(self, faces: PackedVector3Array) -> None: ...
    def get_faces(self) -> PackedVector3Array: ...
    def set_backface_collision_enabled(self, enabled: bool) -> None: ...
    def is_backface_collision_enabled(self) -> bool: ...

    # Properties
    data: PackedVector3Array
    backface_collision: bool


class ConfigFile(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_value(self, section: GDString | str, key: GDString | str, value: GDAny) -> None: ...
    def get_value(self, section: GDString | str, key: GDString | str, default: GDAny = None) -> GDAny: ...
    def has_section(self, section: GDString | str) -> bool: ...
    def has_section_key(self, section: GDString | str, key: GDString | str) -> bool: ...
    def get_sections(self) -> PackedStringArray: ...
    def get_section_keys(self, section: GDString | str) -> PackedStringArray: ...
    def erase_section(self, section: GDString | str) -> None: ...
    def erase_section_key(self, section: GDString | str, key: GDString | str) -> None: ...
    def load(self, path: GDString | str) -> Error: ...
    def parse(self, data: GDString | str) -> Error: ...
    def save(self, path: GDString | str) -> Error: ...
    def encode_to_text(self) -> GDString: ...
    def load_encrypted(self, path: GDString | str, key: PackedByteArray) -> Error: ...
    def load_encrypted_pass(self, path: GDString | str, password: GDString | str) -> Error: ...
    def save_encrypted(self, path: GDString | str, key: PackedByteArray) -> Error: ...
    def save_encrypted_pass(self, path: GDString | str, password: GDString | str) -> Error: ...
    def clear(self) -> None: ...


class ConvexPolygonShape2D(TypeInUse(Shape2D)):
    def __init__(self): ...

    # Methods
    def set_point_cloud(self, point_cloud: PackedVector2Array) -> None: ...
    def set_points(self, points: PackedVector2Array) -> None: ...
    def get_points(self) -> PackedVector2Array: ...

    # Properties
    points: PackedVector2Array


class ConvexPolygonShape3D(TypeInUse(Shape3D)):
    def __init__(self): ...

    # Methods
    def set_points(self, points: PackedVector3Array) -> None: ...
    def get_points(self) -> PackedVector3Array: ...

    # Properties
    points: GDArray


class Crypto(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def generate_random_bytes(self, size: int) -> PackedByteArray: ...
    def generate_rsa(self, size: int) -> CryptoKey: ...
    def generate_self_signed_certificate(self, key: CryptoKey, issuer_name: GDString | str = "CN=myserver,O=myorganisation,C=IT", not_before: GDString | str = "20140101000000", not_after: GDString | str = "20340101000000") -> X509Certificate: ...
    def sign(self, hash_type: HashingContext.HashType, hash: PackedByteArray, key: CryptoKey) -> PackedByteArray: ...
    def verify(self, hash_type: HashingContext.HashType, hash: PackedByteArray, signature: PackedByteArray, key: CryptoKey) -> bool: ...
    def encrypt(self, key: CryptoKey, plaintext: PackedByteArray) -> PackedByteArray: ...
    def decrypt(self, key: CryptoKey, ciphertext: PackedByteArray) -> PackedByteArray: ...
    def hmac_digest(self, hash_type: HashingContext.HashType, key: PackedByteArray, msg: PackedByteArray) -> PackedByteArray: ...
    def constant_time_compare(self, trusted: PackedByteArray, received: PackedByteArray) -> bool: ...


class CryptoKey(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def save(self, path: GDString | str, public_only: bool = False) -> Error: ...
    def load(self, path: GDString | str, public_only: bool = False) -> Error: ...
    def is_public_only(self) -> bool: ...
    def save_to_string(self, public_only: bool = False) -> GDString: ...
    def load_from_string(self, string_key: GDString | str, public_only: bool = False) -> Error: ...


class Curve(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class Curve.TangentMode(Enum):
        TANGENT_FREE: int
        TANGENT_LINEAR: int
        TANGENT_MODE_COUNT: int

    # Methods
    def get_point_count(self) -> int: ...
    def set_point_count(self, count: int) -> None: ...
    def add_point(self, position: Vector2, left_tangent: float = 0, right_tangent: float = 0, left_mode: Curve.TangentMode = 0, right_mode: Curve.TangentMode = 0) -> int: ...
    def remove_point(self, index: int) -> None: ...
    def clear_points(self) -> None: ...
    def get_point_position(self, index: int) -> Vector2: ...
    def set_point_value(self, index: int, y: float) -> None: ...
    def set_point_offset(self, index: int, offset: float) -> int: ...
    def sample(self, offset: float) -> float: ...
    def sample_baked(self, offset: float) -> float: ...
    def get_point_left_tangent(self, index: int) -> float: ...
    def get_point_right_tangent(self, index: int) -> float: ...
    def get_point_left_mode(self, index: int) -> Curve.TangentMode: ...
    def get_point_right_mode(self, index: int) -> Curve.TangentMode: ...
    def set_point_left_tangent(self, index: int, tangent: float) -> None: ...
    def set_point_right_tangent(self, index: int, tangent: float) -> None: ...
    def set_point_left_mode(self, index: int, mode: Curve.TangentMode) -> None: ...
    def set_point_right_mode(self, index: int, mode: Curve.TangentMode) -> None: ...
    def get_min_value(self) -> float: ...
    def set_min_value(self, min: float) -> None: ...
    def get_max_value(self) -> float: ...
    def set_max_value(self, max: float) -> None: ...
    def clean_dupes(self) -> None: ...
    def bake(self) -> None: ...
    def get_bake_resolution(self) -> int: ...
    def set_bake_resolution(self, resolution: int) -> None: ...

    # Signals
    def range_changed(self) -> None: ...

    # Properties
    min_value: float
    max_value: float
    bake_resolution: int
    point_count: int


class Curve2D(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_point_count(self) -> int: ...
    def set_point_count(self, count: int) -> None: ...
    def add_point(self, position: Vector2, in_: Vector2 = Vector2(0, 0), out: Vector2 = Vector2(0, 0), index: int = -1) -> None: ...
    def set_point_position(self, idx: int, position: Vector2) -> None: ...
    def get_point_position(self, idx: int) -> Vector2: ...
    def set_point_in(self, idx: int, position: Vector2) -> None: ...
    def get_point_in(self, idx: int) -> Vector2: ...
    def set_point_out(self, idx: int, position: Vector2) -> None: ...
    def get_point_out(self, idx: int) -> Vector2: ...
    def remove_point(self, idx: int) -> None: ...
    def clear_points(self) -> None: ...
    def sample(self, idx: int, t: float) -> Vector2: ...
    def samplef(self, fofs: float) -> Vector2: ...
    def set_bake_interval(self, distance: float) -> None: ...
    def get_bake_interval(self) -> float: ...
    def get_baked_length(self) -> float: ...
    def sample_baked(self, offset: float = 0.0, cubic: bool = False) -> Vector2: ...
    def sample_baked_with_rotation(self, offset: float = 0.0, cubic: bool = False) -> Transform2D: ...
    def get_baked_points(self) -> PackedVector2Array: ...
    def get_closest_point(self, to_point: Vector2) -> Vector2: ...
    def get_closest_offset(self, to_point: Vector2) -> float: ...
    def tessellate(self, max_stages: int = 5, tolerance_degrees: float = 4) -> PackedVector2Array: ...
    def tessellate_even_length(self, max_stages: int = 5, tolerance_length: float = 20.0) -> PackedVector2Array: ...

    # Properties
    bake_interval: float
    point_count: int


class Curve3D(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_point_count(self) -> int: ...
    def set_point_count(self, count: int) -> None: ...
    def add_point(self, position: Vector3, in_: Vector3 = Vector3(0, 0, 0), out: Vector3 = Vector3(0, 0, 0), index: int = -1) -> None: ...
    def set_point_position(self, idx: int, position: Vector3) -> None: ...
    def get_point_position(self, idx: int) -> Vector3: ...
    def set_point_tilt(self, idx: int, tilt: float) -> None: ...
    def get_point_tilt(self, idx: int) -> float: ...
    def set_point_in(self, idx: int, position: Vector3) -> None: ...
    def get_point_in(self, idx: int) -> Vector3: ...
    def set_point_out(self, idx: int, position: Vector3) -> None: ...
    def get_point_out(self, idx: int) -> Vector3: ...
    def remove_point(self, idx: int) -> None: ...
    def clear_points(self) -> None: ...
    def sample(self, idx: int, t: float) -> Vector3: ...
    def samplef(self, fofs: float) -> Vector3: ...
    def set_bake_interval(self, distance: float) -> None: ...
    def get_bake_interval(self) -> float: ...
    def set_up_vector_enabled(self, enable: bool) -> None: ...
    def is_up_vector_enabled(self) -> bool: ...
    def get_baked_length(self) -> float: ...
    def sample_baked(self, offset: float = 0.0, cubic: bool = False) -> Vector3: ...
    def sample_baked_with_rotation(self, offset: float = 0.0, cubic: bool = False, apply_tilt: bool = False) -> Transform3D: ...
    def sample_baked_up_vector(self, offset: float, apply_tilt: bool = False) -> Vector3: ...
    def get_baked_points(self) -> PackedVector3Array: ...
    def get_baked_tilts(self) -> PackedFloat32Array: ...
    def get_baked_up_vectors(self) -> PackedVector3Array: ...
    def get_closest_point(self, to_point: Vector3) -> Vector3: ...
    def get_closest_offset(self, to_point: Vector3) -> float: ...
    def tessellate(self, max_stages: int = 5, tolerance_degrees: float = 4) -> PackedVector3Array: ...
    def tessellate_even_length(self, max_stages: int = 5, tolerance_length: float = 0.2) -> PackedVector3Array: ...

    # Properties
    bake_interval: float
    point_count: int
    up_vector_enabled: bool


class CurveTexture(TypeInUse(Texture2D)):
    def __init__(self): ...

    # Enums
    class CurveTexture.TextureMode(Enum):
        TEXTURE_MODE_RGB: int
        TEXTURE_MODE_RED: int

    # Methods
    def set_width(self, width: int) -> None: ...
    def set_curve(self, curve: Curve) -> None: ...
    def get_curve(self) -> Curve: ...
    def set_texture_mode(self, texture_mode: CurveTexture.TextureMode) -> None: ...
    def get_texture_mode(self) -> CurveTexture.TextureMode: ...

    # Properties
    width: int
    texture_mode: int
    curve: Curve


class CurveXYZTexture(TypeInUse(Texture2D)):
    def __init__(self): ...

    # Methods
    def set_width(self, width: int) -> None: ...
    def set_curve_x(self, curve: Curve) -> None: ...
    def get_curve_x(self) -> Curve: ...
    def set_curve_y(self, curve: Curve) -> None: ...
    def get_curve_y(self) -> Curve: ...
    def set_curve_z(self, curve: Curve) -> None: ...
    def get_curve_z(self) -> Curve: ...

    # Properties
    width: int
    curve_x: Curve
    curve_y: Curve
    curve_z: Curve


class CylinderShape3D(TypeInUse(Shape3D)):
    def __init__(self): ...

    # Methods
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...

    # Properties
    height: float
    radius: float


class DTLSServer(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def setup(self, server_options: TLSOptions) -> Error: ...
    def take_connection(self, udp_peer: PacketPeerUDP) -> PacketPeerDTLS: ...


class DirAccess(TypeInUse(RefCounted)):

    # Methods
    def open(self, path: GDString | str) -> DirAccess: ...
    def get_open_error(self) -> Error: ...
    def list_dir_begin(self) -> Error: ...
    def get_next(self) -> GDString: ...
    def current_is_dir(self) -> bool: ...
    def list_dir_end(self) -> None: ...
    def get_files(self) -> PackedStringArray: ...
    def get_files_at(self, path: GDString | str) -> PackedStringArray: ...
    def get_directories(self) -> PackedStringArray: ...
    def get_directories_at(self, path: GDString | str) -> PackedStringArray: ...
    def get_drive_count(self) -> int: ...
    def get_drive_name(self, idx: int) -> GDString: ...
    def get_current_drive(self) -> int: ...
    def change_dir(self, to_dir: GDString | str) -> Error: ...
    def get_current_dir(self, include_drive: bool = True) -> GDString: ...
    def make_dir(self, path: GDString | str) -> Error: ...
    def make_dir_absolute(self, path: GDString | str) -> Error: ...
    def make_dir_recursive(self, path: GDString | str) -> Error: ...
    def make_dir_recursive_absolute(self, path: GDString | str) -> Error: ...
    def file_exists(self, path: GDString | str) -> bool: ...
    def dir_exists(self, path: GDString | str) -> bool: ...
    def dir_exists_absolute(self, path: GDString | str) -> bool: ...
    def get_space_left(self) -> int: ...
    def copy(self, from_: GDString | str, to: GDString | str, chmod_flags: int = -1) -> Error: ...
    def copy_absolute(self, from_: GDString | str, to: GDString | str, chmod_flags: int = -1) -> Error: ...
    def rename(self, from_: GDString | str, to: GDString | str) -> Error: ...
    def rename_absolute(self, from_: GDString | str, to: GDString | str) -> Error: ...
    def remove(self, path: GDString | str) -> Error: ...
    def remove_absolute(self, path: GDString | str) -> Error: ...
    def set_include_navigational(self, enable: bool) -> None: ...
    def get_include_navigational(self) -> bool: ...
    def set_include_hidden(self, enable: bool) -> None: ...
    def get_include_hidden(self) -> bool: ...

    # Properties
    include_navigational: bool
    include_hidden: bool


class DisplayServer(TypeInUse(Object)):

    # Enums
    class DisplayServer.Feature(Enum):
        FEATURE_GLOBAL_MENU: int
        FEATURE_SUBWINDOWS: int
        FEATURE_TOUCHSCREEN: int
        FEATURE_MOUSE: int
        FEATURE_MOUSE_WARP: int
        FEATURE_CLIPBOARD: int
        FEATURE_VIRTUAL_KEYBOARD: int
        FEATURE_CURSOR_SHAPE: int
        FEATURE_CUSTOM_CURSOR_SHAPE: int
        FEATURE_NATIVE_DIALOG: int
        FEATURE_IME: int
        FEATURE_WINDOW_TRANSPARENCY: int
        FEATURE_HIDPI: int
        FEATURE_ICON: int
        FEATURE_NATIVE_ICON: int
        FEATURE_ORIENTATION: int
        FEATURE_SWAP_BUFFERS: int
        FEATURE_CLIPBOARD_PRIMARY: int
        FEATURE_TEXT_TO_SPEECH: int
        FEATURE_EXTEND_TO_TITLE: int
        FEATURE_SCREEN_CAPTURE: int
    class DisplayServer.MouseMode(Enum):
        MOUSE_MODE_VISIBLE: int
        MOUSE_MODE_HIDDEN: int
        MOUSE_MODE_CAPTURED: int
        MOUSE_MODE_CONFINED: int
        MOUSE_MODE_CONFINED_HIDDEN: int
    class DisplayServer.ScreenOrientation(Enum):
        SCREEN_LANDSCAPE: int
        SCREEN_PORTRAIT: int
        SCREEN_REVERSE_LANDSCAPE: int
        SCREEN_REVERSE_PORTRAIT: int
        SCREEN_SENSOR_LANDSCAPE: int
        SCREEN_SENSOR_PORTRAIT: int
        SCREEN_SENSOR: int
    class DisplayServer.VirtualKeyboardType(Enum):
        KEYBOARD_TYPE_DEFAULT: int
        KEYBOARD_TYPE_MULTILINE: int
        KEYBOARD_TYPE_NUMBER: int
        KEYBOARD_TYPE_NUMBER_DECIMAL: int
        KEYBOARD_TYPE_PHONE: int
        KEYBOARD_TYPE_EMAIL_ADDRESS: int
        KEYBOARD_TYPE_PASSWORD: int
        KEYBOARD_TYPE_URL: int
    class DisplayServer.CursorShape(Enum):
        CURSOR_ARROW: int
        CURSOR_IBEAM: int
        CURSOR_POINTING_HAND: int
        CURSOR_CROSS: int
        CURSOR_WAIT: int
        CURSOR_BUSY: int
        CURSOR_DRAG: int
        CURSOR_CAN_DROP: int
        CURSOR_FORBIDDEN: int
        CURSOR_VSIZE: int
        CURSOR_HSIZE: int
        CURSOR_BDIAGSIZE: int
        CURSOR_FDIAGSIZE: int
        CURSOR_MOVE: int
        CURSOR_VSPLIT: int
        CURSOR_HSPLIT: int
        CURSOR_HELP: int
        CURSOR_MAX: int
    class DisplayServer.WindowMode(Enum):
        WINDOW_MODE_WINDOWED: int
        WINDOW_MODE_MINIMIZED: int
        WINDOW_MODE_MAXIMIZED: int
        WINDOW_MODE_FULLSCREEN: int
        WINDOW_MODE_EXCLUSIVE_FULLSCREEN: int
    class DisplayServer.WindowFlags(Enum):
        WINDOW_FLAG_RESIZE_DISABLED: int
        WINDOW_FLAG_BORDERLESS: int
        WINDOW_FLAG_ALWAYS_ON_TOP: int
        WINDOW_FLAG_TRANSPARENT: int
        WINDOW_FLAG_NO_FOCUS: int
        WINDOW_FLAG_POPUP: int
        WINDOW_FLAG_EXTEND_TO_TITLE: int
        WINDOW_FLAG_MOUSE_PASSTHROUGH: int
        WINDOW_FLAG_MAX: int
    class DisplayServer.WindowEvent(Enum):
        WINDOW_EVENT_MOUSE_ENTER: int
        WINDOW_EVENT_MOUSE_EXIT: int
        WINDOW_EVENT_FOCUS_IN: int
        WINDOW_EVENT_FOCUS_OUT: int
        WINDOW_EVENT_CLOSE_REQUEST: int
        WINDOW_EVENT_GO_BACK_REQUEST: int
        WINDOW_EVENT_DPI_CHANGE: int
        WINDOW_EVENT_TITLEBAR_CHANGE: int
    class DisplayServer.VSyncMode(Enum):
        VSYNC_DISABLED: int
        VSYNC_ENABLED: int
        VSYNC_ADAPTIVE: int
        VSYNC_MAILBOX: int
    class DisplayServer.HandleType(Enum):
        DISPLAY_HANDLE: int
        WINDOW_HANDLE: int
        WINDOW_VIEW: int
        OPENGL_CONTEXT: int
    class DisplayServer.TTSUtteranceEvent(Enum):
        TTS_UTTERANCE_STARTED: int
        TTS_UTTERANCE_ENDED: int
        TTS_UTTERANCE_CANCELED: int
        TTS_UTTERANCE_BOUNDARY: int

    # Methods
    def has_feature(self, feature: DisplayServer.Feature) -> bool: ...
    def get_name(self) -> GDString: ...
    def global_menu_add_submenu_item(self, menu_root: GDString | str, label: GDString | str, submenu: GDString | str, index: int = -1) -> int: ...
    def global_menu_add_item(self, menu_root: GDString | str, label: GDString | str, callback: GDCallable = Callable(), key_callback: GDCallable = Callable(), tag: GDAny = None, accelerator: Key = 0, index: int = -1) -> int: ...
    def global_menu_add_check_item(self, menu_root: GDString | str, label: GDString | str, callback: GDCallable = Callable(), key_callback: GDCallable = Callable(), tag: GDAny = None, accelerator: Key = 0, index: int = -1) -> int: ...
    def global_menu_add_icon_item(self, menu_root: GDString | str, icon: Texture2D, label: GDString | str, callback: GDCallable = Callable(), key_callback: GDCallable = Callable(), tag: GDAny = None, accelerator: Key = 0, index: int = -1) -> int: ...
    def global_menu_add_icon_check_item(self, menu_root: GDString | str, icon: Texture2D, label: GDString | str, callback: GDCallable = Callable(), key_callback: GDCallable = Callable(), tag: GDAny = None, accelerator: Key = 0, index: int = -1) -> int: ...
    def global_menu_add_radio_check_item(self, menu_root: GDString | str, label: GDString | str, callback: GDCallable = Callable(), key_callback: GDCallable = Callable(), tag: GDAny = None, accelerator: Key = 0, index: int = -1) -> int: ...
    def global_menu_add_icon_radio_check_item(self, menu_root: GDString | str, icon: Texture2D, label: GDString | str, callback: GDCallable = Callable(), key_callback: GDCallable = Callable(), tag: GDAny = None, accelerator: Key = 0, index: int = -1) -> int: ...
    def global_menu_add_multistate_item(self, menu_root: GDString | str, label: GDString | str, max_states: int, default_state: int, callback: GDCallable = Callable(), key_callback: GDCallable = Callable(), tag: GDAny = None, accelerator: Key = 0, index: int = -1) -> int: ...
    def global_menu_add_separator(self, menu_root: GDString | str, index: int = -1) -> int: ...
    def global_menu_get_item_index_from_text(self, menu_root: GDString | str, text: GDString | str) -> int: ...
    def global_menu_get_item_index_from_tag(self, menu_root: GDString | str, tag: GDAny) -> int: ...
    def global_menu_is_item_checked(self, menu_root: GDString | str, idx: int) -> bool: ...
    def global_menu_is_item_checkable(self, menu_root: GDString | str, idx: int) -> bool: ...
    def global_menu_is_item_radio_checkable(self, menu_root: GDString | str, idx: int) -> bool: ...
    def global_menu_get_item_callback(self, menu_root: GDString | str, idx: int) -> GDCallable: ...
    def global_menu_get_item_key_callback(self, menu_root: GDString | str, idx: int) -> GDCallable: ...
    def global_menu_get_item_tag(self, menu_root: GDString | str, idx: int) -> GDAny: ...
    def global_menu_get_item_text(self, menu_root: GDString | str, idx: int) -> GDString: ...
    def global_menu_get_item_submenu(self, menu_root: GDString | str, idx: int) -> GDString: ...
    def global_menu_get_item_accelerator(self, menu_root: GDString | str, idx: int) -> Key: ...
    def global_menu_is_item_disabled(self, menu_root: GDString | str, idx: int) -> bool: ...
    def global_menu_get_item_tooltip(self, menu_root: GDString | str, idx: int) -> GDString: ...
    def global_menu_get_item_state(self, menu_root: GDString | str, idx: int) -> int: ...
    def global_menu_get_item_max_states(self, menu_root: GDString | str, idx: int) -> int: ...
    def global_menu_get_item_icon(self, menu_root: GDString | str, idx: int) -> Texture2D: ...
    def global_menu_get_item_indentation_level(self, menu_root: GDString | str, idx: int) -> int: ...
    def global_menu_set_item_checked(self, menu_root: GDString | str, idx: int, checked: bool) -> None: ...
    def global_menu_set_item_checkable(self, menu_root: GDString | str, idx: int, checkable: bool) -> None: ...
    def global_menu_set_item_radio_checkable(self, menu_root: GDString | str, idx: int, checkable: bool) -> None: ...
    def global_menu_set_item_callback(self, menu_root: GDString | str, idx: int, callback: GDCallable) -> None: ...
    def global_menu_set_item_key_callback(self, menu_root: GDString | str, idx: int, key_callback: GDCallable) -> None: ...
    def global_menu_set_item_tag(self, menu_root: GDString | str, idx: int, tag: GDAny) -> None: ...
    def global_menu_set_item_text(self, menu_root: GDString | str, idx: int, text: GDString | str) -> None: ...
    def global_menu_set_item_submenu(self, menu_root: GDString | str, idx: int, submenu: GDString | str) -> None: ...
    def global_menu_set_item_accelerator(self, menu_root: GDString | str, idx: int, keycode: Key) -> None: ...
    def global_menu_set_item_disabled(self, menu_root: GDString | str, idx: int, disabled: bool) -> None: ...
    def global_menu_set_item_tooltip(self, menu_root: GDString | str, idx: int, tooltip: GDString | str) -> None: ...
    def global_menu_set_item_state(self, menu_root: GDString | str, idx: int, state: int) -> None: ...
    def global_menu_set_item_max_states(self, menu_root: GDString | str, idx: int, max_states: int) -> None: ...
    def global_menu_set_item_icon(self, menu_root: GDString | str, idx: int, icon: Texture2D) -> None: ...
    def global_menu_set_item_indentation_level(self, menu_root: GDString | str, idx: int, level: int) -> None: ...
    def global_menu_get_item_count(self, menu_root: GDString | str) -> int: ...
    def global_menu_remove_item(self, menu_root: GDString | str, idx: int) -> None: ...
    def global_menu_clear(self, menu_root: GDString | str) -> None: ...
    def tts_is_speaking(self) -> bool: ...
    def tts_is_paused(self) -> bool: ...
    def tts_get_voices(self) -> GDArray: ...
    def tts_get_voices_for_language(self, language: GDString | str) -> PackedStringArray: ...
    def tts_speak(self, text: GDString | str, voice: GDString | str, volume: int = 50, pitch: float = 1.0, rate: float = 1.0, utterance_id: int = 0, interrupt: bool = False) -> None: ...
    def tts_pause(self) -> None: ...
    def tts_resume(self) -> None: ...
    def tts_stop(self) -> None: ...
    def tts_set_utterance_callback(self, event: DisplayServer.TTSUtteranceEvent, callable: GDCallable) -> None: ...
    def is_dark_mode_supported(self) -> bool: ...
    def is_dark_mode(self) -> bool: ...
    def get_accent_color(self) -> Color: ...
    def mouse_set_mode(self, mouse_mode: DisplayServer.MouseMode) -> None: ...
    def mouse_get_mode(self) -> DisplayServer.MouseMode: ...
    def warp_mouse(self, position: Vector2i) -> None: ...
    def mouse_get_position(self) -> Vector2i: ...
    def mouse_get_button_state(self) -> MouseButtonMask: ...
    def clipboard_set(self, clipboard: GDString | str) -> None: ...
    def clipboard_get(self) -> GDString: ...
    def clipboard_has(self) -> bool: ...
    def clipboard_set_primary(self, clipboard_primary: GDString | str) -> None: ...
    def clipboard_get_primary(self) -> GDString: ...
    def get_display_cutouts(self) -> GDArray: ...
    def get_display_safe_area(self) -> Rect2i: ...
    def get_screen_count(self) -> int: ...
    def get_primary_screen(self) -> int: ...
    def get_keyboard_focus_screen(self) -> int: ...
    def get_screen_from_rect(self, rect: Rect2) -> int: ...
    def screen_get_position(self, screen: int = -1) -> Vector2i: ...
    def screen_get_size(self, screen: int = -1) -> Vector2i: ...
    def screen_get_usable_rect(self, screen: int = -1) -> Rect2i: ...
    def screen_get_dpi(self, screen: int = -1) -> int: ...
    def screen_get_scale(self, screen: int = -1) -> float: ...
    def is_touchscreen_available(self) -> bool: ...
    def screen_get_max_scale(self) -> float: ...
    def screen_get_refresh_rate(self, screen: int = -1) -> float: ...
    def screen_get_pixel(self, position: Vector2i) -> Color: ...
    def screen_get_image(self, screen: int = -1) -> Image: ...
    def screen_set_orientation(self, orientation: DisplayServer.ScreenOrientation, screen: int = -1) -> None: ...
    def screen_get_orientation(self, screen: int = -1) -> DisplayServer.ScreenOrientation: ...
    def screen_set_keep_on(self, enable: bool) -> None: ...
    def screen_is_kept_on(self) -> bool: ...
    def get_window_list(self) -> PackedInt32Array: ...
    def get_window_at_screen_position(self, position: Vector2i) -> int: ...
    def window_get_native_handle(self, handle_type: DisplayServer.HandleType, window_id: int = 0) -> int: ...
    def window_get_active_popup(self) -> int: ...
    def window_set_popup_safe_rect(self, window: int, rect: Rect2i) -> None: ...
    def window_get_popup_safe_rect(self, window: int) -> Rect2i: ...
    def window_set_title(self, title: GDString | str, window_id: int = 0) -> None: ...
    def window_set_mouse_passthrough(self, region: PackedVector2Array, window_id: int = 0) -> None: ...
    def window_get_current_screen(self, window_id: int = 0) -> int: ...
    def window_set_current_screen(self, screen: int, window_id: int = 0) -> None: ...
    def window_get_position(self, window_id: int = 0) -> Vector2i: ...
    def window_get_position_with_decorations(self, window_id: int = 0) -> Vector2i: ...
    def window_set_position(self, position: Vector2i, window_id: int = 0) -> None: ...
    def window_get_size(self, window_id: int = 0) -> Vector2i: ...
    def window_set_size(self, size: Vector2i, window_id: int = 0) -> None: ...
    def window_set_rect_changed_callback(self, callback: GDCallable, window_id: int = 0) -> None: ...
    def window_set_window_event_callback(self, callback: GDCallable, window_id: int = 0) -> None: ...
    def window_set_input_event_callback(self, callback: GDCallable, window_id: int = 0) -> None: ...
    def window_set_input_text_callback(self, callback: GDCallable, window_id: int = 0) -> None: ...
    def window_set_drop_files_callback(self, callback: GDCallable, window_id: int = 0) -> None: ...
    def window_get_attached_instance_id(self, window_id: int = 0) -> int: ...
    def window_get_max_size(self, window_id: int = 0) -> Vector2i: ...
    def window_set_max_size(self, max_size: Vector2i, window_id: int = 0) -> None: ...
    def window_get_min_size(self, window_id: int = 0) -> Vector2i: ...
    def window_set_min_size(self, min_size: Vector2i, window_id: int = 0) -> None: ...
    def window_get_size_with_decorations(self, window_id: int = 0) -> Vector2i: ...
    def window_get_mode(self, window_id: int = 0) -> DisplayServer.WindowMode: ...
    def window_set_mode(self, mode: DisplayServer.WindowMode, window_id: int = 0) -> None: ...
    def window_set_flag(self, flag: DisplayServer.WindowFlags, enabled: bool, window_id: int = 0) -> None: ...
    def window_get_flag(self, flag: DisplayServer.WindowFlags, window_id: int = 0) -> bool: ...
    def window_set_window_buttons_offset(self, offset: Vector2i, window_id: int = 0) -> None: ...
    def window_get_safe_title_margins(self, window_id: int = 0) -> Vector3i: ...
    def window_request_attention(self, window_id: int = 0) -> None: ...
    def window_move_to_foreground(self, window_id: int = 0) -> None: ...
    def window_is_focused(self, window_id: int = 0) -> bool: ...
    def window_can_draw(self, window_id: int = 0) -> bool: ...
    def window_set_transient(self, window_id: int, parent_window_id: int) -> None: ...
    def window_set_exclusive(self, window_id: int, exclusive: bool) -> None: ...
    def window_set_ime_active(self, active: bool, window_id: int = 0) -> None: ...
    def window_set_ime_position(self, position: Vector2i, window_id: int = 0) -> None: ...
    def window_set_vsync_mode(self, vsync_mode: DisplayServer.VSyncMode, window_id: int = 0) -> None: ...
    def window_get_vsync_mode(self, window_id: int = 0) -> DisplayServer.VSyncMode: ...
    def window_is_maximize_allowed(self, window_id: int = 0) -> bool: ...
    def window_maximize_on_title_dbl_click(self) -> bool: ...
    def window_minimize_on_title_dbl_click(self) -> bool: ...
    def ime_get_selection(self) -> Vector2i: ...
    def ime_get_text(self) -> GDString: ...
    def virtual_keyboard_show(self, existing_text: GDString | str, position: Rect2 = Rect2(0, 0, 0, 0), type: DisplayServer.VirtualKeyboardType = 0, max_length: int = -1, cursor_start: int = -1, cursor_end: int = -1) -> None: ...
    def virtual_keyboard_hide(self) -> None: ...
    def virtual_keyboard_get_height(self) -> int: ...
    def cursor_set_shape(self, shape: DisplayServer.CursorShape) -> None: ...
    def cursor_get_shape(self) -> DisplayServer.CursorShape: ...
    def cursor_set_custom_image(self, cursor: Resource, shape: DisplayServer.CursorShape = 0, hotspot: Vector2 = Vector2(0, 0)) -> None: ...
    def get_swap_cancel_ok(self) -> bool: ...
    def enable_for_stealing_focus(self, process_id: int) -> None: ...
    def dialog_show(self, title: GDString | str, description: GDString | str, buttons: PackedStringArray, callback: GDCallable) -> Error: ...
    def dialog_input_text(self, title: GDString | str, description: GDString | str, existing_text: GDString | str, callback: GDCallable) -> Error: ...
    def keyboard_get_layout_count(self) -> int: ...
    def keyboard_get_current_layout(self) -> int: ...
    def keyboard_set_current_layout(self, index: int) -> None: ...
    def keyboard_get_layout_language(self, index: int) -> GDString: ...
    def keyboard_get_layout_name(self, index: int) -> GDString: ...
    def keyboard_get_keycode_from_physical(self, keycode: Key) -> Key: ...
    def process_events(self) -> None: ...
    def force_process_and_drop_events(self) -> None: ...
    def set_native_icon(self, filename: GDString | str) -> None: ...
    def set_icon(self, image: Image) -> None: ...
    def tablet_get_driver_count(self) -> int: ...
    def tablet_get_driver_name(self, idx: int) -> GDString: ...
    def tablet_get_current_driver(self) -> GDString: ...
    def tablet_set_current_driver(self, name: GDString | str) -> None: ...

    # Constants
    SCREEN_WITH_MOUSE_FOCUS: int
    SCREEN_WITH_KEYBOARD_FOCUS: int
    SCREEN_PRIMARY: int
    SCREEN_OF_MAIN_WINDOW: int
    MAIN_WINDOW_ID: int
    INVALID_WINDOW_ID: int


class ENetConnection(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class ENetConnection.CompressionMode(Enum):
        COMPRESS_NONE: int
        COMPRESS_RANGE_CODER: int
        COMPRESS_FASTLZ: int
        COMPRESS_ZLIB: int
        COMPRESS_ZSTD: int
    class ENetConnection.EventType(Enum):
        EVENT_ERROR: int
        EVENT_NONE: int
        EVENT_CONNECT: int
        EVENT_DISCONNECT: int
        EVENT_RECEIVE: int
    class ENetConnection.HostStatistic(Enum):
        HOST_TOTAL_SENT_DATA: int
        HOST_TOTAL_SENT_PACKETS: int
        HOST_TOTAL_RECEIVED_DATA: int
        HOST_TOTAL_RECEIVED_PACKETS: int

    # Methods
    def create_host_bound(self, bind_address: GDString | str, bind_port: int, max_peers: int = 32, max_channels: int = 0, in_bandwidth: int = 0, out_bandwidth: int = 0) -> Error: ...
    def create_host(self, max_peers: int = 32, max_channels: int = 0, in_bandwidth: int = 0, out_bandwidth: int = 0) -> Error: ...
    def destroy(self) -> None: ...
    def connect_to_host(self, address: GDString | str, port: int, channels: int = 0, data: int = 0) -> ENetPacketPeer: ...
    def service(self, timeout: int = 0) -> GDArray: ...
    def flush(self) -> None: ...
    def bandwidth_limit(self, in_bandwidth: int = 0, out_bandwidth: int = 0) -> None: ...
    def channel_limit(self, limit: int) -> None: ...
    def broadcast(self, channel: int, packet: PackedByteArray, flags: int) -> None: ...
    def compress(self, mode: ENetConnection.CompressionMode) -> None: ...
    def dtls_server_setup(self, server_options: TLSOptions) -> Error: ...
    def dtls_client_setup(self, hostname: GDString | str, client_options: TLSOptions = None) -> Error: ...
    def refuse_new_connections(self, refuse: bool) -> None: ...
    def pop_statistic(self, statistic: ENetConnection.HostStatistic) -> float: ...
    def get_max_channels(self) -> int: ...
    def get_local_port(self) -> int: ...
    def get_peers(self) -> GDArray: ...
    def socket_send(self, destination_address: GDString | str, destination_port: int, packet: PackedByteArray) -> None: ...


class EditorDebuggerPlugin(TypeInUse(RefCounted)):

    # Methods
    def get_session(self, id: int) -> EditorDebuggerSession: ...
    def get_sessions(self) -> GDArray: ...


class EditorDebuggerSession(TypeInUse(RefCounted)):

    # Methods
    def send_message(self, message: GDString | str, data: GDArray = []) -> None: ...
    def toggle_profiler(self, profiler: GDString | str, enable: bool, data: GDArray = []) -> None: ...
    def is_breaked(self) -> bool: ...
    def is_debuggable(self) -> bool: ...
    def is_active(self) -> bool: ...
    def add_session_tab(self, control: Control) -> None: ...
    def remove_session_tab(self, control: Control) -> None: ...

    # Signals
    def started(self) -> None: ...
    def stopped(self) -> None: ...
    def breaked(self, can_debug: bool) -> None: ...
    def continued(self) -> None: ...


class EditorExportPlatform(TypeInUse(RefCounted)):
    pass


class EditorExportPlatformAndroid(TypeInUse(EditorExportPlatform)):
    pass


class EditorExportPlatformIOS(TypeInUse(EditorExportPlatform)):
    pass


class EditorExportPlatformMacOS(TypeInUse(EditorExportPlatform)):
    pass


class EditorExportPlatformPC(TypeInUse(EditorExportPlatform)):
    pass


class EditorExportPlatformWeb(TypeInUse(EditorExportPlatform)):
    pass


class EditorExportPlatformWindows(TypeInUse(EditorExportPlatformPC)):
    pass


class EditorExportPlugin(TypeInUse(RefCounted)):

    # Methods
    def add_shared_object(self, path: GDString | str, tags: PackedStringArray, target: GDString | str) -> None: ...
    def add_ios_project_static_lib(self, path: GDString | str) -> None: ...
    def add_file(self, path: GDString | str, file: PackedByteArray, remap: bool) -> None: ...
    def add_ios_framework(self, path: GDString | str) -> None: ...
    def add_ios_embedded_framework(self, path: GDString | str) -> None: ...
    def add_ios_plist_content(self, plist_content: GDString | str) -> None: ...
    def add_ios_linker_flags(self, flags: GDString | str) -> None: ...
    def add_ios_bundle_file(self, path: GDString | str) -> None: ...
    def add_ios_cpp_code(self, code: GDString | str) -> None: ...
    def add_macos_plugin_file(self, path: GDString | str) -> None: ...
    def skip(self) -> None: ...
    def get_option(self, name: StringName | str) -> GDAny: ...


class EditorFeatureProfile(TypeInUse(RefCounted)):

    # Enums
    class EditorFeatureProfile.Feature(Enum):
        FEATURE_3D: int
        FEATURE_SCRIPT: int
        FEATURE_ASSET_LIB: int
        FEATURE_SCENE_TREE: int
        FEATURE_NODE_DOCK: int
        FEATURE_FILESYSTEM_DOCK: int
        FEATURE_IMPORT_DOCK: int
        FEATURE_HISTORY_DOCK: int
        FEATURE_MAX: int

    # Methods
    def set_disable_class(self, class_name: StringName | str, disable: bool) -> None: ...
    def is_class_disabled(self, class_name: StringName | str) -> bool: ...
    def set_disable_class_editor(self, class_name: StringName | str, disable: bool) -> None: ...
    def is_class_editor_disabled(self, class_name: StringName | str) -> bool: ...
    def set_disable_class_property(self, class_name: StringName | str, property: StringName | str, disable: bool) -> None: ...
    def is_class_property_disabled(self, class_name: StringName | str, property: StringName | str) -> bool: ...
    def set_disable_feature(self, feature: EditorFeatureProfile.Feature, disable: bool) -> None: ...
    def is_feature_disabled(self, feature: EditorFeatureProfile.Feature) -> bool: ...
    def get_feature_name(self, feature: EditorFeatureProfile.Feature) -> GDString: ...
    def save_to_file(self, path: GDString | str) -> Error: ...
    def load_from_file(self, path: GDString | str) -> Error: ...


class EditorFileSystemDirectory(TypeInUse(Object)):

    # Methods
    def get_subdir_count(self) -> int: ...
    def get_subdir(self, idx: int) -> EditorFileSystemDirectory: ...
    def get_file_count(self) -> int: ...
    def get_file(self, idx: int) -> GDString: ...
    def get_file_path(self, idx: int) -> GDString: ...
    def get_file_type(self, idx: int) -> StringName: ...
    def get_file_script_class_name(self, idx: int) -> GDString: ...
    def get_file_script_class_extends(self, idx: int) -> GDString: ...
    def get_file_import_is_valid(self, idx: int) -> bool: ...
    def get_name(self) -> GDString: ...
    def get_path(self) -> GDString: ...
    def get_parent(self) -> EditorFileSystemDirectory: ...
    def find_file_index(self, name: GDString | str) -> int: ...
    def find_dir_index(self, name: GDString | str) -> int: ...


class EditorFileSystemImportFormatSupportQuery(TypeInUse(RefCounted)):
    pass


class EditorImportPlugin(TypeInUse(ResourceImporter)):

    # Methods
    def append_import_external_resource(self, path: GDString | str, custom_options: GDDictionary | Mapping[IntoGDAny, IntoGDAny] = {}, custom_importer: GDString | str = "", generator_parameters: GDAny = None) -> Error: ...


class EditorInspectorPlugin(TypeInUse(RefCounted)):

    # Methods
    def add_custom_control(self, control: Control) -> None: ...
    def add_property_editor(self, property: GDString | str, editor: Control, add_to_end: bool = False) -> None: ...
    def add_property_editor_for_multiple_properties(self, label: GDString | str, properties: PackedStringArray, editor: Control) -> None: ...


class EditorInterface(TypeInUse(Object)):

    # Methods
    def restart_editor(self, save: bool = True) -> None: ...
    def get_command_palette(self) -> EditorCommandPalette: ...
    def get_resource_filesystem(self) -> EditorFileSystem: ...
    def get_editor_paths(self) -> EditorPaths: ...
    def get_resource_previewer(self) -> EditorResourcePreview: ...
    def get_selection(self) -> EditorSelection: ...
    def get_editor_settings(self) -> EditorSettings: ...
    def make_mesh_previews(self, meshes: GDArray, preview_size: int) -> GDArray: ...
    def set_plugin_enabled(self, plugin: GDString | str, enabled: bool) -> None: ...
    def is_plugin_enabled(self, plugin: GDString | str) -> bool: ...
    def get_base_control(self) -> Control: ...
    def get_editor_main_screen(self) -> VBoxContainer: ...
    def get_script_editor(self) -> ScriptEditor: ...
    def set_main_screen_editor(self, name: GDString | str) -> None: ...
    def set_distraction_free_mode(self, enter: bool) -> None: ...
    def is_distraction_free_mode_enabled(self) -> bool: ...
    def get_editor_scale(self) -> float: ...
    def popup_dialog(self, dialog: Window, rect: Rect2i = Rect2i(0, 0, 0, 0)) -> None: ...
    def popup_dialog_centered(self, dialog: Window, minsize: Vector2i = Vector2i(0, 0)) -> None: ...
    def popup_dialog_centered_ratio(self, dialog: Window, ratio: float = 0.8) -> None: ...
    def popup_dialog_centered_clamped(self, dialog: Window, minsize: Vector2i = Vector2i(0, 0), fallback_ratio: float = 0.75) -> None: ...
    def get_file_system_dock(self) -> FileSystemDock: ...
    def select_file(self, file: GDString | str) -> None: ...
    def get_selected_paths(self) -> PackedStringArray: ...
    def get_current_path(self) -> GDString: ...
    def get_current_directory(self) -> GDString: ...
    def get_inspector(self) -> EditorInspector: ...
    def inspect_object(self, object: GDObject, for_property: GDString | str = "", inspector_only: bool = False) -> None: ...
    def edit_resource(self, resource: Resource) -> None: ...
    def edit_node(self, node: Node) -> None: ...
    def edit_script(self, script: Script, line: int = -1, column: int = 0, grab_focus: bool = True) -> None: ...
    def open_scene_from_path(self, scene_filepath: GDString | str) -> None: ...
    def reload_scene_from_path(self, scene_filepath: GDString | str) -> None: ...
    def get_open_scenes(self) -> PackedStringArray: ...
    def get_edited_scene_root(self) -> Node: ...
    def save_scene(self) -> Error: ...
    def save_scene_as(self, path: GDString | str, with_preview: bool = True) -> None: ...
    def mark_scene_as_unsaved(self) -> None: ...
    def play_main_scene(self) -> None: ...
    def play_current_scene(self) -> None: ...
    def play_custom_scene(self, scene_filepath: GDString | str) -> None: ...
    def stop_playing_scene(self) -> None: ...
    def is_playing_scene(self) -> bool: ...
    def get_playing_scene(self) -> GDString: ...
    def set_movie_maker_enabled(self, enabled: bool) -> None: ...
    def is_movie_maker_enabled(self) -> bool: ...

    # Properties
    distraction_free_mode: bool
    movie_maker_enabled: bool


class EditorNode3DGizmoPlugin(TypeInUse(Resource)):

    # Methods
    def create_material(self, name: GDString | str, color: Color, billboard: bool = False, on_top: bool = False, use_vertex_color: bool = False) -> None: ...
    def create_icon_material(self, name: GDString | str, texture: Texture2D, on_top: bool = False, color: Color = Color(1, 1, 1, 1)) -> None: ...
    def create_handle_material(self, name: GDString | str, billboard: bool = False, texture: Texture2D = None) -> None: ...
    def add_material(self, name: GDString | str, material: StandardMaterial3D) -> None: ...
    def get_material(self, name: GDString | str, gizmo: EditorNode3DGizmo = None) -> StandardMaterial3D: ...


class EditorPaths(TypeInUse(Object)):

    # Methods
    def get_data_dir(self) -> GDString: ...
    def get_config_dir(self) -> GDString: ...
    def get_cache_dir(self) -> GDString: ...
    def is_self_contained(self) -> bool: ...
    def get_self_contained_file(self) -> GDString: ...
    def get_project_settings_dir(self) -> GDString: ...


class EditorResourceConversionPlugin(TypeInUse(RefCounted)):
    pass


class EditorResourcePreviewGenerator(TypeInUse(RefCounted)):
    pass


class EditorResourceTooltipPlugin(TypeInUse(RefCounted)):

    # Methods
    def request_thumbnail(self, path: GDString | str, control: TextureRect) -> None: ...


class EditorSceneFormatImporter(TypeInUse(RefCounted)):

    # Constants
    IMPORT_SCENE: int
    IMPORT_ANIMATION: int
    IMPORT_FAIL_ON_MISSING_DEPENDENCIES: int
    IMPORT_GENERATE_TANGENT_ARRAYS: int
    IMPORT_USE_NAMED_SKIN_BINDS: int
    IMPORT_DISCARD_MESHES_AND_MATERIALS: int


class EditorSceneFormatImporterBlend(TypeInUse(EditorSceneFormatImporter)):
    pass


class EditorSceneFormatImporterFBX(TypeInUse(EditorSceneFormatImporter)):
    pass


class EditorSceneFormatImporterGLTF(TypeInUse(EditorSceneFormatImporter)):
    pass


class EditorScenePostImport(TypeInUse(RefCounted)):

    # Methods
    def get_source_file(self) -> GDString: ...


class EditorScenePostImportPlugin(TypeInUse(RefCounted)):

    # Enums
    class EditorScenePostImportPlugin.InternalImportCategory(Enum):
        INTERNAL_IMPORT_CATEGORY_NODE: int
        INTERNAL_IMPORT_CATEGORY_MESH_3D_NODE: int
        INTERNAL_IMPORT_CATEGORY_MESH: int
        INTERNAL_IMPORT_CATEGORY_MATERIAL: int
        INTERNAL_IMPORT_CATEGORY_ANIMATION: int
        INTERNAL_IMPORT_CATEGORY_ANIMATION_NODE: int
        INTERNAL_IMPORT_CATEGORY_SKELETON_3D_NODE: int
        INTERNAL_IMPORT_CATEGORY_MAX: int

    # Methods
    def get_option_value(self, name: StringName | str) -> GDAny: ...
    def add_import_option(self, name: GDString | str, value: GDAny) -> None: ...
    def add_import_option_advanced(self, type: VariantType, name: GDString | str, default_value: GDAny, hint: PropertyHint = 0, hint_string: GDString | str = "", usage_flags: int = 6) -> None: ...


class EditorScript(TypeInUse(RefCounted)):

    # Methods
    def add_root_node(self, node: Node) -> None: ...
    def get_scene(self) -> Node: ...
    def get_editor_interface(self) -> EditorInterface: ...


class EditorSelection(TypeInUse(Object)):

    # Methods
    def clear(self) -> None: ...
    def add_node(self, node: Node) -> None: ...
    def remove_node(self, node: Node) -> None: ...
    def get_selected_nodes(self) -> GDArray: ...
    def get_transformable_selected_nodes(self) -> GDArray: ...

    # Signals
    def selection_changed(self) -> None: ...


class EditorSettings(TypeInUse(Resource)):

    # Methods
    def has_setting(self, name: GDString | str) -> bool: ...
    def set_setting(self, name: GDString | str, value: GDAny) -> None: ...
    def get_setting(self, name: GDString | str) -> GDAny: ...
    def erase(self, property: GDString | str) -> None: ...
    def set_initial_value(self, name: StringName | str, value: GDAny, update_current: bool) -> None: ...
    def add_property_info(self, info: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def set_project_metadata(self, section: GDString | str, key: GDString | str, data: GDAny) -> None: ...
    def get_project_metadata(self, section: GDString | str, key: GDString | str, default: GDAny = None) -> GDAny: ...
    def set_favorites(self, dirs: PackedStringArray) -> None: ...
    def get_favorites(self) -> PackedStringArray: ...
    def set_recent_dirs(self, dirs: PackedStringArray) -> None: ...
    def get_recent_dirs(self) -> PackedStringArray: ...
    def set_builtin_action_override(self, name: GDString | str, actions_list: GDArray) -> None: ...
    def check_changed_settings_in_group(self, setting_prefix: GDString | str) -> bool: ...
    def get_changed_settings(self) -> PackedStringArray: ...
    def mark_setting_changed(self, setting: GDString | str) -> None: ...

    # Signals
    def settings_changed(self) -> None: ...

    # Constants
    NOTIFICATION_EDITOR_SETTINGS_CHANGED: int


class EditorSyntaxHighlighter(TypeInUse(SyntaxHighlighter)):
    pass


class EditorTranslationParserPlugin(TypeInUse(RefCounted)):
    pass


class EditorUndoRedoManager(TypeInUse(Object)):

    # Enums
    class EditorUndoRedoManager.SpecialHistory(Enum):
        GLOBAL_HISTORY: int
        REMOTE_HISTORY: int
        INVALID_HISTORY: int

    # Methods
    def create_action(self, name: GDString | str, merge_mode: UndoRedo.MergeMode = 0, custom_context: GDObject = None, backward_undo_ops: bool = False) -> None: ...
    def commit_action(self, execute: bool = True) -> None: ...
    def is_committing_action(self) -> bool: ...
    def add_do_method(self, object: GDObject, method: StringName | str) -> None: ...
    def add_undo_method(self, object: GDObject, method: StringName | str) -> None: ...
    def add_do_property(self, object: GDObject, property: StringName | str, value: GDAny) -> None: ...
    def add_undo_property(self, object: GDObject, property: StringName | str, value: GDAny) -> None: ...
    def add_do_reference(self, object: GDObject) -> None: ...
    def add_undo_reference(self, object: GDObject) -> None: ...
    def get_object_history_id(self, object: GDObject) -> int: ...
    def get_history_undo_redo(self, id: int) -> UndoRedo: ...

    # Signals
    def history_changed(self) -> None: ...
    def version_changed(self) -> None: ...


class EditorVCSInterface(TypeInUse(Object)):

    # Enums
    class EditorVCSInterface.ChangeType(Enum):
        CHANGE_TYPE_NEW: int
        CHANGE_TYPE_MODIFIED: int
        CHANGE_TYPE_RENAMED: int
        CHANGE_TYPE_DELETED: int
        CHANGE_TYPE_TYPECHANGE: int
        CHANGE_TYPE_UNMERGED: int
    class EditorVCSInterface.TreeArea(Enum):
        TREE_AREA_COMMIT: int
        TREE_AREA_STAGED: int
        TREE_AREA_UNSTAGED: int

    # Methods
    def create_diff_line(self, new_line_no: int, old_line_no: int, content: GDString | str, status: GDString | str) -> GDDictionary: ...
    def create_diff_hunk(self, old_start: int, new_start: int, old_lines: int, new_lines: int) -> GDDictionary: ...
    def create_diff_file(self, new_file: GDString | str, old_file: GDString | str) -> GDDictionary: ...
    def create_commit(self, msg: GDString | str, author: GDString | str, id: GDString | str, unix_timestamp: int, offset_minutes: int) -> GDDictionary: ...
    def create_status_file(self, file_path: GDString | str, change_type: EditorVCSInterface.ChangeType, area: EditorVCSInterface.TreeArea) -> GDDictionary: ...
    def add_diff_hunks_into_diff_file(self, diff_file: GDDictionary | Mapping[IntoGDAny, IntoGDAny], diff_hunks: GDArray) -> GDDictionary: ...
    def add_line_diffs_into_diff_hunk(self, diff_hunk: GDDictionary | Mapping[IntoGDAny, IntoGDAny], line_diffs: GDArray) -> GDDictionary: ...
    def popup_error(self, msg: GDString | str) -> None: ...


class EncodedObjectAsID(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_object_id(self, id: int) -> None: ...
    def get_object_id(self) -> int: ...

    # Properties
    object_id: int


class Engine(TypeInUse(Object)):
    @classmethod
    def new(cls) -> Engine: ...

    # Methods
    def set_physics_ticks_per_second(self, physics_ticks_per_second: int) -> None: ...
    def get_physics_ticks_per_second(self) -> int: ...
    def set_max_physics_steps_per_frame(self, max_physics_steps: int) -> None: ...
    def get_max_physics_steps_per_frame(self) -> int: ...
    def set_physics_jitter_fix(self, physics_jitter_fix: float) -> None: ...
    def get_physics_jitter_fix(self) -> float: ...
    def get_physics_interpolation_fraction(self) -> float: ...
    def set_max_fps(self, max_fps: int) -> None: ...
    def get_max_fps(self) -> int: ...
    def set_time_scale(self, time_scale: float) -> None: ...
    def get_time_scale(self) -> float: ...
    def get_frames_drawn(self) -> int: ...
    def get_frames_per_second(self) -> float: ...
    def get_physics_frames(self) -> int: ...
    def get_process_frames(self) -> int: ...
    def get_main_loop(self) -> MainLoop: ...
    def get_version_info(self) -> GDDictionary: ...
    def get_author_info(self) -> GDDictionary: ...
    def get_copyright_info(self) -> GDArray: ...
    def get_donor_info(self) -> GDDictionary: ...
    def get_license_info(self) -> GDDictionary: ...
    def get_license_text(self) -> GDString: ...
    def get_architecture_name(self) -> GDString: ...
    def is_in_physics_frame(self) -> bool: ...
    def has_singleton(self, name: StringName | str) -> bool: ...
    def get_singleton(self, name: StringName | str) -> GDObject: ...
    def register_singleton(self, name: StringName | str, instance: GDObject) -> None: ...
    def unregister_singleton(self, name: StringName | str) -> None: ...
    def get_singleton_list(self) -> PackedStringArray: ...
    def register_script_language(self, language: ScriptLanguage) -> Error: ...
    def unregister_script_language(self, language: ScriptLanguage) -> Error: ...
    def get_script_language_count(self) -> int: ...
    def get_script_language(self, index: int) -> ScriptLanguage: ...
    def is_editor_hint(self) -> bool: ...
    def get_write_movie_path(self) -> GDString: ...
    def set_print_error_messages(self, enabled: bool) -> None: ...
    def is_printing_error_messages(self) -> bool: ...

    # Properties
    print_error_messages: bool
    physics_ticks_per_second: int
    max_physics_steps_per_frame: int
    max_fps: int
    time_scale: float
    physics_jitter_fix: float


class EngineDebugger(TypeInUse(Object)):
    @classmethod
    def new(cls) -> EngineDebugger: ...

    # Methods
    def is_active(self) -> bool: ...
    def register_profiler(self, name: StringName | str, profiler: EngineProfiler) -> None: ...
    def unregister_profiler(self, name: StringName | str) -> None: ...
    def is_profiling(self, name: StringName | str) -> bool: ...
    def has_profiler(self, name: StringName | str) -> bool: ...
    def profiler_add_frame_data(self, name: StringName | str, data: GDArray) -> None: ...
    def profiler_enable(self, name: StringName | str, enable: bool, arguments: GDArray = []) -> None: ...
    def register_message_capture(self, name: StringName | str, callable: GDCallable) -> None: ...
    def unregister_message_capture(self, name: StringName | str) -> None: ...
    def has_capture(self, name: StringName | str) -> bool: ...
    def send_message(self, message: GDString | str, data: GDArray) -> None: ...


class EngineProfiler(TypeInUse(RefCounted)):
    def __init__(self): ...


class Environment(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class Environment.BGMode(Enum):
        BG_CLEAR_COLOR: int
        BG_COLOR: int
        BG_SKY: int
        BG_CANVAS: int
        BG_KEEP: int
        BG_CAMERA_FEED: int
        BG_MAX: int
    class Environment.AmbientSource(Enum):
        AMBIENT_SOURCE_BG: int
        AMBIENT_SOURCE_DISABLED: int
        AMBIENT_SOURCE_COLOR: int
        AMBIENT_SOURCE_SKY: int
    class Environment.ReflectionSource(Enum):
        REFLECTION_SOURCE_BG: int
        REFLECTION_SOURCE_DISABLED: int
        REFLECTION_SOURCE_SKY: int
    class Environment.ToneMapper(Enum):
        TONE_MAPPER_LINEAR: int
        TONE_MAPPER_REINHARDT: int
        TONE_MAPPER_FILMIC: int
        TONE_MAPPER_ACES: int
    class Environment.GlowBlendMode(Enum):
        GLOW_BLEND_MODE_ADDITIVE: int
        GLOW_BLEND_MODE_SCREEN: int
        GLOW_BLEND_MODE_SOFTLIGHT: int
        GLOW_BLEND_MODE_REPLACE: int
        GLOW_BLEND_MODE_MIX: int
    class Environment.SDFGIYScale(Enum):
        SDFGI_Y_SCALE_50_PERCENT: int
        SDFGI_Y_SCALE_75_PERCENT: int
        SDFGI_Y_SCALE_100_PERCENT: int

    # Methods
    def set_background(self, mode: Environment.BGMode) -> None: ...
    def get_background(self) -> Environment.BGMode: ...
    def set_sky(self, sky: Sky) -> None: ...
    def get_sky(self) -> Sky: ...
    def set_sky_custom_fov(self, scale: float) -> None: ...
    def get_sky_custom_fov(self) -> float: ...
    def set_sky_rotation(self, euler_radians: Vector3) -> None: ...
    def get_sky_rotation(self) -> Vector3: ...
    def set_bg_color(self, color: Color) -> None: ...
    def get_bg_color(self) -> Color: ...
    def set_bg_energy_multiplier(self, energy: float) -> None: ...
    def get_bg_energy_multiplier(self) -> float: ...
    def set_bg_intensity(self, energy: float) -> None: ...
    def get_bg_intensity(self) -> float: ...
    def set_canvas_max_layer(self, layer: int) -> None: ...
    def get_canvas_max_layer(self) -> int: ...
    def set_camera_feed_id(self, id: int) -> None: ...
    def get_camera_feed_id(self) -> int: ...
    def set_ambient_light_color(self, color: Color) -> None: ...
    def get_ambient_light_color(self) -> Color: ...
    def set_ambient_source(self, source: Environment.AmbientSource) -> None: ...
    def get_ambient_source(self) -> Environment.AmbientSource: ...
    def set_ambient_light_energy(self, energy: float) -> None: ...
    def get_ambient_light_energy(self) -> float: ...
    def set_ambient_light_sky_contribution(self, ratio: float) -> None: ...
    def get_ambient_light_sky_contribution(self) -> float: ...
    def set_reflection_source(self, source: Environment.ReflectionSource) -> None: ...
    def get_reflection_source(self) -> Environment.ReflectionSource: ...
    def set_tonemapper(self, mode: Environment.ToneMapper) -> None: ...
    def get_tonemapper(self) -> Environment.ToneMapper: ...
    def set_tonemap_exposure(self, exposure: float) -> None: ...
    def get_tonemap_exposure(self) -> float: ...
    def set_tonemap_white(self, white: float) -> None: ...
    def get_tonemap_white(self) -> float: ...
    def set_ssr_enabled(self, enabled: bool) -> None: ...
    def is_ssr_enabled(self) -> bool: ...
    def set_ssr_max_steps(self, max_steps: int) -> None: ...
    def get_ssr_max_steps(self) -> int: ...
    def set_ssr_fade_in(self, fade_in: float) -> None: ...
    def get_ssr_fade_in(self) -> float: ...
    def set_ssr_fade_out(self, fade_out: float) -> None: ...
    def get_ssr_fade_out(self) -> float: ...
    def set_ssr_depth_tolerance(self, depth_tolerance: float) -> None: ...
    def get_ssr_depth_tolerance(self) -> float: ...
    def set_ssao_enabled(self, enabled: bool) -> None: ...
    def is_ssao_enabled(self) -> bool: ...
    def set_ssao_radius(self, radius: float) -> None: ...
    def get_ssao_radius(self) -> float: ...
    def set_ssao_intensity(self, intensity: float) -> None: ...
    def get_ssao_intensity(self) -> float: ...
    def set_ssao_power(self, power: float) -> None: ...
    def get_ssao_power(self) -> float: ...
    def set_ssao_detail(self, detail: float) -> None: ...
    def get_ssao_detail(self) -> float: ...
    def set_ssao_horizon(self, horizon: float) -> None: ...
    def get_ssao_horizon(self) -> float: ...
    def set_ssao_sharpness(self, sharpness: float) -> None: ...
    def get_ssao_sharpness(self) -> float: ...
    def set_ssao_direct_light_affect(self, amount: float) -> None: ...
    def get_ssao_direct_light_affect(self) -> float: ...
    def set_ssao_ao_channel_affect(self, amount: float) -> None: ...
    def get_ssao_ao_channel_affect(self) -> float: ...
    def set_ssil_enabled(self, enabled: bool) -> None: ...
    def is_ssil_enabled(self) -> bool: ...
    def set_ssil_radius(self, radius: float) -> None: ...
    def get_ssil_radius(self) -> float: ...
    def set_ssil_intensity(self, intensity: float) -> None: ...
    def get_ssil_intensity(self) -> float: ...
    def set_ssil_sharpness(self, sharpness: float) -> None: ...
    def get_ssil_sharpness(self) -> float: ...
    def set_ssil_normal_rejection(self, normal_rejection: float) -> None: ...
    def get_ssil_normal_rejection(self) -> float: ...
    def set_sdfgi_enabled(self, enabled: bool) -> None: ...
    def is_sdfgi_enabled(self) -> bool: ...
    def set_sdfgi_cascades(self, amount: int) -> None: ...
    def get_sdfgi_cascades(self) -> int: ...
    def set_sdfgi_min_cell_size(self, size: float) -> None: ...
    def get_sdfgi_min_cell_size(self) -> float: ...
    def set_sdfgi_max_distance(self, distance: float) -> None: ...
    def get_sdfgi_max_distance(self) -> float: ...
    def set_sdfgi_cascade0_distance(self, distance: float) -> None: ...
    def get_sdfgi_cascade0_distance(self) -> float: ...
    def set_sdfgi_y_scale(self, scale: Environment.SDFGIYScale) -> None: ...
    def get_sdfgi_y_scale(self) -> Environment.SDFGIYScale: ...
    def set_sdfgi_use_occlusion(self, enable: bool) -> None: ...
    def is_sdfgi_using_occlusion(self) -> bool: ...
    def set_sdfgi_bounce_feedback(self, amount: float) -> None: ...
    def get_sdfgi_bounce_feedback(self) -> float: ...
    def set_sdfgi_read_sky_light(self, enable: bool) -> None: ...
    def is_sdfgi_reading_sky_light(self) -> bool: ...
    def set_sdfgi_energy(self, amount: float) -> None: ...
    def get_sdfgi_energy(self) -> float: ...
    def set_sdfgi_normal_bias(self, bias: float) -> None: ...
    def get_sdfgi_normal_bias(self) -> float: ...
    def set_sdfgi_probe_bias(self, bias: float) -> None: ...
    def get_sdfgi_probe_bias(self) -> float: ...
    def set_glow_enabled(self, enabled: bool) -> None: ...
    def is_glow_enabled(self) -> bool: ...
    def set_glow_level(self, idx: int, intensity: float) -> None: ...
    def get_glow_level(self, idx: int) -> float: ...
    def set_glow_normalized(self, normalize: bool) -> None: ...
    def is_glow_normalized(self) -> bool: ...
    def set_glow_intensity(self, intensity: float) -> None: ...
    def get_glow_intensity(self) -> float: ...
    def set_glow_strength(self, strength: float) -> None: ...
    def get_glow_strength(self) -> float: ...
    def set_glow_mix(self, mix: float) -> None: ...
    def get_glow_mix(self) -> float: ...
    def set_glow_bloom(self, amount: float) -> None: ...
    def get_glow_bloom(self) -> float: ...
    def set_glow_blend_mode(self, mode: Environment.GlowBlendMode) -> None: ...
    def get_glow_blend_mode(self) -> Environment.GlowBlendMode: ...
    def set_glow_hdr_bleed_threshold(self, threshold: float) -> None: ...
    def get_glow_hdr_bleed_threshold(self) -> float: ...
    def set_glow_hdr_bleed_scale(self, scale: float) -> None: ...
    def get_glow_hdr_bleed_scale(self) -> float: ...
    def set_glow_hdr_luminance_cap(self, amount: float) -> None: ...
    def get_glow_hdr_luminance_cap(self) -> float: ...
    def set_glow_map_strength(self, strength: float) -> None: ...
    def get_glow_map_strength(self) -> float: ...
    def set_glow_map(self, mode: Texture) -> None: ...
    def get_glow_map(self) -> Texture: ...
    def set_fog_enabled(self, enabled: bool) -> None: ...
    def is_fog_enabled(self) -> bool: ...
    def set_fog_light_color(self, light_color: Color) -> None: ...
    def get_fog_light_color(self) -> Color: ...
    def set_fog_light_energy(self, light_energy: float) -> None: ...
    def get_fog_light_energy(self) -> float: ...
    def set_fog_sun_scatter(self, sun_scatter: float) -> None: ...
    def get_fog_sun_scatter(self) -> float: ...
    def set_fog_density(self, density: float) -> None: ...
    def get_fog_density(self) -> float: ...
    def set_fog_height(self, height: float) -> None: ...
    def get_fog_height(self) -> float: ...
    def set_fog_height_density(self, height_density: float) -> None: ...
    def get_fog_height_density(self) -> float: ...
    def set_fog_aerial_perspective(self, aerial_perspective: float) -> None: ...
    def get_fog_aerial_perspective(self) -> float: ...
    def set_fog_sky_affect(self, sky_affect: float) -> None: ...
    def get_fog_sky_affect(self) -> float: ...
    def set_volumetric_fog_enabled(self, enabled: bool) -> None: ...
    def is_volumetric_fog_enabled(self) -> bool: ...
    def set_volumetric_fog_emission(self, color: Color) -> None: ...
    def get_volumetric_fog_emission(self) -> Color: ...
    def set_volumetric_fog_albedo(self, color: Color) -> None: ...
    def get_volumetric_fog_albedo(self) -> Color: ...
    def set_volumetric_fog_density(self, density: float) -> None: ...
    def get_volumetric_fog_density(self) -> float: ...
    def set_volumetric_fog_emission_energy(self, begin: float) -> None: ...
    def get_volumetric_fog_emission_energy(self) -> float: ...
    def set_volumetric_fog_anisotropy(self, anisotropy: float) -> None: ...
    def get_volumetric_fog_anisotropy(self) -> float: ...
    def set_volumetric_fog_length(self, length: float) -> None: ...
    def get_volumetric_fog_length(self) -> float: ...
    def set_volumetric_fog_detail_spread(self, detail_spread: float) -> None: ...
    def get_volumetric_fog_detail_spread(self) -> float: ...
    def set_volumetric_fog_gi_inject(self, gi_inject: float) -> None: ...
    def get_volumetric_fog_gi_inject(self) -> float: ...
    def set_volumetric_fog_ambient_inject(self, enabled: float) -> None: ...
    def get_volumetric_fog_ambient_inject(self) -> float: ...
    def set_volumetric_fog_sky_affect(self, sky_affect: float) -> None: ...
    def get_volumetric_fog_sky_affect(self) -> float: ...
    def set_volumetric_fog_temporal_reprojection_enabled(self, enabled: bool) -> None: ...
    def is_volumetric_fog_temporal_reprojection_enabled(self) -> bool: ...
    def set_volumetric_fog_temporal_reprojection_amount(self, temporal_reprojection_amount: float) -> None: ...
    def get_volumetric_fog_temporal_reprojection_amount(self) -> float: ...
    def set_adjustment_enabled(self, enabled: bool) -> None: ...
    def is_adjustment_enabled(self) -> bool: ...
    def set_adjustment_brightness(self, brightness: float) -> None: ...
    def get_adjustment_brightness(self) -> float: ...
    def set_adjustment_contrast(self, contrast: float) -> None: ...
    def get_adjustment_contrast(self) -> float: ...
    def set_adjustment_saturation(self, saturation: float) -> None: ...
    def get_adjustment_saturation(self) -> float: ...
    def set_adjustment_color_correction(self, color_correction: Texture) -> None: ...
    def get_adjustment_color_correction(self) -> Texture: ...

    # Properties
    background_mode: int
    background_color: Color
    background_energy_multiplier: float
    background_intensity: float
    background_canvas_max_layer: int
    background_camera_feed_id: int
    sky: Sky
    sky_custom_fov: float
    sky_rotation: Vector3
    ambient_light_source: int
    ambient_light_color: Color
    ambient_light_sky_contribution: float
    ambient_light_energy: float
    reflected_light_source: int
    tonemap_mode: int
    tonemap_exposure: float
    tonemap_white: float
    ssr_enabled: bool
    ssr_max_steps: int
    ssr_fade_in: float
    ssr_fade_out: float
    ssr_depth_tolerance: float
    ssao_enabled: bool
    ssao_radius: float
    ssao_intensity: float
    ssao_power: float
    ssao_detail: float
    ssao_horizon: float
    ssao_sharpness: float
    ssao_light_affect: float
    ssao_ao_channel_affect: float
    ssil_enabled: bool
    ssil_radius: float
    ssil_intensity: float
    ssil_sharpness: float
    ssil_normal_rejection: float
    sdfgi_enabled: bool
    sdfgi_use_occlusion: bool
    sdfgi_read_sky_light: bool
    sdfgi_bounce_feedback: float
    sdfgi_cascades: int
    sdfgi_min_cell_size: float
    sdfgi_cascade0_distance: float
    sdfgi_max_distance: float
    sdfgi_y_scale: int
    sdfgi_energy: float
    sdfgi_normal_bias: float
    sdfgi_probe_bias: float
    glow_enabled: bool
    glow_normalized: bool
    glow_intensity: float
    glow_strength: float
    glow_mix: float
    glow_bloom: float
    glow_blend_mode: int
    glow_hdr_threshold: float
    glow_hdr_scale: float
    glow_hdr_luminance_cap: float
    glow_map_strength: float
    glow_map: Texture2D
    fog_enabled: bool
    fog_light_color: Color
    fog_light_energy: float
    fog_sun_scatter: float
    fog_density: float
    fog_aerial_perspective: float
    fog_sky_affect: float
    fog_height: float
    fog_height_density: float
    volumetric_fog_enabled: bool
    volumetric_fog_density: float
    volumetric_fog_albedo: Color
    volumetric_fog_emission: Color
    volumetric_fog_emission_energy: float
    volumetric_fog_gi_inject: float
    volumetric_fog_anisotropy: float
    volumetric_fog_length: float
    volumetric_fog_detail_spread: float
    volumetric_fog_ambient_inject: float
    volumetric_fog_sky_affect: float
    volumetric_fog_temporal_reprojection_enabled: bool
    volumetric_fog_temporal_reprojection_amount: float
    adjustment_enabled: bool
    adjustment_brightness: float
    adjustment_contrast: float
    adjustment_saturation: float
    adjustment_color_correction: Texture2D | Texture3D


class Expression(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def parse(self, expression: GDString | str, input_names: PackedStringArray = PackedStringArray()) -> Error: ...
    def execute(self, inputs: GDArray = [], base_instance: GDObject = None, show_error: bool = True, const_calls_only: bool = False) -> GDAny: ...
    def has_execute_failed(self) -> bool: ...
    def get_error_text(self) -> GDString: ...


class FileAccess(TypeInUse(RefCounted)):

    # Enums
    class FileAccess.ModeFlags(Enum):
        READ: int
        WRITE: int
        READ_WRITE: int
        WRITE_READ: int
    class FileAccess.CompressionMode(Enum):
        COMPRESSION_FASTLZ: int
        COMPRESSION_DEFLATE: int
        COMPRESSION_ZSTD: int
        COMPRESSION_GZIP: int
        COMPRESSION_BROTLI: int

    # Methods
    def open(self, path: GDString | str, flags: FileAccess.ModeFlags) -> FileAccess: ...
    def open_encrypted(self, path: GDString | str, mode_flags: FileAccess.ModeFlags, key: PackedByteArray) -> FileAccess: ...
    def open_encrypted_with_pass(self, path: GDString | str, mode_flags: FileAccess.ModeFlags, pass_: GDString | str) -> FileAccess: ...
    def open_compressed(self, path: GDString | str, mode_flags: FileAccess.ModeFlags, compression_mode: FileAccess.CompressionMode = 0) -> FileAccess: ...
    def get_open_error(self) -> Error: ...
    def get_file_as_bytes(self, path: GDString | str) -> PackedByteArray: ...
    def get_file_as_string(self, path: GDString | str) -> GDString: ...
    def flush(self) -> None: ...
    def get_path(self) -> GDString: ...
    def get_path_absolute(self) -> GDString: ...
    def is_open(self) -> bool: ...
    def seek(self, position: int) -> None: ...
    def seek_end(self, position: int = 0) -> None: ...
    def get_position(self) -> int: ...
    def get_length(self) -> int: ...
    def eof_reached(self) -> bool: ...
    def get_8(self) -> int: ...
    def get_16(self) -> int: ...
    def get_32(self) -> int: ...
    def get_64(self) -> int: ...
    def get_float(self) -> float: ...
    def get_double(self) -> float: ...
    def get_real(self) -> float: ...
    def get_buffer(self, length: int) -> PackedByteArray: ...
    def get_line(self) -> GDString: ...
    def get_csv_line(self, delim: GDString | str = ",") -> PackedStringArray: ...
    def get_as_text(self, skip_cr: bool = False) -> GDString: ...
    def get_md5(self, path: GDString | str) -> GDString: ...
    def get_sha256(self, path: GDString | str) -> GDString: ...
    def is_big_endian(self) -> bool: ...
    def set_big_endian(self, big_endian: bool) -> None: ...
    def get_error(self) -> Error: ...
    def get_var(self, allow_objects: bool = False) -> GDAny: ...
    def store_8(self, value: int) -> None: ...
    def store_16(self, value: int) -> None: ...
    def store_32(self, value: int) -> None: ...
    def store_64(self, value: int) -> None: ...
    def store_float(self, value: float) -> None: ...
    def store_double(self, value: float) -> None: ...
    def store_real(self, value: float) -> None: ...
    def store_buffer(self, buffer: PackedByteArray) -> None: ...
    def store_line(self, line: GDString | str) -> None: ...
    def store_csv_line(self, values: PackedStringArray, delim: GDString | str = ",") -> None: ...
    def store_string(self, string: GDString | str) -> None: ...
    def store_var(self, value: GDAny, full_objects: bool = False) -> None: ...
    def store_pascal_string(self, string: GDString | str) -> None: ...
    def get_pascal_string(self) -> GDString: ...
    def close(self) -> None: ...
    def file_exists(self, path: GDString | str) -> bool: ...
    def get_modified_time(self, file: GDString | str) -> int: ...

    # Properties
    big_endian: bool


class Font(TypeInUse(Resource)):

    # Methods
    def set_fallbacks(self, fallbacks: GDArray) -> None: ...
    def get_fallbacks(self) -> GDArray: ...
    def find_variation(self, variation_coordinates: GDDictionary | Mapping[IntoGDAny, IntoGDAny], face_index: int = 0, strength: float = 0.0, transform: Transform2D = Transform2D(1, 0, 0, 1, 0, 0)) -> RID: ...
    def get_rids(self) -> GDArray: ...
    def get_height(self, font_size: int = 16) -> float: ...
    def get_ascent(self, font_size: int = 16) -> float: ...
    def get_descent(self, font_size: int = 16) -> float: ...
    def get_underline_position(self, font_size: int = 16) -> float: ...
    def get_underline_thickness(self, font_size: int = 16) -> float: ...
    def get_font_name(self) -> GDString: ...
    def get_font_style_name(self) -> GDString: ...
    def get_ot_name_strings(self) -> GDDictionary: ...
    def get_font_style(self) -> TextServer.FontStyle: ...
    def get_font_weight(self) -> int: ...
    def get_font_stretch(self) -> int: ...
    def get_spacing(self, spacing: TextServer.SpacingType) -> int: ...
    def get_opentype_features(self) -> GDDictionary: ...
    def set_cache_capacity(self, single_line: int, multi_line: int) -> None: ...
    def get_string_size(self, text: GDString | str, alignment: HorizontalAlignment = 0, width: float = -1, font_size: int = 16, justification_flags: TextServer.JustificationFlag = 3, direction: TextServer.Direction = 0, orientation: TextServer.Orientation = 0) -> Vector2: ...
    def get_multiline_string_size(self, text: GDString | str, alignment: HorizontalAlignment = 0, width: float = -1, font_size: int = 16, max_lines: int = -1, brk_flags: TextServer.LineBreakFlag = 3, justification_flags: TextServer.JustificationFlag = 3, direction: TextServer.Direction = 0, orientation: TextServer.Orientation = 0) -> Vector2: ...
    def draw_string(self, canvas_item: RID, pos: Vector2, text: GDString | str, alignment: HorizontalAlignment = 0, width: float = -1, font_size: int = 16, modulate: Color = Color(1, 1, 1, 1), justification_flags: TextServer.JustificationFlag = 3, direction: TextServer.Direction = 0, orientation: TextServer.Orientation = 0) -> None: ...
    def draw_multiline_string(self, canvas_item: RID, pos: Vector2, text: GDString | str, alignment: HorizontalAlignment = 0, width: float = -1, font_size: int = 16, max_lines: int = -1, modulate: Color = Color(1, 1, 1, 1), brk_flags: TextServer.LineBreakFlag = 3, justification_flags: TextServer.JustificationFlag = 3, direction: TextServer.Direction = 0, orientation: TextServer.Orientation = 0) -> None: ...
    def draw_string_outline(self, canvas_item: RID, pos: Vector2, text: GDString | str, alignment: HorizontalAlignment = 0, width: float = -1, font_size: int = 16, size: int = 1, modulate: Color = Color(1, 1, 1, 1), justification_flags: TextServer.JustificationFlag = 3, direction: TextServer.Direction = 0, orientation: TextServer.Orientation = 0) -> None: ...
    def draw_multiline_string_outline(self, canvas_item: RID, pos: Vector2, text: GDString | str, alignment: HorizontalAlignment = 0, width: float = -1, font_size: int = 16, max_lines: int = -1, size: int = 1, modulate: Color = Color(1, 1, 1, 1), brk_flags: TextServer.LineBreakFlag = 3, justification_flags: TextServer.JustificationFlag = 3, direction: TextServer.Direction = 0, orientation: TextServer.Orientation = 0) -> None: ...
    def get_char_size(self, char_: int, font_size: int) -> Vector2: ...
    def draw_char(self, canvas_item: RID, pos: Vector2, char_: int, font_size: int, modulate: Color = Color(1, 1, 1, 1)) -> float: ...
    def draw_char_outline(self, canvas_item: RID, pos: Vector2, char_: int, font_size: int, size: int = -1, modulate: Color = Color(1, 1, 1, 1)) -> float: ...
    def has_char(self, char_: int) -> bool: ...
    def get_supported_chars(self) -> GDString: ...
    def is_language_supported(self, language: GDString | str) -> bool: ...
    def is_script_supported(self, script: GDString | str) -> bool: ...
    def get_supported_feature_list(self) -> GDDictionary: ...
    def get_supported_variation_list(self) -> GDDictionary: ...
    def get_face_count(self) -> int: ...


class FontFile(TypeInUse(Font)):
    def __init__(self): ...

    # Methods
    def load_bitmap_font(self, path: GDString | str) -> Error: ...
    def load_dynamic_font(self, path: GDString | str) -> Error: ...
    def set_data(self, data: PackedByteArray) -> None: ...
    def get_data(self) -> PackedByteArray: ...
    def set_font_name(self, name: GDString | str) -> None: ...
    def set_font_style_name(self, name: GDString | str) -> None: ...
    def set_font_style(self, style: TextServer.FontStyle) -> None: ...
    def set_font_weight(self, weight: int) -> None: ...
    def set_font_stretch(self, stretch: int) -> None: ...
    def set_antialiasing(self, antialiasing: TextServer.FontAntialiasing) -> None: ...
    def get_antialiasing(self) -> TextServer.FontAntialiasing: ...
    def set_generate_mipmaps(self, generate_mipmaps: bool) -> None: ...
    def get_generate_mipmaps(self) -> bool: ...
    def set_multichannel_signed_distance_field(self, msdf: bool) -> None: ...
    def is_multichannel_signed_distance_field(self) -> bool: ...
    def set_msdf_pixel_range(self, msdf_pixel_range: int) -> None: ...
    def get_msdf_pixel_range(self) -> int: ...
    def set_msdf_size(self, msdf_size: int) -> None: ...
    def get_msdf_size(self) -> int: ...
    def set_fixed_size(self, fixed_size: int) -> None: ...
    def get_fixed_size(self) -> int: ...
    def set_allow_system_fallback(self, allow_system_fallback: bool) -> None: ...
    def is_allow_system_fallback(self) -> bool: ...
    def set_force_autohinter(self, force_autohinter: bool) -> None: ...
    def is_force_autohinter(self) -> bool: ...
    def set_hinting(self, hinting: TextServer.Hinting) -> None: ...
    def get_hinting(self) -> TextServer.Hinting: ...
    def set_subpixel_positioning(self, subpixel_positioning: TextServer.SubpixelPositioning) -> None: ...
    def get_subpixel_positioning(self) -> TextServer.SubpixelPositioning: ...
    def set_oversampling(self, oversampling: float) -> None: ...
    def get_oversampling(self) -> float: ...
    def get_cache_count(self) -> int: ...
    def clear_cache(self) -> None: ...
    def remove_cache(self, cache_index: int) -> None: ...
    def get_size_cache_list(self, cache_index: int) -> GDArray: ...
    def clear_size_cache(self, cache_index: int) -> None: ...
    def remove_size_cache(self, cache_index: int, size: Vector2i) -> None: ...
    def set_variation_coordinates(self, cache_index: int, variation_coordinates: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def get_variation_coordinates(self, cache_index: int) -> GDDictionary: ...
    def set_embolden(self, cache_index: int, strength: float) -> None: ...
    def get_embolden(self, cache_index: int) -> float: ...
    def set_transform(self, cache_index: int, transform: Transform2D) -> None: ...
    def get_transform(self, cache_index: int) -> Transform2D: ...
    def set_face_index(self, cache_index: int, face_index: int) -> None: ...
    def get_face_index(self, cache_index: int) -> int: ...
    def set_cache_ascent(self, cache_index: int, size: int, ascent: float) -> None: ...
    def get_cache_ascent(self, cache_index: int, size: int) -> float: ...
    def set_cache_descent(self, cache_index: int, size: int, descent: float) -> None: ...
    def get_cache_descent(self, cache_index: int, size: int) -> float: ...
    def set_cache_underline_position(self, cache_index: int, size: int, underline_position: float) -> None: ...
    def get_cache_underline_position(self, cache_index: int, size: int) -> float: ...
    def set_cache_underline_thickness(self, cache_index: int, size: int, underline_thickness: float) -> None: ...
    def get_cache_underline_thickness(self, cache_index: int, size: int) -> float: ...
    def set_cache_scale(self, cache_index: int, size: int, scale: float) -> None: ...
    def get_cache_scale(self, cache_index: int, size: int) -> float: ...
    def get_texture_count(self, cache_index: int, size: Vector2i) -> int: ...
    def clear_textures(self, cache_index: int, size: Vector2i) -> None: ...
    def remove_texture(self, cache_index: int, size: Vector2i, texture_index: int) -> None: ...
    def set_texture_image(self, cache_index: int, size: Vector2i, texture_index: int, image: Image) -> None: ...
    def get_texture_image(self, cache_index: int, size: Vector2i, texture_index: int) -> Image: ...
    def set_texture_offsets(self, cache_index: int, size: Vector2i, texture_index: int, offset: PackedInt32Array) -> None: ...
    def get_texture_offsets(self, cache_index: int, size: Vector2i, texture_index: int) -> PackedInt32Array: ...
    def get_glyph_list(self, cache_index: int, size: Vector2i) -> PackedInt32Array: ...
    def clear_glyphs(self, cache_index: int, size: Vector2i) -> None: ...
    def remove_glyph(self, cache_index: int, size: Vector2i, glyph: int) -> None: ...
    def set_glyph_advance(self, cache_index: int, size: int, glyph: int, advance: Vector2) -> None: ...
    def get_glyph_advance(self, cache_index: int, size: int, glyph: int) -> Vector2: ...
    def set_glyph_offset(self, cache_index: int, size: Vector2i, glyph: int, offset: Vector2) -> None: ...
    def get_glyph_offset(self, cache_index: int, size: Vector2i, glyph: int) -> Vector2: ...
    def set_glyph_size(self, cache_index: int, size: Vector2i, glyph: int, gl_size: Vector2) -> None: ...
    def get_glyph_size(self, cache_index: int, size: Vector2i, glyph: int) -> Vector2: ...
    def set_glyph_uv_rect(self, cache_index: int, size: Vector2i, glyph: int, uv_rect: Rect2) -> None: ...
    def get_glyph_uv_rect(self, cache_index: int, size: Vector2i, glyph: int) -> Rect2: ...
    def set_glyph_texture_idx(self, cache_index: int, size: Vector2i, glyph: int, texture_idx: int) -> None: ...
    def get_glyph_texture_idx(self, cache_index: int, size: Vector2i, glyph: int) -> int: ...
    def get_kerning_list(self, cache_index: int, size: int) -> GDArray: ...
    def clear_kerning_map(self, cache_index: int, size: int) -> None: ...
    def remove_kerning(self, cache_index: int, size: int, glyph_pair: Vector2i) -> None: ...
    def set_kerning(self, cache_index: int, size: int, glyph_pair: Vector2i, kerning: Vector2) -> None: ...
    def get_kerning(self, cache_index: int, size: int, glyph_pair: Vector2i) -> Vector2: ...
    def render_range(self, cache_index: int, size: Vector2i, start: int, end: int) -> None: ...
    def render_glyph(self, cache_index: int, size: Vector2i, index: int) -> None: ...
    def set_language_support_override(self, language: GDString | str, supported: bool) -> None: ...
    def get_language_support_override(self, language: GDString | str) -> bool: ...
    def remove_language_support_override(self, language: GDString | str) -> None: ...
    def get_language_support_overrides(self) -> PackedStringArray: ...
    def set_script_support_override(self, script: GDString | str, supported: bool) -> None: ...
    def get_script_support_override(self, script: GDString | str) -> bool: ...
    def remove_script_support_override(self, script: GDString | str) -> None: ...
    def get_script_support_overrides(self) -> PackedStringArray: ...
    def set_opentype_feature_overrides(self, overrides: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def get_opentype_feature_overrides(self) -> GDDictionary: ...
    def get_glyph_index(self, size: int, char_: int, variation_selector: int) -> int: ...
    def get_char_from_glyph_index(self, size: int, glyph_index: int) -> int: ...

    # Properties
    data: PackedByteArray
    generate_mipmaps: bool
    antialiasing: int
    font_name: GDString
    style_name: GDString
    font_style: int
    font_weight: int
    font_stretch: int
    subpixel_positioning: int
    multichannel_signed_distance_field: bool
    msdf_pixel_range: int
    msdf_size: int
    allow_system_fallback: bool
    force_autohinter: bool
    hinting: int
    oversampling: float
    fixed_size: int
    opentype_feature_overrides: GDDictionary
    fallbacks: GDArray


class FontVariation(TypeInUse(Font)):
    def __init__(self): ...

    # Methods
    def set_base_font(self, font: Font) -> None: ...
    def get_base_font(self) -> Font: ...
    def set_variation_opentype(self, coords: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def get_variation_opentype(self) -> GDDictionary: ...
    def set_variation_embolden(self, strength: float) -> None: ...
    def get_variation_embolden(self) -> float: ...
    def set_variation_face_index(self, face_index: int) -> None: ...
    def get_variation_face_index(self) -> int: ...
    def set_variation_transform(self, transform: Transform2D) -> None: ...
    def get_variation_transform(self) -> Transform2D: ...
    def set_opentype_features(self, features: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def set_spacing(self, spacing: TextServer.SpacingType, value: int) -> None: ...

    # Properties
    base_font: Font
    fallbacks: GDArray
    variation_opentype: GDDictionary
    variation_face_index: int
    variation_embolden: float
    variation_transform: Transform2D
    opentype_features: GDDictionary
    spacing_glyph: int
    spacing_space: int
    spacing_top: int
    spacing_bottom: int


class GDExtension(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class GDExtension.InitializationLevel(Enum):
        INITIALIZATION_LEVEL_CORE: int
        INITIALIZATION_LEVEL_SERVERS: int
        INITIALIZATION_LEVEL_SCENE: int
        INITIALIZATION_LEVEL_EDITOR: int

    # Methods
    def open_library(self, path: GDString | str, entry_symbol: GDString | str) -> Error: ...
    def close_library(self) -> None: ...
    def is_library_open(self) -> bool: ...
    def get_minimum_library_initialization_level(self) -> GDExtension.InitializationLevel: ...
    def initialize_library(self, level: GDExtension.InitializationLevel) -> None: ...


class GDExtensionManager(TypeInUse(Object)):

    # Enums
    class GDExtensionManager.LoadStatus(Enum):
        LOAD_STATUS_OK: int
        LOAD_STATUS_FAILED: int
        LOAD_STATUS_ALREADY_LOADED: int
        LOAD_STATUS_NOT_LOADED: int
        LOAD_STATUS_NEEDS_RESTART: int

    # Methods
    def load_extension(self, path: GDString | str) -> GDExtensionManager.LoadStatus: ...
    def reload_extension(self, path: GDString | str) -> GDExtensionManager.LoadStatus: ...
    def unload_extension(self, path: GDString | str) -> GDExtensionManager.LoadStatus: ...
    def is_extension_loaded(self, path: GDString | str) -> bool: ...
    def get_loaded_extensions(self) -> PackedStringArray: ...
    def get_extension(self, path: GDString | str) -> GDExtension: ...


class GDScript(TypeInUse(Script)):
    def __init__(self): ...

    # Methods
    def new(self) -> GDAny: ...


class GDScriptEditorTranslationParserPlugin(TypeInUse(EditorTranslationParserPlugin)):
    pass


class GDScriptNativeClass(TypeInUse(RefCounted)):

    # Methods
    def new(self) -> GDAny: ...


class GLTFAccessor(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_buffer_view(self) -> int: ...
    def set_buffer_view(self, buffer_view: int) -> None: ...
    def get_byte_offset(self) -> int: ...
    def set_byte_offset(self, byte_offset: int) -> None: ...
    def get_component_type(self) -> int: ...
    def set_component_type(self, component_type: int) -> None: ...
    def get_normalized(self) -> bool: ...
    def set_normalized(self, normalized: bool) -> None: ...
    def get_count(self) -> int: ...
    def set_count(self, count: int) -> None: ...
    def get_type(self) -> int: ...
    def set_type(self, type: int) -> None: ...
    def get_min(self) -> PackedFloat64Array: ...
    def set_min(self, min: PackedFloat64Array) -> None: ...
    def get_max(self) -> PackedFloat64Array: ...
    def set_max(self, max: PackedFloat64Array) -> None: ...
    def get_sparse_count(self) -> int: ...
    def set_sparse_count(self, sparse_count: int) -> None: ...
    def get_sparse_indices_buffer_view(self) -> int: ...
    def set_sparse_indices_buffer_view(self, sparse_indices_buffer_view: int) -> None: ...
    def get_sparse_indices_byte_offset(self) -> int: ...
    def set_sparse_indices_byte_offset(self, sparse_indices_byte_offset: int) -> None: ...
    def get_sparse_indices_component_type(self) -> int: ...
    def set_sparse_indices_component_type(self, sparse_indices_component_type: int) -> None: ...
    def get_sparse_values_buffer_view(self) -> int: ...
    def set_sparse_values_buffer_view(self, sparse_values_buffer_view: int) -> None: ...
    def get_sparse_values_byte_offset(self) -> int: ...
    def set_sparse_values_byte_offset(self, sparse_values_byte_offset: int) -> None: ...

    # Properties
    buffer_view: int
    byte_offset: int
    component_type: int
    normalized: bool
    count: int
    type: int
    min: PackedFloat64Array
    max: PackedFloat64Array
    sparse_count: int
    sparse_indices_buffer_view: int
    sparse_indices_byte_offset: int
    sparse_indices_component_type: int
    sparse_values_buffer_view: int
    sparse_values_byte_offset: int


class GLTFAnimation(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_loop(self) -> bool: ...
    def set_loop(self, loop: bool) -> None: ...

    # Properties
    loop: bool


class GLTFBufferView(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_buffer(self) -> int: ...
    def set_buffer(self, buffer: int) -> None: ...
    def get_byte_offset(self) -> int: ...
    def set_byte_offset(self, byte_offset: int) -> None: ...
    def get_byte_length(self) -> int: ...
    def set_byte_length(self, byte_length: int) -> None: ...
    def get_byte_stride(self) -> int: ...
    def set_byte_stride(self, byte_stride: int) -> None: ...
    def get_indices(self) -> bool: ...
    def set_indices(self, indices: bool) -> None: ...

    # Properties
    buffer: int
    byte_offset: int
    byte_length: int
    byte_stride: int
    indices: bool


class GLTFCamera(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def from_node(self, camera_node: Camera3D) -> GLTFCamera: ...
    def to_node(self) -> Camera3D: ...
    def from_dictionary(self, dictionary: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> GLTFCamera: ...
    def to_dictionary(self) -> GDDictionary: ...
    def get_perspective(self) -> bool: ...
    def set_perspective(self, perspective: bool) -> None: ...
    def get_fov(self) -> float: ...
    def set_fov(self, fov: float) -> None: ...
    def get_size_mag(self) -> float: ...
    def set_size_mag(self, size_mag: float) -> None: ...
    def get_depth_far(self) -> float: ...
    def set_depth_far(self, zdepth_far: float) -> None: ...
    def get_depth_near(self) -> float: ...
    def set_depth_near(self, zdepth_near: float) -> None: ...

    # Properties
    perspective: bool
    fov: float
    size_mag: float
    depth_far: float
    depth_near: float


class GLTFDocument(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def append_from_file(self, path: GDString | str, state: GLTFState, flags: int = 0, base_path: GDString | str = "") -> Error: ...
    def append_from_buffer(self, bytes: PackedByteArray, base_path: GDString | str, state: GLTFState, flags: int = 0) -> Error: ...
    def append_from_scene(self, node: Node, state: GLTFState, flags: int = 0) -> Error: ...
    def generate_scene(self, state: GLTFState, bake_fps: float = 30, trimming: bool = False, remove_immutable_tracks: bool = True) -> Node: ...
    def generate_buffer(self, state: GLTFState) -> PackedByteArray: ...
    def write_to_filesystem(self, state: GLTFState, path: GDString | str) -> Error: ...
    def register_gltf_document_extension(self, extension: GLTFDocumentExtension, first_priority: bool = False) -> None: ...
    def unregister_gltf_document_extension(self, extension: GLTFDocumentExtension) -> None: ...


class GLTFDocumentExtension(TypeInUse(Resource)):
    def __init__(self): ...


class GLTFDocumentExtensionConvertImporterMesh(TypeInUse(GLTFDocumentExtension)):
    def __init__(self): ...


class GLTFDocumentExtensionPhysics(TypeInUse(GLTFDocumentExtension)):
    pass


class GLTFDocumentExtensionTextureWebP(TypeInUse(GLTFDocumentExtension)):
    pass


class GLTFLight(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def from_node(self, light_node: Light3D) -> GLTFLight: ...
    def to_node(self) -> Light3D: ...
    def from_dictionary(self, dictionary: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> GLTFLight: ...
    def to_dictionary(self) -> GDDictionary: ...
    def get_color(self) -> Color: ...
    def set_color(self, color: Color) -> None: ...
    def get_intensity(self) -> float: ...
    def set_intensity(self, intensity: float) -> None: ...
    def get_light_type(self) -> GDString: ...
    def set_light_type(self, light_type: GDString | str) -> None: ...
    def get_range(self) -> float: ...
    def set_range(self, range: float) -> None: ...
    def get_inner_cone_angle(self) -> float: ...
    def set_inner_cone_angle(self, inner_cone_angle: float) -> None: ...
    def get_outer_cone_angle(self) -> float: ...
    def set_outer_cone_angle(self, outer_cone_angle: float) -> None: ...

    # Properties
    color: Color
    intensity: float
    light_type: GDString
    range: float
    inner_cone_angle: float
    outer_cone_angle: float


class GLTFMesh(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_mesh(self) -> ImporterMesh: ...
    def set_mesh(self, mesh: ImporterMesh) -> None: ...
    def get_blend_weights(self) -> PackedFloat32Array: ...
    def set_blend_weights(self, blend_weights: PackedFloat32Array) -> None: ...
    def get_instance_materials(self) -> GDArray: ...
    def set_instance_materials(self, instance_materials: GDArray) -> None: ...

    # Properties
    mesh: GDObject
    blend_weights: PackedFloat32Array
    instance_materials: GDArray


class GLTFNode(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_parent(self) -> int: ...
    def set_parent(self, parent: int) -> None: ...
    def get_height(self) -> int: ...
    def set_height(self, height: int) -> None: ...
    def get_xform(self) -> Transform3D: ...
    def set_xform(self, xform: Transform3D) -> None: ...
    def get_mesh(self) -> int: ...
    def set_mesh(self, mesh: int) -> None: ...
    def get_camera(self) -> int: ...
    def set_camera(self, camera: int) -> None: ...
    def get_skin(self) -> int: ...
    def set_skin(self, skin: int) -> None: ...
    def get_skeleton(self) -> int: ...
    def set_skeleton(self, skeleton: int) -> None: ...
    def get_position(self) -> Vector3: ...
    def set_position(self, position: Vector3) -> None: ...
    def get_rotation(self) -> Quaternion: ...
    def set_rotation(self, rotation: Quaternion) -> None: ...
    def get_scale(self) -> Vector3: ...
    def set_scale(self, scale: Vector3) -> None: ...
    def get_children(self) -> PackedInt32Array: ...
    def set_children(self, children: PackedInt32Array) -> None: ...
    def get_light(self) -> int: ...
    def set_light(self, light: int) -> None: ...
    def get_additional_data(self, extension_name: StringName | str) -> GDAny: ...
    def set_additional_data(self, extension_name: StringName | str, additional_data: GDAny) -> None: ...

    # Properties
    parent: int
    height: int
    xform: Transform3D
    mesh: int
    camera: int
    skin: int
    skeleton: int
    position: Vector3
    rotation: Quaternion
    scale: Vector3
    children: PackedInt32Array
    light: int


class GLTFPhysicsBody(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def from_node(self, body_node: CollisionObject3D) -> GLTFPhysicsBody: ...
    def to_node(self) -> CollisionObject3D: ...
    def from_dictionary(self, dictionary: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> GLTFPhysicsBody: ...
    def to_dictionary(self) -> GDDictionary: ...
    def get_body_type(self) -> GDString: ...
    def set_body_type(self, body_type: GDString | str) -> None: ...
    def get_mass(self) -> float: ...
    def set_mass(self, mass: float) -> None: ...
    def get_linear_velocity(self) -> Vector3: ...
    def set_linear_velocity(self, linear_velocity: Vector3) -> None: ...
    def get_angular_velocity(self) -> Vector3: ...
    def set_angular_velocity(self, angular_velocity: Vector3) -> None: ...
    def get_inertia_tensor(self) -> Basis: ...
    def set_inertia_tensor(self, inertia_tensor: Basis) -> None: ...

    # Properties
    body_type: GDString
    mass: float
    linear_velocity: Vector3
    angular_velocity: Vector3
    inertia_tensor: Basis


class GLTFPhysicsShape(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def from_node(self, shape_node: CollisionShape3D) -> GLTFPhysicsShape: ...
    def to_node(self, cache_shapes: bool = False) -> CollisionShape3D: ...
    def from_dictionary(self, dictionary: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> GLTFPhysicsShape: ...
    def to_dictionary(self) -> GDDictionary: ...
    def get_shape_type(self) -> GDString: ...
    def set_shape_type(self, shape_type: GDString | str) -> None: ...
    def get_size(self) -> Vector3: ...
    def set_size(self, size: Vector3) -> None: ...
    def get_radius(self) -> float: ...
    def set_radius(self, radius: float) -> None: ...
    def get_height(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_is_trigger(self) -> bool: ...
    def set_is_trigger(self, is_trigger: bool) -> None: ...
    def get_mesh_index(self) -> int: ...
    def set_mesh_index(self, mesh_index: int) -> None: ...
    def get_importer_mesh(self) -> ImporterMesh: ...
    def set_importer_mesh(self, importer_mesh: ImporterMesh) -> None: ...

    # Properties
    shape_type: GDString
    size: Vector3
    radius: float
    height: float
    is_trigger: bool
    mesh_index: int
    importer_mesh: ImporterMesh


class GLTFSkeleton(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_joints(self) -> PackedInt32Array: ...
    def set_joints(self, joints: PackedInt32Array) -> None: ...
    def get_roots(self) -> PackedInt32Array: ...
    def set_roots(self, roots: PackedInt32Array) -> None: ...
    def get_godot_skeleton(self) -> Skeleton3D: ...
    def get_unique_names(self) -> GDArray: ...
    def set_unique_names(self, unique_names: GDArray) -> None: ...
    def get_godot_bone_node(self) -> GDDictionary: ...
    def set_godot_bone_node(self, godot_bone_node: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def get_bone_attachment_count(self) -> int: ...
    def get_bone_attachment(self, idx: int) -> BoneAttachment3D: ...

    # Properties
    joints: PackedInt32Array
    roots: PackedInt32Array
    unique_names: GDArray
    godot_bone_node: GDDictionary


class GLTFSkin(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_skin_root(self) -> int: ...
    def set_skin_root(self, skin_root: int) -> None: ...
    def get_joints_original(self) -> PackedInt32Array: ...
    def set_joints_original(self, joints_original: PackedInt32Array) -> None: ...
    def get_inverse_binds(self) -> GDArray: ...
    def set_inverse_binds(self, inverse_binds: GDArray) -> None: ...
    def get_joints(self) -> PackedInt32Array: ...
    def set_joints(self, joints: PackedInt32Array) -> None: ...
    def get_non_joints(self) -> PackedInt32Array: ...
    def set_non_joints(self, non_joints: PackedInt32Array) -> None: ...
    def get_roots(self) -> PackedInt32Array: ...
    def set_roots(self, roots: PackedInt32Array) -> None: ...
    def get_skeleton(self) -> int: ...
    def set_skeleton(self, skeleton: int) -> None: ...
    def get_joint_i_to_bone_i(self) -> GDDictionary: ...
    def set_joint_i_to_bone_i(self, joint_i_to_bone_i: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def get_joint_i_to_name(self) -> GDDictionary: ...
    def set_joint_i_to_name(self, joint_i_to_name: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def get_godot_skin(self) -> Skin: ...
    def set_godot_skin(self, godot_skin: Skin) -> None: ...

    # Properties
    skin_root: int
    joints_original: PackedInt32Array
    inverse_binds: GDArray
    joints: PackedInt32Array
    non_joints: PackedInt32Array
    roots: PackedInt32Array
    skeleton: int
    joint_i_to_bone_i: GDDictionary
    joint_i_to_name: GDDictionary
    godot_skin: Skin


class GLTFSpecGloss(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_diffuse_img(self) -> Image: ...
    def set_diffuse_img(self, diffuse_img: Image) -> None: ...
    def get_diffuse_factor(self) -> Color: ...
    def set_diffuse_factor(self, diffuse_factor: Color) -> None: ...
    def get_gloss_factor(self) -> float: ...
    def set_gloss_factor(self, gloss_factor: float) -> None: ...
    def get_specular_factor(self) -> Color: ...
    def set_specular_factor(self, specular_factor: Color) -> None: ...
    def get_spec_gloss_img(self) -> Image: ...
    def set_spec_gloss_img(self, spec_gloss_img: Image) -> None: ...

    # Properties
    diffuse_img: GDObject
    diffuse_factor: Color
    gloss_factor: float
    specular_factor: Color
    spec_gloss_img: GDObject


class GLTFState(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def add_used_extension(self, extension_name: GDString | str, required: bool) -> None: ...
    def get_json(self) -> GDDictionary: ...
    def set_json(self, json: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def get_major_version(self) -> int: ...
    def set_major_version(self, major_version: int) -> None: ...
    def get_minor_version(self) -> int: ...
    def set_minor_version(self, minor_version: int) -> None: ...
    def get_glb_data(self) -> PackedByteArray: ...
    def set_glb_data(self, glb_data: PackedByteArray) -> None: ...
    def get_use_named_skin_binds(self) -> bool: ...
    def set_use_named_skin_binds(self, use_named_skin_binds: bool) -> None: ...
    def get_nodes(self) -> GDArray: ...
    def set_nodes(self, nodes: GDArray) -> None: ...
    def get_buffers(self) -> GDArray: ...
    def set_buffers(self, buffers: GDArray) -> None: ...
    def get_buffer_views(self) -> GDArray: ...
    def set_buffer_views(self, buffer_views: GDArray) -> None: ...
    def get_accessors(self) -> GDArray: ...
    def set_accessors(self, accessors: GDArray) -> None: ...
    def get_meshes(self) -> GDArray: ...
    def set_meshes(self, meshes: GDArray) -> None: ...
    def get_animation_players_count(self, idx: int) -> int: ...
    def get_animation_player(self, idx: int) -> AnimationPlayer: ...
    def get_materials(self) -> GDArray: ...
    def set_materials(self, materials: GDArray) -> None: ...
    def get_scene_name(self) -> GDString: ...
    def set_scene_name(self, scene_name: GDString | str) -> None: ...
    def get_base_path(self) -> GDString: ...
    def set_base_path(self, base_path: GDString | str) -> None: ...
    def get_root_nodes(self) -> PackedInt32Array: ...
    def set_root_nodes(self, root_nodes: PackedInt32Array) -> None: ...
    def get_textures(self) -> GDArray: ...
    def set_textures(self, textures: GDArray) -> None: ...
    def get_texture_samplers(self) -> GDArray: ...
    def set_texture_samplers(self, texture_samplers: GDArray) -> None: ...
    def get_images(self) -> GDArray: ...
    def set_images(self, images: GDArray) -> None: ...
    def get_skins(self) -> GDArray: ...
    def set_skins(self, skins: GDArray) -> None: ...
    def get_cameras(self) -> GDArray: ...
    def set_cameras(self, cameras: GDArray) -> None: ...
    def get_lights(self) -> GDArray: ...
    def set_lights(self, lights: GDArray) -> None: ...
    def get_unique_names(self) -> GDArray: ...
    def set_unique_names(self, unique_names: GDArray) -> None: ...
    def get_unique_animation_names(self) -> GDArray: ...
    def set_unique_animation_names(self, unique_animation_names: GDArray) -> None: ...
    def get_skeletons(self) -> GDArray: ...
    def set_skeletons(self, skeletons: GDArray) -> None: ...
    def get_create_animations(self) -> bool: ...
    def set_create_animations(self, create_animations: bool) -> None: ...
    def get_animations(self) -> GDArray: ...
    def set_animations(self, animations: GDArray) -> None: ...
    def get_scene_node(self, idx: int) -> Node: ...
    def get_node_index(self, scene_node: Node) -> int: ...
    def get_additional_data(self, extension_name: StringName | str) -> GDAny: ...
    def set_additional_data(self, extension_name: StringName | str, additional_data: GDAny) -> None: ...
    def get_handle_binary_image(self) -> int: ...
    def set_handle_binary_image(self, method: int) -> None: ...

    # Properties
    json: GDDictionary
    major_version: int
    minor_version: int
    glb_data: PackedByteArray
    use_named_skin_binds: bool
    nodes: GDArray
    buffers: GDArray
    buffer_views: GDArray
    accessors: GDArray
    meshes: GDArray
    materials: GDArray
    scene_name: GDString
    base_path: GDString
    root_nodes: PackedInt32Array
    textures: GDArray
    texture_samplers: GDArray
    images: GDArray
    skins: GDArray
    cameras: GDArray
    lights: GDArray
    unique_names: GDArray
    unique_animation_names: GDArray
    skeletons: GDArray
    create_animations: bool
    animations: GDArray
    handle_binary_image: int

    # Constants
    HANDLE_BINARY_DISCARD_TEXTURES: int
    HANDLE_BINARY_EXTRACT_TEXTURES: int
    HANDLE_BINARY_EMBED_AS_BASISU: int
    HANDLE_BINARY_EMBED_AS_UNCOMPRESSED: int


class GLTFTexture(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_src_image(self) -> int: ...
    def set_src_image(self, src_image: int) -> None: ...
    def get_sampler(self) -> int: ...
    def set_sampler(self, sampler: int) -> None: ...

    # Properties
    src_image: int
    sampler: int


class GLTFTextureSampler(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def get_mag_filter(self) -> int: ...
    def set_mag_filter(self, filter_mode: int) -> None: ...
    def get_min_filter(self) -> int: ...
    def set_min_filter(self, filter_mode: int) -> None: ...
    def get_wrap_s(self) -> int: ...
    def set_wrap_s(self, wrap_mode: int) -> None: ...
    def get_wrap_t(self) -> int: ...
    def set_wrap_t(self, wrap_mode: int) -> None: ...

    # Properties
    mag_filter: int
    min_filter: int
    wrap_s: int
    wrap_t: int


class Geometry2D(TypeInUse(Object)):
    @classmethod
    def new(cls) -> Geometry2D: ...

    # Enums
    class Geometry2D.PolyBooleanOperation(Enum):
        OPERATION_UNION: int
        OPERATION_DIFFERENCE: int
        OPERATION_INTERSECTION: int
        OPERATION_XOR: int
    class Geometry2D.PolyJoinType(Enum):
        JOIN_SQUARE: int
        JOIN_ROUND: int
        JOIN_MITER: int
    class Geometry2D.PolyEndType(Enum):
        END_POLYGON: int
        END_JOINED: int
        END_BUTT: int
        END_SQUARE: int
        END_ROUND: int

    # Methods
    def is_point_in_circle(self, point: Vector2, circle_position: Vector2, circle_radius: float) -> bool: ...
    def segment_intersects_circle(self, segment_from: Vector2, segment_to: Vector2, circle_position: Vector2, circle_radius: float) -> float: ...
    def segment_intersects_segment(self, from_a: Vector2, to_a: Vector2, from_b: Vector2, to_b: Vector2) -> GDAny: ...
    def line_intersects_line(self, from_a: Vector2, dir_a: Vector2, from_b: Vector2, dir_b: Vector2) -> GDAny: ...
    def get_closest_points_between_segments(self, p1: Vector2, q1: Vector2, p2: Vector2, q2: Vector2) -> PackedVector2Array: ...
    def get_closest_point_to_segment(self, point: Vector2, s1: Vector2, s2: Vector2) -> Vector2: ...
    def get_closest_point_to_segment_uncapped(self, point: Vector2, s1: Vector2, s2: Vector2) -> Vector2: ...
    def point_is_inside_triangle(self, point: Vector2, a: Vector2, b: Vector2, c: Vector2) -> bool: ...
    def is_polygon_clockwise(self, polygon: PackedVector2Array) -> bool: ...
    def is_point_in_polygon(self, point: Vector2, polygon: PackedVector2Array) -> bool: ...
    def triangulate_polygon(self, polygon: PackedVector2Array) -> PackedInt32Array: ...
    def triangulate_delaunay(self, points: PackedVector2Array) -> PackedInt32Array: ...
    def convex_hull(self, points: PackedVector2Array) -> PackedVector2Array: ...
    def decompose_polygon_in_convex(self, polygon: PackedVector2Array) -> GDArray: ...
    def merge_polygons(self, polygon_a: PackedVector2Array, polygon_b: PackedVector2Array) -> GDArray: ...
    def clip_polygons(self, polygon_a: PackedVector2Array, polygon_b: PackedVector2Array) -> GDArray: ...
    def intersect_polygons(self, polygon_a: PackedVector2Array, polygon_b: PackedVector2Array) -> GDArray: ...
    def exclude_polygons(self, polygon_a: PackedVector2Array, polygon_b: PackedVector2Array) -> GDArray: ...
    def clip_polyline_with_polygon(self, polyline: PackedVector2Array, polygon: PackedVector2Array) -> GDArray: ...
    def intersect_polyline_with_polygon(self, polyline: PackedVector2Array, polygon: PackedVector2Array) -> GDArray: ...
    def offset_polygon(self, polygon: PackedVector2Array, delta: float, join_type: Geometry2D.PolyJoinType = 0) -> GDArray: ...
    def offset_polyline(self, polyline: PackedVector2Array, delta: float, join_type: Geometry2D.PolyJoinType = 0, end_type: Geometry2D.PolyEndType = 3) -> GDArray: ...
    def make_atlas(self, sizes: PackedVector2Array) -> GDDictionary: ...


class Geometry3D(TypeInUse(Object)):
    @classmethod
    def new(cls) -> Geometry3D: ...

    # Methods
    def build_box_planes(self, extents: Vector3) -> GDArray: ...
    def build_cylinder_planes(self, radius: float, height: float, sides: int, axis: Vector3.Axis = 2) -> GDArray: ...
    def build_capsule_planes(self, radius: float, height: float, sides: int, lats: int, axis: Vector3.Axis = 2) -> GDArray: ...
    def get_closest_points_between_segments(self, p1: Vector3, p2: Vector3, q1: Vector3, q2: Vector3) -> PackedVector3Array: ...
    def get_closest_point_to_segment(self, point: Vector3, s1: Vector3, s2: Vector3) -> Vector3: ...
    def get_closest_point_to_segment_uncapped(self, point: Vector3, s1: Vector3, s2: Vector3) -> Vector3: ...
    def ray_intersects_triangle(self, from_: Vector3, dir: Vector3, a: Vector3, b: Vector3, c: Vector3) -> GDAny: ...
    def segment_intersects_triangle(self, from_: Vector3, to: Vector3, a: Vector3, b: Vector3, c: Vector3) -> GDAny: ...
    def segment_intersects_sphere(self, from_: Vector3, to: Vector3, sphere_position: Vector3, sphere_radius: float) -> PackedVector3Array: ...
    def segment_intersects_cylinder(self, from_: Vector3, to: Vector3, height: float, radius: float) -> PackedVector3Array: ...
    def segment_intersects_convex(self, from_: Vector3, to: Vector3, planes: GDArray) -> PackedVector3Array: ...
    def clip_polygon(self, points: PackedVector3Array, plane: Plane) -> PackedVector3Array: ...


class GodotPhysicsServer2D(TypeInUse(PhysicsServer2D)):
    pass


class GodotPhysicsServer3D(TypeInUse(PhysicsServer3D)):
    pass


class Gradient(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class Gradient.InterpolationMode(Enum):
        GRADIENT_INTERPOLATE_LINEAR: int
        GRADIENT_INTERPOLATE_CONSTANT: int
        GRADIENT_INTERPOLATE_CUBIC: int
    class Gradient.ColorSpace(Enum):
        GRADIENT_COLOR_SPACE_SRGB: int
        GRADIENT_COLOR_SPACE_LINEAR_SRGB: int
        GRADIENT_COLOR_SPACE_OKLAB: int

    # Methods
    def add_point(self, offset: float, color: Color) -> None: ...
    def remove_point(self, point: int) -> None: ...
    def set_offset(self, point: int, offset: float) -> None: ...
    def get_offset(self, point: int) -> float: ...
    def reverse(self) -> None: ...
    def set_color(self, point: int, color: Color) -> None: ...
    def get_color(self, point: int) -> Color: ...
    def sample(self, offset: float) -> Color: ...
    def get_point_count(self) -> int: ...
    def set_offsets(self, offsets: PackedFloat32Array) -> None: ...
    def get_offsets(self) -> PackedFloat32Array: ...
    def set_colors(self, colors: PackedColorArray) -> None: ...
    def get_colors(self) -> PackedColorArray: ...
    def set_interpolation_mode(self, interpolation_mode: Gradient.InterpolationMode) -> None: ...
    def get_interpolation_mode(self) -> Gradient.InterpolationMode: ...
    def set_interpolation_color_space(self, interpolation_color_space: Gradient.ColorSpace) -> None: ...
    def get_interpolation_color_space(self) -> Gradient.ColorSpace: ...

    # Properties
    interpolation_mode: int
    interpolation_color_space: int
    offsets: PackedFloat32Array
    colors: PackedColorArray


class GradientTexture1D(TypeInUse(Texture2D)):
    def __init__(self): ...

    # Methods
    def set_gradient(self, gradient: Gradient) -> None: ...
    def get_gradient(self) -> Gradient: ...
    def set_width(self, width: int) -> None: ...
    def set_use_hdr(self, enabled: bool) -> None: ...
    def is_using_hdr(self) -> bool: ...

    # Properties
    gradient: Gradient
    width: int
    use_hdr: bool


class GradientTexture2D(TypeInUse(Texture2D)):
    def __init__(self): ...

    # Enums
    class GradientTexture2D.Fill(Enum):
        FILL_LINEAR: int
        FILL_RADIAL: int
        FILL_SQUARE: int
    class GradientTexture2D.Repeat(Enum):
        REPEAT_NONE: int
        REPEAT: int
        REPEAT_MIRROR: int

    # Methods
    def set_gradient(self, gradient: Gradient) -> None: ...
    def get_gradient(self) -> Gradient: ...
    def set_width(self, width: int) -> None: ...
    def set_height(self, height: int) -> None: ...
    def set_use_hdr(self, enabled: bool) -> None: ...
    def is_using_hdr(self) -> bool: ...
    def set_fill(self, fill: GradientTexture2D.Fill) -> None: ...
    def get_fill(self) -> GradientTexture2D.Fill: ...
    def set_fill_from(self, fill_from: Vector2) -> None: ...
    def get_fill_from(self) -> Vector2: ...
    def set_fill_to(self, fill_to: Vector2) -> None: ...
    def get_fill_to(self) -> Vector2: ...
    def set_repeat(self, repeat: GradientTexture2D.Repeat) -> None: ...
    def get_repeat(self) -> GradientTexture2D.Repeat: ...

    # Properties
    gradient: Gradient
    width: int
    height: int
    use_hdr: bool
    fill: int
    fill_from: Vector2
    fill_to: Vector2
    repeat: int


class HMACContext(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def start(self, hash_type: HashingContext.HashType, key: PackedByteArray) -> Error: ...
    def update(self, data: PackedByteArray) -> Error: ...
    def finish(self) -> PackedByteArray: ...


class HTTPClient(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class HTTPClient.Method(Enum):
        METHOD_GET: int
        METHOD_HEAD: int
        METHOD_POST: int
        METHOD_PUT: int
        METHOD_DELETE: int
        METHOD_OPTIONS: int
        METHOD_TRACE: int
        METHOD_CONNECT: int
        METHOD_PATCH: int
        METHOD_MAX: int
    class HTTPClient.Status(Enum):
        STATUS_DISCONNECTED: int
        STATUS_RESOLVING: int
        STATUS_CANT_RESOLVE: int
        STATUS_CONNECTING: int
        STATUS_CANT_CONNECT: int
        STATUS_CONNECTED: int
        STATUS_REQUESTING: int
        STATUS_BODY: int
        STATUS_CONNECTION_ERROR: int
        STATUS_TLS_HANDSHAKE_ERROR: int
    class HTTPClient.ResponseCode(Enum):
        RESPONSE_CONTINUE: int
        RESPONSE_SWITCHING_PROTOCOLS: int
        RESPONSE_PROCESSING: int
        RESPONSE_OK: int
        RESPONSE_CREATED: int
        RESPONSE_ACCEPTED: int
        RESPONSE_NON_AUTHORITATIVE_INFORMATION: int
        RESPONSE_NO_CONTENT: int
        RESPONSE_RESET_CONTENT: int
        RESPONSE_PARTIAL_CONTENT: int
        RESPONSE_MULTI_STATUS: int
        RESPONSE_ALREADY_REPORTED: int
        RESPONSE_IM_USED: int
        RESPONSE_MULTIPLE_CHOICES: int
        RESPONSE_MOVED_PERMANENTLY: int
        RESPONSE_FOUND: int
        RESPONSE_SEE_OTHER: int
        RESPONSE_NOT_MODIFIED: int
        RESPONSE_USE_PROXY: int
        RESPONSE_SWITCH_PROXY: int
        RESPONSE_TEMPORARY_REDIRECT: int
        RESPONSE_PERMANENT_REDIRECT: int
        RESPONSE_BAD_REQUEST: int
        RESPONSE_UNAUTHORIZED: int
        RESPONSE_PAYMENT_REQUIRED: int
        RESPONSE_FORBIDDEN: int
        RESPONSE_NOT_FOUND: int
        RESPONSE_METHOD_NOT_ALLOWED: int
        RESPONSE_NOT_ACCEPTABLE: int
        RESPONSE_PROXY_AUTHENTICATION_REQUIRED: int
        RESPONSE_REQUEST_TIMEOUT: int
        RESPONSE_CONFLICT: int
        RESPONSE_GONE: int
        RESPONSE_LENGTH_REQUIRED: int
        RESPONSE_PRECONDITION_FAILED: int
        RESPONSE_REQUEST_ENTITY_TOO_LARGE: int
        RESPONSE_REQUEST_URI_TOO_LONG: int
        RESPONSE_UNSUPPORTED_MEDIA_TYPE: int
        RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE: int
        RESPONSE_EXPECTATION_FAILED: int
        RESPONSE_IM_A_TEAPOT: int
        RESPONSE_MISDIRECTED_REQUEST: int
        RESPONSE_UNPROCESSABLE_ENTITY: int
        RESPONSE_LOCKED: int
        RESPONSE_FAILED_DEPENDENCY: int
        RESPONSE_UPGRADE_REQUIRED: int
        RESPONSE_PRECONDITION_REQUIRED: int
        RESPONSE_TOO_MANY_REQUESTS: int
        RESPONSE_REQUEST_HEADER_FIELDS_TOO_LARGE: int
        RESPONSE_UNAVAILABLE_FOR_LEGAL_REASONS: int
        RESPONSE_INTERNAL_SERVER_ERROR: int
        RESPONSE_NOT_IMPLEMENTED: int
        RESPONSE_BAD_GATEWAY: int
        RESPONSE_SERVICE_UNAVAILABLE: int
        RESPONSE_GATEWAY_TIMEOUT: int
        RESPONSE_HTTP_VERSION_NOT_SUPPORTED: int
        RESPONSE_VARIANT_ALSO_NEGOTIATES: int
        RESPONSE_INSUFFICIENT_STORAGE: int
        RESPONSE_LOOP_DETECTED: int
        RESPONSE_NOT_EXTENDED: int
        RESPONSE_NETWORK_AUTH_REQUIRED: int

    # Methods
    def connect_to_host(self, host: GDString | str, port: int = -1, tls_options: TLSOptions = None) -> Error: ...
    def set_connection(self, connection: StreamPeer) -> None: ...
    def get_connection(self) -> StreamPeer: ...
    def request_raw(self, method: HTTPClient.Method, url: GDString | str, headers: PackedStringArray, body: PackedByteArray) -> Error: ...
    def request(self, method: HTTPClient.Method, url: GDString | str, headers: PackedStringArray, body: GDString | str = "") -> Error: ...
    def close(self) -> None: ...
    def has_response(self) -> bool: ...
    def is_response_chunked(self) -> bool: ...
    def get_response_code(self) -> int: ...
    def get_response_headers(self) -> PackedStringArray: ...
    def get_response_headers_as_dictionary(self) -> GDDictionary: ...
    def get_response_body_length(self) -> int: ...
    def read_response_body_chunk(self) -> PackedByteArray: ...
    def set_read_chunk_size(self, bytes: int) -> None: ...
    def get_read_chunk_size(self) -> int: ...
    def set_blocking_mode(self, enabled: bool) -> None: ...
    def is_blocking_mode_enabled(self) -> bool: ...
    def get_status(self) -> HTTPClient.Status: ...
    def poll(self) -> Error: ...
    def set_http_proxy(self, host: GDString | str, port: int) -> None: ...
    def set_https_proxy(self, host: GDString | str, port: int) -> None: ...
    def query_string_from_dict(self, fields: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> GDString: ...

    # Properties
    blocking_mode_enabled: bool
    connection: StreamPeer
    read_chunk_size: int


class HashingContext(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class HashingContext.HashType(Enum):
        HASH_MD5: int
        HASH_SHA1: int
        HASH_SHA256: int

    # Methods
    def start(self, type: HashingContext.HashType) -> Error: ...
    def update(self, chunk: PackedByteArray) -> Error: ...
    def finish(self) -> PackedByteArray: ...


class HeightMapShape3D(TypeInUse(Shape3D)):
    def __init__(self): ...

    # Methods
    def set_map_width(self, width: int) -> None: ...
    def get_map_width(self) -> int: ...
    def set_map_depth(self, height: int) -> None: ...
    def get_map_depth(self) -> int: ...
    def set_map_data(self, data: PackedFloat32Array) -> None: ...
    def get_map_data(self) -> PackedFloat32Array: ...

    # Properties
    map_width: int
    map_depth: int
    map_data: PackedFloat32Array


class IP(TypeInUse(Object)):

    # Enums
    class IP.ResolverStatus(Enum):
        RESOLVER_STATUS_NONE: int
        RESOLVER_STATUS_WAITING: int
        RESOLVER_STATUS_DONE: int
        RESOLVER_STATUS_ERROR: int
    class IP.Type(Enum):
        TYPE_NONE: int
        TYPE_IPV4: int
        TYPE_IPV6: int
        TYPE_ANY: int

    # Methods
    def resolve_hostname(self, host: GDString | str, ip_type: IP.Type = 3) -> GDString: ...
    def resolve_hostname_addresses(self, host: GDString | str, ip_type: IP.Type = 3) -> PackedStringArray: ...
    def resolve_hostname_queue_item(self, host: GDString | str, ip_type: IP.Type = 3) -> int: ...
    def get_resolve_item_status(self, id: int) -> IP.ResolverStatus: ...
    def get_resolve_item_address(self, id: int) -> GDString: ...
    def get_resolve_item_addresses(self, id: int) -> GDArray: ...
    def erase_resolve_item(self, id: int) -> None: ...
    def get_local_addresses(self) -> PackedStringArray: ...
    def get_local_interfaces(self) -> GDArray: ...
    def clear_cache(self, hostname: GDString | str = "") -> None: ...

    # Constants
    RESOLVER_MAX_QUERIES: int
    RESOLVER_INVALID_ID: int


class IPUnix(TypeInUse(IP)):
    pass


class Image(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class Image.Format(Enum):
        FORMAT_L8: int
        FORMAT_LA8: int
        FORMAT_R8: int
        FORMAT_RG8: int
        FORMAT_RGB8: int
        FORMAT_RGBA8: int
        FORMAT_RGBA4444: int
        FORMAT_RGB565: int
        FORMAT_RF: int
        FORMAT_RGF: int
        FORMAT_RGBF: int
        FORMAT_RGBAF: int
        FORMAT_RH: int
        FORMAT_RGH: int
        FORMAT_RGBH: int
        FORMAT_RGBAH: int
        FORMAT_RGBE9995: int
        FORMAT_DXT1: int
        FORMAT_DXT3: int
        FORMAT_DXT5: int
        FORMAT_RGTC_R: int
        FORMAT_RGTC_RG: int
        FORMAT_BPTC_RGBA: int
        FORMAT_BPTC_RGBF: int
        FORMAT_BPTC_RGBFU: int
        FORMAT_ETC: int
        FORMAT_ETC2_R11: int
        FORMAT_ETC2_R11S: int
        FORMAT_ETC2_RG11: int
        FORMAT_ETC2_RG11S: int
        FORMAT_ETC2_RGB8: int
        FORMAT_ETC2_RGBA8: int
        FORMAT_ETC2_RGB8A1: int
        FORMAT_ETC2_RA_AS_RG: int
        FORMAT_DXT5_RA_AS_RG: int
        FORMAT_ASTC_4x4: int
        FORMAT_ASTC_4x4_HDR: int
        FORMAT_ASTC_8x8: int
        FORMAT_ASTC_8x8_HDR: int
        FORMAT_MAX: int
    class Image.Interpolation(Enum):
        INTERPOLATE_NEAREST: int
        INTERPOLATE_BILINEAR: int
        INTERPOLATE_CUBIC: int
        INTERPOLATE_TRILINEAR: int
        INTERPOLATE_LANCZOS: int
    class Image.AlphaMode(Enum):
        ALPHA_NONE: int
        ALPHA_BIT: int
        ALPHA_BLEND: int
    class Image.CompressMode(Enum):
        COMPRESS_S3TC: int
        COMPRESS_ETC: int
        COMPRESS_ETC2: int
        COMPRESS_BPTC: int
        COMPRESS_ASTC: int
        COMPRESS_MAX: int
    class Image.UsedChannels(Enum):
        USED_CHANNELS_L: int
        USED_CHANNELS_LA: int
        USED_CHANNELS_R: int
        USED_CHANNELS_RG: int
        USED_CHANNELS_RGB: int
        USED_CHANNELS_RGBA: int
    class Image.CompressSource(Enum):
        COMPRESS_SOURCE_GENERIC: int
        COMPRESS_SOURCE_SRGB: int
        COMPRESS_SOURCE_NORMAL: int
    class Image.ASTCFormat(Enum):
        ASTC_FORMAT_4x4: int
        ASTC_FORMAT_8x8: int

    # Methods
    def get_width(self) -> int: ...
    def get_height(self) -> int: ...
    def get_size(self) -> Vector2i: ...
    def has_mipmaps(self) -> bool: ...
    def get_format(self) -> Image.Format: ...
    def get_data(self) -> PackedByteArray: ...
    def convert(self, format: Image.Format) -> None: ...
    def get_mipmap_offset(self, mipmap: int) -> int: ...
    def resize_to_po2(self, square: bool = False, interpolation: Image.Interpolation = 1) -> None: ...
    def resize(self, width: int, height: int, interpolation: Image.Interpolation = 1) -> None: ...
    def shrink_x2(self) -> None: ...
    def crop(self, width: int, height: int) -> None: ...
    def flip_x(self) -> None: ...
    def flip_y(self) -> None: ...
    def generate_mipmaps(self, renormalize: bool = False) -> Error: ...
    def clear_mipmaps(self) -> None: ...
    def create(self, width: int, height: int, use_mipmaps: bool, format: Image.Format) -> Image: ...
    def create_from_data(self, width: int, height: int, use_mipmaps: bool, format: Image.Format, data: PackedByteArray) -> Image: ...
    def set_data(self, width: int, height: int, use_mipmaps: bool, format: Image.Format, data: PackedByteArray) -> None: ...
    def is_empty(self) -> bool: ...
    def load(self, path: GDString | str) -> Error: ...
    def load_from_file(self, path: GDString | str) -> Image: ...
    def save_png(self, path: GDString | str) -> Error: ...
    def save_png_to_buffer(self) -> PackedByteArray: ...
    def save_jpg(self, path: GDString | str, quality: float = 0.75) -> Error: ...
    def save_jpg_to_buffer(self, quality: float = 0.75) -> PackedByteArray: ...
    def save_exr(self, path: GDString | str, grayscale: bool = False) -> Error: ...
    def save_exr_to_buffer(self, grayscale: bool = False) -> PackedByteArray: ...
    def save_webp(self, path: GDString | str, lossy: bool = False, quality: float = 0.75) -> Error: ...
    def save_webp_to_buffer(self, lossy: bool = False, quality: float = 0.75) -> PackedByteArray: ...
    def detect_alpha(self) -> Image.AlphaMode: ...
    def is_invisible(self) -> bool: ...
    def detect_used_channels(self, source: Image.CompressSource = 0) -> Image.UsedChannels: ...
    def compress(self, mode: Image.CompressMode, source: Image.CompressSource = 0, astc_format: Image.ASTCFormat = 0) -> Error: ...
    def compress_from_channels(self, mode: Image.CompressMode, channels: Image.UsedChannels, astc_format: Image.ASTCFormat = 0) -> Error: ...
    def decompress(self) -> Error: ...
    def is_compressed(self) -> bool: ...
    def rotate_90(self, direction: ClockDirection) -> None: ...
    def rotate_180(self) -> None: ...
    def fix_alpha_edges(self) -> None: ...
    def premultiply_alpha(self) -> None: ...
    def srgb_to_linear(self) -> None: ...
    def normal_map_to_xy(self) -> None: ...
    def rgbe_to_srgb(self) -> Image: ...
    def bump_map_to_normal_map(self, bump_scale: float = 1.0) -> None: ...
    def compute_image_metrics(self, compared_image: Image, use_luma: bool) -> GDDictionary: ...
    def blit_rect(self, src: Image, src_rect: Rect2i, dst: Vector2i) -> None: ...
    def blit_rect_mask(self, src: Image, mask: Image, src_rect: Rect2i, dst: Vector2i) -> None: ...
    def blend_rect(self, src: Image, src_rect: Rect2i, dst: Vector2i) -> None: ...
    def blend_rect_mask(self, src: Image, mask: Image, src_rect: Rect2i, dst: Vector2i) -> None: ...
    def fill(self, color: Color) -> None: ...
    def fill_rect(self, rect: Rect2i, color: Color) -> None: ...
    def get_used_rect(self) -> Rect2i: ...
    def get_region(self, region: Rect2i) -> Image: ...
    def copy_from(self, src: Image) -> None: ...
    def get_pixelv(self, point: Vector2i) -> Color: ...
    def get_pixel(self, x: int, y: int) -> Color: ...
    def set_pixelv(self, point: Vector2i, color: Color) -> None: ...
    def set_pixel(self, x: int, y: int, color: Color) -> None: ...
    def adjust_bcs(self, brightness: float, contrast: float, saturation: float) -> None: ...
    def load_png_from_buffer(self, buffer: PackedByteArray) -> Error: ...
    def load_jpg_from_buffer(self, buffer: PackedByteArray) -> Error: ...
    def load_webp_from_buffer(self, buffer: PackedByteArray) -> Error: ...
    def load_tga_from_buffer(self, buffer: PackedByteArray) -> Error: ...
    def load_bmp_from_buffer(self, buffer: PackedByteArray) -> Error: ...

    # Properties
    data: GDDictionary

    # Constants
    MAX_WIDTH: int
    MAX_HEIGHT: int


class ImageFormatLoader(TypeInUse(RefCounted)):

    # Enums
    class ImageFormatLoader.LoaderFlags(Enum):
        FLAG_NONE: int
        FLAG_FORCE_LINEAR: int
        FLAG_CONVERT_COLORS: int


class ImageFormatLoaderExtension(TypeInUse(ImageFormatLoader)):
    def __init__(self): ...

    # Methods
    def add_format_loader(self) -> None: ...
    def remove_format_loader(self) -> None: ...


class ImageTexture(TypeInUse(Texture2D)):
    def __init__(self): ...

    # Methods
    def create_from_image(self, image: Image) -> ImageTexture: ...
    def get_format(self) -> Image.Format: ...
    def set_image(self, image: Image) -> None: ...
    def update(self, image: Image) -> None: ...
    def set_size_override(self, size: Vector2i) -> None: ...


class ImageTexture3D(TypeInUse(Texture3D)):
    def __init__(self): ...

    # Methods
    def create(self, format: Image.Format, width: int, height: int, depth: int, use_mipmaps: bool, data: GDArray) -> Error: ...
    def update(self, data: GDArray) -> None: ...


class ImageTextureLayered(TypeInUse(TextureLayered)):

    # Methods
    def create_from_images(self, images: GDArray) -> Error: ...
    def update_layer(self, image: Image, layer: int) -> None: ...


class ImporterMesh(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def add_blend_shape(self, name: GDString | str) -> None: ...
    def get_blend_shape_count(self) -> int: ...
    def get_blend_shape_name(self, blend_shape_idx: int) -> GDString: ...
    def set_blend_shape_mode(self, mode: Mesh.BlendShapeMode) -> None: ...
    def get_blend_shape_mode(self) -> Mesh.BlendShapeMode: ...
    def add_surface(self, primitive: Mesh.PrimitiveType, arrays: GDArray, blend_shapes: GDArray = Array[Array]([]), lods: GDDictionary | Mapping[IntoGDAny, IntoGDAny] = {}, material: Material = None, name: GDString | str = "", flags: int = 0) -> None: ...
    def get_surface_count(self) -> int: ...
    def get_surface_primitive_type(self, surface_idx: int) -> Mesh.PrimitiveType: ...
    def get_surface_name(self, surface_idx: int) -> GDString: ...
    def get_surface_arrays(self, surface_idx: int) -> GDArray: ...
    def get_surface_blend_shape_arrays(self, surface_idx: int, blend_shape_idx: int) -> GDArray: ...
    def get_surface_lod_count(self, surface_idx: int) -> int: ...
    def get_surface_lod_size(self, surface_idx: int, lod_idx: int) -> float: ...
    def get_surface_lod_indices(self, surface_idx: int, lod_idx: int) -> PackedInt32Array: ...
    def get_surface_material(self, surface_idx: int) -> Material: ...
    def get_surface_format(self, surface_idx: int) -> int: ...
    def set_surface_name(self, surface_idx: int, name: GDString | str) -> None: ...
    def set_surface_material(self, surface_idx: int, material: Material) -> None: ...
    def generate_lods(self, normal_merge_angle: float, normal_split_angle: float, bone_transform_array: GDArray) -> None: ...
    def get_mesh(self, base_mesh: ArrayMesh = None) -> ArrayMesh: ...
    def clear(self) -> None: ...
    def set_lightmap_size_hint(self, size: Vector2i) -> None: ...
    def get_lightmap_size_hint(self) -> Vector2i: ...


class Input(TypeInUse(Object)):

    # Enums
    class Input.MouseMode(Enum):
        MOUSE_MODE_VISIBLE: int
        MOUSE_MODE_HIDDEN: int
        MOUSE_MODE_CAPTURED: int
        MOUSE_MODE_CONFINED: int
        MOUSE_MODE_CONFINED_HIDDEN: int
    class Input.CursorShape(Enum):
        CURSOR_ARROW: int
        CURSOR_IBEAM: int
        CURSOR_POINTING_HAND: int
        CURSOR_CROSS: int
        CURSOR_WAIT: int
        CURSOR_BUSY: int
        CURSOR_DRAG: int
        CURSOR_CAN_DROP: int
        CURSOR_FORBIDDEN: int
        CURSOR_VSIZE: int
        CURSOR_HSIZE: int
        CURSOR_BDIAGSIZE: int
        CURSOR_FDIAGSIZE: int
        CURSOR_MOVE: int
        CURSOR_VSPLIT: int
        CURSOR_HSPLIT: int
        CURSOR_HELP: int

    # Methods
    def is_anything_pressed(self) -> bool: ...
    def is_key_pressed(self, keycode: Key) -> bool: ...
    def is_physical_key_pressed(self, keycode: Key) -> bool: ...
    def is_key_label_pressed(self, keycode: Key) -> bool: ...
    def is_mouse_button_pressed(self, button: MouseButton) -> bool: ...
    def is_joy_button_pressed(self, device: int, button: JoyButton) -> bool: ...
    def is_action_pressed(self, action: StringName | str, exact_match: bool = False) -> bool: ...
    def is_action_just_pressed(self, action: StringName | str, exact_match: bool = False) -> bool: ...
    def is_action_just_released(self, action: StringName | str, exact_match: bool = False) -> bool: ...
    def get_action_strength(self, action: StringName | str, exact_match: bool = False) -> float: ...
    def get_action_raw_strength(self, action: StringName | str, exact_match: bool = False) -> float: ...
    def get_axis(self, negative_action: StringName | str, positive_action: StringName | str) -> float: ...
    def get_vector(self, negative_x: StringName | str, positive_x: StringName | str, negative_y: StringName | str, positive_y: StringName | str, deadzone: float = -1.0) -> Vector2: ...
    def add_joy_mapping(self, mapping: GDString | str, update_existing: bool = False) -> None: ...
    def remove_joy_mapping(self, guid: GDString | str) -> None: ...
    def is_joy_known(self, device: int) -> bool: ...
    def get_joy_axis(self, device: int, axis: JoyAxis) -> float: ...
    def get_joy_name(self, device: int) -> GDString: ...
    def get_joy_guid(self, device: int) -> GDString: ...
    def get_connected_joypads(self) -> GDArray: ...
    def get_joy_vibration_strength(self, device: int) -> Vector2: ...
    def get_joy_vibration_duration(self, device: int) -> float: ...
    def start_joy_vibration(self, device: int, weak_magnitude: float, strong_magnitude: float, duration: float = 0) -> None: ...
    def stop_joy_vibration(self, device: int) -> None: ...
    def vibrate_handheld(self, duration_ms: int = 500) -> None: ...
    def get_gravity(self) -> Vector3: ...
    def get_accelerometer(self) -> Vector3: ...
    def get_magnetometer(self) -> Vector3: ...
    def get_gyroscope(self) -> Vector3: ...
    def set_gravity(self, value: Vector3) -> None: ...
    def set_accelerometer(self, value: Vector3) -> None: ...
    def set_magnetometer(self, value: Vector3) -> None: ...
    def set_gyroscope(self, value: Vector3) -> None: ...
    def get_last_mouse_velocity(self) -> Vector2: ...
    def get_mouse_button_mask(self) -> MouseButtonMask: ...
    def set_mouse_mode(self, mode: Input.MouseMode) -> None: ...
    def get_mouse_mode(self) -> Input.MouseMode: ...
    def warp_mouse(self, position: Vector2) -> None: ...
    def action_press(self, action: StringName | str, strength: float = 1.0) -> None: ...
    def action_release(self, action: StringName | str) -> None: ...
    def set_default_cursor_shape(self, shape: Input.CursorShape = 0) -> None: ...
    def get_current_cursor_shape(self) -> Input.CursorShape: ...
    def set_custom_mouse_cursor(self, image: Resource, shape: Input.CursorShape = 0, hotspot: Vector2 = Vector2(0, 0)) -> None: ...
    def parse_input_event(self, event: InputEvent) -> None: ...
    def set_use_accumulated_input(self, enable: bool) -> None: ...
    def is_using_accumulated_input(self) -> bool: ...
    def flush_buffered_events(self) -> None: ...

    # Signals
    def joy_connection_changed(self, device: int, connected: bool) -> None: ...

    # Properties
    mouse_mode: int
    use_accumulated_input: bool


class InputEvent(TypeInUse(Resource)):

    # Methods
    def set_device(self, device: int) -> None: ...
    def get_device(self) -> int: ...
    def is_action(self, action: StringName | str, exact_match: bool = False) -> bool: ...
    def is_action_pressed(self, action: StringName | str, allow_echo: bool = False, exact_match: bool = False) -> bool: ...
    def is_action_released(self, action: StringName | str, exact_match: bool = False) -> bool: ...
    def get_action_strength(self, action: StringName | str, exact_match: bool = False) -> float: ...
    def is_canceled(self) -> bool: ...
    def is_pressed(self) -> bool: ...
    def is_released(self) -> bool: ...
    def is_echo(self) -> bool: ...
    def as_text(self) -> GDString: ...
    def is_match(self, event: InputEvent, exact_match: bool = True) -> bool: ...
    def is_action_type(self) -> bool: ...
    def accumulate(self, with_event: InputEvent) -> bool: ...
    def xformed_by(self, xform: Transform2D, local_ofs: Vector2 = Vector2(0, 0)) -> InputEvent: ...

    # Properties
    device: int


class InputEventAction(TypeInUse(InputEvent)):
    def __init__(self): ...

    # Methods
    def set_action(self, action: StringName | str) -> None: ...
    def get_action(self) -> StringName: ...
    def set_pressed(self, pressed: bool) -> None: ...
    def set_strength(self, strength: float) -> None: ...
    def get_strength(self) -> float: ...

    # Properties
    action: StringName
    pressed: bool
    strength: float


class InputEventFromWindow(TypeInUse(InputEvent)):

    # Methods
    def set_window_id(self, id: int) -> None: ...
    def get_window_id(self) -> int: ...

    # Properties
    window_id: int


class InputEventJoypadButton(TypeInUse(InputEvent)):
    def __init__(self): ...

    # Methods
    def set_button_index(self, button_index: JoyButton) -> None: ...
    def get_button_index(self) -> JoyButton: ...
    def set_pressure(self, pressure: float) -> None: ...
    def get_pressure(self) -> float: ...
    def set_pressed(self, pressed: bool) -> None: ...

    # Properties
    button_index: int
    pressure: float
    pressed: bool


class InputEventJoypadMotion(TypeInUse(InputEvent)):
    def __init__(self): ...

    # Methods
    def set_axis(self, axis: JoyAxis) -> None: ...
    def get_axis(self) -> JoyAxis: ...
    def set_axis_value(self, axis_value: float) -> None: ...
    def get_axis_value(self) -> float: ...

    # Properties
    axis: int
    axis_value: float


class InputEventMIDI(TypeInUse(InputEvent)):
    def __init__(self): ...

    # Methods
    def set_channel(self, channel: int) -> None: ...
    def get_channel(self) -> int: ...
    def set_message(self, message: MIDIMessage) -> None: ...
    def get_message(self) -> MIDIMessage: ...
    def set_pitch(self, pitch: int) -> None: ...
    def get_pitch(self) -> int: ...
    def set_velocity(self, velocity: int) -> None: ...
    def get_velocity(self) -> int: ...
    def set_instrument(self, instrument: int) -> None: ...
    def get_instrument(self) -> int: ...
    def set_pressure(self, pressure: int) -> None: ...
    def get_pressure(self) -> int: ...
    def set_controller_number(self, controller_number: int) -> None: ...
    def get_controller_number(self) -> int: ...
    def set_controller_value(self, controller_value: int) -> None: ...
    def get_controller_value(self) -> int: ...

    # Properties
    channel: int
    message: int
    pitch: int
    velocity: int
    instrument: int
    pressure: int
    controller_number: int
    controller_value: int


class InputEventScreenDrag(TypeInUse(InputEventFromWindow)):
    def __init__(self): ...

    # Methods
    def set_index(self, index: int) -> None: ...
    def get_index(self) -> int: ...
    def set_tilt(self, tilt: Vector2) -> None: ...
    def get_tilt(self) -> Vector2: ...
    def set_pressure(self, pressure: float) -> None: ...
    def get_pressure(self) -> float: ...
    def set_pen_inverted(self, pen_inverted: bool) -> None: ...
    def get_pen_inverted(self) -> bool: ...
    def set_position(self, position: Vector2) -> None: ...
    def get_position(self) -> Vector2: ...
    def set_relative(self, relative: Vector2) -> None: ...
    def get_relative(self) -> Vector2: ...
    def set_velocity(self, velocity: Vector2) -> None: ...
    def get_velocity(self) -> Vector2: ...

    # Properties
    index: int
    tilt: Vector2
    pressure: float
    pen_inverted: bool
    position: Vector2
    relative: Vector2
    velocity: Vector2


class InputEventScreenTouch(TypeInUse(InputEventFromWindow)):
    def __init__(self): ...

    # Methods
    def set_index(self, index: int) -> None: ...
    def get_index(self) -> int: ...
    def set_position(self, position: Vector2) -> None: ...
    def get_position(self) -> Vector2: ...
    def set_pressed(self, pressed: bool) -> None: ...
    def set_canceled(self, canceled: bool) -> None: ...
    def set_double_tap(self, double_tap: bool) -> None: ...
    def is_double_tap(self) -> bool: ...

    # Properties
    index: int
    position: Vector2
    canceled: bool
    pressed: bool
    double_tap: bool


class InputEventShortcut(TypeInUse(InputEvent)):
    def __init__(self): ...

    # Methods
    def set_shortcut(self, shortcut: Shortcut) -> None: ...
    def get_shortcut(self) -> Shortcut: ...

    # Properties
    shortcut: Shortcut


class InputEventWithModifiers(TypeInUse(InputEventFromWindow)):

    # Methods
    def set_command_or_control_autoremap(self, enable: bool) -> None: ...
    def is_command_or_control_autoremap(self) -> bool: ...
    def is_command_or_control_pressed(self) -> bool: ...
    def set_alt_pressed(self, pressed: bool) -> None: ...
    def is_alt_pressed(self) -> bool: ...
    def set_shift_pressed(self, pressed: bool) -> None: ...
    def is_shift_pressed(self) -> bool: ...
    def set_ctrl_pressed(self, pressed: bool) -> None: ...
    def is_ctrl_pressed(self) -> bool: ...
    def set_meta_pressed(self, pressed: bool) -> None: ...
    def is_meta_pressed(self) -> bool: ...
    def get_modifiers_mask(self) -> KeyModifierMask: ...

    # Properties
    command_or_control_autoremap: bool
    alt_pressed: bool
    shift_pressed: bool
    ctrl_pressed: bool
    meta_pressed: bool


class InputMap(TypeInUse(Object)):
    @classmethod
    def new(cls) -> InputMap: ...

    # Methods
    def has_action(self, action: StringName | str) -> bool: ...
    def get_actions(self) -> GDArray: ...
    def add_action(self, action: StringName | str, deadzone: float = 0.5) -> None: ...
    def erase_action(self, action: StringName | str) -> None: ...
    def action_set_deadzone(self, action: StringName | str, deadzone: float) -> None: ...
    def action_get_deadzone(self, action: StringName | str) -> float: ...
    def action_add_event(self, action: StringName | str, event: InputEvent) -> None: ...
    def action_has_event(self, action: StringName | str, event: InputEvent) -> bool: ...
    def action_erase_event(self, action: StringName | str, event: InputEvent) -> None: ...
    def action_erase_events(self, action: StringName | str) -> None: ...
    def action_get_events(self, action: StringName | str) -> GDArray: ...
    def event_is_action(self, event: InputEvent, action: StringName | str, exact_match: bool = False) -> bool: ...
    def load_from_project_settings(self) -> None: ...


class IntervalTweener(TypeInUse(Tweener)):
    def __init__(self): ...


class JNISingleton(TypeInUse(Object)):
    @classmethod
    def new(cls) -> JNISingleton: ...


class JSON(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def stringify(self, data: GDAny, indent: GDString | str = "", sort_keys: bool = True, full_precision: bool = False) -> GDString: ...
    def parse_string(self, json_string: GDString | str) -> GDAny: ...
    def parse(self, json_text: GDString | str, keep_text: bool = False) -> Error: ...
    def get_data(self) -> GDAny: ...
    def set_data(self, data: GDAny) -> None: ...
    def get_parsed_text(self) -> GDString: ...
    def get_error_line(self) -> int: ...
    def get_error_message(self) -> GDString: ...

    # Properties
    data: GDAny


class JSONRPC(TypeInUse(Object)):
    @classmethod
    def new(cls) -> JSONRPC: ...

    # Enums
    class JSONRPC.ErrorCode(Enum):
        PARSE_ERROR: int
        INVALID_REQUEST: int
        METHOD_NOT_FOUND: int
        INVALID_PARAMS: int
        INTERNAL_ERROR: int

    # Methods
    def set_scope(self, scope: GDString | str, target: GDObject) -> None: ...
    def process_action(self, action: GDAny, recurse: bool = False) -> GDAny: ...
    def process_string(self, action: GDString | str) -> GDString: ...
    def make_request(self, method: GDString | str, params: GDAny, id: GDAny) -> GDDictionary: ...
    def make_response(self, result: GDAny, id: GDAny) -> GDDictionary: ...
    def make_notification(self, method: GDString | str, params: GDAny) -> GDDictionary: ...
    def make_response_error(self, code: int, message: GDString | str, id: GDAny = None) -> GDDictionary: ...


class JavaClass(TypeInUse(RefCounted)):
    def __init__(self): ...


class JavaClassWrapper(TypeInUse(Object)):
    @classmethod
    def new(cls) -> JavaClassWrapper: ...

    # Methods
    def wrap(self, name: GDString | str) -> JavaClass: ...


class JavaScriptBridge(TypeInUse(Object)):

    # Methods
    def eval(self, code: GDString | str, use_global_execution_context: bool = False) -> GDAny: ...
    def get_interface(self, interface: GDString | str) -> JavaScriptObject: ...
    def create_callback(self, callable: GDCallable) -> JavaScriptObject: ...
    def create_object(self, object: GDString | str) -> GDAny: ...
    def download_buffer(self, buffer: PackedByteArray, name: GDString | str, mime: GDString | str = "application/octet-stream") -> None: ...
    def pwa_needs_update(self) -> bool: ...
    def pwa_update(self) -> Error: ...
    def force_fs_sync(self) -> None: ...

    # Signals
    def pwa_update_available(self) -> None: ...


class JavaScriptObject(TypeInUse(RefCounted)):
    pass


class KinematicCollision2D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def get_position(self) -> Vector2: ...
    def get_normal(self) -> Vector2: ...
    def get_travel(self) -> Vector2: ...
    def get_remainder(self) -> Vector2: ...
    def get_angle(self, up_direction: Vector2 = Vector2(0, -1)) -> float: ...
    def get_depth(self) -> float: ...
    def get_local_shape(self) -> GDObject: ...
    def get_collider(self) -> GDObject: ...
    def get_collider_id(self) -> int: ...
    def get_collider_rid(self) -> RID: ...
    def get_collider_shape(self) -> GDObject: ...
    def get_collider_shape_index(self) -> int: ...
    def get_collider_velocity(self) -> Vector2: ...


class KinematicCollision3D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def get_travel(self) -> Vector3: ...
    def get_remainder(self) -> Vector3: ...
    def get_depth(self) -> float: ...
    def get_collision_count(self) -> int: ...
    def get_position(self, collision_index: int = 0) -> Vector3: ...
    def get_normal(self, collision_index: int = 0) -> Vector3: ...
    def get_angle(self, collision_index: int = 0, up_direction: Vector3 = Vector3(0, 1, 0)) -> float: ...
    def get_local_shape(self, collision_index: int = 0) -> GDObject: ...
    def get_collider(self, collision_index: int = 0) -> GDObject: ...
    def get_collider_id(self, collision_index: int = 0) -> int: ...
    def get_collider_rid(self, collision_index: int = 0) -> RID: ...
    def get_collider_shape(self, collision_index: int = 0) -> GDObject: ...
    def get_collider_shape_index(self, collision_index: int = 0) -> int: ...
    def get_collider_velocity(self, collision_index: int = 0) -> Vector3: ...


class LabelSettings(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_line_spacing(self, spacing: float) -> None: ...
    def get_line_spacing(self) -> float: ...
    def set_font(self, font: Font) -> None: ...
    def get_font(self) -> Font: ...
    def set_font_size(self, size: int) -> None: ...
    def get_font_size(self) -> int: ...
    def set_font_color(self, color: Color) -> None: ...
    def get_font_color(self) -> Color: ...
    def set_outline_size(self, size: int) -> None: ...
    def get_outline_size(self) -> int: ...
    def set_outline_color(self, color: Color) -> None: ...
    def get_outline_color(self) -> Color: ...
    def set_shadow_size(self, size: int) -> None: ...
    def get_shadow_size(self) -> int: ...
    def set_shadow_color(self, color: Color) -> None: ...
    def get_shadow_color(self) -> Color: ...
    def set_shadow_offset(self, offset: Vector2) -> None: ...
    def get_shadow_offset(self) -> Vector2: ...

    # Properties
    line_spacing: float
    font: Font
    font_size: int
    font_color: Color
    outline_size: int
    outline_color: Color
    shadow_size: int
    shadow_color: Color
    shadow_offset: Vector2


class LightmapGIData(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_light_texture(self, light_texture: TextureLayered) -> None: ...
    def get_light_texture(self) -> TextureLayered: ...
    def set_uses_spherical_harmonics(self, uses_spherical_harmonics: bool) -> None: ...
    def is_using_spherical_harmonics(self) -> bool: ...
    def add_user(self, path: NodePath | str, uv_scale: Rect2, slice_index: int, sub_instance: int) -> None: ...
    def get_user_count(self) -> int: ...
    def get_user_path(self, user_idx: int) -> NodePath: ...
    def clear_users(self) -> None: ...

    # Properties
    light_texture: TextureLayered
    light_textures: GDArray
    uses_spherical_harmonics: bool
    user_data: GDArray
    probe_data: GDDictionary


class Lightmapper(TypeInUse(RefCounted)):
    pass


class LightmapperRD(TypeInUse(Lightmapper)):
    def __init__(self): ...


class MainLoop(TypeInUse(Object)):
    @classmethod
    def new(cls) -> MainLoop: ...

    # Signals
    def on_request_permissions_result(self, permission: GDString | str, granted: bool) -> None: ...

    # Constants
    NOTIFICATION_OS_MEMORY_WARNING: int
    NOTIFICATION_TRANSLATION_CHANGED: int
    NOTIFICATION_WM_ABOUT: int
    NOTIFICATION_CRASH: int
    NOTIFICATION_OS_IME_UPDATE: int
    NOTIFICATION_APPLICATION_RESUMED: int
    NOTIFICATION_APPLICATION_PAUSED: int
    NOTIFICATION_APPLICATION_FOCUS_IN: int
    NOTIFICATION_APPLICATION_FOCUS_OUT: int
    NOTIFICATION_TEXT_SERVER_CHANGED: int


class Marshalls(TypeInUse(Object)):
    @classmethod
    def new(cls) -> Marshalls: ...

    # Methods
    def variant_to_base64(self, variant: GDAny, full_objects: bool = False) -> GDString: ...
    def base64_to_variant(self, base64_str: GDString | str, allow_objects: bool = False) -> GDAny: ...
    def raw_to_base64(self, array: PackedByteArray) -> GDString: ...
    def base64_to_raw(self, base64_str: GDString | str) -> PackedByteArray: ...
    def utf8_to_base64(self, utf8_str: GDString | str) -> GDString: ...
    def base64_to_utf8(self, base64_str: GDString | str) -> GDString: ...


class Material(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_next_pass(self, next_pass: Material) -> None: ...
    def get_next_pass(self) -> Material: ...
    def set_render_priority(self, priority: int) -> None: ...
    def get_render_priority(self) -> int: ...
    def inspect_native_shader_code(self) -> None: ...
    def create_placeholder(self) -> Resource: ...

    # Properties
    render_priority: int
    next_pass: Material

    # Constants
    RENDER_PRIORITY_MAX: int
    RENDER_PRIORITY_MIN: int


class Mesh(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class Mesh.PrimitiveType(Enum):
        PRIMITIVE_POINTS: int
        PRIMITIVE_LINES: int
        PRIMITIVE_LINE_STRIP: int
        PRIMITIVE_TRIANGLES: int
        PRIMITIVE_TRIANGLE_STRIP: int
    class Mesh.ArrayType(Enum):
        ARRAY_VERTEX: int
        ARRAY_NORMAL: int
        ARRAY_TANGENT: int
        ARRAY_COLOR: int
        ARRAY_TEX_UV: int
        ARRAY_TEX_UV2: int
        ARRAY_CUSTOM0: int
        ARRAY_CUSTOM1: int
        ARRAY_CUSTOM2: int
        ARRAY_CUSTOM3: int
        ARRAY_BONES: int
        ARRAY_WEIGHTS: int
        ARRAY_INDEX: int
        ARRAY_MAX: int
    class Mesh.ArrayCustomFormat(Enum):
        ARRAY_CUSTOM_RGBA8_UNORM: int
        ARRAY_CUSTOM_RGBA8_SNORM: int
        ARRAY_CUSTOM_RG_HALF: int
        ARRAY_CUSTOM_RGBA_HALF: int
        ARRAY_CUSTOM_R_FLOAT: int
        ARRAY_CUSTOM_RG_FLOAT: int
        ARRAY_CUSTOM_RGB_FLOAT: int
        ARRAY_CUSTOM_RGBA_FLOAT: int
        ARRAY_CUSTOM_MAX: int
    class Mesh.ArrayFormat(Enum):
        ARRAY_FORMAT_VERTEX: int
        ARRAY_FORMAT_NORMAL: int
        ARRAY_FORMAT_TANGENT: int
        ARRAY_FORMAT_COLOR: int
        ARRAY_FORMAT_TEX_UV: int
        ARRAY_FORMAT_TEX_UV2: int
        ARRAY_FORMAT_CUSTOM0: int
        ARRAY_FORMAT_CUSTOM1: int
        ARRAY_FORMAT_CUSTOM2: int
        ARRAY_FORMAT_CUSTOM3: int
        ARRAY_FORMAT_BONES: int
        ARRAY_FORMAT_WEIGHTS: int
        ARRAY_FORMAT_INDEX: int
        ARRAY_FORMAT_BLEND_SHAPE_MASK: int
        ARRAY_FORMAT_CUSTOM_BASE: int
        ARRAY_FORMAT_CUSTOM_BITS: int
        ARRAY_FORMAT_CUSTOM0_SHIFT: int
        ARRAY_FORMAT_CUSTOM1_SHIFT: int
        ARRAY_FORMAT_CUSTOM2_SHIFT: int
        ARRAY_FORMAT_CUSTOM3_SHIFT: int
        ARRAY_FORMAT_CUSTOM_MASK: int
        ARRAY_COMPRESS_FLAGS_BASE: int
        ARRAY_FLAG_USE_2D_VERTICES: int
        ARRAY_FLAG_USE_DYNAMIC_UPDATE: int
        ARRAY_FLAG_USE_8_BONE_WEIGHTS: int
        ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY: int
    class Mesh.BlendShapeMode(Enum):
        BLEND_SHAPE_MODE_NORMALIZED: int
        BLEND_SHAPE_MODE_RELATIVE: int

    # Methods
    def set_lightmap_size_hint(self, size: Vector2i) -> None: ...
    def get_lightmap_size_hint(self) -> Vector2i: ...
    def get_aabb(self) -> AABB: ...
    def get_faces(self) -> PackedVector3Array: ...
    def get_surface_count(self) -> int: ...
    def surface_get_arrays(self, surf_idx: int) -> GDArray: ...
    def surface_get_blend_shape_arrays(self, surf_idx: int) -> GDArray: ...
    def surface_set_material(self, surf_idx: int, material: Material) -> None: ...
    def surface_get_material(self, surf_idx: int) -> Material: ...
    def create_placeholder(self) -> Resource: ...
    def create_trimesh_shape(self) -> ConcavePolygonShape3D: ...
    def create_convex_shape(self, clean: bool = True, simplify: bool = False) -> ConvexPolygonShape3D: ...
    def create_outline(self, margin: float) -> Mesh: ...
    def generate_triangle_mesh(self) -> TriangleMesh: ...

    # Properties
    lightmap_size_hint: Vector2i


class MeshConvexDecompositionSettings(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class MeshConvexDecompositionSettings.Mode(Enum):
        CONVEX_DECOMPOSITION_MODE_VOXEL: int
        CONVEX_DECOMPOSITION_MODE_TETRAHEDRON: int

    # Methods
    def set_max_concavity(self, max_concavity: float) -> None: ...
    def get_max_concavity(self) -> float: ...
    def set_symmetry_planes_clipping_bias(self, symmetry_planes_clipping_bias: float) -> None: ...
    def get_symmetry_planes_clipping_bias(self) -> float: ...
    def set_revolution_axes_clipping_bias(self, revolution_axes_clipping_bias: float) -> None: ...
    def get_revolution_axes_clipping_bias(self) -> float: ...
    def set_min_volume_per_convex_hull(self, min_volume_per_convex_hull: float) -> None: ...
    def get_min_volume_per_convex_hull(self) -> float: ...
    def set_resolution(self, min_volume_per_convex_hull: int) -> None: ...
    def get_resolution(self) -> int: ...
    def set_max_num_vertices_per_convex_hull(self, max_num_vertices_per_convex_hull: int) -> None: ...
    def get_max_num_vertices_per_convex_hull(self) -> int: ...
    def set_plane_downsampling(self, plane_downsampling: int) -> None: ...
    def get_plane_downsampling(self) -> int: ...
    def set_convex_hull_downsampling(self, convex_hull_downsampling: int) -> None: ...
    def get_convex_hull_downsampling(self) -> int: ...
    def set_normalize_mesh(self, normalize_mesh: bool) -> None: ...
    def get_normalize_mesh(self) -> bool: ...
    def set_mode(self, mode: MeshConvexDecompositionSettings.Mode) -> None: ...
    def get_mode(self) -> MeshConvexDecompositionSettings.Mode: ...
    def set_convex_hull_approximation(self, convex_hull_approximation: bool) -> None: ...
    def get_convex_hull_approximation(self) -> bool: ...
    def set_max_convex_hulls(self, max_convex_hulls: int) -> None: ...
    def get_max_convex_hulls(self) -> int: ...
    def set_project_hull_vertices(self, project_hull_vertices: bool) -> None: ...
    def get_project_hull_vertices(self) -> bool: ...

    # Properties
    max_concavity: float
    symmetry_planes_clipping_bias: float
    revolution_axes_clipping_bias: float
    min_volume_per_convex_hull: float
    resolution: int
    max_num_vertices_per_convex_hull: int
    plane_downsampling: int
    convex_hull_downsampling: int
    normalize_mesh: bool
    mode: int
    convex_hull_approximation: bool
    max_convex_hulls: int
    project_hull_vertices: bool


class MeshDataTool(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def clear(self) -> None: ...
    def create_from_surface(self, mesh: ArrayMesh, surface: int) -> Error: ...
    def commit_to_surface(self, mesh: ArrayMesh) -> Error: ...
    def get_format(self) -> int: ...
    def get_vertex_count(self) -> int: ...
    def get_edge_count(self) -> int: ...
    def get_face_count(self) -> int: ...
    def set_vertex(self, idx: int, vertex: Vector3) -> None: ...
    def get_vertex(self, idx: int) -> Vector3: ...
    def set_vertex_normal(self, idx: int, normal: Vector3) -> None: ...
    def get_vertex_normal(self, idx: int) -> Vector3: ...
    def set_vertex_tangent(self, idx: int, tangent: Plane) -> None: ...
    def get_vertex_tangent(self, idx: int) -> Plane: ...
    def set_vertex_uv(self, idx: int, uv: Vector2) -> None: ...
    def get_vertex_uv(self, idx: int) -> Vector2: ...
    def set_vertex_uv2(self, idx: int, uv2: Vector2) -> None: ...
    def get_vertex_uv2(self, idx: int) -> Vector2: ...
    def set_vertex_color(self, idx: int, color: Color) -> None: ...
    def get_vertex_color(self, idx: int) -> Color: ...
    def set_vertex_bones(self, idx: int, bones: PackedInt32Array) -> None: ...
    def get_vertex_bones(self, idx: int) -> PackedInt32Array: ...
    def set_vertex_weights(self, idx: int, weights: PackedFloat32Array) -> None: ...
    def get_vertex_weights(self, idx: int) -> PackedFloat32Array: ...
    def set_vertex_meta(self, idx: int, meta: GDAny) -> None: ...
    def get_vertex_meta(self, idx: int) -> GDAny: ...
    def get_vertex_edges(self, idx: int) -> PackedInt32Array: ...
    def get_vertex_faces(self, idx: int) -> PackedInt32Array: ...
    def get_edge_vertex(self, idx: int, vertex: int) -> int: ...
    def get_edge_faces(self, idx: int) -> PackedInt32Array: ...
    def set_edge_meta(self, idx: int, meta: GDAny) -> None: ...
    def get_edge_meta(self, idx: int) -> GDAny: ...
    def get_face_vertex(self, idx: int, vertex: int) -> int: ...
    def get_face_edge(self, idx: int, edge: int) -> int: ...
    def set_face_meta(self, idx: int, meta: GDAny) -> None: ...
    def get_face_meta(self, idx: int) -> GDAny: ...
    def get_face_normal(self, idx: int) -> Vector3: ...
    def set_material(self, material: Material) -> None: ...
    def get_material(self) -> Material: ...


class MeshLibrary(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def create_item(self, id: int) -> None: ...
    def set_item_name(self, id: int, name: GDString | str) -> None: ...
    def set_item_mesh(self, id: int, mesh: Mesh) -> None: ...
    def set_item_mesh_transform(self, id: int, mesh_transform: Transform3D) -> None: ...
    def set_item_navigation_mesh(self, id: int, navigation_mesh: NavigationMesh) -> None: ...
    def set_item_navigation_mesh_transform(self, id: int, navigation_mesh: Transform3D) -> None: ...
    def set_item_navigation_layers(self, id: int, navigation_layers: int) -> None: ...
    def set_item_shapes(self, id: int, shapes: GDArray) -> None: ...
    def set_item_preview(self, id: int, texture: Texture2D) -> None: ...
    def get_item_name(self, id: int) -> GDString: ...
    def get_item_mesh(self, id: int) -> Mesh: ...
    def get_item_mesh_transform(self, id: int) -> Transform3D: ...
    def get_item_navigation_mesh(self, id: int) -> NavigationMesh: ...
    def get_item_navigation_mesh_transform(self, id: int) -> Transform3D: ...
    def get_item_navigation_layers(self, id: int) -> int: ...
    def get_item_shapes(self, id: int) -> GDArray: ...
    def get_item_preview(self, id: int) -> Texture2D: ...
    def remove_item(self, id: int) -> None: ...
    def find_item_by_name(self, name: GDString | str) -> int: ...
    def clear(self) -> None: ...
    def get_item_list(self) -> PackedInt32Array: ...
    def get_last_unused_item_id(self) -> int: ...


class MeshTexture(TypeInUse(Texture2D)):
    def __init__(self): ...

    # Methods
    def set_mesh(self, mesh: Mesh) -> None: ...
    def get_mesh(self) -> Mesh: ...
    def set_image_size(self, size: Vector2) -> None: ...
    def get_image_size(self) -> Vector2: ...
    def set_base_texture(self, texture: Texture2D) -> None: ...
    def get_base_texture(self) -> Texture2D: ...

    # Properties
    mesh: Mesh
    base_texture: Texture2D
    image_size: Vector2


class MethodTweener(TypeInUse(Tweener)):
    def __init__(self): ...

    # Methods
    def set_delay(self, delay: float) -> MethodTweener: ...
    def set_trans(self, trans: Tween.TransitionType) -> MethodTweener: ...
    def set_ease(self, ease: Tween.EaseType) -> MethodTweener: ...


class MissingResource(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_original_class(self, name: GDString | str) -> None: ...
    def get_original_class(self) -> GDString: ...
    def set_recording_properties(self, enable: bool) -> None: ...
    def is_recording_properties(self) -> bool: ...

    # Properties
    original_class: GDString
    recording_properties: bool


class MobileVRInterface(TypeInUse(XRInterface)):
    def __init__(self): ...

    # Methods
    def set_eye_height(self, eye_height: float) -> None: ...
    def get_eye_height(self) -> float: ...
    def set_iod(self, iod: float) -> None: ...
    def get_iod(self) -> float: ...
    def set_display_width(self, display_width: float) -> None: ...
    def get_display_width(self) -> float: ...
    def set_display_to_lens(self, display_to_lens: float) -> None: ...
    def get_display_to_lens(self) -> float: ...
    def set_oversample(self, oversample: float) -> None: ...
    def get_oversample(self) -> float: ...
    def set_k1(self, k: float) -> None: ...
    def get_k1(self) -> float: ...
    def set_k2(self, k: float) -> None: ...
    def get_k2(self) -> float: ...

    # Properties
    eye_height: float
    iod: float
    display_width: float
    display_to_lens: float
    oversample: float
    k1: float
    k2: float


class MovieWriter(TypeInUse(Object)):
    @classmethod
    def new(cls) -> MovieWriter: ...

    # Methods
    def add_writer(self, writer: MovieWriter) -> None: ...


class MovieWriterMJPEG(TypeInUse(MovieWriter)):
    pass


class MovieWriterPNGWAV(TypeInUse(MovieWriter)):
    pass


class MultiMesh(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class MultiMesh.TransformFormat(Enum):
        TRANSFORM_2D: int
        TRANSFORM_3D: int

    # Methods
    def set_mesh(self, mesh: Mesh) -> None: ...
    def get_mesh(self) -> Mesh: ...
    def set_use_colors(self, enable: bool) -> None: ...
    def is_using_colors(self) -> bool: ...
    def set_use_custom_data(self, enable: bool) -> None: ...
    def is_using_custom_data(self) -> bool: ...
    def set_transform_format(self, format: MultiMesh.TransformFormat) -> None: ...
    def get_transform_format(self) -> MultiMesh.TransformFormat: ...
    def set_instance_count(self, count: int) -> None: ...
    def get_instance_count(self) -> int: ...
    def set_visible_instance_count(self, count: int) -> None: ...
    def get_visible_instance_count(self) -> int: ...
    def set_instance_transform(self, instance: int, transform: Transform3D) -> None: ...
    def set_instance_transform_2d(self, instance: int, transform: Transform2D) -> None: ...
    def get_instance_transform(self, instance: int) -> Transform3D: ...
    def get_instance_transform_2d(self, instance: int) -> Transform2D: ...
    def set_instance_color(self, instance: int, color: Color) -> None: ...
    def get_instance_color(self, instance: int) -> Color: ...
    def set_instance_custom_data(self, instance: int, custom_data: Color) -> None: ...
    def get_instance_custom_data(self, instance: int) -> Color: ...
    def get_aabb(self) -> AABB: ...
    def get_buffer(self) -> PackedFloat32Array: ...
    def set_buffer(self, buffer: PackedFloat32Array) -> None: ...

    # Properties
    transform_format: int
    use_colors: bool
    use_custom_data: bool
    instance_count: int
    visible_instance_count: int
    mesh: Mesh
    buffer: PackedFloat32Array
    transform_array: PackedVector3Array
    transform_2d_array: PackedVector2Array
    color_array: PackedColorArray
    custom_data_array: PackedColorArray


class MultiplayerAPI(TypeInUse(RefCounted)):

    # Enums
    class MultiplayerAPI.RPCMode(Enum):
        RPC_MODE_DISABLED: int
        RPC_MODE_ANY_PEER: int
        RPC_MODE_AUTHORITY: int

    # Methods
    def has_multiplayer_peer(self) -> bool: ...
    def get_multiplayer_peer(self) -> MultiplayerPeer: ...
    def set_multiplayer_peer(self, peer: MultiplayerPeer) -> None: ...
    def get_unique_id(self) -> int: ...
    def is_server(self) -> bool: ...
    def get_remote_sender_id(self) -> int: ...
    def poll(self) -> Error: ...
    def rpc(self, peer: int, object: GDObject, method: StringName | str, arguments: GDArray = []) -> Error: ...
    def object_configuration_add(self, object: GDObject, configuration: GDAny) -> Error: ...
    def object_configuration_remove(self, object: GDObject, configuration: GDAny) -> Error: ...
    def get_peers(self) -> PackedInt32Array: ...
    def set_default_interface(self, interface_name: StringName | str) -> None: ...
    def get_default_interface(self) -> StringName: ...
    def create_default_interface(self) -> MultiplayerAPI: ...

    # Signals
    def peer_connected(self, id: int) -> None: ...
    def peer_disconnected(self, id: int) -> None: ...
    def connected_to_server(self) -> None: ...
    def connection_failed(self) -> None: ...
    def server_disconnected(self) -> None: ...

    # Properties
    multiplayer_peer: MultiplayerPeer


class MultiplayerAPIExtension(TypeInUse(MultiplayerAPI)):
    def __init__(self): ...


class Mutex(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def lock(self) -> None: ...
    def try_lock(self) -> bool: ...
    def unlock(self) -> None: ...


class NavigationMesh(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class NavigationMesh.SamplePartitionType(Enum):
        SAMPLE_PARTITION_WATERSHED: int
        SAMPLE_PARTITION_MONOTONE: int
        SAMPLE_PARTITION_LAYERS: int
        SAMPLE_PARTITION_MAX: int
    class NavigationMesh.ParsedGeometryType(Enum):
        PARSED_GEOMETRY_MESH_INSTANCES: int
        PARSED_GEOMETRY_STATIC_COLLIDERS: int
        PARSED_GEOMETRY_BOTH: int
        PARSED_GEOMETRY_MAX: int
    class NavigationMesh.SourceGeometryMode(Enum):
        SOURCE_GEOMETRY_ROOT_NODE_CHILDREN: int
        SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN: int
        SOURCE_GEOMETRY_GROUPS_EXPLICIT: int
        SOURCE_GEOMETRY_MAX: int

    # Methods
    def set_sample_partition_type(self, sample_partition_type: NavigationMesh.SamplePartitionType) -> None: ...
    def get_sample_partition_type(self) -> NavigationMesh.SamplePartitionType: ...
    def set_parsed_geometry_type(self, geometry_type: NavigationMesh.ParsedGeometryType) -> None: ...
    def get_parsed_geometry_type(self) -> NavigationMesh.ParsedGeometryType: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_source_geometry_mode(self, mask: NavigationMesh.SourceGeometryMode) -> None: ...
    def get_source_geometry_mode(self) -> NavigationMesh.SourceGeometryMode: ...
    def set_source_group_name(self, mask: StringName | str) -> None: ...
    def get_source_group_name(self) -> StringName: ...
    def set_cell_size(self, cell_size: float) -> None: ...
    def get_cell_size(self) -> float: ...
    def set_cell_height(self, cell_height: float) -> None: ...
    def get_cell_height(self) -> float: ...
    def set_agent_height(self, agent_height: float) -> None: ...
    def get_agent_height(self) -> float: ...
    def set_agent_radius(self, agent_radius: float) -> None: ...
    def get_agent_radius(self) -> float: ...
    def set_agent_max_climb(self, agent_max_climb: float) -> None: ...
    def get_agent_max_climb(self) -> float: ...
    def set_agent_max_slope(self, agent_max_slope: float) -> None: ...
    def get_agent_max_slope(self) -> float: ...
    def set_region_min_size(self, region_min_size: float) -> None: ...
    def get_region_min_size(self) -> float: ...
    def set_region_merge_size(self, region_merge_size: float) -> None: ...
    def get_region_merge_size(self) -> float: ...
    def set_edge_max_length(self, edge_max_length: float) -> None: ...
    def get_edge_max_length(self) -> float: ...
    def set_edge_max_error(self, edge_max_error: float) -> None: ...
    def get_edge_max_error(self) -> float: ...
    def set_vertices_per_polygon(self, vertices_per_polygon: float) -> None: ...
    def get_vertices_per_polygon(self) -> float: ...
    def set_detail_sample_distance(self, detail_sample_dist: float) -> None: ...
    def get_detail_sample_distance(self) -> float: ...
    def set_detail_sample_max_error(self, detail_sample_max_error: float) -> None: ...
    def get_detail_sample_max_error(self) -> float: ...
    def set_filter_low_hanging_obstacles(self, filter_low_hanging_obstacles: bool) -> None: ...
    def get_filter_low_hanging_obstacles(self) -> bool: ...
    def set_filter_ledge_spans(self, filter_ledge_spans: bool) -> None: ...
    def get_filter_ledge_spans(self) -> bool: ...
    def set_filter_walkable_low_height_spans(self, filter_walkable_low_height_spans: bool) -> None: ...
    def get_filter_walkable_low_height_spans(self) -> bool: ...
    def set_filter_baking_aabb(self, baking_aabb: AABB) -> None: ...
    def get_filter_baking_aabb(self) -> AABB: ...
    def set_filter_baking_aabb_offset(self, baking_aabb_offset: Vector3) -> None: ...
    def get_filter_baking_aabb_offset(self) -> Vector3: ...
    def set_vertices(self, vertices: PackedVector3Array) -> None: ...
    def get_vertices(self) -> PackedVector3Array: ...
    def add_polygon(self, polygon: PackedInt32Array) -> None: ...
    def get_polygon_count(self) -> int: ...
    def get_polygon(self, idx: int) -> PackedInt32Array: ...
    def clear_polygons(self) -> None: ...
    def create_from_mesh(self, mesh: Mesh) -> None: ...

    # Properties
    vertices: PackedVector3Array
    polygons: GDArray
    sample_partition_type: int
    geometry_parsed_geometry_type: int
    geometry_collision_mask: int
    geometry_source_geometry_mode: int
    geometry_source_group_name: GDString
    cell_size: float
    cell_height: float
    agent_height: float
    agent_radius: float
    agent_max_climb: float
    agent_max_slope: float
    region_min_size: float
    region_merge_size: float
    edge_max_length: float
    edge_max_error: float
    vertices_per_polygon: float
    detail_sample_distance: float
    detail_sample_max_error: float
    filter_low_hanging_obstacles: bool
    filter_ledge_spans: bool
    filter_walkable_low_height_spans: bool
    filter_baking_aabb: AABB
    filter_baking_aabb_offset: Vector3


class NavigationMeshGenerator(TypeInUse(Object)):
    @classmethod
    def new(cls) -> NavigationMeshGenerator: ...

    # Methods
    def bake(self, navigation_mesh: NavigationMesh, root_node: Node) -> None: ...
    def clear(self, navigation_mesh: NavigationMesh) -> None: ...
    def parse_source_geometry_data(self, navigation_mesh: NavigationMesh, source_geometry_data: NavigationMeshSourceGeometryData3D, root_node: Node, callback: GDCallable = Callable()) -> None: ...
    def bake_from_source_geometry_data(self, navigation_mesh: NavigationMesh, source_geometry_data: NavigationMeshSourceGeometryData3D, callback: GDCallable = Callable()) -> None: ...


class NavigationMeshSourceGeometryData3D(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_vertices(self, vertices: PackedFloat32Array) -> None: ...
    def get_vertices(self) -> PackedFloat32Array: ...
    def set_indices(self, indices: PackedInt32Array) -> None: ...
    def get_indices(self) -> PackedInt32Array: ...
    def clear(self) -> None: ...
    def has_data(self) -> bool: ...
    def add_mesh(self, mesh: Mesh, xform: Transform3D) -> None: ...
    def add_mesh_array(self, mesh_array: GDArray, xform: Transform3D) -> None: ...
    def add_faces(self, faces: PackedVector3Array, xform: Transform3D) -> None: ...

    # Properties
    vertices: PackedVector3Array
    indices: PackedInt32Array


class NavigationPathQueryParameters2D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class NavigationPathQueryParameters2D.PathfindingAlgorithm(Enum):
        PATHFINDING_ALGORITHM_ASTAR: int
    class NavigationPathQueryParameters2D.PathPostProcessing(Enum):
        PATH_POSTPROCESSING_CORRIDORFUNNEL: int
        PATH_POSTPROCESSING_EDGECENTERED: int
    class NavigationPathQueryParameters2D.PathMetadataFlags(Enum):
        PATH_METADATA_INCLUDE_NONE: int
        PATH_METADATA_INCLUDE_TYPES: int
        PATH_METADATA_INCLUDE_RIDS: int
        PATH_METADATA_INCLUDE_OWNERS: int
        PATH_METADATA_INCLUDE_ALL: int

    # Methods
    def set_pathfinding_algorithm(self, pathfinding_algorithm: NavigationPathQueryParameters2D.PathfindingAlgorithm) -> None: ...
    def get_pathfinding_algorithm(self) -> NavigationPathQueryParameters2D.PathfindingAlgorithm: ...
    def set_path_postprocessing(self, path_postprocessing: NavigationPathQueryParameters2D.PathPostProcessing) -> None: ...
    def get_path_postprocessing(self) -> NavigationPathQueryParameters2D.PathPostProcessing: ...
    def set_map(self, map: RID) -> None: ...
    def get_map(self) -> RID: ...
    def set_start_position(self, start_position: Vector2) -> None: ...
    def get_start_position(self) -> Vector2: ...
    def set_target_position(self, target_position: Vector2) -> None: ...
    def get_target_position(self) -> Vector2: ...
    def set_navigation_layers(self, navigation_layers: int) -> None: ...
    def get_navigation_layers(self) -> int: ...
    def set_metadata_flags(self, flags: NavigationPathQueryParameters2D.PathMetadataFlags) -> None: ...
    def get_metadata_flags(self) -> NavigationPathQueryParameters2D.PathMetadataFlags: ...

    # Properties
    map: RID
    start_position: Vector2
    target_position: Vector2
    navigation_layers: int
    pathfinding_algorithm: int
    path_postprocessing: int
    metadata_flags: int


class NavigationPathQueryParameters3D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class NavigationPathQueryParameters3D.PathfindingAlgorithm(Enum):
        PATHFINDING_ALGORITHM_ASTAR: int
    class NavigationPathQueryParameters3D.PathPostProcessing(Enum):
        PATH_POSTPROCESSING_CORRIDORFUNNEL: int
        PATH_POSTPROCESSING_EDGECENTERED: int
    class NavigationPathQueryParameters3D.PathMetadataFlags(Enum):
        PATH_METADATA_INCLUDE_NONE: int
        PATH_METADATA_INCLUDE_TYPES: int
        PATH_METADATA_INCLUDE_RIDS: int
        PATH_METADATA_INCLUDE_OWNERS: int
        PATH_METADATA_INCLUDE_ALL: int

    # Methods
    def set_pathfinding_algorithm(self, pathfinding_algorithm: NavigationPathQueryParameters3D.PathfindingAlgorithm) -> None: ...
    def get_pathfinding_algorithm(self) -> NavigationPathQueryParameters3D.PathfindingAlgorithm: ...
    def set_path_postprocessing(self, path_postprocessing: NavigationPathQueryParameters3D.PathPostProcessing) -> None: ...
    def get_path_postprocessing(self) -> NavigationPathQueryParameters3D.PathPostProcessing: ...
    def set_map(self, map: RID) -> None: ...
    def get_map(self) -> RID: ...
    def set_start_position(self, start_position: Vector3) -> None: ...
    def get_start_position(self) -> Vector3: ...
    def set_target_position(self, target_position: Vector3) -> None: ...
    def get_target_position(self) -> Vector3: ...
    def set_navigation_layers(self, navigation_layers: int) -> None: ...
    def get_navigation_layers(self) -> int: ...
    def set_metadata_flags(self, flags: NavigationPathQueryParameters3D.PathMetadataFlags) -> None: ...
    def get_metadata_flags(self) -> NavigationPathQueryParameters3D.PathMetadataFlags: ...

    # Properties
    map: RID
    start_position: Vector3
    target_position: Vector3
    navigation_layers: int
    pathfinding_algorithm: int
    path_postprocessing: int
    metadata_flags: int


class NavigationPathQueryResult2D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class NavigationPathQueryResult2D.PathSegmentType(Enum):
        PATH_SEGMENT_TYPE_REGION: int
        PATH_SEGMENT_TYPE_LINK: int

    # Methods
    def set_path(self, path: PackedVector2Array) -> None: ...
    def get_path(self) -> PackedVector2Array: ...
    def set_path_types(self, path_types: PackedInt32Array) -> None: ...
    def get_path_types(self) -> PackedInt32Array: ...
    def set_path_rids(self, path_rids: GDArray) -> None: ...
    def get_path_rids(self) -> GDArray: ...
    def set_path_owner_ids(self, path_owner_ids: PackedInt64Array) -> None: ...
    def get_path_owner_ids(self) -> PackedInt64Array: ...
    def reset(self) -> None: ...

    # Properties
    path: PackedVector2Array
    path_types: PackedInt32Array
    path_rids: GDArray
    path_owner_ids: PackedInt64Array


class NavigationPathQueryResult3D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Enums
    class NavigationPathQueryResult3D.PathSegmentType(Enum):
        PATH_SEGMENT_TYPE_REGION: int
        PATH_SEGMENT_TYPE_LINK: int

    # Methods
    def set_path(self, path: PackedVector3Array) -> None: ...
    def get_path(self) -> PackedVector3Array: ...
    def set_path_types(self, path_types: PackedInt32Array) -> None: ...
    def get_path_types(self) -> PackedInt32Array: ...
    def set_path_rids(self, path_rids: GDArray) -> None: ...
    def get_path_rids(self) -> GDArray: ...
    def set_path_owner_ids(self, path_owner_ids: PackedInt64Array) -> None: ...
    def get_path_owner_ids(self) -> PackedInt64Array: ...
    def reset(self) -> None: ...

    # Properties
    path: PackedVector3Array
    path_types: PackedInt32Array
    path_rids: GDArray
    path_owner_ids: PackedInt64Array


class NavigationPolygon(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_vertices(self, vertices: PackedVector2Array) -> None: ...
    def get_vertices(self) -> PackedVector2Array: ...
    def add_polygon(self, polygon: PackedInt32Array) -> None: ...
    def get_polygon_count(self) -> int: ...
    def get_polygon(self, idx: int) -> PackedInt32Array: ...
    def clear_polygons(self) -> None: ...
    def get_navigation_mesh(self) -> NavigationMesh: ...
    def add_outline(self, outline: PackedVector2Array) -> None: ...
    def add_outline_at_index(self, outline: PackedVector2Array, index: int) -> None: ...
    def get_outline_count(self) -> int: ...
    def set_outline(self, idx: int, outline: PackedVector2Array) -> None: ...
    def get_outline(self, idx: int) -> PackedVector2Array: ...
    def remove_outline(self, idx: int) -> None: ...
    def clear_outlines(self) -> None: ...
    def make_polygons_from_outlines(self) -> None: ...
    def set_cell_size(self, cell_size: float) -> None: ...
    def get_cell_size(self) -> float: ...

    # Properties
    vertices: PackedVector2Array
    polygons: GDArray
    outlines: GDArray
    cell_size: float


class NavigationServer2D(TypeInUse(Object)):

    # Methods
    def get_maps(self) -> GDArray: ...
    def map_create(self) -> RID: ...
    def map_set_active(self, map: RID, active: bool) -> None: ...
    def map_is_active(self, map: RID) -> bool: ...
    def map_set_cell_size(self, map: RID, cell_size: float) -> None: ...
    def map_get_cell_size(self, map: RID) -> float: ...
    def map_set_use_edge_connections(self, map: RID, enabled: bool) -> None: ...
    def map_get_use_edge_connections(self, map: RID) -> bool: ...
    def map_set_edge_connection_margin(self, map: RID, margin: float) -> None: ...
    def map_get_edge_connection_margin(self, map: RID) -> float: ...
    def map_set_link_connection_radius(self, map: RID, radius: float) -> None: ...
    def map_get_link_connection_radius(self, map: RID) -> float: ...
    def map_get_path(self, map: RID, origin: Vector2, destination: Vector2, optimize: bool, navigation_layers: int = 1) -> PackedVector2Array: ...
    def map_get_closest_point(self, map: RID, to_point: Vector2) -> Vector2: ...
    def map_get_closest_point_owner(self, map: RID, to_point: Vector2) -> RID: ...
    def map_get_links(self, map: RID) -> GDArray: ...
    def map_get_regions(self, map: RID) -> GDArray: ...
    def map_get_agents(self, map: RID) -> GDArray: ...
    def map_get_obstacles(self, map: RID) -> GDArray: ...
    def map_force_update(self, map: RID) -> None: ...
    def query_path(self, parameters: NavigationPathQueryParameters2D, result: NavigationPathQueryResult2D) -> None: ...
    def region_create(self) -> RID: ...
    def region_set_use_edge_connections(self, region: RID, enabled: bool) -> None: ...
    def region_get_use_edge_connections(self, region: RID) -> bool: ...
    def region_set_enter_cost(self, region: RID, enter_cost: float) -> None: ...
    def region_get_enter_cost(self, region: RID) -> float: ...
    def region_set_travel_cost(self, region: RID, travel_cost: float) -> None: ...
    def region_get_travel_cost(self, region: RID) -> float: ...
    def region_set_owner_id(self, region: RID, owner_id: int) -> None: ...
    def region_get_owner_id(self, region: RID) -> int: ...
    def region_owns_point(self, region: RID, point: Vector2) -> bool: ...
    def region_set_map(self, region: RID, map: RID) -> None: ...
    def region_get_map(self, region: RID) -> RID: ...
    def region_set_navigation_layers(self, region: RID, navigation_layers: int) -> None: ...
    def region_get_navigation_layers(self, region: RID) -> int: ...
    def region_set_transform(self, region: RID, transform: Transform2D) -> None: ...
    def region_set_navigation_polygon(self, region: RID, navigation_polygon: NavigationPolygon) -> None: ...
    def region_get_connections_count(self, region: RID) -> int: ...
    def region_get_connection_pathway_start(self, region: RID, connection: int) -> Vector2: ...
    def region_get_connection_pathway_end(self, region: RID, connection: int) -> Vector2: ...
    def link_create(self) -> RID: ...
    def link_set_map(self, link: RID, map: RID) -> None: ...
    def link_get_map(self, link: RID) -> RID: ...
    def link_set_bidirectional(self, link: RID, bidirectional: bool) -> None: ...
    def link_is_bidirectional(self, link: RID) -> bool: ...
    def link_set_navigation_layers(self, link: RID, navigation_layers: int) -> None: ...
    def link_get_navigation_layers(self, link: RID) -> int: ...
    def link_set_start_position(self, link: RID, position: Vector2) -> None: ...
    def link_get_start_position(self, link: RID) -> Vector2: ...
    def link_set_end_position(self, link: RID, position: Vector2) -> None: ...
    def link_get_end_position(self, link: RID) -> Vector2: ...
    def link_set_enter_cost(self, link: RID, enter_cost: float) -> None: ...
    def link_get_enter_cost(self, link: RID) -> float: ...
    def link_set_travel_cost(self, link: RID, travel_cost: float) -> None: ...
    def link_get_travel_cost(self, link: RID) -> float: ...
    def link_set_owner_id(self, link: RID, owner_id: int) -> None: ...
    def link_get_owner_id(self, link: RID) -> int: ...
    def agent_create(self) -> RID: ...
    def agent_set_avoidance_enabled(self, agent: RID, enabled: bool) -> None: ...
    def agent_get_avoidance_enabled(self, agent: RID) -> bool: ...
    def agent_set_map(self, agent: RID, map: RID) -> None: ...
    def agent_get_map(self, agent: RID) -> RID: ...
    def agent_set_paused(self, agent: RID, paused: bool) -> None: ...
    def agent_get_paused(self, agent: RID) -> bool: ...
    def agent_set_neighbor_distance(self, agent: RID, distance: float) -> None: ...
    def agent_set_max_neighbors(self, agent: RID, count: int) -> None: ...
    def agent_set_time_horizon_agents(self, agent: RID, time_horizon: float) -> None: ...
    def agent_set_time_horizon_obstacles(self, agent: RID, time_horizon: float) -> None: ...
    def agent_set_radius(self, agent: RID, radius: float) -> None: ...
    def agent_set_max_speed(self, agent: RID, max_speed: float) -> None: ...
    def agent_set_velocity_forced(self, agent: RID, velocity: Vector2) -> None: ...
    def agent_set_velocity(self, agent: RID, velocity: Vector2) -> None: ...
    def agent_set_position(self, agent: RID, position: Vector2) -> None: ...
    def agent_is_map_changed(self, agent: RID) -> bool: ...
    def agent_set_avoidance_callback(self, agent: RID, callback: GDCallable) -> None: ...
    def agent_set_avoidance_layers(self, agent: RID, layers: int) -> None: ...
    def agent_set_avoidance_mask(self, agent: RID, mask: int) -> None: ...
    def agent_set_avoidance_priority(self, agent: RID, priority: float) -> None: ...
    def obstacle_create(self) -> RID: ...
    def obstacle_set_avoidance_enabled(self, obstacle: RID, enabled: bool) -> None: ...
    def obstacle_get_avoidance_enabled(self, obstacle: RID) -> bool: ...
    def obstacle_set_map(self, obstacle: RID, map: RID) -> None: ...
    def obstacle_get_map(self, obstacle: RID) -> RID: ...
    def obstacle_set_paused(self, obstacle: RID, paused: bool) -> None: ...
    def obstacle_get_paused(self, obstacle: RID) -> bool: ...
    def obstacle_set_radius(self, obstacle: RID, radius: float) -> None: ...
    def obstacle_set_velocity(self, obstacle: RID, velocity: Vector2) -> None: ...
    def obstacle_set_position(self, obstacle: RID, position: Vector2) -> None: ...
    def obstacle_set_vertices(self, obstacle: RID, vertices: PackedVector2Array) -> None: ...
    def obstacle_set_avoidance_layers(self, obstacle: RID, layers: int) -> None: ...
    def free_rid(self, rid: RID) -> None: ...
    def set_debug_enabled(self, enabled: bool) -> None: ...
    def get_debug_enabled(self) -> bool: ...

    # Signals
    def map_changed(self, map: RID) -> None: ...
    def navigation_debug_changed(self) -> None: ...


class NavigationServer3D(TypeInUse(Object)):

    # Enums
    class NavigationServer3D.ProcessInfo(Enum):
        INFO_ACTIVE_MAPS: int
        INFO_REGION_COUNT: int
        INFO_AGENT_COUNT: int
        INFO_LINK_COUNT: int
        INFO_POLYGON_COUNT: int
        INFO_EDGE_COUNT: int
        INFO_EDGE_MERGE_COUNT: int
        INFO_EDGE_CONNECTION_COUNT: int
        INFO_EDGE_FREE_COUNT: int

    # Methods
    def get_maps(self) -> GDArray: ...
    def map_create(self) -> RID: ...
    def map_set_active(self, map: RID, active: bool) -> None: ...
    def map_is_active(self, map: RID) -> bool: ...
    def map_set_up(self, map: RID, up: Vector3) -> None: ...
    def map_get_up(self, map: RID) -> Vector3: ...
    def map_set_cell_size(self, map: RID, cell_size: float) -> None: ...
    def map_get_cell_size(self, map: RID) -> float: ...
    def map_set_cell_height(self, map: RID, cell_height: float) -> None: ...
    def map_get_cell_height(self, map: RID) -> float: ...
    def map_set_use_edge_connections(self, map: RID, enabled: bool) -> None: ...
    def map_get_use_edge_connections(self, map: RID) -> bool: ...
    def map_set_edge_connection_margin(self, map: RID, margin: float) -> None: ...
    def map_get_edge_connection_margin(self, map: RID) -> float: ...
    def map_set_link_connection_radius(self, map: RID, radius: float) -> None: ...
    def map_get_link_connection_radius(self, map: RID) -> float: ...
    def map_get_path(self, map: RID, origin: Vector3, destination: Vector3, optimize: bool, navigation_layers: int = 1) -> PackedVector3Array: ...
    def map_get_closest_point_to_segment(self, map: RID, start: Vector3, end: Vector3, use_collision: bool = False) -> Vector3: ...
    def map_get_closest_point(self, map: RID, to_point: Vector3) -> Vector3: ...
    def map_get_closest_point_normal(self, map: RID, to_point: Vector3) -> Vector3: ...
    def map_get_closest_point_owner(self, map: RID, to_point: Vector3) -> RID: ...
    def map_get_links(self, map: RID) -> GDArray: ...
    def map_get_regions(self, map: RID) -> GDArray: ...
    def map_get_agents(self, map: RID) -> GDArray: ...
    def map_get_obstacles(self, map: RID) -> GDArray: ...
    def map_force_update(self, map: RID) -> None: ...
    def query_path(self, parameters: NavigationPathQueryParameters3D, result: NavigationPathQueryResult3D) -> None: ...
    def region_create(self) -> RID: ...
    def region_set_use_edge_connections(self, region: RID, enabled: bool) -> None: ...
    def region_get_use_edge_connections(self, region: RID) -> bool: ...
    def region_set_enter_cost(self, region: RID, enter_cost: float) -> None: ...
    def region_get_enter_cost(self, region: RID) -> float: ...
    def region_set_travel_cost(self, region: RID, travel_cost: float) -> None: ...
    def region_get_travel_cost(self, region: RID) -> float: ...
    def region_set_owner_id(self, region: RID, owner_id: int) -> None: ...
    def region_get_owner_id(self, region: RID) -> int: ...
    def region_owns_point(self, region: RID, point: Vector3) -> bool: ...
    def region_set_map(self, region: RID, map: RID) -> None: ...
    def region_get_map(self, region: RID) -> RID: ...
    def region_set_navigation_layers(self, region: RID, navigation_layers: int) -> None: ...
    def region_get_navigation_layers(self, region: RID) -> int: ...
    def region_set_transform(self, region: RID, transform: Transform3D) -> None: ...
    def region_set_navigation_mesh(self, region: RID, navigation_mesh: NavigationMesh) -> None: ...
    def region_bake_navigation_mesh(self, navigation_mesh: NavigationMesh, root_node: Node) -> None: ...
    def region_get_connections_count(self, region: RID) -> int: ...
    def region_get_connection_pathway_start(self, region: RID, connection: int) -> Vector3: ...
    def region_get_connection_pathway_end(self, region: RID, connection: int) -> Vector3: ...
    def link_create(self) -> RID: ...
    def link_set_map(self, link: RID, map: RID) -> None: ...
    def link_get_map(self, link: RID) -> RID: ...
    def link_set_bidirectional(self, link: RID, bidirectional: bool) -> None: ...
    def link_is_bidirectional(self, link: RID) -> bool: ...
    def link_set_navigation_layers(self, link: RID, navigation_layers: int) -> None: ...
    def link_get_navigation_layers(self, link: RID) -> int: ...
    def link_set_start_position(self, link: RID, position: Vector3) -> None: ...
    def link_get_start_position(self, link: RID) -> Vector3: ...
    def link_set_end_position(self, link: RID, position: Vector3) -> None: ...
    def link_get_end_position(self, link: RID) -> Vector3: ...
    def link_set_enter_cost(self, link: RID, enter_cost: float) -> None: ...
    def link_get_enter_cost(self, link: RID) -> float: ...
    def link_set_travel_cost(self, link: RID, travel_cost: float) -> None: ...
    def link_get_travel_cost(self, link: RID) -> float: ...
    def link_set_owner_id(self, link: RID, owner_id: int) -> None: ...
    def link_get_owner_id(self, link: RID) -> int: ...
    def agent_create(self) -> RID: ...
    def agent_set_avoidance_enabled(self, agent: RID, enabled: bool) -> None: ...
    def agent_get_avoidance_enabled(self, agent: RID) -> bool: ...
    def agent_set_use_3d_avoidance(self, agent: RID, enabled: bool) -> None: ...
    def agent_get_use_3d_avoidance(self, agent: RID) -> bool: ...
    def agent_set_map(self, agent: RID, map: RID) -> None: ...
    def agent_get_map(self, agent: RID) -> RID: ...
    def agent_set_paused(self, agent: RID, paused: bool) -> None: ...
    def agent_get_paused(self, agent: RID) -> bool: ...
    def agent_set_neighbor_distance(self, agent: RID, distance: float) -> None: ...
    def agent_set_max_neighbors(self, agent: RID, count: int) -> None: ...
    def agent_set_time_horizon_agents(self, agent: RID, time_horizon: float) -> None: ...
    def agent_set_time_horizon_obstacles(self, agent: RID, time_horizon: float) -> None: ...
    def agent_set_radius(self, agent: RID, radius: float) -> None: ...
    def agent_set_height(self, agent: RID, height: float) -> None: ...
    def agent_set_max_speed(self, agent: RID, max_speed: float) -> None: ...
    def agent_set_velocity_forced(self, agent: RID, velocity: Vector3) -> None: ...
    def agent_set_velocity(self, agent: RID, velocity: Vector3) -> None: ...
    def agent_set_position(self, agent: RID, position: Vector3) -> None: ...
    def agent_is_map_changed(self, agent: RID) -> bool: ...
    def agent_set_avoidance_callback(self, agent: RID, callback: GDCallable) -> None: ...
    def agent_set_avoidance_layers(self, agent: RID, layers: int) -> None: ...
    def agent_set_avoidance_mask(self, agent: RID, mask: int) -> None: ...
    def agent_set_avoidance_priority(self, agent: RID, priority: float) -> None: ...
    def obstacle_create(self) -> RID: ...
    def obstacle_set_avoidance_enabled(self, obstacle: RID, enabled: bool) -> None: ...
    def obstacle_get_avoidance_enabled(self, obstacle: RID) -> bool: ...
    def obstacle_set_use_3d_avoidance(self, obstacle: RID, enabled: bool) -> None: ...
    def obstacle_get_use_3d_avoidance(self, obstacle: RID) -> bool: ...
    def obstacle_set_map(self, obstacle: RID, map: RID) -> None: ...
    def obstacle_get_map(self, obstacle: RID) -> RID: ...
    def obstacle_set_paused(self, obstacle: RID, paused: bool) -> None: ...
    def obstacle_get_paused(self, obstacle: RID) -> bool: ...
    def obstacle_set_radius(self, obstacle: RID, radius: float) -> None: ...
    def obstacle_set_height(self, obstacle: RID, height: float) -> None: ...
    def obstacle_set_velocity(self, obstacle: RID, velocity: Vector3) -> None: ...
    def obstacle_set_position(self, obstacle: RID, position: Vector3) -> None: ...
    def obstacle_set_vertices(self, obstacle: RID, vertices: PackedVector3Array) -> None: ...
    def obstacle_set_avoidance_layers(self, obstacle: RID, layers: int) -> None: ...
    def parse_source_geometry_data(self, navigation_mesh: NavigationMesh, source_geometry_data: NavigationMeshSourceGeometryData3D, root_node: Node, callback: GDCallable = Callable()) -> None: ...
    def bake_from_source_geometry_data(self, navigation_mesh: NavigationMesh, source_geometry_data: NavigationMeshSourceGeometryData3D, callback: GDCallable = Callable()) -> None: ...
    def free_rid(self, rid: RID) -> None: ...
    def set_active(self, active: bool) -> None: ...
    def set_debug_enabled(self, enabled: bool) -> None: ...
    def get_debug_enabled(self) -> bool: ...
    def get_process_info(self, process_info: NavigationServer3D.ProcessInfo) -> int: ...

    # Signals
    def map_changed(self, map: RID) -> None: ...
    def navigation_debug_changed(self) -> None: ...
    def avoidance_debug_changed(self) -> None: ...


class Node(TypeInUse(Object)):
    @classmethod
    def new(cls) -> Node: ...

    # Enums
    class Node.ProcessMode(Enum):
        PROCESS_MODE_INHERIT: int
        PROCESS_MODE_PAUSABLE: int
        PROCESS_MODE_WHEN_PAUSED: int
        PROCESS_MODE_ALWAYS: int
        PROCESS_MODE_DISABLED: int
    class Node.ProcessThreadGroup(Enum):
        PROCESS_THREAD_GROUP_INHERIT: int
        PROCESS_THREAD_GROUP_MAIN_THREAD: int
        PROCESS_THREAD_GROUP_SUB_THREAD: int
    class Node.ProcessThreadMessages(Enum):
        FLAG_PROCESS_THREAD_MESSAGES: int
        FLAG_PROCESS_THREAD_MESSAGES_PHYSICS: int
        FLAG_PROCESS_THREAD_MESSAGES_ALL: int
    class Node.DuplicateFlags(Enum):
        DUPLICATE_SIGNALS: int
        DUPLICATE_GROUPS: int
        DUPLICATE_SCRIPTS: int
        DUPLICATE_USE_INSTANTIATION: int
    class Node.InternalMode(Enum):
        INTERNAL_MODE_DISABLED: int
        INTERNAL_MODE_FRONT: int
        INTERNAL_MODE_BACK: int

    # Methods
    def print_orphan_nodes(self) -> None: ...
    def add_sibling(self, sibling: Node, force_readable_name: bool = False) -> None: ...
    def set_name(self, name: GDString | str) -> None: ...
    def get_name(self) -> StringName: ...
    def add_child(self, node: Node, force_readable_name: bool = False, internal: Node.InternalMode = 0) -> None: ...
    def remove_child(self, node: Node) -> None: ...
    def reparent(self, new_parent: Node, keep_global_transform: bool = True) -> None: ...
    def get_child_count(self, include_internal: bool = False) -> int: ...
    def get_children(self, include_internal: bool = False) -> GDArray: ...
    def get_child(self, idx: int, include_internal: bool = False) -> Node: ...
    def has_node(self, path: NodePath | str) -> bool: ...
    def get_node(self, path: NodePath | str) -> Node: ...
    def get_node_or_null(self, path: NodePath | str) -> Node: ...
    def get_parent(self) -> Node: ...
    def find_child(self, pattern: GDString | str, recursive: bool = True, owned: bool = True) -> Node: ...
    def find_children(self, pattern: GDString | str, type: GDString | str = "", recursive: bool = True, owned: bool = True) -> GDArray: ...
    def find_parent(self, pattern: GDString | str) -> Node: ...
    def has_node_and_resource(self, path: NodePath | str) -> bool: ...
    def get_node_and_resource(self, path: NodePath | str) -> GDArray: ...
    def is_inside_tree(self) -> bool: ...
    def is_ancestor_of(self, node: Node) -> bool: ...
    def is_greater_than(self, node: Node) -> bool: ...
    def get_path(self) -> NodePath: ...
    def get_path_to(self, node: Node, use_unique_path: bool = False) -> NodePath: ...
    def add_to_group(self, group: StringName | str, persistent: bool = False) -> None: ...
    def remove_from_group(self, group: StringName | str) -> None: ...
    def is_in_group(self, group: StringName | str) -> bool: ...
    def move_child(self, child_node: Node, to_index: int) -> None: ...
    def get_groups(self) -> GDArray: ...
    def set_owner(self, owner: Node) -> None: ...
    def get_owner(self) -> Node: ...
    def get_index(self, include_internal: bool = False) -> int: ...
    def print_tree(self) -> None: ...
    def print_tree_pretty(self) -> None: ...
    def set_scene_file_path(self, scene_file_path: GDString | str) -> None: ...
    def get_scene_file_path(self) -> GDString: ...
    def propagate_notification(self, what: int) -> None: ...
    def propagate_call(self, method: StringName | str, args: GDArray = [], parent_first: bool = False) -> None: ...
    def set_physics_process(self, enable: bool) -> None: ...
    def get_physics_process_delta_time(self) -> float: ...
    def is_physics_processing(self) -> bool: ...
    def get_process_delta_time(self) -> float: ...
    def set_process(self, enable: bool) -> None: ...
    def set_process_priority(self, priority: int) -> None: ...
    def get_process_priority(self) -> int: ...
    def set_physics_process_priority(self, priority: int) -> None: ...
    def get_physics_process_priority(self) -> int: ...
    def is_processing(self) -> bool: ...
    def set_process_input(self, enable: bool) -> None: ...
    def is_processing_input(self) -> bool: ...
    def set_process_shortcut_input(self, enable: bool) -> None: ...
    def is_processing_shortcut_input(self) -> bool: ...
    def set_process_unhandled_input(self, enable: bool) -> None: ...
    def is_processing_unhandled_input(self) -> bool: ...
    def set_process_unhandled_key_input(self, enable: bool) -> None: ...
    def is_processing_unhandled_key_input(self) -> bool: ...
    def set_process_mode(self, mode: Node.ProcessMode) -> None: ...
    def get_process_mode(self) -> Node.ProcessMode: ...
    def can_process(self) -> bool: ...
    def set_process_thread_group(self, mode: Node.ProcessThreadGroup) -> None: ...
    def get_process_thread_group(self) -> Node.ProcessThreadGroup: ...
    def set_process_thread_messages(self, flags: Node.ProcessThreadMessages) -> None: ...
    def get_process_thread_messages(self) -> Node.ProcessThreadMessages: ...
    def set_process_thread_group_order(self, order: int) -> None: ...
    def get_process_thread_group_order(self) -> int: ...
    def set_display_folded(self, fold: bool) -> None: ...
    def is_displayed_folded(self) -> bool: ...
    def set_process_internal(self, enable: bool) -> None: ...
    def is_processing_internal(self) -> bool: ...
    def set_physics_process_internal(self, enable: bool) -> None: ...
    def is_physics_processing_internal(self) -> bool: ...
    def get_window(self) -> Window: ...
    def get_last_exclusive_window(self) -> Window: ...
    def get_tree(self) -> SceneTree: ...
    def create_tween(self) -> Tween: ...
    def duplicate(self, flags: int = 15) -> Node: ...
    def replace_by(self, node: Node, keep_groups: bool = False) -> None: ...
    def set_scene_instance_load_placeholder(self, load_placeholder: bool) -> None: ...
    def get_scene_instance_load_placeholder(self) -> bool: ...
    def set_editable_instance(self, node: Node, is_editable: bool) -> None: ...
    def is_editable_instance(self, node: Node) -> bool: ...
    def get_viewport(self) -> Viewport: ...
    def queue_free(self) -> None: ...
    def request_ready(self) -> None: ...
    def is_node_ready(self) -> bool: ...
    def set_multiplayer_authority(self, id: int, recursive: bool = True) -> None: ...
    def get_multiplayer_authority(self) -> int: ...
    def is_multiplayer_authority(self) -> bool: ...
    def get_multiplayer(self) -> MultiplayerAPI: ...
    def rpc_config(self, method: StringName | str, config: GDAny) -> None: ...
    def set_editor_description(self, editor_description: GDString | str) -> None: ...
    def get_editor_description(self) -> GDString: ...
    def set_unique_name_in_owner(self, enable: bool) -> None: ...
    def is_unique_name_in_owner(self) -> bool: ...
    def rpc(self, method: StringName | str) -> Error: ...
    def rpc_id(self, peer_id: int, method: StringName | str) -> Error: ...
    def update_configuration_warnings(self) -> None: ...
    def call_deferred_thread_group(self, method: StringName | str) -> GDAny: ...
    def set_deferred_thread_group(self, property: StringName | str, value: GDAny) -> None: ...
    def notify_deferred_thread_group(self, what: int) -> None: ...
    def call_thread_safe(self, method: StringName | str) -> GDAny: ...
    def set_thread_safe(self, property: StringName | str, value: GDAny) -> None: ...
    def notify_thread_safe(self, what: int) -> None: ...

    # Signals
    def ready(self) -> None: ...
    def renamed(self) -> None: ...
    def tree_entered(self) -> None: ...
    def tree_exiting(self) -> None: ...
    def tree_exited(self) -> None: ...
    def child_entered_tree(self, node: Node) -> None: ...
    def child_exiting_tree(self, node: Node) -> None: ...
    def child_order_changed(self) -> None: ...
    def replacing_by(self, node: Node) -> None: ...

    # Properties
    name: StringName
    unique_name_in_owner: bool
    scene_file_path: GDString
    owner: Node
    multiplayer: MultiplayerAPI
    process_mode: int
    process_priority: int
    process_physics_priority: int
    process_thread_group: int
    process_thread_group_order: int
    process_thread_messages: int
    editor_description: GDString

    # Constants
    NOTIFICATION_ENTER_TREE: int
    NOTIFICATION_EXIT_TREE: int
    NOTIFICATION_MOVED_IN_PARENT: int
    NOTIFICATION_READY: int
    NOTIFICATION_PAUSED: int
    NOTIFICATION_UNPAUSED: int
    NOTIFICATION_PHYSICS_PROCESS: int
    NOTIFICATION_PROCESS: int
    NOTIFICATION_PARENTED: int
    NOTIFICATION_UNPARENTED: int
    NOTIFICATION_SCENE_INSTANTIATED: int
    NOTIFICATION_DRAG_BEGIN: int
    NOTIFICATION_DRAG_END: int
    NOTIFICATION_PATH_RENAMED: int
    NOTIFICATION_CHILD_ORDER_CHANGED: int
    NOTIFICATION_INTERNAL_PROCESS: int
    NOTIFICATION_INTERNAL_PHYSICS_PROCESS: int
    NOTIFICATION_POST_ENTER_TREE: int
    NOTIFICATION_DISABLED: int
    NOTIFICATION_ENABLED: int
    NOTIFICATION_NODE_RECACHE_REQUESTED: int
    NOTIFICATION_EDITOR_PRE_SAVE: int
    NOTIFICATION_EDITOR_POST_SAVE: int
    NOTIFICATION_WM_MOUSE_ENTER: int
    NOTIFICATION_WM_MOUSE_EXIT: int
    NOTIFICATION_WM_WINDOW_FOCUS_IN: int
    NOTIFICATION_WM_WINDOW_FOCUS_OUT: int
    NOTIFICATION_WM_CLOSE_REQUEST: int
    NOTIFICATION_WM_GO_BACK_REQUEST: int
    NOTIFICATION_WM_SIZE_CHANGED: int
    NOTIFICATION_WM_DPI_CHANGE: int
    NOTIFICATION_VP_MOUSE_ENTER: int
    NOTIFICATION_VP_MOUSE_EXIT: int
    NOTIFICATION_OS_MEMORY_WARNING: int
    NOTIFICATION_TRANSLATION_CHANGED: int
    NOTIFICATION_WM_ABOUT: int
    NOTIFICATION_CRASH: int
    NOTIFICATION_OS_IME_UPDATE: int
    NOTIFICATION_APPLICATION_RESUMED: int
    NOTIFICATION_APPLICATION_PAUSED: int
    NOTIFICATION_APPLICATION_FOCUS_IN: int
    NOTIFICATION_APPLICATION_FOCUS_OUT: int
    NOTIFICATION_TEXT_SERVER_CHANGED: int


class Node3D(TypeInUse(Node)):
    @classmethod
    def new(cls) -> Node3D: ...

    # Enums
    class Node3D.RotationEditMode(Enum):
        ROTATION_EDIT_MODE_EULER: int
        ROTATION_EDIT_MODE_QUATERNION: int
        ROTATION_EDIT_MODE_BASIS: int

    # Methods
    def set_transform(self, local: Transform3D) -> None: ...
    def get_transform(self) -> Transform3D: ...
    def set_position(self, position: Vector3) -> None: ...
    def get_position(self) -> Vector3: ...
    def set_rotation(self, euler_radians: Vector3) -> None: ...
    def get_rotation(self) -> Vector3: ...
    def set_rotation_degrees(self, euler_degrees: Vector3) -> None: ...
    def get_rotation_degrees(self) -> Vector3: ...
    def set_rotation_order(self, order: EulerOrder) -> None: ...
    def get_rotation_order(self) -> EulerOrder: ...
    def set_rotation_edit_mode(self, edit_mode: Node3D.RotationEditMode) -> None: ...
    def get_rotation_edit_mode(self) -> Node3D.RotationEditMode: ...
    def set_scale(self, scale: Vector3) -> None: ...
    def get_scale(self) -> Vector3: ...
    def set_quaternion(self, quaternion: Quaternion) -> None: ...
    def get_quaternion(self) -> Quaternion: ...
    def set_basis(self, basis: Basis) -> None: ...
    def get_basis(self) -> Basis: ...
    def set_global_transform(self, global_: Transform3D) -> None: ...
    def get_global_transform(self) -> Transform3D: ...
    def set_global_position(self, position: Vector3) -> None: ...
    def get_global_position(self) -> Vector3: ...
    def set_global_rotation(self, euler_radians: Vector3) -> None: ...
    def get_global_rotation(self) -> Vector3: ...
    def set_global_rotation_degrees(self, euler_degrees: Vector3) -> None: ...
    def get_global_rotation_degrees(self) -> Vector3: ...
    def get_parent_node_3d(self) -> Node3D: ...
    def set_ignore_transform_notification(self, enabled: bool) -> None: ...
    def set_as_top_level(self, enable: bool) -> None: ...
    def is_set_as_top_level(self) -> bool: ...
    def set_disable_scale(self, disable: bool) -> None: ...
    def is_scale_disabled(self) -> bool: ...
    def get_world_3d(self) -> World3D: ...
    def force_update_transform(self) -> None: ...
    def set_visibility_parent(self, path: NodePath | str) -> None: ...
    def get_visibility_parent(self) -> NodePath: ...
    def update_gizmos(self) -> None: ...
    def add_gizmo(self, gizmo: Node3DGizmo) -> None: ...
    def get_gizmos(self) -> GDArray: ...
    def clear_gizmos(self) -> None: ...
    def set_subgizmo_selection(self, gizmo: Node3DGizmo, id: int, transform: Transform3D) -> None: ...
    def clear_subgizmo_selection(self) -> None: ...
    def set_visible(self, visible: bool) -> None: ...
    def is_visible(self) -> bool: ...
    def is_visible_in_tree(self) -> bool: ...
    def show(self) -> None: ...
    def hide(self) -> None: ...
    def set_notify_local_transform(self, enable: bool) -> None: ...
    def is_local_transform_notification_enabled(self) -> bool: ...
    def set_notify_transform(self, enable: bool) -> None: ...
    def is_transform_notification_enabled(self) -> bool: ...
    def rotate(self, axis: Vector3, angle: float) -> None: ...
    def global_rotate(self, axis: Vector3, angle: float) -> None: ...
    def global_scale(self, scale: Vector3) -> None: ...
    def global_translate(self, offset: Vector3) -> None: ...
    def rotate_object_local(self, axis: Vector3, angle: float) -> None: ...
    def scale_object_local(self, scale: Vector3) -> None: ...
    def translate_object_local(self, offset: Vector3) -> None: ...
    def rotate_x(self, angle: float) -> None: ...
    def rotate_y(self, angle: float) -> None: ...
    def rotate_z(self, angle: float) -> None: ...
    def translate(self, offset: Vector3) -> None: ...
    def orthonormalize(self) -> None: ...
    def set_identity(self) -> None: ...
    def look_at(self, target: Vector3, up: Vector3 = Vector3(0, 1, 0), use_model_front: bool = False) -> None: ...
    def look_at_from_position(self, position: Vector3, target: Vector3, up: Vector3 = Vector3(0, 1, 0), use_model_front: bool = False) -> None: ...
    def to_local(self, global_point: Vector3) -> Vector3: ...
    def to_global(self, local_point: Vector3) -> Vector3: ...

    # Signals
    def visibility_changed(self) -> None: ...

    # Properties
    transform: Transform3D
    global_transform: Transform3D
    position: Vector3
    rotation: Vector3
    rotation_degrees: Vector3
    quaternion: Quaternion
    basis: Basis
    scale: Vector3
    rotation_edit_mode: int
    rotation_order: int
    top_level: bool
    global_position: Vector3
    global_rotation: Vector3
    global_rotation_degrees: Vector3
    visible: bool
    visibility_parent: NodePath

    # Constants
    NOTIFICATION_TRANSFORM_CHANGED: int
    NOTIFICATION_ENTER_WORLD: int
    NOTIFICATION_EXIT_WORLD: int
    NOTIFICATION_VISIBILITY_CHANGED: int
    NOTIFICATION_LOCAL_TRANSFORM_CHANGED: int


class Node3DGizmo(TypeInUse(RefCounted)):
    pass


class Noise(TypeInUse(Resource)):

    # Methods
    def get_noise_1d(self, x: float) -> float: ...
    def get_noise_2d(self, x: float, y: float) -> float: ...
    def get_noise_2dv(self, v: Vector2) -> float: ...
    def get_noise_3d(self, x: float, y: float, z: float) -> float: ...
    def get_noise_3dv(self, v: Vector3) -> float: ...
    def get_image(self, width: int, height: int, invert: bool = False, in_3d_space: bool = False, normalize: bool = True) -> Image: ...
    def get_seamless_image(self, width: int, height: int, invert: bool = False, in_3d_space: bool = False, skirt: float = 0.1, normalize: bool = True) -> Image: ...
    def get_image_3d(self, width: int, height: int, depth: int, invert: bool = False, normalize: bool = True) -> GDArray: ...
    def get_seamless_image_3d(self, width: int, height: int, depth: int, invert: bool = False, skirt: float = 0.1, normalize: bool = True) -> GDArray: ...


class NoiseTexture2D(TypeInUse(Texture2D)):
    def __init__(self): ...

    # Methods
    def set_width(self, width: int) -> None: ...
    def set_height(self, height: int) -> None: ...
    def set_invert(self, invert: bool) -> None: ...
    def get_invert(self) -> bool: ...
    def set_in_3d_space(self, enable: bool) -> None: ...
    def is_in_3d_space(self) -> bool: ...
    def set_generate_mipmaps(self, invert: bool) -> None: ...
    def is_generating_mipmaps(self) -> bool: ...
    def set_seamless(self, seamless: bool) -> None: ...
    def get_seamless(self) -> bool: ...
    def set_seamless_blend_skirt(self, seamless_blend_skirt: float) -> None: ...
    def get_seamless_blend_skirt(self) -> float: ...
    def set_as_normal_map(self, as_normal_map: bool) -> None: ...
    def is_normal_map(self) -> bool: ...
    def set_bump_strength(self, bump_strength: float) -> None: ...
    def get_bump_strength(self) -> float: ...
    def set_normalize(self, normalize: bool) -> None: ...
    def is_normalized(self) -> bool: ...
    def set_color_ramp(self, gradient: Gradient) -> None: ...
    def get_color_ramp(self) -> Gradient: ...
    def set_noise(self, noise: Noise) -> None: ...
    def get_noise(self) -> Noise: ...

    # Properties
    width: int
    height: int
    invert: bool
    in_3d_space: bool
    generate_mipmaps: bool
    seamless: bool
    seamless_blend_skirt: float
    as_normal_map: bool
    bump_strength: float
    normalize: bool
    color_ramp: Gradient
    noise: Noise


class NoiseTexture3D(TypeInUse(Texture3D)):
    def __init__(self): ...

    # Methods
    def set_width(self, width: int) -> None: ...
    def set_height(self, height: int) -> None: ...
    def set_depth(self, depth: int) -> None: ...
    def set_invert(self, invert: bool) -> None: ...
    def get_invert(self) -> bool: ...
    def set_seamless(self, seamless: bool) -> None: ...
    def get_seamless(self) -> bool: ...
    def set_seamless_blend_skirt(self, seamless_blend_skirt: float) -> None: ...
    def get_seamless_blend_skirt(self) -> float: ...
    def set_normalize(self, normalize: bool) -> None: ...
    def is_normalized(self) -> bool: ...
    def set_color_ramp(self, gradient: Gradient) -> None: ...
    def get_color_ramp(self) -> Gradient: ...
    def set_noise(self, noise: Noise) -> None: ...
    def get_noise(self) -> Noise: ...

    # Properties
    width: int
    height: int
    depth: int
    invert: bool
    seamless: bool
    seamless_blend_skirt: float
    normalize: bool
    color_ramp: Gradient
    noise: Noise


class OS(TypeInUse(Object)):
    @classmethod
    def new(cls) -> OS: ...

    # Enums
    class OS.RenderingDriver(Enum):
        RENDERING_DRIVER_VULKAN: int
        RENDERING_DRIVER_OPENGL3: int
    class OS.SystemDir(Enum):
        SYSTEM_DIR_DESKTOP: int
        SYSTEM_DIR_DCIM: int
        SYSTEM_DIR_DOCUMENTS: int
        SYSTEM_DIR_DOWNLOADS: int
        SYSTEM_DIR_MOVIES: int
        SYSTEM_DIR_MUSIC: int
        SYSTEM_DIR_PICTURES: int
        SYSTEM_DIR_RINGTONES: int

    # Methods
    def get_connected_midi_inputs(self) -> PackedStringArray: ...
    def open_midi_inputs(self) -> None: ...
    def close_midi_inputs(self) -> None: ...
    def alert(self, text: GDString | str, title: GDString | str = "Alert!") -> None: ...
    def crash(self, message: GDString | str) -> None: ...
    def set_low_processor_usage_mode(self, enable: bool) -> None: ...
    def is_in_low_processor_usage_mode(self) -> bool: ...
    def set_low_processor_usage_mode_sleep_usec(self, usec: int) -> None: ...
    def get_low_processor_usage_mode_sleep_usec(self) -> int: ...
    def set_delta_smoothing(self, delta_smoothing_enabled: bool) -> None: ...
    def is_delta_smoothing_enabled(self) -> bool: ...
    def get_processor_count(self) -> int: ...
    def get_processor_name(self) -> GDString: ...
    def get_system_fonts(self) -> PackedStringArray: ...
    def get_system_font_path(self, font_name: GDString | str, weight: int = 400, stretch: int = 100, italic: bool = False) -> GDString: ...
    def get_system_font_path_for_text(self, font_name: GDString | str, text: GDString | str, locale: GDString | str = "", script: GDString | str = "", weight: int = 400, stretch: int = 100, italic: bool = False) -> PackedStringArray: ...
    def get_executable_path(self) -> GDString: ...
    def read_string_from_stdin(self) -> GDString: ...
    def execute(self, path: GDString | str, arguments: PackedStringArray, output: GDArray = [], read_stderr: bool = False, open_console: bool = False) -> int: ...
    def create_process(self, path: GDString | str, arguments: PackedStringArray, open_console: bool = False) -> int: ...
    def create_instance(self, arguments: PackedStringArray) -> int: ...
    def kill(self, pid: int) -> Error: ...
    def shell_open(self, uri: GDString | str) -> Error: ...
    def shell_show_in_file_manager(self, file_or_dir_path: GDString | str, open_folder: bool = True) -> Error: ...
    def is_process_running(self, pid: int) -> bool: ...
    def get_process_id(self) -> int: ...
    def has_environment(self, variable: GDString | str) -> bool: ...
    def get_environment(self, variable: GDString | str) -> GDString: ...
    def set_environment(self, variable: GDString | str, value: GDString | str) -> None: ...
    def unset_environment(self, variable: GDString | str) -> None: ...
    def get_name(self) -> GDString: ...
    def get_distribution_name(self) -> GDString: ...
    def get_version(self) -> GDString: ...
    def get_cmdline_args(self) -> PackedStringArray: ...
    def get_cmdline_user_args(self) -> PackedStringArray: ...
    def get_video_adapter_driver_info(self) -> PackedStringArray: ...
    def set_restart_on_exit(self, restart: bool, arguments: PackedStringArray = PackedStringArray()) -> None: ...
    def is_restart_on_exit_set(self) -> bool: ...
    def get_restart_on_exit_arguments(self) -> PackedStringArray: ...
    def delay_usec(self, usec: int) -> None: ...
    def delay_msec(self, msec: int) -> None: ...
    def get_locale(self) -> GDString: ...
    def get_locale_language(self) -> GDString: ...
    def get_model_name(self) -> GDString: ...
    def is_userfs_persistent(self) -> bool: ...
    def is_stdout_verbose(self) -> bool: ...
    def is_debug_build(self) -> bool: ...
    def get_static_memory_usage(self) -> int: ...
    def get_static_memory_peak_usage(self) -> int: ...
    def get_memory_info(self) -> GDDictionary: ...
    def move_to_trash(self, path: GDString | str) -> Error: ...
    def get_user_data_dir(self) -> GDString: ...
    def get_system_dir(self, dir: OS.SystemDir, shared_storage: bool = True) -> GDString: ...
    def get_config_dir(self) -> GDString: ...
    def get_data_dir(self) -> GDString: ...
    def get_cache_dir(self) -> GDString: ...
    def get_unique_id(self) -> GDString: ...
    def get_keycode_string(self, code: Key) -> GDString: ...
    def is_keycode_unicode(self, code: int) -> bool: ...
    def find_keycode_from_string(self, string: GDString | str) -> Key: ...
    def set_use_file_access_save_and_swap(self, enabled: bool) -> None: ...
    def set_thread_name(self, name: GDString | str) -> Error: ...
    def get_thread_caller_id(self) -> int: ...
    def get_main_thread_id(self) -> int: ...
    def has_feature(self, tag_name: GDString | str) -> bool: ...
    def request_permission(self, name: GDString | str) -> bool: ...
    def request_permissions(self) -> bool: ...
    def get_granted_permissions(self) -> PackedStringArray: ...

    # Properties
    low_processor_usage_mode: bool
    low_processor_usage_mode_sleep_usec: int
    delta_smoothing: bool


class Occluder3D(TypeInUse(Resource)):

    # Methods
    def get_vertices(self) -> PackedVector3Array: ...
    def get_indices(self) -> PackedInt32Array: ...


class OccluderInstance3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> OccluderInstance3D: ...

    # Methods
    def set_bake_mask(self, mask: int) -> None: ...
    def get_bake_mask(self) -> int: ...
    def set_bake_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_bake_mask_value(self, layer_number: int) -> bool: ...
    def set_bake_simplification_distance(self, simplification_distance: float) -> None: ...
    def get_bake_simplification_distance(self) -> float: ...
    def set_occluder(self, occluder: Occluder3D) -> None: ...
    def get_occluder(self) -> Occluder3D: ...

    # Properties
    occluder: Occluder3D
    bake_mask: int
    bake_simplification_distance: float


class OccluderPolygon2D(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class OccluderPolygon2D.CullMode(Enum):
        CULL_DISABLED: int
        CULL_CLOCKWISE: int
        CULL_COUNTER_CLOCKWISE: int

    # Methods
    def set_closed(self, closed: bool) -> None: ...
    def is_closed(self) -> bool: ...
    def set_cull_mode(self, cull_mode: OccluderPolygon2D.CullMode) -> None: ...
    def get_cull_mode(self) -> OccluderPolygon2D.CullMode: ...
    def set_polygon(self, polygon: PackedVector2Array) -> None: ...
    def get_polygon(self) -> PackedVector2Array: ...

    # Properties
    closed: bool
    cull_mode: int
    polygon: PackedVector2Array


class OggPacketSequence(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_packet_data(self, packet_data: GDArray) -> None: ...
    def get_packet_data(self) -> GDArray: ...
    def set_packet_granule_positions(self, granule_positions: PackedInt64Array) -> None: ...
    def get_packet_granule_positions(self) -> PackedInt64Array: ...
    def set_sampling_rate(self, sampling_rate: float) -> None: ...
    def get_sampling_rate(self) -> float: ...
    def get_length(self) -> float: ...

    # Properties
    packet_data: GDArray
    granule_positions: PackedInt64Array
    sampling_rate: float


class OggPacketSequencePlayback(TypeInUse(RefCounted)):
    def __init__(self): ...


class OpenXRAction(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class OpenXRAction.ActionType(Enum):
        OPENXR_ACTION_BOOL: int
        OPENXR_ACTION_FLOAT: int
        OPENXR_ACTION_VECTOR2: int
        OPENXR_ACTION_POSE: int

    # Methods
    def set_localized_name(self, localized_name: GDString | str) -> None: ...
    def get_localized_name(self) -> GDString: ...
    def set_action_type(self, action_type: OpenXRAction.ActionType) -> None: ...
    def get_action_type(self) -> OpenXRAction.ActionType: ...
    def set_toplevel_paths(self, toplevel_paths: PackedStringArray) -> None: ...
    def get_toplevel_paths(self) -> PackedStringArray: ...

    # Properties
    localized_name: GDString
    action_type: int
    toplevel_paths: PackedStringArray


class OpenXRActionMap(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_action_sets(self, action_sets: GDArray) -> None: ...
    def get_action_sets(self) -> GDArray: ...
    def get_action_set_count(self) -> int: ...
    def find_action_set(self, name: GDString | str) -> OpenXRActionSet: ...
    def get_action_set(self, idx: int) -> OpenXRActionSet: ...
    def add_action_set(self, action_set: OpenXRActionSet) -> None: ...
    def remove_action_set(self, action_set: OpenXRActionSet) -> None: ...
    def set_interaction_profiles(self, interaction_profiles: GDArray) -> None: ...
    def get_interaction_profiles(self) -> GDArray: ...
    def get_interaction_profile_count(self) -> int: ...
    def find_interaction_profile(self, name: GDString | str) -> OpenXRInteractionProfile: ...
    def get_interaction_profile(self, idx: int) -> OpenXRInteractionProfile: ...
    def add_interaction_profile(self, interaction_profile: OpenXRInteractionProfile) -> None: ...
    def remove_interaction_profile(self, interaction_profile: OpenXRInteractionProfile) -> None: ...
    def create_default_action_sets(self) -> None: ...

    # Properties
    action_sets: OpenXRActionSet
    interaction_profiles: OpenXRInteractionProfile


class OpenXRActionSet(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_localized_name(self, localized_name: GDString | str) -> None: ...
    def get_localized_name(self) -> GDString: ...
    def set_priority(self, priority: int) -> None: ...
    def get_priority(self) -> int: ...
    def get_action_count(self) -> int: ...
    def set_actions(self, actions: GDArray) -> None: ...
    def get_actions(self) -> GDArray: ...
    def add_action(self, action: OpenXRAction) -> None: ...
    def remove_action(self, action: OpenXRAction) -> None: ...

    # Properties
    localized_name: GDString
    priority: int
    actions: OpenXRAction


class OpenXRHand(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> OpenXRHand: ...

    # Enums
    class OpenXRHand.Hands(Enum):
        HAND_LEFT: int
        HAND_RIGHT: int
        HAND_MAX: int
    class OpenXRHand.MotionRange(Enum):
        MOTION_RANGE_UNOBSTRUCTED: int
        MOTION_RANGE_CONFORM_TO_CONTROLLER: int
        MOTION_RANGE_MAX: int

    # Methods
    def set_hand(self, hand: OpenXRHand.Hands) -> None: ...
    def get_hand(self) -> OpenXRHand.Hands: ...
    def set_hand_skeleton(self, hand_skeleton: NodePath | str) -> None: ...
    def get_hand_skeleton(self) -> NodePath: ...
    def set_motion_range(self, motion_range: OpenXRHand.MotionRange) -> None: ...
    def get_motion_range(self) -> OpenXRHand.MotionRange: ...

    # Properties
    hand: int
    motion_range: int
    hand_skeleton: NodePath


class OpenXRIPBinding(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_action(self, action: OpenXRAction) -> None: ...
    def get_action(self) -> OpenXRAction: ...
    def get_path_count(self) -> int: ...
    def set_paths(self, paths: PackedStringArray) -> None: ...
    def get_paths(self) -> PackedStringArray: ...
    def has_path(self, path: GDString | str) -> bool: ...
    def add_path(self, path: GDString | str) -> None: ...
    def remove_path(self, path: GDString | str) -> None: ...

    # Properties
    action: OpenXRAction
    paths: PackedStringArray


class OpenXRInteractionProfile(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_interaction_profile_path(self, interaction_profile_path: GDString | str) -> None: ...
    def get_interaction_profile_path(self) -> GDString: ...
    def get_binding_count(self) -> int: ...
    def get_binding(self, index: int) -> OpenXRIPBinding: ...
    def set_bindings(self, bindings: GDArray) -> None: ...
    def get_bindings(self) -> GDArray: ...

    # Properties
    interaction_profile_path: GDString
    bindings: OpenXRIPBinding


class OpenXRInterface(TypeInUse(XRInterface)):
    def __init__(self): ...

    # Methods
    def get_display_refresh_rate(self) -> float: ...
    def set_display_refresh_rate(self, refresh_rate: float) -> None: ...
    def get_render_target_size_multiplier(self) -> float: ...
    def set_render_target_size_multiplier(self, multiplier: float) -> None: ...
    def is_action_set_active(self, name: GDString | str) -> bool: ...
    def set_action_set_active(self, name: GDString | str, active: bool) -> None: ...
    def get_action_sets(self) -> GDArray: ...
    def get_available_display_refresh_rates(self) -> GDArray: ...

    # Signals
    def session_begun(self) -> None: ...
    def session_stopping(self) -> None: ...
    def session_focussed(self) -> None: ...
    def session_visible(self) -> None: ...
    def pose_recentered(self) -> None: ...

    # Properties
    display_refresh_rate: float
    render_target_size_multiplier: float


class OptimizedTranslation(TypeInUse(Translation)):
    def __init__(self): ...

    # Methods
    def generate(self, from_: Translation) -> None: ...


class PCKPacker(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def pck_start(self, pck_name: GDString | str, alignment: int = 32, key: GDString | str = "0000000000000000000000000000000000000000000000000000000000000000", encrypt_directory: bool = False) -> Error: ...
    def add_file(self, pck_path: GDString | str, source_path: GDString | str, encrypt: bool = False) -> Error: ...
    def flush(self, verbose: bool = False) -> Error: ...


class PackedDataContainer(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def pack(self, value: GDAny) -> Error: ...
    def size(self) -> int: ...


class PackedDataContainerRef(TypeInUse(RefCounted)):

    # Methods
    def size(self) -> int: ...


class PackedScene(TypeInUse(Resource)):
    def __init__(self): ...

    # Enums
    class PackedScene.GenEditState(Enum):
        GEN_EDIT_STATE_DISABLED: int
        GEN_EDIT_STATE_INSTANCE: int
        GEN_EDIT_STATE_MAIN: int
        GEN_EDIT_STATE_MAIN_INHERITED: int

    # Methods
    def pack(self, path: Node) -> Error: ...
    def instantiate(self, edit_state: PackedScene.GenEditState = 0) -> Node: ...
    def can_instantiate(self) -> bool: ...
    def get_state(self) -> SceneState: ...


class PacketPeer(TypeInUse(RefCounted)):

    # Methods
    def get_var(self, allow_objects: bool = False) -> GDAny: ...
    def put_var(self, var: GDAny, full_objects: bool = False) -> Error: ...
    def get_packet(self) -> PackedByteArray: ...
    def put_packet(self, buffer: PackedByteArray) -> Error: ...
    def get_packet_error(self) -> Error: ...
    def get_available_packet_count(self) -> int: ...
    def get_encode_buffer_max_size(self) -> int: ...
    def set_encode_buffer_max_size(self, max_size: int) -> None: ...

    # Properties
    encode_buffer_max_size: int


class PacketPeerDTLS(TypeInUse(PacketPeer)):
    def __init__(self): ...

    # Enums
    class PacketPeerDTLS.Status(Enum):
        STATUS_DISCONNECTED: int
        STATUS_HANDSHAKING: int
        STATUS_CONNECTED: int
        STATUS_ERROR: int
        STATUS_ERROR_HOSTNAME_MISMATCH: int

    # Methods
    def poll(self) -> None: ...
    def connect_to_peer(self, packet_peer: PacketPeerUDP, hostname: GDString | str, client_options: TLSOptions = None) -> Error: ...
    def get_status(self) -> PacketPeerDTLS.Status: ...
    def disconnect_from_peer(self) -> None: ...


class PacketPeerExtension(TypeInUse(PacketPeer)):
    def __init__(self): ...


class PacketPeerStream(TypeInUse(PacketPeer)):
    def __init__(self): ...

    # Methods
    def set_stream_peer(self, peer: StreamPeer) -> None: ...
    def get_stream_peer(self) -> StreamPeer: ...
    def set_input_buffer_max_size(self, max_size_bytes: int) -> None: ...
    def set_output_buffer_max_size(self, max_size_bytes: int) -> None: ...
    def get_input_buffer_max_size(self) -> int: ...
    def get_output_buffer_max_size(self) -> int: ...

    # Properties
    input_buffer_max_size: int
    output_buffer_max_size: int
    stream_peer: StreamPeer


class PacketPeerUDP(TypeInUse(PacketPeer)):
    def __init__(self): ...

    # Methods
    def bind(self, port: int, bind_address: GDString | str = "*", recv_buf_size: int = 65536) -> Error: ...
    def close(self) -> None: ...
    def wait(self) -> Error: ...
    def is_bound(self) -> bool: ...
    def connect_to_host(self, host: GDString | str, port: int) -> Error: ...
    def is_socket_connected(self) -> bool: ...
    def get_packet_ip(self) -> GDString: ...
    def get_packet_port(self) -> int: ...
    def get_local_port(self) -> int: ...
    def set_dest_address(self, host: GDString | str, port: int) -> Error: ...
    def set_broadcast_enabled(self, enabled: bool) -> None: ...
    def join_multicast_group(self, multicast_address: GDString | str, interface_name: GDString | str) -> Error: ...
    def leave_multicast_group(self, multicast_address: GDString | str, interface_name: GDString | str) -> Error: ...


class PanoramaSkyMaterial(TypeInUse(Material)):
    def __init__(self): ...

    # Methods
    def set_panorama(self, texture: Texture2D) -> None: ...
    def get_panorama(self) -> Texture2D: ...
    def set_filtering_enabled(self, enabled: bool) -> None: ...
    def is_filtering_enabled(self) -> bool: ...

    # Properties
    panorama: Texture2D
    filter: bool


class ParticleProcessMaterial(TypeInUse(Material)):
    def __init__(self): ...

    # Enums
    class ParticleProcessMaterial.Parameter(Enum):
        PARAM_INITIAL_LINEAR_VELOCITY: int
        PARAM_ANGULAR_VELOCITY: int
        PARAM_ORBIT_VELOCITY: int
        PARAM_LINEAR_ACCEL: int
        PARAM_RADIAL_ACCEL: int
        PARAM_TANGENTIAL_ACCEL: int
        PARAM_DAMPING: int
        PARAM_ANGLE: int
        PARAM_SCALE: int
        PARAM_HUE_VARIATION: int
        PARAM_ANIM_SPEED: int
        PARAM_ANIM_OFFSET: int
        PARAM_MAX: int
        PARAM_TURB_VEL_INFLUENCE: int
        PARAM_TURB_INIT_DISPLACEMENT: int
        PARAM_TURB_INFLUENCE_OVER_LIFE: int
    class ParticleProcessMaterial.ParticleFlags(Enum):
        PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY: int
        PARTICLE_FLAG_ROTATE_Y: int
        PARTICLE_FLAG_DISABLE_Z: int
        PARTICLE_FLAG_MAX: int
    class ParticleProcessMaterial.EmissionShape(Enum):
        EMISSION_SHAPE_POINT: int
        EMISSION_SHAPE_SPHERE: int
        EMISSION_SHAPE_SPHERE_SURFACE: int
        EMISSION_SHAPE_BOX: int
        EMISSION_SHAPE_POINTS: int
        EMISSION_SHAPE_DIRECTED_POINTS: int
        EMISSION_SHAPE_RING: int
        EMISSION_SHAPE_MAX: int
    class ParticleProcessMaterial.SubEmitterMode(Enum):
        SUB_EMITTER_DISABLED: int
        SUB_EMITTER_CONSTANT: int
        SUB_EMITTER_AT_END: int
        SUB_EMITTER_AT_COLLISION: int
        SUB_EMITTER_MAX: int
    class ParticleProcessMaterial.CollisionMode(Enum):
        COLLISION_DISABLED: int
        COLLISION_RIGID: int
        COLLISION_HIDE_ON_CONTACT: int
        COLLISION_MAX: int

    # Methods
    def set_direction(self, degrees: Vector3) -> None: ...
    def get_direction(self) -> Vector3: ...
    def set_spread(self, degrees: float) -> None: ...
    def get_spread(self) -> float: ...
    def set_flatness(self, amount: float) -> None: ...
    def get_flatness(self) -> float: ...
    def set_param_min(self, param: ParticleProcessMaterial.Parameter, value: float) -> None: ...
    def get_param_min(self, param: ParticleProcessMaterial.Parameter) -> float: ...
    def set_param_max(self, param: ParticleProcessMaterial.Parameter, value: float) -> None: ...
    def get_param_max(self, param: ParticleProcessMaterial.Parameter) -> float: ...
    def set_param_texture(self, param: ParticleProcessMaterial.Parameter, texture: Texture2D) -> None: ...
    def get_param_texture(self, param: ParticleProcessMaterial.Parameter) -> Texture2D: ...
    def set_color(self, color: Color) -> None: ...
    def get_color(self) -> Color: ...
    def set_color_ramp(self, ramp: Texture2D) -> None: ...
    def get_color_ramp(self) -> Texture2D: ...
    def set_color_initial_ramp(self, ramp: Texture2D) -> None: ...
    def get_color_initial_ramp(self) -> Texture2D: ...
    def set_particle_flag(self, particle_flag: ParticleProcessMaterial.ParticleFlags, enable: bool) -> None: ...
    def get_particle_flag(self, particle_flag: ParticleProcessMaterial.ParticleFlags) -> bool: ...
    def set_emission_shape(self, shape: ParticleProcessMaterial.EmissionShape) -> None: ...
    def get_emission_shape(self) -> ParticleProcessMaterial.EmissionShape: ...
    def set_emission_sphere_radius(self, radius: float) -> None: ...
    def get_emission_sphere_radius(self) -> float: ...
    def set_emission_box_extents(self, extents: Vector3) -> None: ...
    def get_emission_box_extents(self) -> Vector3: ...
    def set_emission_point_texture(self, texture: Texture2D) -> None: ...
    def get_emission_point_texture(self) -> Texture2D: ...
    def set_emission_normal_texture(self, texture: Texture2D) -> None: ...
    def get_emission_normal_texture(self) -> Texture2D: ...
    def set_emission_color_texture(self, texture: Texture2D) -> None: ...
    def get_emission_color_texture(self) -> Texture2D: ...
    def set_emission_point_count(self, point_count: int) -> None: ...
    def get_emission_point_count(self) -> int: ...
    def set_emission_ring_axis(self, axis: Vector3) -> None: ...
    def get_emission_ring_axis(self) -> Vector3: ...
    def set_emission_ring_height(self, height: float) -> None: ...
    def get_emission_ring_height(self) -> float: ...
    def set_emission_ring_radius(self, radius: float) -> None: ...
    def get_emission_ring_radius(self) -> float: ...
    def set_emission_ring_inner_radius(self, inner_radius: float) -> None: ...
    def get_emission_ring_inner_radius(self) -> float: ...
    def get_turbulence_enabled(self) -> bool: ...
    def set_turbulence_enabled(self, turbulence_enabled: bool) -> None: ...
    def get_turbulence_noise_strength(self) -> float: ...
    def set_turbulence_noise_strength(self, turbulence_noise_strength: float) -> None: ...
    def get_turbulence_noise_scale(self) -> float: ...
    def set_turbulence_noise_scale(self, turbulence_noise_scale: float) -> None: ...
    def get_turbulence_noise_speed_random(self) -> float: ...
    def set_turbulence_noise_speed_random(self, turbulence_noise_speed_random: float) -> None: ...
    def get_turbulence_noise_speed(self) -> Vector3: ...
    def set_turbulence_noise_speed(self, turbulence_noise_speed: Vector3) -> None: ...
    def get_gravity(self) -> Vector3: ...
    def set_gravity(self, accel_vec: Vector3) -> None: ...
    def set_lifetime_randomness(self, randomness: float) -> None: ...
    def get_lifetime_randomness(self) -> float: ...
    def get_sub_emitter_mode(self) -> ParticleProcessMaterial.SubEmitterMode: ...
    def set_sub_emitter_mode(self, mode: ParticleProcessMaterial.SubEmitterMode) -> None: ...
    def get_sub_emitter_frequency(self) -> float: ...
    def set_sub_emitter_frequency(self, hz: float) -> None: ...
    def get_sub_emitter_amount_at_end(self) -> int: ...
    def set_sub_emitter_amount_at_end(self, amount: int) -> None: ...
    def get_sub_emitter_amount_at_collision(self) -> int: ...
    def set_sub_emitter_amount_at_collision(self, amount: int) -> None: ...
    def get_sub_emitter_keep_velocity(self) -> bool: ...
    def set_sub_emitter_keep_velocity(self, enable: bool) -> None: ...
    def set_attractor_interaction_enabled(self, enabled: bool) -> None: ...
    def is_attractor_interaction_enabled(self) -> bool: ...
    def set_collision_mode(self, mode: ParticleProcessMaterial.CollisionMode) -> None: ...
    def get_collision_mode(self) -> ParticleProcessMaterial.CollisionMode: ...
    def set_collision_use_scale(self, radius: bool) -> None: ...
    def is_collision_using_scale(self) -> bool: ...
    def set_collision_friction(self, friction: float) -> None: ...
    def get_collision_friction(self) -> float: ...
    def set_collision_bounce(self, bounce: float) -> None: ...
    def get_collision_bounce(self) -> float: ...

    # Properties
    lifetime_randomness: float
    emission_shape: int
    emission_sphere_radius: float
    emission_box_extents: Vector3
    emission_point_texture: Texture2D
    emission_normal_texture: Texture2D
    emission_color_texture: Texture2D
    emission_point_count: int
    emission_ring_axis: Vector3
    emission_ring_height: float
    emission_ring_radius: float
    emission_ring_inner_radius: float
    particle_flag_align_y: bool
    particle_flag_rotate_y: bool
    particle_flag_disable_z: bool
    direction: Vector3
    spread: float
    flatness: float
    gravity: Vector3
    initial_velocity_min: float
    initial_velocity_max: float
    angular_velocity_min: float
    angular_velocity_max: float
    angular_velocity_curve: CurveTexture
    orbit_velocity_min: float
    orbit_velocity_max: float
    orbit_velocity_curve: CurveTexture
    linear_accel_min: float
    linear_accel_max: float
    linear_accel_curve: CurveTexture
    radial_accel_min: float
    radial_accel_max: float
    radial_accel_curve: CurveTexture
    tangential_accel_min: float
    tangential_accel_max: float
    tangential_accel_curve: CurveTexture
    damping_min: float
    damping_max: float
    damping_curve: CurveTexture
    angle_min: float
    angle_max: float
    angle_curve: CurveTexture
    scale_min: float
    scale_max: float
    scale_curve: CurveTexture | CurveXYZTexture
    color: Color
    color_ramp: GradientTexture1D
    color_initial_ramp: GradientTexture1D
    hue_variation_min: float
    hue_variation_max: float
    hue_variation_curve: CurveTexture
    turbulence_enabled: bool
    turbulence_noise_strength: float
    turbulence_noise_scale: float
    turbulence_noise_speed: Vector3
    turbulence_noise_speed_random: float
    turbulence_influence_min: float
    turbulence_influence_max: float
    turbulence_initial_displacement_min: float
    turbulence_initial_displacement_max: float
    turbulence_influence_over_life: CurveTexture
    anim_speed_min: float
    anim_speed_max: float
    anim_speed_curve: CurveTexture
    anim_offset_min: float
    anim_offset_max: float
    anim_offset_curve: CurveTexture
    sub_emitter_mode: int
    sub_emitter_frequency: float
    sub_emitter_amount_at_end: int
    sub_emitter_amount_at_collision: int
    sub_emitter_keep_velocity: bool
    attractor_interaction_enabled: bool
    collision_mode: int
    collision_friction: float
    collision_bounce: float
    collision_use_scale: bool


class Path3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> Path3D: ...

    # Methods
    def set_curve(self, curve: Curve3D) -> None: ...
    def get_curve(self) -> Curve3D: ...

    # Signals
    def curve_changed(self) -> None: ...

    # Properties
    curve: Curve3D


class PathFollow3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> PathFollow3D: ...

    # Enums
    class PathFollow3D.RotationMode(Enum):
        ROTATION_NONE: int
        ROTATION_Y: int
        ROTATION_XY: int
        ROTATION_XYZ: int
        ROTATION_ORIENTED: int

    # Methods
    def set_progress(self, progress: float) -> None: ...
    def get_progress(self) -> float: ...
    def set_h_offset(self, h_offset: float) -> None: ...
    def get_h_offset(self) -> float: ...
    def set_v_offset(self, v_offset: float) -> None: ...
    def get_v_offset(self) -> float: ...
    def set_progress_ratio(self, ratio: float) -> None: ...
    def get_progress_ratio(self) -> float: ...
    def set_rotation_mode(self, rotation_mode: PathFollow3D.RotationMode) -> None: ...
    def get_rotation_mode(self) -> PathFollow3D.RotationMode: ...
    def set_cubic_interpolation(self, enabled: bool) -> None: ...
    def get_cubic_interpolation(self) -> bool: ...
    def set_use_model_front(self, enabled: bool) -> None: ...
    def is_using_model_front(self) -> bool: ...
    def set_loop(self, loop: bool) -> None: ...
    def has_loop(self) -> bool: ...
    def set_tilt_enabled(self, enabled: bool) -> None: ...
    def is_tilt_enabled(self) -> bool: ...
    def correct_posture(self, transform: Transform3D, rotation_mode: PathFollow3D.RotationMode) -> Transform3D: ...

    # Properties
    progress: float
    progress_ratio: float
    h_offset: float
    v_offset: float
    rotation_mode: int
    use_model_front: bool
    cubic_interp: bool
    loop: bool
    tilt_enabled: bool


class PhysicalSkyMaterial(TypeInUse(Material)):
    def __init__(self): ...

    # Methods
    def set_rayleigh_coefficient(self, rayleigh: float) -> None: ...
    def get_rayleigh_coefficient(self) -> float: ...
    def set_rayleigh_color(self, color: Color) -> None: ...
    def get_rayleigh_color(self) -> Color: ...
    def set_mie_coefficient(self, mie: float) -> None: ...
    def get_mie_coefficient(self) -> float: ...
    def set_mie_eccentricity(self, eccentricity: float) -> None: ...
    def get_mie_eccentricity(self) -> float: ...
    def set_mie_color(self, color: Color) -> None: ...
    def get_mie_color(self) -> Color: ...
    def set_turbidity(self, turbidity: float) -> None: ...
    def get_turbidity(self) -> float: ...
    def set_sun_disk_scale(self, scale: float) -> None: ...
    def get_sun_disk_scale(self) -> float: ...
    def set_ground_color(self, color: Color) -> None: ...
    def get_ground_color(self) -> Color: ...
    def set_energy_multiplier(self, multiplier: float) -> None: ...
    def get_energy_multiplier(self) -> float: ...
    def set_use_debanding(self, use_debanding: bool) -> None: ...
    def get_use_debanding(self) -> bool: ...
    def set_night_sky(self, night_sky: Texture2D) -> None: ...
    def get_night_sky(self) -> Texture2D: ...

    # Properties
    rayleigh_coefficient: float
    rayleigh_color: Color
    mie_coefficient: float
    mie_eccentricity: float
    mie_color: Color
    turbidity: float
    sun_disk_scale: float
    ground_color: Color
    energy_multiplier: float
    use_debanding: bool
    night_sky: Texture2D


class PhysicsMaterial(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_friction(self, friction: float) -> None: ...
    def get_friction(self) -> float: ...
    def set_rough(self, rough: bool) -> None: ...
    def is_rough(self) -> bool: ...
    def set_bounce(self, bounce: float) -> None: ...
    def get_bounce(self) -> float: ...
    def set_absorbent(self, absorbent: bool) -> None: ...
    def is_absorbent(self) -> bool: ...

    # Properties
    friction: float
    rough: bool
    bounce: float
    absorbent: bool


class PhysicsPointQueryParameters2D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_position(self, position: Vector2) -> None: ...
    def get_position(self) -> Vector2: ...
    def set_canvas_instance_id(self, canvas_instance_id: int) -> None: ...
    def get_canvas_instance_id(self) -> int: ...
    def set_collision_mask(self, collision_mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_exclude(self, exclude: GDArray) -> None: ...
    def get_exclude(self) -> GDArray: ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...

    # Properties
    position: Vector2
    canvas_instance_id: int
    collision_mask: int
    exclude: GDArray
    collide_with_bodies: bool
    collide_with_areas: bool


class PhysicsPointQueryParameters3D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_position(self, position: Vector3) -> None: ...
    def get_position(self) -> Vector3: ...
    def set_collision_mask(self, collision_mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_exclude(self, exclude: GDArray) -> None: ...
    def get_exclude(self) -> GDArray: ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...

    # Properties
    position: Vector3
    collision_mask: int
    exclude: GDArray
    collide_with_bodies: bool
    collide_with_areas: bool


class PhysicsRayQueryParameters2D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def create(self, from_: Vector2, to: Vector2, collision_mask: int = 4294967295, exclude: GDArray = Array[RID]([])) -> PhysicsRayQueryParameters2D: ...
    def set_from(self, from_: Vector2) -> None: ...
    def get_from(self) -> Vector2: ...
    def set_to(self, to: Vector2) -> None: ...
    def get_to(self) -> Vector2: ...
    def set_collision_mask(self, collision_mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_exclude(self, exclude: GDArray) -> None: ...
    def get_exclude(self) -> GDArray: ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...
    def set_hit_from_inside(self, enable: bool) -> None: ...
    def is_hit_from_inside_enabled(self) -> bool: ...

    # Properties
    from_: Vector2
    to: Vector2
    collision_mask: int
    exclude: GDArray
    collide_with_bodies: bool
    collide_with_areas: bool
    hit_from_inside: bool


class PhysicsRayQueryParameters3D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def create(self, from_: Vector3, to: Vector3, collision_mask: int = 4294967295, exclude: GDArray = Array[RID]([])) -> PhysicsRayQueryParameters3D: ...
    def set_from(self, from_: Vector3) -> None: ...
    def get_from(self) -> Vector3: ...
    def set_to(self, to: Vector3) -> None: ...
    def get_to(self) -> Vector3: ...
    def set_collision_mask(self, collision_mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_exclude(self, exclude: GDArray) -> None: ...
    def get_exclude(self) -> GDArray: ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...
    def set_hit_from_inside(self, enable: bool) -> None: ...
    def is_hit_from_inside_enabled(self) -> bool: ...
    def set_hit_back_faces(self, enable: bool) -> None: ...
    def is_hit_back_faces_enabled(self) -> bool: ...

    # Properties
    from_: Vector3
    to: Vector3
    collision_mask: int
    exclude: GDArray
    collide_with_bodies: bool
    collide_with_areas: bool
    hit_from_inside: bool
    hit_back_faces: bool


class PhysicsShapeQueryParameters2D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_shape(self, shape: Resource) -> None: ...
    def get_shape(self) -> Resource: ...
    def set_shape_rid(self, shape: RID) -> None: ...
    def get_shape_rid(self) -> RID: ...
    def set_transform(self, transform: Transform2D) -> None: ...
    def get_transform(self) -> Transform2D: ...
    def set_motion(self, motion: Vector2) -> None: ...
    def get_motion(self) -> Vector2: ...
    def set_margin(self, margin: float) -> None: ...
    def get_margin(self) -> float: ...
    def set_collision_mask(self, collision_mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_exclude(self, exclude: GDArray) -> None: ...
    def get_exclude(self) -> GDArray: ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...

    # Properties
    collision_mask: int
    exclude: GDArray
    margin: float
    motion: Vector2
    shape: Shape2D
    shape_rid: RID
    transform: Transform2D
    collide_with_bodies: bool
    collide_with_areas: bool


class PhysicsShapeQueryParameters3D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_shape(self, shape: Resource) -> None: ...
    def get_shape(self) -> Resource: ...
    def set_shape_rid(self, shape: RID) -> None: ...
    def get_shape_rid(self) -> RID: ...
    def set_transform(self, transform: Transform3D) -> None: ...
    def get_transform(self) -> Transform3D: ...
    def set_motion(self, motion: Vector3) -> None: ...
    def get_motion(self) -> Vector3: ...
    def set_margin(self, margin: float) -> None: ...
    def get_margin(self) -> float: ...
    def set_collision_mask(self, collision_mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_exclude(self, exclude: GDArray) -> None: ...
    def get_exclude(self) -> GDArray: ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...

    # Properties
    collision_mask: int
    exclude: GDArray
    margin: float
    motion: Vector2
    shape: Shape3D
    shape_rid: RID
    transform: Transform3D
    collide_with_bodies: bool
    collide_with_areas: bool


class PhysicsTestMotionParameters2D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def get_from(self) -> Transform2D: ...
    def set_from(self, from_: Transform2D) -> None: ...
    def get_motion(self) -> Vector2: ...
    def set_motion(self, motion: Vector2) -> None: ...
    def get_margin(self) -> float: ...
    def set_margin(self, margin: float) -> None: ...
    def is_collide_separation_ray_enabled(self) -> bool: ...
    def set_collide_separation_ray_enabled(self, enabled: bool) -> None: ...
    def get_exclude_bodies(self) -> GDArray: ...
    def set_exclude_bodies(self, exclude_list: GDArray) -> None: ...
    def get_exclude_objects(self) -> GDArray: ...
    def set_exclude_objects(self, exclude_list: GDArray) -> None: ...
    def is_recovery_as_collision_enabled(self) -> bool: ...
    def set_recovery_as_collision_enabled(self, enabled: bool) -> None: ...

    # Properties
    from_: Transform2D
    motion: Vector2
    margin: float
    collide_separation_ray: bool
    exclude_bodies: GDArray
    exclude_objects: GDArray
    recovery_as_collision: bool


class PhysicsTestMotionParameters3D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def get_from(self) -> Transform3D: ...
    def set_from(self, from_: Transform3D) -> None: ...
    def get_motion(self) -> Vector3: ...
    def set_motion(self, motion: Vector3) -> None: ...
    def get_margin(self) -> float: ...
    def set_margin(self, margin: float) -> None: ...
    def get_max_collisions(self) -> int: ...
    def set_max_collisions(self, max_collisions: int) -> None: ...
    def is_collide_separation_ray_enabled(self) -> bool: ...
    def set_collide_separation_ray_enabled(self, enabled: bool) -> None: ...
    def get_exclude_bodies(self) -> GDArray: ...
    def set_exclude_bodies(self, exclude_list: GDArray) -> None: ...
    def get_exclude_objects(self) -> GDArray: ...
    def set_exclude_objects(self, exclude_list: GDArray) -> None: ...
    def is_recovery_as_collision_enabled(self) -> bool: ...
    def set_recovery_as_collision_enabled(self, enabled: bool) -> None: ...

    # Properties
    from_: Transform3D
    motion: Vector3
    margin: float
    max_collisions: int
    collide_separation_ray: bool
    exclude_bodies: GDArray
    exclude_objects: GDArray
    recovery_as_collision: bool


class PhysicsTestMotionResult2D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def get_travel(self) -> Vector2: ...
    def get_remainder(self) -> Vector2: ...
    def get_collision_point(self) -> Vector2: ...
    def get_collision_normal(self) -> Vector2: ...
    def get_collider_velocity(self) -> Vector2: ...
    def get_collider_id(self) -> int: ...
    def get_collider_rid(self) -> RID: ...
    def get_collider(self) -> GDObject: ...
    def get_collider_shape(self) -> int: ...
    def get_collision_local_shape(self) -> int: ...
    def get_collision_depth(self) -> float: ...
    def get_collision_safe_fraction(self) -> float: ...
    def get_collision_unsafe_fraction(self) -> float: ...


class PhysicsTestMotionResult3D(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def get_travel(self) -> Vector3: ...
    def get_remainder(self) -> Vector3: ...
    def get_collision_safe_fraction(self) -> float: ...
    def get_collision_unsafe_fraction(self) -> float: ...
    def get_collision_count(self) -> int: ...
    def get_collision_point(self, collision_index: int = 0) -> Vector3: ...
    def get_collision_normal(self, collision_index: int = 0) -> Vector3: ...
    def get_collider_velocity(self, collision_index: int = 0) -> Vector3: ...
    def get_collider_id(self, collision_index: int = 0) -> int: ...
    def get_collider_rid(self, collision_index: int = 0) -> RID: ...
    def get_collider(self, collision_index: int = 0) -> GDObject: ...
    def get_collider_shape(self, collision_index: int = 0) -> int: ...
    def get_collision_local_shape(self, collision_index: int = 0) -> int: ...
    def get_collision_depth(self, collision_index: int = 0) -> float: ...


class PlaceholderMaterial(TypeInUse(Material)):
    def __init__(self): ...


class PlaceholderMesh(TypeInUse(Mesh)):
    def __init__(self): ...

    # Methods
    def set_aabb(self, aabb: AABB) -> None: ...

    # Properties
    aabb: AABB


class PlaceholderTexture2D(TypeInUse(Texture2D)):
    def __init__(self): ...

    # Methods
    def set_size(self, size: Vector2) -> None: ...

    # Properties
    size: Vector2


class PlaceholderTexture3D(TypeInUse(Texture3D)):
    def __init__(self): ...

    # Methods
    def set_size(self, size: Vector3i) -> None: ...
    def get_size(self) -> Vector3i: ...

    # Properties
    size: Vector3i


class PlaceholderTextureLayered(TypeInUse(TextureLayered)):

    # Methods
    def set_size(self, size: Vector2i) -> None: ...
    def get_size(self) -> Vector2i: ...
    def set_layers(self, layers: int) -> None: ...

    # Properties
    size: Vector2i
    layers: int


class PolygonOccluder3D(TypeInUse(Occluder3D)):
    def __init__(self): ...

    # Methods
    def set_polygon(self, polygon: PackedVector2Array) -> None: ...
    def get_polygon(self) -> PackedVector2Array: ...

    # Properties
    polygon: PackedVector2Array


class PolygonPathFinder(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def setup(self, points: PackedVector2Array, connections: PackedInt32Array) -> None: ...
    def find_path(self, from_: Vector2, to: Vector2) -> PackedVector2Array: ...
    def get_intersections(self, from_: Vector2, to: Vector2) -> PackedVector2Array: ...
    def get_closest_point(self, point: Vector2) -> Vector2: ...
    def is_point_inside(self, point: Vector2) -> bool: ...
    def set_point_penalty(self, idx: int, penalty: float) -> None: ...
    def get_point_penalty(self, idx: int) -> float: ...
    def get_bounds(self) -> Rect2: ...

    # Properties
    data: GDDictionary


class PortableCompressedTexture2D(TypeInUse(Texture2D)):
    def __init__(self): ...

    # Enums
    class PortableCompressedTexture2D.CompressionMode(Enum):
        COMPRESSION_MODE_LOSSLESS: int
        COMPRESSION_MODE_LOSSY: int
        COMPRESSION_MODE_BASIS_UNIVERSAL: int
        COMPRESSION_MODE_S3TC: int
        COMPRESSION_MODE_ETC2: int
        COMPRESSION_MODE_BPTC: int

    # Methods
    def create_from_image(self, image: Image, compression_mode: PortableCompressedTexture2D.CompressionMode, normal_map: bool = False, lossy_quality: float = 0.8) -> None: ...
    def get_format(self) -> Image.Format: ...
    def get_compression_mode(self) -> PortableCompressedTexture2D.CompressionMode: ...
    def set_size_override(self, size: Vector2) -> None: ...
    def get_size_override(self) -> Vector2: ...
    def set_keep_compressed_buffer(self, keep: bool) -> None: ...
    def is_keeping_compressed_buffer(self) -> bool: ...
    def set_keep_all_compressed_buffers(self, keep: bool) -> None: ...
    def is_keeping_all_compressed_buffers(self) -> bool: ...

    # Properties
    size_override: Vector2
    keep_compressed_buffer: bool


class PrimitiveMesh(TypeInUse(Mesh)):
    def __init__(self): ...

    # Methods
    def set_material(self, material: Material) -> None: ...
    def get_material(self) -> Material: ...
    def get_mesh_arrays(self) -> GDArray: ...
    def set_custom_aabb(self, aabb: AABB) -> None: ...
    def get_custom_aabb(self) -> AABB: ...
    def set_flip_faces(self, flip_faces: bool) -> None: ...
    def get_flip_faces(self) -> bool: ...
    def set_add_uv2(self, add_uv2: bool) -> None: ...
    def get_add_uv2(self) -> bool: ...
    def set_uv2_padding(self, uv2_padding: float) -> None: ...
    def get_uv2_padding(self) -> float: ...

    # Properties
    material: BaseMaterial3D | ShaderMaterial
    custom_aabb: AABB
    flip_faces: bool
    add_uv2: bool
    uv2_padding: float


class PrismMesh(TypeInUse(PrimitiveMesh)):
    def __init__(self): ...

    # Methods
    def set_left_to_right(self, left_to_right: float) -> None: ...
    def get_left_to_right(self) -> float: ...
    def set_size(self, size: Vector3) -> None: ...
    def get_size(self) -> Vector3: ...
    def set_subdivide_width(self, segments: int) -> None: ...
    def get_subdivide_width(self) -> int: ...
    def set_subdivide_height(self, segments: int) -> None: ...
    def get_subdivide_height(self) -> int: ...
    def set_subdivide_depth(self, segments: int) -> None: ...
    def get_subdivide_depth(self) -> int: ...

    # Properties
    left_to_right: float
    size: Vector3
    subdivide_width: int
    subdivide_height: int
    subdivide_depth: int


class ProceduralSkyMaterial(TypeInUse(Material)):
    def __init__(self): ...

    # Methods
    def set_sky_top_color(self, color: Color) -> None: ...
    def get_sky_top_color(self) -> Color: ...
    def set_sky_horizon_color(self, color: Color) -> None: ...
    def get_sky_horizon_color(self) -> Color: ...
    def set_sky_curve(self, curve: float) -> None: ...
    def get_sky_curve(self) -> float: ...
    def set_sky_energy_multiplier(self, multiplier: float) -> None: ...
    def get_sky_energy_multiplier(self) -> float: ...
    def set_sky_cover(self, sky_cover: Texture2D) -> None: ...
    def get_sky_cover(self) -> Texture2D: ...
    def set_sky_cover_modulate(self, color: Color) -> None: ...
    def get_sky_cover_modulate(self) -> Color: ...
    def set_ground_bottom_color(self, color: Color) -> None: ...
    def get_ground_bottom_color(self) -> Color: ...
    def set_ground_horizon_color(self, color: Color) -> None: ...
    def get_ground_horizon_color(self) -> Color: ...
    def set_ground_curve(self, curve: float) -> None: ...
    def get_ground_curve(self) -> float: ...
    def set_ground_energy_multiplier(self, energy: float) -> None: ...
    def get_ground_energy_multiplier(self) -> float: ...
    def set_sun_angle_max(self, degrees: float) -> None: ...
    def get_sun_angle_max(self) -> float: ...
    def set_sun_curve(self, curve: float) -> None: ...
    def get_sun_curve(self) -> float: ...
    def set_use_debanding(self, use_debanding: bool) -> None: ...
    def get_use_debanding(self) -> bool: ...

    # Properties
    sky_top_color: Color
    sky_horizon_color: Color
    sky_curve: float
    sky_energy_multiplier: float
    sky_cover: Texture2D
    sky_cover_modulate: Color
    ground_bottom_color: Color
    ground_horizon_color: Color
    ground_curve: float
    ground_energy_multiplier: float
    sun_angle_max: float
    sun_curve: float
    use_debanding: bool


class PropertyTweener(TypeInUse(Tweener)):
    def __init__(self): ...

    # Methods
    def from_(self, value: GDAny) -> PropertyTweener: ...
    def from_current(self) -> PropertyTweener: ...
    def as_relative(self) -> PropertyTweener: ...
    def set_trans(self, trans: Tween.TransitionType) -> PropertyTweener: ...
    def set_ease(self, ease: Tween.EaseType) -> PropertyTweener: ...
    def set_delay(self, delay: float) -> PropertyTweener: ...


class QuadOccluder3D(TypeInUse(Occluder3D)):
    def __init__(self): ...

    # Methods
    def set_size(self, size: Vector2) -> None: ...
    def get_size(self) -> Vector2: ...

    # Properties
    size: Vector2


class RDAttachmentFormat(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_format(self, p_member: RenderingDevice.DataFormat) -> None: ...
    def get_format(self) -> RenderingDevice.DataFormat: ...
    def set_samples(self, p_member: RenderingDevice.TextureSamples) -> None: ...
    def get_samples(self) -> RenderingDevice.TextureSamples: ...
    def set_usage_flags(self, p_member: int) -> None: ...
    def get_usage_flags(self) -> int: ...

    # Properties
    format: int
    samples: int
    usage_flags: int


class RDFramebufferPass(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_color_attachments(self, p_member: PackedInt32Array) -> None: ...
    def get_color_attachments(self) -> PackedInt32Array: ...
    def set_input_attachments(self, p_member: PackedInt32Array) -> None: ...
    def get_input_attachments(self) -> PackedInt32Array: ...
    def set_resolve_attachments(self, p_member: PackedInt32Array) -> None: ...
    def get_resolve_attachments(self) -> PackedInt32Array: ...
    def set_preserve_attachments(self, p_member: PackedInt32Array) -> None: ...
    def get_preserve_attachments(self) -> PackedInt32Array: ...
    def set_depth_attachment(self, p_member: int) -> None: ...
    def get_depth_attachment(self) -> int: ...

    # Properties
    color_attachments: PackedInt32Array
    input_attachments: PackedInt32Array
    resolve_attachments: PackedInt32Array
    preserve_attachments: PackedInt32Array
    depth_attachment: int

    # Constants
    ATTACHMENT_UNUSED: int


class RDPipelineColorBlendState(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_enable_logic_op(self, p_member: bool) -> None: ...
    def get_enable_logic_op(self) -> bool: ...
    def set_logic_op(self, p_member: RenderingDevice.LogicOperation) -> None: ...
    def get_logic_op(self) -> RenderingDevice.LogicOperation: ...
    def set_blend_constant(self, p_member: Color) -> None: ...
    def get_blend_constant(self) -> Color: ...
    def set_attachments(self, attachments: GDArray) -> None: ...
    def get_attachments(self) -> GDArray: ...

    # Properties
    enable_logic_op: bool
    logic_op: int
    blend_constant: Color
    attachments: GDArray


class RDPipelineColorBlendStateAttachment(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_as_mix(self) -> None: ...
    def set_enable_blend(self, p_member: bool) -> None: ...
    def get_enable_blend(self) -> bool: ...
    def set_src_color_blend_factor(self, p_member: RenderingDevice.BlendFactor) -> None: ...
    def get_src_color_blend_factor(self) -> RenderingDevice.BlendFactor: ...
    def set_dst_color_blend_factor(self, p_member: RenderingDevice.BlendFactor) -> None: ...
    def get_dst_color_blend_factor(self) -> RenderingDevice.BlendFactor: ...
    def set_color_blend_op(self, p_member: RenderingDevice.BlendOperation) -> None: ...
    def get_color_blend_op(self) -> RenderingDevice.BlendOperation: ...
    def set_src_alpha_blend_factor(self, p_member: RenderingDevice.BlendFactor) -> None: ...
    def get_src_alpha_blend_factor(self) -> RenderingDevice.BlendFactor: ...
    def set_dst_alpha_blend_factor(self, p_member: RenderingDevice.BlendFactor) -> None: ...
    def get_dst_alpha_blend_factor(self) -> RenderingDevice.BlendFactor: ...
    def set_alpha_blend_op(self, p_member: RenderingDevice.BlendOperation) -> None: ...
    def get_alpha_blend_op(self) -> RenderingDevice.BlendOperation: ...
    def set_write_r(self, p_member: bool) -> None: ...
    def get_write_r(self) -> bool: ...
    def set_write_g(self, p_member: bool) -> None: ...
    def get_write_g(self) -> bool: ...
    def set_write_b(self, p_member: bool) -> None: ...
    def get_write_b(self) -> bool: ...
    def set_write_a(self, p_member: bool) -> None: ...
    def get_write_a(self) -> bool: ...

    # Properties
    enable_blend: bool
    src_color_blend_factor: int
    dst_color_blend_factor: int
    color_blend_op: int
    src_alpha_blend_factor: int
    dst_alpha_blend_factor: int
    alpha_blend_op: int
    write_r: bool
    write_g: bool
    write_b: bool
    write_a: bool


class RDPipelineDepthStencilState(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_enable_depth_test(self, p_member: bool) -> None: ...
    def get_enable_depth_test(self) -> bool: ...
    def set_enable_depth_write(self, p_member: bool) -> None: ...
    def get_enable_depth_write(self) -> bool: ...
    def set_depth_compare_operator(self, p_member: RenderingDevice.CompareOperator) -> None: ...
    def get_depth_compare_operator(self) -> RenderingDevice.CompareOperator: ...
    def set_enable_depth_range(self, p_member: bool) -> None: ...
    def get_enable_depth_range(self) -> bool: ...
    def set_depth_range_min(self, p_member: float) -> None: ...
    def get_depth_range_min(self) -> float: ...
    def set_depth_range_max(self, p_member: float) -> None: ...
    def get_depth_range_max(self) -> float: ...
    def set_enable_stencil(self, p_member: bool) -> None: ...
    def get_enable_stencil(self) -> bool: ...
    def set_front_op_fail(self, p_member: RenderingDevice.StencilOperation) -> None: ...
    def get_front_op_fail(self) -> RenderingDevice.StencilOperation: ...
    def set_front_op_pass(self, p_member: RenderingDevice.StencilOperation) -> None: ...
    def get_front_op_pass(self) -> RenderingDevice.StencilOperation: ...
    def set_front_op_depth_fail(self, p_member: RenderingDevice.StencilOperation) -> None: ...
    def get_front_op_depth_fail(self) -> RenderingDevice.StencilOperation: ...
    def set_front_op_compare(self, p_member: RenderingDevice.CompareOperator) -> None: ...
    def get_front_op_compare(self) -> RenderingDevice.CompareOperator: ...
    def set_front_op_compare_mask(self, p_member: int) -> None: ...
    def get_front_op_compare_mask(self) -> int: ...
    def set_front_op_write_mask(self, p_member: int) -> None: ...
    def get_front_op_write_mask(self) -> int: ...
    def set_front_op_reference(self, p_member: int) -> None: ...
    def get_front_op_reference(self) -> int: ...
    def set_back_op_fail(self, p_member: RenderingDevice.StencilOperation) -> None: ...
    def get_back_op_fail(self) -> RenderingDevice.StencilOperation: ...
    def set_back_op_pass(self, p_member: RenderingDevice.StencilOperation) -> None: ...
    def get_back_op_pass(self) -> RenderingDevice.StencilOperation: ...
    def set_back_op_depth_fail(self, p_member: RenderingDevice.StencilOperation) -> None: ...
    def get_back_op_depth_fail(self) -> RenderingDevice.StencilOperation: ...
    def set_back_op_compare(self, p_member: RenderingDevice.CompareOperator) -> None: ...
    def get_back_op_compare(self) -> RenderingDevice.CompareOperator: ...
    def set_back_op_compare_mask(self, p_member: int) -> None: ...
    def get_back_op_compare_mask(self) -> int: ...
    def set_back_op_write_mask(self, p_member: int) -> None: ...
    def get_back_op_write_mask(self) -> int: ...
    def set_back_op_reference(self, p_member: int) -> None: ...
    def get_back_op_reference(self) -> int: ...

    # Properties
    enable_depth_test: bool
    enable_depth_write: bool
    depth_compare_operator: int
    enable_depth_range: bool
    depth_range_min: float
    depth_range_max: float
    enable_stencil: bool
    front_op_fail: int
    front_op_pass: int
    front_op_depth_fail: int
    front_op_compare: int
    front_op_compare_mask: int
    front_op_write_mask: int
    front_op_reference: int
    back_op_fail: int
    back_op_pass: int
    back_op_depth_fail: int
    back_op_compare: int
    back_op_compare_mask: int
    back_op_write_mask: int
    back_op_reference: int


class RDPipelineMultisampleState(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_sample_count(self, p_member: RenderingDevice.TextureSamples) -> None: ...
    def get_sample_count(self) -> RenderingDevice.TextureSamples: ...
    def set_enable_sample_shading(self, p_member: bool) -> None: ...
    def get_enable_sample_shading(self) -> bool: ...
    def set_min_sample_shading(self, p_member: float) -> None: ...
    def get_min_sample_shading(self) -> float: ...
    def set_enable_alpha_to_coverage(self, p_member: bool) -> None: ...
    def get_enable_alpha_to_coverage(self) -> bool: ...
    def set_enable_alpha_to_one(self, p_member: bool) -> None: ...
    def get_enable_alpha_to_one(self) -> bool: ...
    def set_sample_masks(self, masks: GDArray) -> None: ...
    def get_sample_masks(self) -> GDArray: ...

    # Properties
    sample_count: int
    enable_sample_shading: bool
    min_sample_shading: float
    enable_alpha_to_coverage: bool
    enable_alpha_to_one: bool
    sample_masks: GDArray


class RDPipelineRasterizationState(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_enable_depth_clamp(self, p_member: bool) -> None: ...
    def get_enable_depth_clamp(self) -> bool: ...
    def set_discard_primitives(self, p_member: bool) -> None: ...
    def get_discard_primitives(self) -> bool: ...
    def set_wireframe(self, p_member: bool) -> None: ...
    def get_wireframe(self) -> bool: ...
    def set_cull_mode(self, p_member: RenderingDevice.PolygonCullMode) -> None: ...
    def get_cull_mode(self) -> RenderingDevice.PolygonCullMode: ...
    def set_front_face(self, p_member: RenderingDevice.PolygonFrontFace) -> None: ...
    def get_front_face(self) -> RenderingDevice.PolygonFrontFace: ...
    def set_depth_bias_enabled(self, p_member: bool) -> None: ...
    def get_depth_bias_enabled(self) -> bool: ...
    def set_depth_bias_constant_factor(self, p_member: float) -> None: ...
    def get_depth_bias_constant_factor(self) -> float: ...
    def set_depth_bias_clamp(self, p_member: float) -> None: ...
    def get_depth_bias_clamp(self) -> float: ...
    def set_depth_bias_slope_factor(self, p_member: float) -> None: ...
    def get_depth_bias_slope_factor(self) -> float: ...
    def set_line_width(self, p_member: float) -> None: ...
    def get_line_width(self) -> float: ...
    def set_patch_control_points(self, p_member: int) -> None: ...
    def get_patch_control_points(self) -> int: ...

    # Properties
    enable_depth_clamp: bool
    discard_primitives: bool
    wireframe: bool
    cull_mode: int
    front_face: int
    depth_bias_enabled: bool
    depth_bias_constant_factor: float
    depth_bias_clamp: float
    depth_bias_slope_factor: float
    line_width: float
    patch_control_points: int


class RDPipelineSpecializationConstant(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_value(self, value: GDAny) -> None: ...
    def get_value(self) -> GDAny: ...
    def set_constant_id(self, constant_id: int) -> None: ...
    def get_constant_id(self) -> int: ...

    # Properties
    value: GDAny
    constant_id: int


class RDSamplerState(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_mag_filter(self, p_member: RenderingDevice.SamplerFilter) -> None: ...
    def get_mag_filter(self) -> RenderingDevice.SamplerFilter: ...
    def set_min_filter(self, p_member: RenderingDevice.SamplerFilter) -> None: ...
    def get_min_filter(self) -> RenderingDevice.SamplerFilter: ...
    def set_mip_filter(self, p_member: RenderingDevice.SamplerFilter) -> None: ...
    def get_mip_filter(self) -> RenderingDevice.SamplerFilter: ...
    def set_repeat_u(self, p_member: RenderingDevice.SamplerRepeatMode) -> None: ...
    def get_repeat_u(self) -> RenderingDevice.SamplerRepeatMode: ...
    def set_repeat_v(self, p_member: RenderingDevice.SamplerRepeatMode) -> None: ...
    def get_repeat_v(self) -> RenderingDevice.SamplerRepeatMode: ...
    def set_repeat_w(self, p_member: RenderingDevice.SamplerRepeatMode) -> None: ...
    def get_repeat_w(self) -> RenderingDevice.SamplerRepeatMode: ...
    def set_lod_bias(self, p_member: float) -> None: ...
    def get_lod_bias(self) -> float: ...
    def set_use_anisotropy(self, p_member: bool) -> None: ...
    def get_use_anisotropy(self) -> bool: ...
    def set_anisotropy_max(self, p_member: float) -> None: ...
    def get_anisotropy_max(self) -> float: ...
    def set_enable_compare(self, p_member: bool) -> None: ...
    def get_enable_compare(self) -> bool: ...
    def set_compare_op(self, p_member: RenderingDevice.CompareOperator) -> None: ...
    def get_compare_op(self) -> RenderingDevice.CompareOperator: ...
    def set_min_lod(self, p_member: float) -> None: ...
    def get_min_lod(self) -> float: ...
    def set_max_lod(self, p_member: float) -> None: ...
    def get_max_lod(self) -> float: ...
    def set_border_color(self, p_member: RenderingDevice.SamplerBorderColor) -> None: ...
    def get_border_color(self) -> RenderingDevice.SamplerBorderColor: ...
    def set_unnormalized_uvw(self, p_member: bool) -> None: ...
    def get_unnormalized_uvw(self) -> bool: ...

    # Properties
    mag_filter: int
    min_filter: int
    mip_filter: int
    repeat_u: int
    repeat_v: int
    repeat_w: int
    lod_bias: float
    use_anisotropy: bool
    anisotropy_max: float
    enable_compare: bool
    compare_op: int
    min_lod: float
    max_lod: float
    border_color: int
    unnormalized_uvw: bool


class RDShaderFile(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_bytecode(self, bytecode: RDShaderSPIRV, version: StringName | str = "") -> None: ...
    def get_spirv(self, version: StringName | str = "") -> RDShaderSPIRV: ...
    def get_version_list(self) -> GDArray: ...
    def set_base_error(self, error: GDString | str) -> None: ...
    def get_base_error(self) -> GDString: ...

    # Properties
    base_error: GDString


class RDShaderSPIRV(TypeInUse(Resource)):
    def __init__(self): ...

    # Methods
    def set_stage_bytecode(self, stage: RenderingDevice.ShaderStage, bytecode: PackedByteArray) -> None: ...
    def get_stage_bytecode(self, stage: RenderingDevice.ShaderStage) -> PackedByteArray: ...
    def set_stage_compile_error(self, stage: RenderingDevice.ShaderStage, compile_error: GDString | str) -> None: ...
    def get_stage_compile_error(self, stage: RenderingDevice.ShaderStage) -> GDString: ...

    # Properties
    bytecode_vertex: PackedByteArray
    bytecode_fragment: PackedByteArray
    bytecode_tesselation_control: PackedByteArray
    bytecode_tesselation_evaluation: PackedByteArray
    bytecode_compute: PackedByteArray
    compile_error_vertex: GDString
    compile_error_fragment: GDString
    compile_error_tesselation_control: GDString
    compile_error_tesselation_evaluation: GDString
    compile_error_compute: GDString


class RDShaderSource(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_stage_source(self, stage: RenderingDevice.ShaderStage, source: GDString | str) -> None: ...
    def get_stage_source(self, stage: RenderingDevice.ShaderStage) -> GDString: ...
    def set_language(self, language: RenderingDevice.ShaderLanguage) -> None: ...
    def get_language(self) -> RenderingDevice.ShaderLanguage: ...

    # Properties
    source_vertex: GDString
    source_fragment: GDString
    source_tesselation_control: GDString
    source_tesselation_evaluation: GDString
    source_compute: GDString
    language: int


class RDTextureFormat(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_format(self, p_member: RenderingDevice.DataFormat) -> None: ...
    def get_format(self) -> RenderingDevice.DataFormat: ...
    def set_width(self, p_member: int) -> None: ...
    def get_width(self) -> int: ...
    def set_height(self, p_member: int) -> None: ...
    def get_height(self) -> int: ...
    def set_depth(self, p_member: int) -> None: ...
    def get_depth(self) -> int: ...
    def set_array_layers(self, p_member: int) -> None: ...
    def get_array_layers(self) -> int: ...
    def set_mipmaps(self, p_member: int) -> None: ...
    def get_mipmaps(self) -> int: ...
    def set_texture_type(self, p_member: RenderingDevice.TextureType) -> None: ...
    def get_texture_type(self) -> RenderingDevice.TextureType: ...
    def set_samples(self, p_member: RenderingDevice.TextureSamples) -> None: ...
    def get_samples(self) -> RenderingDevice.TextureSamples: ...
    def set_usage_bits(self, p_member: RenderingDevice.TextureUsageBits) -> None: ...
    def get_usage_bits(self) -> RenderingDevice.TextureUsageBits: ...
    def add_shareable_format(self, format: RenderingDevice.DataFormat) -> None: ...
    def remove_shareable_format(self, format: RenderingDevice.DataFormat) -> None: ...

    # Properties
    format: int
    width: int
    height: int
    depth: int
    array_layers: int
    mipmaps: int
    texture_type: int
    samples: int
    usage_bits: int


class RDTextureView(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_format_override(self, p_member: RenderingDevice.DataFormat) -> None: ...
    def get_format_override(self) -> RenderingDevice.DataFormat: ...
    def set_swizzle_r(self, p_member: RenderingDevice.TextureSwizzle) -> None: ...
    def get_swizzle_r(self) -> RenderingDevice.TextureSwizzle: ...
    def set_swizzle_g(self, p_member: RenderingDevice.TextureSwizzle) -> None: ...
    def get_swizzle_g(self) -> RenderingDevice.TextureSwizzle: ...
    def set_swizzle_b(self, p_member: RenderingDevice.TextureSwizzle) -> None: ...
    def get_swizzle_b(self) -> RenderingDevice.TextureSwizzle: ...
    def set_swizzle_a(self, p_member: RenderingDevice.TextureSwizzle) -> None: ...
    def get_swizzle_a(self) -> RenderingDevice.TextureSwizzle: ...

    # Properties
    format_override: int
    swizzle_r: int
    swizzle_g: int
    swizzle_b: int
    swizzle_a: int


class RDUniform(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_uniform_type(self, p_member: RenderingDevice.UniformType) -> None: ...
    def get_uniform_type(self) -> RenderingDevice.UniformType: ...
    def set_binding(self, p_member: int) -> None: ...
    def get_binding(self) -> int: ...
    def add_id(self, id: RID) -> None: ...
    def clear_ids(self) -> None: ...
    def get_ids(self) -> GDArray: ...

    # Properties
    uniform_type: int
    binding: int


class RDVertexAttribute(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_location(self, p_member: int) -> None: ...
    def get_location(self) -> int: ...
    def set_offset(self, p_member: int) -> None: ...
    def get_offset(self) -> int: ...
    def set_format(self, p_member: RenderingDevice.DataFormat) -> None: ...
    def get_format(self) -> RenderingDevice.DataFormat: ...
    def set_stride(self, p_member: int) -> None: ...
    def get_stride(self) -> int: ...
    def set_frequency(self, p_member: RenderingDevice.VertexFrequency) -> None: ...
    def get_frequency(self) -> RenderingDevice.VertexFrequency: ...

    # Properties
    location: int
    offset: int
    format: int
    stride: int
    frequency: int


class RandomNumberGenerator(TypeInUse(RefCounted)):
    def __init__(self): ...

    # Methods
    def set_seed(self, seed: int) -> None: ...
    def get_seed(self) -> int: ...
    def set_state(self, state: int) -> None: ...
    def get_state(self) -> int: ...
    def randi(self) -> int: ...
    def randf(self) -> float: ...
    def randfn(self, mean: float = 0.0, deviation: float = 1.0) -> float: ...
    def randf_range(self, from_: float, to: float) -> float: ...
    def randi_range(self, from_: int, to: int) -> int: ...
    def randomize(self) -> None: ...

    # Properties
    seed: int
    state: int


class RayCast3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> RayCast3D: ...

    # Methods
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_target_position(self, local_point: Vector3) -> None: ...
    def get_target_position(self) -> Vector3: ...
    def is_colliding(self) -> bool: ...
    def force_raycast_update(self) -> None: ...
    def get_collider(self) -> GDObject: ...
    def get_collider_rid(self) -> RID: ...
    def get_collider_shape(self) -> int: ...
    def get_collision_point(self) -> Vector3: ...
    def get_collision_normal(self) -> Vector3: ...
    def add_exception_rid(self, rid: RID) -> None: ...
    def add_exception(self, node: CollisionObject3D) -> None: ...
    def remove_exception_rid(self, rid: RID) -> None: ...
    def remove_exception(self, node: CollisionObject3D) -> None: ...
    def clear_exceptions(self) -> None: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_exclude_parent_body(self, mask: bool) -> None: ...
    def get_exclude_parent_body(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def set_hit_from_inside(self, enable: bool) -> None: ...
    def is_hit_from_inside_enabled(self) -> bool: ...
    def set_debug_shape_custom_color(self, debug_shape_custom_color: Color) -> None: ...
    def get_debug_shape_custom_color(self) -> Color: ...
    def set_debug_shape_thickness(self, debug_shape_thickness: int) -> None: ...
    def get_debug_shape_thickness(self) -> int: ...

    # Properties
    enabled: bool
    exclude_parent: bool
    target_position: Vector3
    collision_mask: int
    hit_from_inside: bool
    collide_with_areas: bool
    collide_with_bodies: bool
    debug_shape_custom_color: Color
    debug_shape_thickness: int


class RectangleShape2D(TypeInUse(Shape2D)):
    def __init__(self): ...

    # Methods
    def set_size(self, size: Vector2) -> None: ...
    def get_size(self) -> Vector2: ...

    # Properties
    size: Vector2


class RemoteTransform3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> RemoteTransform3D: ...

    # Methods
    def set_remote_node(self, path: NodePath | str) -> None: ...
    def get_remote_node(self) -> NodePath: ...
    def force_update_cache(self) -> None: ...
    def set_use_global_coordinates(self, use_global_coordinates: bool) -> None: ...
    def get_use_global_coordinates(self) -> bool: ...
    def set_update_position(self, update_remote_position: bool) -> None: ...
    def get_update_position(self) -> bool: ...
    def set_update_rotation(self, update_remote_rotation: bool) -> None: ...
    def get_update_rotation(self) -> bool: ...
    def set_update_scale(self, update_remote_scale: bool) -> None: ...
    def get_update_scale(self) -> bool: ...

    # Properties
    remote_path: NodePath
    use_global_coordinates: bool
    update_position: bool
    update_rotation: bool
    update_scale: bool


class ResourceFormatImporterSaver(TypeInUse(ResourceFormatSaver)):
    pass


class ResourcePreloader(TypeInUse(Node)):
    @classmethod
    def new(cls) -> ResourcePreloader: ...

    # Methods
    def add_resource(self, name: StringName | str, resource: Resource) -> None: ...
    def remove_resource(self, name: StringName | str) -> None: ...
    def rename_resource(self, name: StringName | str, newname: StringName | str) -> None: ...
    def has_resource(self, name: StringName | str) -> bool: ...
    def get_resource(self, name: StringName | str) -> Resource: ...
    def get_resource_list(self) -> PackedStringArray: ...

    # Properties
    resources: GDArray


class RibbonTrailMesh(TypeInUse(PrimitiveMesh)):
    def __init__(self): ...

    # Enums
    class RibbonTrailMesh.Shape(Enum):
        SHAPE_FLAT: int
        SHAPE_CROSS: int

    # Methods
    def set_size(self, size: float) -> None: ...
    def get_size(self) -> float: ...
    def set_sections(self, sections: int) -> None: ...
    def get_sections(self) -> int: ...
    def set_section_length(self, section_length: float) -> None: ...
    def get_section_length(self) -> float: ...
    def set_section_segments(self, section_segments: int) -> None: ...
    def get_section_segments(self) -> int: ...
    def set_curve(self, curve: Curve) -> None: ...
    def get_curve(self) -> Curve: ...
    def set_shape(self, shape: RibbonTrailMesh.Shape) -> None: ...
    def get_shape(self) -> RibbonTrailMesh.Shape: ...

    # Properties
    shape: int
    size: float
    sections: int
    section_length: float
    section_segments: int
    curve: Curve


class SceneMultiplayer(TypeInUse(MultiplayerAPI)):
    def __init__(self): ...

    # Methods
    def set_root_path(self, path: NodePath | str) -> None: ...
    def get_root_path(self) -> NodePath: ...
    def clear(self) -> None: ...
    def disconnect_peer(self, id: int) -> None: ...
    def get_authenticating_peers(self) -> PackedInt32Array: ...
    def send_auth(self, id: int, data: PackedByteArray) -> Error: ...
    def complete_auth(self, id: int) -> Error: ...
    def set_auth_callback(self, callback: GDCallable) -> None: ...
    def get_auth_callback(self) -> GDCallable: ...
    def set_auth_timeout(self, timeout: float) -> None: ...
    def get_auth_timeout(self) -> float: ...
    def set_refuse_new_connections(self, refuse: bool) -> None: ...
    def is_refusing_new_connections(self) -> bool: ...
    def set_allow_object_decoding(self, enable: bool) -> None: ...
    def is_object_decoding_allowed(self) -> bool: ...
    def set_server_relay_enabled(self, enabled: bool) -> None: ...
    def is_server_relay_enabled(self) -> bool: ...
    def send_bytes(self, bytes: PackedByteArray, id: int = 0, mode: MultiplayerPeer.TransferMode = 2, channel: int = 0) -> Error: ...
    def get_max_sync_packet_size(self) -> int: ...
    def set_max_sync_packet_size(self, size: int) -> None: ...
    def get_max_delta_packet_size(self) -> int: ...
    def set_max_delta_packet_size(self, size: int) -> None: ...

    # Signals
    def peer_authenticating(self, id: int) -> None: ...
    def peer_authentication_failed(self, id: int) -> None: ...
    def peer_packet(self, id: int, packet: PackedByteArray) -> None: ...

    # Properties
    root_path: NodePath
    auth_callback: GDCallable
    auth_timeout: float
    allow_object_decoding: bool
    refuse_new_connections: bool
    server_relay: bool
    max_sync_packet_size: int
    max_delta_packet_size: int


class SceneTree(TypeInUse(MainLoop)):
    @classmethod
    def new(cls) -> SceneTree: ...

    # Enums
    class SceneTree.GroupCallFlags(Enum):
        GROUP_CALL_DEFAULT: int
        GROUP_CALL_REVERSE: int
        GROUP_CALL_DEFERRED: int
        GROUP_CALL_UNIQUE: int

    # Methods
    def get_root(self) -> Window: ...
    def has_group(self, name: StringName | str) -> bool: ...
    def is_auto_accept_quit(self) -> bool: ...
    def set_auto_accept_quit(self, enabled: bool) -> None: ...
    def is_quit_on_go_back(self) -> bool: ...
    def set_quit_on_go_back(self, enabled: bool) -> None: ...
    def set_debug_collisions_hint(self, enable: bool) -> None: ...
    def is_debugging_collisions_hint(self) -> bool: ...
    def set_debug_paths_hint(self, enable: bool) -> None: ...
    def is_debugging_paths_hint(self) -> bool: ...
    def set_debug_navigation_hint(self, enable: bool) -> None: ...
    def is_debugging_navigation_hint(self) -> bool: ...
    def set_edited_scene_root(self, scene: Node) -> None: ...
    def get_edited_scene_root(self) -> Node: ...
    def set_pause(self, enable: bool) -> None: ...
    def is_paused(self) -> bool: ...
    def create_timer(self, time_sec: float, process_always: bool = True, process_in_physics: bool = False, ignore_time_scale: bool = False) -> SceneTreeTimer: ...
    def create_tween(self) -> Tween: ...
    def get_processed_tweens(self) -> GDArray: ...
    def get_node_count(self) -> int: ...
    def get_frame(self) -> int: ...
    def quit(self, exit_code: int = 0) -> None: ...
    def queue_delete(self, obj: GDObject) -> None: ...
    def call_group_flags(self, flags: int, group: StringName | str, method: StringName | str) -> None: ...
    def notify_group_flags(self, call_flags: int, group: StringName | str, notification: int) -> None: ...
    def set_group_flags(self, call_flags: int, group: StringName | str, property: GDString | str, value: GDAny) -> None: ...
    def call_group(self, group: StringName | str, method: StringName | str) -> None: ...
    def notify_group(self, group: StringName | str, notification: int) -> None: ...
    def set_group(self, group: StringName | str, property: GDString | str, value: GDAny) -> None: ...
    def get_nodes_in_group(self, group: StringName | str) -> GDArray: ...
    def get_first_node_in_group(self, group: StringName | str) -> Node: ...
    def set_current_scene(self, child_node: Node) -> None: ...
    def get_current_scene(self) -> Node: ...
    def change_scene_to_file(self, path: GDString | str) -> Error: ...
    def change_scene_to_packed(self, packed_scene: PackedScene) -> Error: ...
    def reload_current_scene(self) -> Error: ...
    def unload_current_scene(self) -> None: ...
    def set_multiplayer(self, multiplayer: MultiplayerAPI, root_path: NodePath | str = NodePath("")) -> None: ...
    def get_multiplayer(self, for_path: NodePath | str = NodePath("")) -> MultiplayerAPI: ...
    def set_multiplayer_poll_enabled(self, enabled: bool) -> None: ...
    def is_multiplayer_poll_enabled(self) -> bool: ...

    # Signals
    def tree_changed(self) -> None: ...
    def tree_process_mode_changed(self) -> None: ...
    def node_added(self, node: Node) -> None: ...
    def node_removed(self, node: Node) -> None: ...
    def node_renamed(self, node: Node) -> None: ...
    def node_configuration_warning_changed(self, node: Node) -> None: ...
    def process_frame(self) -> None: ...
    def physics_frame(self) -> None: ...

    # Properties
    auto_accept_quit: bool
    quit_on_go_back: bool
    debug_collisions_hint: bool
    debug_paths_hint: bool
    debug_navigation_hint: bool
    paused: bool
    edited_scene_root: Node
    current_scene: Node
    root: Node
    multiplayer_poll: bool


class SegmentShape2D(TypeInUse(Shape2D)):
    def __init__(self): ...

    # Methods
    def set_a(self, a: Vector2) -> None: ...
    def get_a(self) -> Vector2: ...
    def set_b(self, b: Vector2) -> None: ...
    def get_b(self) -> Vector2: ...

    # Properties
    a: Vector2
    b: Vector2


class SeparationRayShape2D(TypeInUse(Shape2D)):
    def __init__(self): ...

    # Methods
    def set_length(self, length: float) -> None: ...
    def get_length(self) -> float: ...
    def set_slide_on_slope(self, active: bool) -> None: ...
    def get_slide_on_slope(self) -> bool: ...

    # Properties
    length: float
    slide_on_slope: bool


class SeparationRayShape3D(TypeInUse(Shape3D)):
    def __init__(self): ...

    # Methods
    def set_length(self, length: float) -> None: ...
    def get_length(self) -> float: ...
    def set_slide_on_slope(self, active: bool) -> None: ...
    def get_slide_on_slope(self) -> bool: ...

    # Properties
    length: float
    slide_on_slope: bool


class ShaderGlobalsOverride(TypeInUse(Node)):
    @classmethod
    def new(cls) -> ShaderGlobalsOverride: ...


class ShaderMaterial(TypeInUse(Material)):
    def __init__(self): ...

    # Methods
    def set_shader(self, shader: Shader) -> None: ...
    def get_shader(self) -> Shader: ...
    def set_shader_parameter(self, param: StringName | str, value: GDAny) -> None: ...
    def get_shader_parameter(self, param: StringName | str) -> GDAny: ...

    # Properties
    shader: Shader


class ShapeCast3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> ShapeCast3D: ...

    # Methods
    def resource_changed(self, resource: Resource) -> None: ...
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_shape(self, shape: Shape3D) -> None: ...
    def get_shape(self) -> Shape3D: ...
    def set_target_position(self, local_point: Vector3) -> None: ...
    def get_target_position(self) -> Vector3: ...
    def set_margin(self, margin: float) -> None: ...
    def get_margin(self) -> float: ...
    def set_max_results(self, max_results: int) -> None: ...
    def get_max_results(self) -> int: ...
    def is_colliding(self) -> bool: ...
    def get_collision_count(self) -> int: ...
    def force_shapecast_update(self) -> None: ...
    def get_collider(self, index: int) -> GDObject: ...
    def get_collider_rid(self, index: int) -> RID: ...
    def get_collider_shape(self, index: int) -> int: ...
    def get_collision_point(self, index: int) -> Vector3: ...
    def get_collision_normal(self, index: int) -> Vector3: ...
    def get_closest_collision_safe_fraction(self) -> float: ...
    def get_closest_collision_unsafe_fraction(self) -> float: ...
    def add_exception_rid(self, rid: RID) -> None: ...
    def add_exception(self, node: CollisionObject3D) -> None: ...
    def remove_exception_rid(self, rid: RID) -> None: ...
    def remove_exception(self, node: CollisionObject3D) -> None: ...
    def clear_exceptions(self) -> None: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_exclude_parent_body(self, mask: bool) -> None: ...
    def get_exclude_parent_body(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def set_debug_shape_custom_color(self, debug_shape_custom_color: Color) -> None: ...
    def get_debug_shape_custom_color(self) -> Color: ...

    # Properties
    enabled: bool
    shape: Shape3D
    exclude_parent: bool
    target_position: Vector3
    margin: float
    max_results: int
    collision_mask: int
    collision_result: GDArray
    collide_with_areas: bool
    collide_with_bodies: bool
    debug_shape_custom_color: Color


class Skeleton3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> Skeleton3D: ...

    # Methods
    def add_bone(self, name: GDString | str) -> None: ...
    def find_bone(self, name: GDString | str) -> int: ...
    def get_bone_name(self, bone_idx: int) -> GDString: ...
    def set_bone_name(self, bone_idx: int, name: GDString | str) -> None: ...
    def get_bone_parent(self, bone_idx: int) -> int: ...
    def set_bone_parent(self, bone_idx: int, parent_idx: int) -> None: ...
    def get_bone_count(self) -> int: ...
    def get_version(self) -> int: ...
    def unparent_bone_and_rest(self, bone_idx: int) -> None: ...
    def get_bone_children(self, bone_idx: int) -> PackedInt32Array: ...
    def get_parentless_bones(self) -> PackedInt32Array: ...
    def get_bone_rest(self, bone_idx: int) -> Transform3D: ...
    def set_bone_rest(self, bone_idx: int, rest: Transform3D) -> None: ...
    def get_bone_global_rest(self, bone_idx: int) -> Transform3D: ...
    def create_skin_from_rest_transforms(self) -> Skin: ...
    def register_skin(self, skin: Skin) -> SkinReference: ...
    def localize_rests(self) -> None: ...
    def clear_bones(self) -> None: ...
    def get_bone_pose(self, bone_idx: int) -> Transform3D: ...
    def set_bone_pose_position(self, bone_idx: int, position: Vector3) -> None: ...
    def set_bone_pose_rotation(self, bone_idx: int, rotation: Quaternion) -> None: ...
    def set_bone_pose_scale(self, bone_idx: int, scale: Vector3) -> None: ...
    def get_bone_pose_position(self, bone_idx: int) -> Vector3: ...
    def get_bone_pose_rotation(self, bone_idx: int) -> Quaternion: ...
    def get_bone_pose_scale(self, bone_idx: int) -> Vector3: ...
    def reset_bone_pose(self, bone_idx: int) -> None: ...
    def reset_bone_poses(self) -> None: ...
    def is_bone_enabled(self, bone_idx: int) -> bool: ...
    def set_bone_enabled(self, bone_idx: int, enabled: bool = True) -> None: ...
    def clear_bones_global_pose_override(self) -> None: ...
    def set_bone_global_pose_override(self, bone_idx: int, pose: Transform3D, amount: float, persistent: bool = False) -> None: ...
    def get_bone_global_pose_override(self, bone_idx: int) -> Transform3D: ...
    def get_bone_global_pose(self, bone_idx: int) -> Transform3D: ...
    def get_bone_global_pose_no_override(self, bone_idx: int) -> Transform3D: ...
    def force_update_all_bone_transforms(self) -> None: ...
    def force_update_bone_child_transform(self, bone_idx: int) -> None: ...
    def set_motion_scale(self, motion_scale: float) -> None: ...
    def get_motion_scale(self) -> float: ...
    def set_show_rest_only(self, enabled: bool) -> None: ...
    def is_show_rest_only(self) -> bool: ...
    def set_animate_physical_bones(self, enabled: bool) -> None: ...
    def get_animate_physical_bones(self) -> bool: ...
    def physical_bones_stop_simulation(self) -> None: ...
    def physical_bones_start_simulation(self, bones: GDArray = []) -> None: ...
    def physical_bones_add_collision_exception(self, exception: RID) -> None: ...
    def physical_bones_remove_collision_exception(self, exception: RID) -> None: ...

    # Signals
    def pose_updated(self) -> None: ...
    def bone_pose_changed(self, bone_idx: int) -> None: ...
    def bone_enabled_changed(self, bone_idx: int) -> None: ...
    def show_rest_only_changed(self) -> None: ...

    # Properties
    motion_scale: float
    show_rest_only: bool
    animate_physical_bones: bool

    # Constants
    NOTIFICATION_UPDATE_SKELETON: int


class SkeletonIK3D(TypeInUse(Node)):
    @classmethod
    def new(cls) -> SkeletonIK3D: ...

    # Methods
    def set_root_bone(self, root_bone: StringName | str) -> None: ...
    def get_root_bone(self) -> StringName: ...
    def set_tip_bone(self, tip_bone: StringName | str) -> None: ...
    def get_tip_bone(self) -> StringName: ...
    def set_interpolation(self, interpolation: float) -> None: ...
    def get_interpolation(self) -> float: ...
    def set_target_transform(self, target: Transform3D) -> None: ...
    def get_target_transform(self) -> Transform3D: ...
    def set_target_node(self, node: NodePath | str) -> None: ...
    def get_target_node(self) -> NodePath: ...
    def set_override_tip_basis(self, override: bool) -> None: ...
    def is_override_tip_basis(self) -> bool: ...
    def set_use_magnet(self, use: bool) -> None: ...
    def is_using_magnet(self) -> bool: ...
    def set_magnet_position(self, local_position: Vector3) -> None: ...
    def get_magnet_position(self) -> Vector3: ...
    def get_parent_skeleton(self) -> Skeleton3D: ...
    def is_running(self) -> bool: ...
    def set_min_distance(self, min_distance: float) -> None: ...
    def get_min_distance(self) -> float: ...
    def set_max_iterations(self, iterations: int) -> None: ...
    def get_max_iterations(self) -> int: ...
    def start(self, one_time: bool = False) -> None: ...
    def stop(self) -> None: ...

    # Properties
    root_bone: StringName
    tip_bone: StringName
    interpolation: float
    target: Transform3D
    override_tip_basis: bool
    use_magnet: bool
    magnet: Vector3
    target_node: NodePath
    min_distance: float
    max_iterations: int


class SphereMesh(TypeInUse(PrimitiveMesh)):
    def __init__(self): ...

    # Methods
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...
    def set_radial_segments(self, radial_segments: int) -> None: ...
    def get_radial_segments(self) -> int: ...
    def set_rings(self, rings: int) -> None: ...
    def get_rings(self) -> int: ...
    def set_is_hemisphere(self, is_hemisphere: bool) -> None: ...
    def get_is_hemisphere(self) -> bool: ...

    # Properties
    radius: float
    height: float
    radial_segments: int
    rings: int
    is_hemisphere: bool


class SphereOccluder3D(TypeInUse(Occluder3D)):
    def __init__(self): ...

    # Methods
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...

    # Properties
    radius: float


class SpringArm3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> SpringArm3D: ...

    # Methods
    def get_hit_length(self) -> float: ...
    def set_length(self, length: float) -> None: ...
    def get_length(self) -> float: ...
    def set_shape(self, shape: Shape3D) -> None: ...
    def get_shape(self) -> Shape3D: ...
    def add_excluded_object(self, RID: RID) -> None: ...
    def remove_excluded_object(self, RID: RID) -> bool: ...
    def clear_excluded_objects(self) -> None: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_margin(self, margin: float) -> None: ...
    def get_margin(self) -> float: ...

    # Properties
    collision_mask: int
    shape: Shape3D
    spring_length: float
    margin: float


class SystemFont(TypeInUse(Font)):
    def __init__(self): ...

    # Methods
    def set_antialiasing(self, antialiasing: TextServer.FontAntialiasing) -> None: ...
    def get_antialiasing(self) -> TextServer.FontAntialiasing: ...
    def set_generate_mipmaps(self, generate_mipmaps: bool) -> None: ...
    def get_generate_mipmaps(self) -> bool: ...
    def set_allow_system_fallback(self, allow_system_fallback: bool) -> None: ...
    def is_allow_system_fallback(self) -> bool: ...
    def set_force_autohinter(self, force_autohinter: bool) -> None: ...
    def is_force_autohinter(self) -> bool: ...
    def set_hinting(self, hinting: TextServer.Hinting) -> None: ...
    def get_hinting(self) -> TextServer.Hinting: ...
    def set_subpixel_positioning(self, subpixel_positioning: TextServer.SubpixelPositioning) -> None: ...
    def get_subpixel_positioning(self) -> TextServer.SubpixelPositioning: ...
    def set_multichannel_signed_distance_field(self, msdf: bool) -> None: ...
    def is_multichannel_signed_distance_field(self) -> bool: ...
    def set_msdf_pixel_range(self, msdf_pixel_range: int) -> None: ...
    def get_msdf_pixel_range(self) -> int: ...
    def set_msdf_size(self, msdf_size: int) -> None: ...
    def get_msdf_size(self) -> int: ...
    def set_oversampling(self, oversampling: float) -> None: ...
    def get_oversampling(self) -> float: ...
    def get_font_names(self) -> PackedStringArray: ...
    def set_font_names(self, names: PackedStringArray) -> None: ...
    def get_font_italic(self) -> bool: ...
    def set_font_italic(self, italic: bool) -> None: ...
    def set_font_weight(self, weight: int) -> None: ...
    def set_font_stretch(self, stretch: int) -> None: ...

    # Properties
    font_names: PackedStringArray
    font_italic: bool
    font_weight: int
    font_stretch: int
    antialiasing: int
    generate_mipmaps: bool
    allow_system_fallback: bool
    force_autohinter: bool
    hinting: int
    subpixel_positioning: int
    multichannel_signed_distance_field: bool
    msdf_pixel_range: int
    msdf_size: int
    oversampling: float
    fallbacks: GDArray


class TextMesh(TypeInUse(PrimitiveMesh)):
    def __init__(self): ...

    # Methods
    def set_horizontal_alignment(self, alignment: HorizontalAlignment) -> None: ...
    def get_horizontal_alignment(self) -> HorizontalAlignment: ...
    def set_vertical_alignment(self, alignment: VerticalAlignment) -> None: ...
    def get_vertical_alignment(self) -> VerticalAlignment: ...
    def set_text(self, text: GDString | str) -> None: ...
    def get_text(self) -> GDString: ...
    def set_font(self, font: Font) -> None: ...
    def get_font(self) -> Font: ...
    def set_font_size(self, font_size: int) -> None: ...
    def get_font_size(self) -> int: ...
    def set_line_spacing(self, line_spacing: float) -> None: ...
    def get_line_spacing(self) -> float: ...
    def set_autowrap_mode(self, autowrap_mode: TextServer.AutowrapMode) -> None: ...
    def get_autowrap_mode(self) -> TextServer.AutowrapMode: ...
    def set_justification_flags(self, justification_flags: TextServer.JustificationFlag) -> None: ...
    def get_justification_flags(self) -> TextServer.JustificationFlag: ...
    def set_depth(self, depth: float) -> None: ...
    def get_depth(self) -> float: ...
    def set_width(self, width: float) -> None: ...
    def get_width(self) -> float: ...
    def set_pixel_size(self, pixel_size: float) -> None: ...
    def get_pixel_size(self) -> float: ...
    def set_offset(self, offset: Vector2) -> None: ...
    def get_offset(self) -> Vector2: ...
    def set_curve_step(self, curve_step: float) -> None: ...
    def get_curve_step(self) -> float: ...
    def set_text_direction(self, direction: TextServer.Direction) -> None: ...
    def get_text_direction(self) -> TextServer.Direction: ...
    def set_language(self, language: GDString | str) -> None: ...
    def get_language(self) -> GDString: ...
    def set_structured_text_bidi_override(self, parser: TextServer.StructuredTextParser) -> None: ...
    def get_structured_text_bidi_override(self) -> TextServer.StructuredTextParser: ...
    def set_structured_text_bidi_override_options(self, args: GDArray) -> None: ...
    def get_structured_text_bidi_override_options(self) -> GDArray: ...
    def set_uppercase(self, enable: bool) -> None: ...
    def is_uppercase(self) -> bool: ...

    # Properties
    text: GDString
    font: Font
    font_size: int
    horizontal_alignment: int
    vertical_alignment: int
    uppercase: bool
    line_spacing: float
    autowrap_mode: int
    justification_flags: int
    pixel_size: float
    curve_step: float
    depth: float
    width: float
    offset: Vector2
    text_direction: int
    language: GDString
    structured_text_bidi_override: int
    structured_text_bidi_override_options: GDArray


class TextServerAdvanced(TypeInUse(TextServerExtension)):
    def __init__(self): ...


class TextServerDummy(TypeInUse(TextServerExtension)):
    def __init__(self): ...


class Texture2DArray(TypeInUse(ImageTextureLayered)):
    def __init__(self): ...

    # Methods
    def create_placeholder(self) -> Resource: ...


class TileSetAtlasSource(TypeInUse(TileSetSource)):
    def __init__(self): ...

    # Methods
    def set_texture(self, texture: Texture2D) -> None: ...
    def get_texture(self) -> Texture2D: ...
    def set_margins(self, margins: Vector2i) -> None: ...
    def get_margins(self) -> Vector2i: ...
    def set_separation(self, separation: Vector2i) -> None: ...
    def get_separation(self) -> Vector2i: ...
    def set_texture_region_size(self, texture_region_size: Vector2i) -> None: ...
    def get_texture_region_size(self) -> Vector2i: ...
    def set_use_texture_padding(self, use_texture_padding: bool) -> None: ...
    def get_use_texture_padding(self) -> bool: ...
    def create_tile(self, atlas_coords: Vector2i, size: Vector2i = Vector2i(1, 1)) -> None: ...
    def remove_tile(self, atlas_coords: Vector2i) -> None: ...
    def move_tile_in_atlas(self, atlas_coords: Vector2i, new_atlas_coords: Vector2i = Vector2i(-1, -1), new_size: Vector2i = Vector2i(-1, -1)) -> None: ...
    def get_tile_size_in_atlas(self, atlas_coords: Vector2i) -> Vector2i: ...
    def has_room_for_tile(self, atlas_coords: Vector2i, size: Vector2i, animation_columns: int, animation_separation: Vector2i, frames_count: int, ignored_tile: Vector2i = Vector2i(-1, -1)) -> bool: ...
    def get_tiles_to_be_removed_on_change(self, texture: Texture2D, margins: Vector2i, separation: Vector2i, texture_region_size: Vector2i) -> PackedVector2Array: ...
    def get_tile_at_coords(self, atlas_coords: Vector2i) -> Vector2i: ...
    def set_tile_animation_columns(self, atlas_coords: Vector2i, frame_columns: int) -> None: ...
    def get_tile_animation_columns(self, atlas_coords: Vector2i) -> int: ...
    def set_tile_animation_separation(self, atlas_coords: Vector2i, separation: Vector2i) -> None: ...
    def get_tile_animation_separation(self, atlas_coords: Vector2i) -> Vector2i: ...
    def set_tile_animation_speed(self, atlas_coords: Vector2i, speed: float) -> None: ...
    def get_tile_animation_speed(self, atlas_coords: Vector2i) -> float: ...
    def set_tile_animation_frames_count(self, atlas_coords: Vector2i, frames_count: int) -> None: ...
    def get_tile_animation_frames_count(self, atlas_coords: Vector2i) -> int: ...
    def set_tile_animation_frame_duration(self, atlas_coords: Vector2i, frame_index: int, duration: float) -> None: ...
    def get_tile_animation_frame_duration(self, atlas_coords: Vector2i, frame_index: int) -> float: ...
    def get_tile_animation_total_duration(self, atlas_coords: Vector2i) -> float: ...
    def create_alternative_tile(self, atlas_coords: Vector2i, alternative_id_override: int = -1) -> int: ...
    def remove_alternative_tile(self, atlas_coords: Vector2i, alternative_tile: int) -> None: ...
    def set_alternative_tile_id(self, atlas_coords: Vector2i, alternative_tile: int, new_id: int) -> None: ...
    def get_next_alternative_tile_id(self, atlas_coords: Vector2i) -> int: ...
    def get_tile_data(self, atlas_coords: Vector2i, alternative_tile: int) -> TileData: ...
    def get_atlas_grid_size(self) -> Vector2i: ...
    def get_tile_texture_region(self, atlas_coords: Vector2i, frame: int = 0) -> Rect2i: ...
    def get_runtime_texture(self) -> Texture2D: ...
    def get_runtime_tile_texture_region(self, atlas_coords: Vector2i, frame: int) -> Rect2i: ...

    # Properties
    texture: Texture2D
    margins: Vector2i
    separation: Vector2i
    texture_region_size: Vector2i
    use_texture_padding: bool


class TileSetScenesCollectionSource(TypeInUse(TileSetSource)):
    def __init__(self): ...

    # Methods
    def get_scene_tiles_count(self) -> int: ...
    def get_scene_tile_id(self, index: int) -> int: ...
    def has_scene_tile_id(self, id: int) -> bool: ...
    def create_scene_tile(self, packed_scene: PackedScene, id_override: int = -1) -> int: ...
    def set_scene_tile_id(self, id: int, new_id: int) -> None: ...
    def set_scene_tile_scene(self, id: int, packed_scene: PackedScene) -> None: ...
    def get_scene_tile_scene(self, id: int) -> PackedScene: ...
    def set_scene_tile_display_placeholder(self, id: int, display_placeholder: bool) -> None: ...
    def get_scene_tile_display_placeholder(self, id: int) -> bool: ...
    def remove_scene_tile(self, id: int) -> None: ...
    def get_next_scene_tile_id(self) -> int: ...


class Timer(TypeInUse(Node)):
    @classmethod
    def new(cls) -> Timer: ...

    # Enums
    class Timer.TimerProcessCallback(Enum):
        TIMER_PROCESS_PHYSICS: int
        TIMER_PROCESS_IDLE: int

    # Methods
    def set_wait_time(self, time_sec: float) -> None: ...
    def get_wait_time(self) -> float: ...
    def set_one_shot(self, enable: bool) -> None: ...
    def is_one_shot(self) -> bool: ...
    def set_autostart(self, enable: bool) -> None: ...
    def has_autostart(self) -> bool: ...
    def start(self, time_sec: float = -1) -> None: ...
    def stop(self) -> None: ...
    def set_paused(self, paused: bool) -> None: ...
    def is_paused(self) -> bool: ...
    def is_stopped(self) -> bool: ...
    def get_time_left(self) -> float: ...
    def set_timer_process_callback(self, callback: Timer.TimerProcessCallback) -> None: ...
    def get_timer_process_callback(self) -> Timer.TimerProcessCallback: ...

    # Signals
    def timeout(self) -> None: ...

    # Properties
    process_callback: int
    wait_time: float
    one_shot: bool
    autostart: bool
    paused: bool
    time_left: float


class TorusMesh(TypeInUse(PrimitiveMesh)):
    def __init__(self): ...

    # Methods
    def set_inner_radius(self, radius: float) -> None: ...
    def get_inner_radius(self) -> float: ...
    def set_outer_radius(self, radius: float) -> None: ...
    def get_outer_radius(self) -> float: ...
    def set_rings(self, rings: int) -> None: ...
    def get_rings(self) -> int: ...
    def set_ring_segments(self, rings: int) -> None: ...
    def get_ring_segments(self) -> int: ...

    # Properties
    inner_radius: float
    outer_radius: float
    rings: int
    ring_segments: int


class TubeTrailMesh(TypeInUse(PrimitiveMesh)):
    def __init__(self): ...

    # Methods
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_radial_steps(self, radial_steps: int) -> None: ...
    def get_radial_steps(self) -> int: ...
    def set_sections(self, sections: int) -> None: ...
    def get_sections(self) -> int: ...
    def set_section_length(self, section_length: float) -> None: ...
    def get_section_length(self) -> float: ...
    def set_section_rings(self, section_rings: int) -> None: ...
    def get_section_rings(self) -> int: ...
    def set_cap_top(self, cap_top: bool) -> None: ...
    def is_cap_top(self) -> bool: ...
    def set_cap_bottom(self, cap_bottom: bool) -> None: ...
    def is_cap_bottom(self) -> bool: ...
    def set_curve(self, curve: Curve) -> None: ...
    def get_curve(self) -> Curve: ...

    # Properties
    radius: float
    radial_steps: int
    sections: int
    section_length: float
    section_rings: int
    cap_top: bool
    cap_bottom: bool
    curve: Curve


class VehicleWheel3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> VehicleWheel3D: ...

    # Methods
    def set_radius(self, length: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_suspension_rest_length(self, length: float) -> None: ...
    def get_suspension_rest_length(self) -> float: ...
    def set_suspension_travel(self, length: float) -> None: ...
    def get_suspension_travel(self) -> float: ...
    def set_suspension_stiffness(self, length: float) -> None: ...
    def get_suspension_stiffness(self) -> float: ...
    def set_suspension_max_force(self, length: float) -> None: ...
    def get_suspension_max_force(self) -> float: ...
    def set_damping_compression(self, length: float) -> None: ...
    def get_damping_compression(self) -> float: ...
    def set_damping_relaxation(self, length: float) -> None: ...
    def get_damping_relaxation(self) -> float: ...
    def set_use_as_traction(self, enable: bool) -> None: ...
    def is_used_as_traction(self) -> bool: ...
    def set_use_as_steering(self, enable: bool) -> None: ...
    def is_used_as_steering(self) -> bool: ...
    def set_friction_slip(self, length: float) -> None: ...
    def get_friction_slip(self) -> float: ...
    def is_in_contact(self) -> bool: ...
    def get_contact_body(self) -> Node3D: ...
    def set_roll_influence(self, roll_influence: float) -> None: ...
    def get_roll_influence(self) -> float: ...
    def get_skidinfo(self) -> float: ...
    def get_rpm(self) -> float: ...
    def set_engine_force(self, engine_force: float) -> None: ...
    def get_engine_force(self) -> float: ...
    def set_brake(self, brake: float) -> None: ...
    def get_brake(self) -> float: ...
    def set_steering(self, steering: float) -> None: ...
    def get_steering(self) -> float: ...

    # Properties
    engine_force: float
    brake: float
    steering: float
    use_as_traction: bool
    use_as_steering: bool
    wheel_roll_influence: float
    wheel_radius: float
    wheel_rest_length: float
    wheel_friction_slip: float
    suspension_travel: float
    suspension_stiffness: float
    suspension_max_force: float
    damping_compression: float
    damping_relaxation: float


class Viewport(TypeInUse(Node)):

    # Enums
    class Viewport.PositionalShadowAtlasQuadrantSubdiv(Enum):
        SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED: int
        SHADOW_ATLAS_QUADRANT_SUBDIV_1: int
        SHADOW_ATLAS_QUADRANT_SUBDIV_4: int
        SHADOW_ATLAS_QUADRANT_SUBDIV_16: int
        SHADOW_ATLAS_QUADRANT_SUBDIV_64: int
        SHADOW_ATLAS_QUADRANT_SUBDIV_256: int
        SHADOW_ATLAS_QUADRANT_SUBDIV_1024: int
        SHADOW_ATLAS_QUADRANT_SUBDIV_MAX: int
    class Viewport.Scaling3DMode(Enum):
        SCALING_3D_MODE_BILINEAR: int
        SCALING_3D_MODE_FSR: int
        SCALING_3D_MODE_MAX: int
    class Viewport.MSAA(Enum):
        MSAA_DISABLED: int
        MSAA_2X: int
        MSAA_4X: int
        MSAA_8X: int
        MSAA_MAX: int
    class Viewport.ScreenSpaceAA(Enum):
        SCREEN_SPACE_AA_DISABLED: int
        SCREEN_SPACE_AA_FXAA: int
        SCREEN_SPACE_AA_MAX: int
    class Viewport.RenderInfo(Enum):
        RENDER_INFO_OBJECTS_IN_FRAME: int
        RENDER_INFO_PRIMITIVES_IN_FRAME: int
        RENDER_INFO_DRAW_CALLS_IN_FRAME: int
        RENDER_INFO_MAX: int
    class Viewport.RenderInfoType(Enum):
        RENDER_INFO_TYPE_VISIBLE: int
        RENDER_INFO_TYPE_SHADOW: int
        RENDER_INFO_TYPE_MAX: int
    class Viewport.DebugDraw(Enum):
        DEBUG_DRAW_DISABLED: int
        DEBUG_DRAW_UNSHADED: int
        DEBUG_DRAW_LIGHTING: int
        DEBUG_DRAW_OVERDRAW: int
        DEBUG_DRAW_WIREFRAME: int
        DEBUG_DRAW_NORMAL_BUFFER: int
        DEBUG_DRAW_VOXEL_GI_ALBEDO: int
        DEBUG_DRAW_VOXEL_GI_LIGHTING: int
        DEBUG_DRAW_VOXEL_GI_EMISSION: int
        DEBUG_DRAW_SHADOW_ATLAS: int
        DEBUG_DRAW_DIRECTIONAL_SHADOW_ATLAS: int
        DEBUG_DRAW_SCENE_LUMINANCE: int
        DEBUG_DRAW_SSAO: int
        DEBUG_DRAW_SSIL: int
        DEBUG_DRAW_PSSM_SPLITS: int
        DEBUG_DRAW_DECAL_ATLAS: int
        DEBUG_DRAW_SDFGI: int
        DEBUG_DRAW_SDFGI_PROBES: int
        DEBUG_DRAW_GI_BUFFER: int
        DEBUG_DRAW_DISABLE_LOD: int
        DEBUG_DRAW_CLUSTER_OMNI_LIGHTS: int
        DEBUG_DRAW_CLUSTER_SPOT_LIGHTS: int
        DEBUG_DRAW_CLUSTER_DECALS: int
        DEBUG_DRAW_CLUSTER_REFLECTION_PROBES: int
        DEBUG_DRAW_OCCLUDERS: int
        DEBUG_DRAW_MOTION_VECTORS: int
    class Viewport.DefaultCanvasItemTextureFilter(Enum):
        DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST: int
        DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR: int
        DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS: int
        DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS: int
        DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_MAX: int
    class Viewport.DefaultCanvasItemTextureRepeat(Enum):
        DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_DISABLED: int
        DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_ENABLED: int
        DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MIRROR: int
        DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MAX: int
    class Viewport.SDFOversize(Enum):
        SDF_OVERSIZE_100_PERCENT: int
        SDF_OVERSIZE_120_PERCENT: int
        SDF_OVERSIZE_150_PERCENT: int
        SDF_OVERSIZE_200_PERCENT: int
        SDF_OVERSIZE_MAX: int
    class Viewport.SDFScale(Enum):
        SDF_SCALE_100_PERCENT: int
        SDF_SCALE_50_PERCENT: int
        SDF_SCALE_25_PERCENT: int
        SDF_SCALE_MAX: int
    class Viewport.VRSMode(Enum):
        VRS_DISABLED: int
        VRS_TEXTURE: int
        VRS_XR: int
        VRS_MAX: int

    # Methods
    def set_world_2d(self, world_2d: World2D) -> None: ...
    def get_world_2d(self) -> World2D: ...
    def find_world_2d(self) -> World2D: ...
    def set_canvas_transform(self, xform: Transform2D) -> None: ...
    def get_canvas_transform(self) -> Transform2D: ...
    def set_global_canvas_transform(self, xform: Transform2D) -> None: ...
    def get_global_canvas_transform(self) -> Transform2D: ...
    def get_final_transform(self) -> Transform2D: ...
    def get_screen_transform(self) -> Transform2D: ...
    def get_visible_rect(self) -> Rect2: ...
    def set_transparent_background(self, enable: bool) -> None: ...
    def has_transparent_background(self) -> bool: ...
    def set_msaa_2d(self, msaa: Viewport.MSAA) -> None: ...
    def get_msaa_2d(self) -> Viewport.MSAA: ...
    def set_msaa_3d(self, msaa: Viewport.MSAA) -> None: ...
    def get_msaa_3d(self) -> Viewport.MSAA: ...
    def set_screen_space_aa(self, screen_space_aa: Viewport.ScreenSpaceAA) -> None: ...
    def get_screen_space_aa(self) -> Viewport.ScreenSpaceAA: ...
    def set_use_taa(self, enable: bool) -> None: ...
    def is_using_taa(self) -> bool: ...
    def set_use_debanding(self, enable: bool) -> None: ...
    def is_using_debanding(self) -> bool: ...
    def set_use_occlusion_culling(self, enable: bool) -> None: ...
    def is_using_occlusion_culling(self) -> bool: ...
    def set_debug_draw(self, debug_draw: Viewport.DebugDraw) -> None: ...
    def get_debug_draw(self) -> Viewport.DebugDraw: ...
    def get_render_info(self, type: Viewport.RenderInfoType, info: Viewport.RenderInfo) -> int: ...
    def get_texture(self) -> ViewportTexture: ...
    def set_physics_object_picking(self, enable: bool) -> None: ...
    def get_physics_object_picking(self) -> bool: ...
    def set_physics_object_picking_sort(self, enable: bool) -> None: ...
    def get_physics_object_picking_sort(self) -> bool: ...
    def get_viewport_rid(self) -> RID: ...
    def push_text_input(self, text: GDString | str) -> None: ...
    def push_input(self, event: InputEvent, in_local_coords: bool = False) -> None: ...
    def push_unhandled_input(self, event: InputEvent, in_local_coords: bool = False) -> None: ...
    def get_camera_2d(self) -> Camera2D: ...
    def set_as_audio_listener_2d(self, enable: bool) -> None: ...
    def is_audio_listener_2d(self) -> bool: ...
    def get_mouse_position(self) -> Vector2: ...
    def warp_mouse(self, position: Vector2) -> None: ...
    def update_mouse_cursor_state(self) -> None: ...
    def gui_get_drag_data(self) -> GDAny: ...
    def gui_is_dragging(self) -> bool: ...
    def gui_is_drag_successful(self) -> bool: ...
    def gui_release_focus(self) -> None: ...
    def gui_get_focus_owner(self) -> Control: ...
    def set_disable_input(self, disable: bool) -> None: ...
    def is_input_disabled(self) -> bool: ...
    def set_positional_shadow_atlas_size(self, size: int) -> None: ...
    def get_positional_shadow_atlas_size(self) -> int: ...
    def set_positional_shadow_atlas_16_bits(self, enable: bool) -> None: ...
    def get_positional_shadow_atlas_16_bits(self) -> bool: ...
    def set_snap_controls_to_pixels(self, enabled: bool) -> None: ...
    def is_snap_controls_to_pixels_enabled(self) -> bool: ...
    def set_snap_2d_transforms_to_pixel(self, enabled: bool) -> None: ...
    def is_snap_2d_transforms_to_pixel_enabled(self) -> bool: ...
    def set_snap_2d_vertices_to_pixel(self, enabled: bool) -> None: ...
    def is_snap_2d_vertices_to_pixel_enabled(self) -> bool: ...
    def set_positional_shadow_atlas_quadrant_subdiv(self, quadrant: int, subdiv: Viewport.PositionalShadowAtlasQuadrantSubdiv) -> None: ...
    def get_positional_shadow_atlas_quadrant_subdiv(self, quadrant: int) -> Viewport.PositionalShadowAtlasQuadrantSubdiv: ...
    def set_input_as_handled(self) -> None: ...
    def is_input_handled(self) -> bool: ...
    def set_handle_input_locally(self, enable: bool) -> None: ...
    def is_handling_input_locally(self) -> bool: ...
    def set_default_canvas_item_texture_filter(self, mode: Viewport.DefaultCanvasItemTextureFilter) -> None: ...
    def get_default_canvas_item_texture_filter(self) -> Viewport.DefaultCanvasItemTextureFilter: ...
    def set_embedding_subwindows(self, enable: bool) -> None: ...
    def is_embedding_subwindows(self) -> bool: ...
    def set_canvas_cull_mask(self, mask: int) -> None: ...
    def get_canvas_cull_mask(self) -> int: ...
    def set_canvas_cull_mask_bit(self, layer: int, enable: bool) -> None: ...
    def get_canvas_cull_mask_bit(self, layer: int) -> bool: ...
    def set_default_canvas_item_texture_repeat(self, mode: Viewport.DefaultCanvasItemTextureRepeat) -> None: ...
    def get_default_canvas_item_texture_repeat(self) -> Viewport.DefaultCanvasItemTextureRepeat: ...
    def set_sdf_oversize(self, oversize: Viewport.SDFOversize) -> None: ...
    def get_sdf_oversize(self) -> Viewport.SDFOversize: ...
    def set_sdf_scale(self, scale: Viewport.SDFScale) -> None: ...
    def get_sdf_scale(self) -> Viewport.SDFScale: ...
    def set_mesh_lod_threshold(self, pixels: float) -> None: ...
    def get_mesh_lod_threshold(self) -> float: ...
    def set_world_3d(self, world_3d: World3D) -> None: ...
    def get_world_3d(self) -> World3D: ...
    def find_world_3d(self) -> World3D: ...
    def set_use_own_world_3d(self, enable: bool) -> None: ...
    def is_using_own_world_3d(self) -> bool: ...
    def get_camera_3d(self) -> Camera3D: ...
    def set_as_audio_listener_3d(self, enable: bool) -> None: ...
    def is_audio_listener_3d(self) -> bool: ...
    def set_disable_3d(self, disable: bool) -> None: ...
    def is_3d_disabled(self) -> bool: ...
    def set_use_xr(self, use: bool) -> None: ...
    def is_using_xr(self) -> bool: ...
    def set_scaling_3d_mode(self, scaling_3d_mode: Viewport.Scaling3DMode) -> None: ...
    def get_scaling_3d_mode(self) -> Viewport.Scaling3DMode: ...
    def set_scaling_3d_scale(self, scale: float) -> None: ...
    def get_scaling_3d_scale(self) -> float: ...
    def set_fsr_sharpness(self, fsr_sharpness: float) -> None: ...
    def get_fsr_sharpness(self) -> float: ...
    def set_texture_mipmap_bias(self, texture_mipmap_bias: float) -> None: ...
    def get_texture_mipmap_bias(self) -> float: ...
    def set_vrs_mode(self, mode: Viewport.VRSMode) -> None: ...
    def get_vrs_mode(self) -> Viewport.VRSMode: ...
    def set_vrs_texture(self, texture: Texture2D) -> None: ...
    def get_vrs_texture(self) -> Texture2D: ...

    # Signals
    def size_changed(self) -> None: ...
    def gui_focus_changed(self, node: Control) -> None: ...

    # Properties
    disable_3d: bool
    use_xr: bool
    own_world_3d: bool
    world_3d: World3D
    world_2d: World2D
    transparent_bg: bool
    handle_input_locally: bool
    snap_2d_transforms_to_pixel: bool
    snap_2d_vertices_to_pixel: bool
    msaa_2d: int
    msaa_3d: int
    screen_space_aa: int
    use_taa: bool
    use_debanding: bool
    use_occlusion_culling: bool
    mesh_lod_threshold: float
    debug_draw: int
    scaling_3d_mode: int
    scaling_3d_scale: float
    texture_mipmap_bias: float
    fsr_sharpness: float
    vrs_mode: int
    vrs_texture: Texture2D
    canvas_item_default_texture_filter: int
    canvas_item_default_texture_repeat: int
    audio_listener_enable_2d: bool
    audio_listener_enable_3d: bool
    physics_object_picking: bool
    physics_object_picking_sort: bool
    gui_disable_input: bool
    gui_snap_controls_to_pixels: bool
    gui_embed_subwindows: bool
    sdf_oversize: int
    sdf_scale: int
    positional_shadow_atlas_size: int
    positional_shadow_atlas_16_bits: bool
    positional_shadow_atlas_quad_0: int
    positional_shadow_atlas_quad_1: int
    positional_shadow_atlas_quad_2: int
    positional_shadow_atlas_quad_3: int
    canvas_transform: Transform2D
    global_canvas_transform: Transform2D
    canvas_cull_mask: int


class VisualInstance3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> VisualInstance3D: ...

    # Methods
    def set_base(self, base: RID) -> None: ...
    def get_base(self) -> RID: ...
    def get_instance(self) -> RID: ...
    def set_layer_mask(self, mask: int) -> None: ...
    def get_layer_mask(self) -> int: ...
    def set_layer_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_layer_mask_value(self, layer_number: int) -> bool: ...
    def set_sorting_offset(self, offset: float) -> None: ...
    def get_sorting_offset(self) -> float: ...
    def set_sorting_use_aabb_center(self, enabled: bool) -> None: ...
    def is_sorting_use_aabb_center(self) -> bool: ...
    def get_aabb(self) -> AABB: ...

    # Properties
    layers: int
    sorting_offset: float
    sorting_use_aabb_center: bool


class VisualShaderNodeBooleanConstant(TypeInUse(VisualShaderNodeConstant)):
    def __init__(self): ...

    # Methods
    def set_constant(self, constant: bool) -> None: ...
    def get_constant(self) -> bool: ...

    # Properties
    constant: bool


class VisualShaderNodeBooleanParameter(TypeInUse(VisualShaderNodeParameter)):
    def __init__(self): ...

    # Methods
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: bool) -> None: ...
    def get_default_value(self) -> bool: ...

    # Properties
    default_value_enabled: bool
    default_value: bool


class VisualShaderNodeColorConstant(TypeInUse(VisualShaderNodeConstant)):
    def __init__(self): ...

    # Methods
    def set_constant(self, constant: Color) -> None: ...
    def get_constant(self) -> Color: ...

    # Properties
    constant: Color


class VisualShaderNodeColorParameter(TypeInUse(VisualShaderNodeParameter)):
    def __init__(self): ...

    # Methods
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: Color) -> None: ...
    def get_default_value(self) -> Color: ...

    # Properties
    default_value_enabled: bool
    default_value: Color


class VisualShaderNodeComment(TypeInUse(VisualShaderNodeResizableBase)):
    def __init__(self): ...

    # Methods
    def set_title(self, title: GDString | str) -> None: ...
    def get_title(self) -> GDString: ...
    def set_description(self, description: GDString | str) -> None: ...
    def get_description(self) -> GDString: ...

    # Properties
    title: GDString
    description: GDString


class VisualShaderNodeCubemapParameter(TypeInUse(VisualShaderNodeTextureParameter)):
    def __init__(self): ...


class VisualShaderNodeCurveTexture(TypeInUse(VisualShaderNodeResizableBase)):
    def __init__(self): ...

    # Methods
    def set_texture(self, texture: CurveTexture) -> None: ...
    def get_texture(self) -> CurveTexture: ...

    # Properties
    texture: CurveTexture


class VisualShaderNodeCurveXYZTexture(TypeInUse(VisualShaderNodeResizableBase)):
    def __init__(self): ...

    # Methods
    def set_texture(self, texture: CurveXYZTexture) -> None: ...
    def get_texture(self) -> CurveXYZTexture: ...

    # Properties
    texture: CurveXYZTexture


class VisualShaderNodeFaceForward(TypeInUse(VisualShaderNodeVectorBase)):
    def __init__(self): ...


class VisualShaderNodeFloatParameter(TypeInUse(VisualShaderNodeParameter)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeFloatParameter.Hint(Enum):
        HINT_NONE: int
        HINT_RANGE: int
        HINT_RANGE_STEP: int
        HINT_MAX: int

    # Methods
    def set_hint(self, hint: VisualShaderNodeFloatParameter.Hint) -> None: ...
    def get_hint(self) -> VisualShaderNodeFloatParameter.Hint: ...
    def set_min(self, value: float) -> None: ...
    def get_min(self) -> float: ...
    def set_max(self, value: float) -> None: ...
    def get_max(self) -> float: ...
    def set_step(self, value: float) -> None: ...
    def get_step(self) -> float: ...
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: float) -> None: ...
    def get_default_value(self) -> float: ...

    # Properties
    hint: int
    min: float
    max: float
    step: float
    default_value_enabled: bool
    default_value: float


class VisualShaderNodeGroupBase(TypeInUse(VisualShaderNodeResizableBase)):

    # Methods
    def set_inputs(self, inputs: GDString | str) -> None: ...
    def get_inputs(self) -> GDString: ...
    def set_outputs(self, outputs: GDString | str) -> None: ...
    def get_outputs(self) -> GDString: ...
    def is_valid_port_name(self, name: GDString | str) -> bool: ...
    def add_input_port(self, id: int, type: int, name: GDString | str) -> None: ...
    def remove_input_port(self, id: int) -> None: ...
    def get_input_port_count(self) -> int: ...
    def has_input_port(self, id: int) -> bool: ...
    def clear_input_ports(self) -> None: ...
    def add_output_port(self, id: int, type: int, name: GDString | str) -> None: ...
    def remove_output_port(self, id: int) -> None: ...
    def get_output_port_count(self) -> int: ...
    def has_output_port(self, id: int) -> bool: ...
    def clear_output_ports(self) -> None: ...
    def set_input_port_name(self, id: int, name: GDString | str) -> None: ...
    def set_input_port_type(self, id: int, type: int) -> None: ...
    def set_output_port_name(self, id: int, name: GDString | str) -> None: ...
    def set_output_port_type(self, id: int, type: int) -> None: ...
    def get_free_input_port_id(self) -> int: ...
    def get_free_output_port_id(self) -> int: ...


class VisualShaderNodeIntParameter(TypeInUse(VisualShaderNodeParameter)):
    def __init__(self): ...

    # Enums
    class VisualShaderNodeIntParameter.Hint(Enum):
        HINT_NONE: int
        HINT_RANGE: int
        HINT_RANGE_STEP: int
        HINT_MAX: int

    # Methods
    def set_hint(self, hint: VisualShaderNodeIntParameter.Hint) -> None: ...
    def get_hint(self) -> VisualShaderNodeIntParameter.Hint: ...
    def set_min(self, value: int) -> None: ...
    def get_min(self) -> int: ...
    def set_max(self, value: int) -> None: ...
    def get_max(self) -> int: ...
    def set_step(self, value: int) -> None: ...
    def get_step(self) -> int: ...
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: int) -> None: ...
    def get_default_value(self) -> int: ...

    # Properties
    hint: int
    min: int
    max: int
    step: int
    default_value_enabled: bool
    default_value: int


class VisualShaderNodeParticleBoxEmitter(TypeInUse(VisualShaderNodeParticleEmitter)):
    def __init__(self): ...


class VisualShaderNodeTexture2DArrayParameter(TypeInUse(VisualShaderNodeTextureParameter)):
    def __init__(self): ...


class VisualShaderNodeTexture2DParameter(TypeInUse(VisualShaderNodeTextureParameter)):
    def __init__(self): ...


class VisualShaderNodeTexture3DParameter(TypeInUse(VisualShaderNodeTextureParameter)):
    def __init__(self): ...


class VoxelGI(TypeInUse(VisualInstance3D)):
    @classmethod
    def new(cls) -> VoxelGI: ...

    # Enums
    class VoxelGI.Subdiv(Enum):
        SUBDIV_64: int
        SUBDIV_128: int
        SUBDIV_256: int
        SUBDIV_512: int
        SUBDIV_MAX: int

    # Methods
    def set_probe_data(self, data: VoxelGIData) -> None: ...
    def get_probe_data(self) -> VoxelGIData: ...
    def set_subdiv(self, subdiv: VoxelGI.Subdiv) -> None: ...
    def get_subdiv(self) -> VoxelGI.Subdiv: ...
    def set_size(self, size: Vector3) -> None: ...
    def get_size(self) -> Vector3: ...
    def set_camera_attributes(self, camera_attributes: CameraAttributes) -> None: ...
    def get_camera_attributes(self) -> CameraAttributes: ...
    def bake(self, from_node: Node = None, create_visual_debug: bool = False) -> None: ...
    def debug_bake(self) -> None: ...

    # Properties
    subdiv: int
    size: Vector3
    camera_attributes: CameraAttributesPractical | CameraAttributesPhysical
    data: VoxelGIData


class WebRTCDataChannel(TypeInUse(PacketPeer)):

    # Enums
    class WebRTCDataChannel.WriteMode(Enum):
        WRITE_MODE_TEXT: int
        WRITE_MODE_BINARY: int
    class WebRTCDataChannel.ChannelState(Enum):
        STATE_CONNECTING: int
        STATE_OPEN: int
        STATE_CLOSING: int
        STATE_CLOSED: int

    # Methods
    def poll(self) -> Error: ...
    def close(self) -> None: ...
    def was_string_packet(self) -> bool: ...
    def set_write_mode(self, write_mode: WebRTCDataChannel.WriteMode) -> None: ...
    def get_write_mode(self) -> WebRTCDataChannel.WriteMode: ...
    def get_ready_state(self) -> WebRTCDataChannel.ChannelState: ...
    def get_label(self) -> GDString: ...
    def is_ordered(self) -> bool: ...
    def get_id(self) -> int: ...
    def get_max_packet_life_time(self) -> int: ...
    def get_max_retransmits(self) -> int: ...
    def get_protocol(self) -> GDString: ...
    def is_negotiated(self) -> bool: ...
    def get_buffered_amount(self) -> int: ...

    # Properties
    write_mode: int


class WebRTCDataChannelExtension(TypeInUse(WebRTCDataChannel)):
    def __init__(self): ...


class WebSocketPeer(TypeInUse(PacketPeer)):
    def __init__(self): ...

    # Enums
    class WebSocketPeer.WriteMode(Enum):
        WRITE_MODE_TEXT: int
        WRITE_MODE_BINARY: int
    class WebSocketPeer.State(Enum):
        STATE_CONNECTING: int
        STATE_OPEN: int
        STATE_CLOSING: int
        STATE_CLOSED: int

    # Methods
    def connect_to_url(self, url: GDString | str, tls_client_options: TLSOptions = None) -> Error: ...
    def accept_stream(self, stream: StreamPeer) -> Error: ...
    def send(self, message: PackedByteArray, write_mode: WebSocketPeer.WriteMode = 1) -> Error: ...
    def send_text(self, message: GDString | str) -> Error: ...
    def was_string_packet(self) -> bool: ...
    def poll(self) -> None: ...
    def close(self, code: int = 1000, reason: GDString | str = "") -> None: ...
    def get_connected_host(self) -> GDString: ...
    def get_connected_port(self) -> int: ...
    def get_selected_protocol(self) -> GDString: ...
    def get_requested_url(self) -> GDString: ...
    def set_no_delay(self, enabled: bool) -> None: ...
    def get_current_outbound_buffered_amount(self) -> int: ...
    def get_ready_state(self) -> WebSocketPeer.State: ...
    def get_close_code(self) -> int: ...
    def get_close_reason(self) -> GDString: ...
    def get_supported_protocols(self) -> PackedStringArray: ...
    def set_supported_protocols(self, protocols: PackedStringArray) -> None: ...
    def get_handshake_headers(self) -> PackedStringArray: ...
    def set_handshake_headers(self, protocols: PackedStringArray) -> None: ...
    def get_inbound_buffer_size(self) -> int: ...
    def set_inbound_buffer_size(self, buffer_size: int) -> None: ...
    def get_outbound_buffer_size(self) -> int: ...
    def set_outbound_buffer_size(self, buffer_size: int) -> None: ...
    def set_max_queued_packets(self, buffer_size: int) -> None: ...
    def get_max_queued_packets(self) -> int: ...

    # Properties
    supported_protocols: PackedStringArray
    handshake_headers: PackedStringArray
    inbound_buffer_size: int
    outbound_buffer_size: int
    max_queued_packets: int


class WebXRInterface(TypeInUse(XRInterface)):

    # Enums
    class WebXRInterface.TargetRayMode(Enum):
        TARGET_RAY_MODE_UNKNOWN: int
        TARGET_RAY_MODE_GAZE: int
        TARGET_RAY_MODE_TRACKED_POINTER: int
        TARGET_RAY_MODE_SCREEN: int

    # Methods
    def is_session_supported(self, session_mode: GDString | str) -> None: ...
    def set_session_mode(self, session_mode: GDString | str) -> None: ...
    def get_session_mode(self) -> GDString: ...
    def set_required_features(self, required_features: GDString | str) -> None: ...
    def get_required_features(self) -> GDString: ...
    def set_optional_features(self, optional_features: GDString | str) -> None: ...
    def get_optional_features(self) -> GDString: ...
    def get_reference_space_type(self) -> GDString: ...
    def set_requested_reference_space_types(self, requested_reference_space_types: GDString | str) -> None: ...
    def get_requested_reference_space_types(self) -> GDString: ...
    def is_input_source_active(self, input_source_id: int) -> bool: ...
    def get_input_source_tracker(self, input_source_id: int) -> XRPositionalTracker: ...
    def get_input_source_target_ray_mode(self, input_source_id: int) -> WebXRInterface.TargetRayMode: ...
    def get_visibility_state(self) -> GDString: ...
    def get_display_refresh_rate(self) -> float: ...
    def set_display_refresh_rate(self, refresh_rate: float) -> None: ...
    def get_available_display_refresh_rates(self) -> GDArray: ...

    # Signals
    def session_supported(self, session_mode: GDString | str, supported: bool) -> None: ...
    def session_started(self) -> None: ...
    def session_ended(self) -> None: ...
    def session_failed(self, message: GDString | str) -> None: ...
    def selectstart(self, input_source_id: int) -> None: ...
    def select(self, input_source_id: int) -> None: ...
    def selectend(self, input_source_id: int) -> None: ...
    def squeezestart(self, input_source_id: int) -> None: ...
    def squeeze(self, input_source_id: int) -> None: ...
    def squeezeend(self, input_source_id: int) -> None: ...
    def visibility_state_changed(self) -> None: ...
    def reference_space_reset(self) -> None: ...
    def display_refresh_rate_changed(self) -> None: ...

    # Properties
    session_mode: GDString
    required_features: GDString
    optional_features: GDString
    requested_reference_space_types: GDString
    reference_space_type: GDString
    visibility_state: GDString


class Window(TypeInUse(Viewport)):
    @classmethod
    def new(cls) -> Window: ...

    # Enums
    class Window.Mode(Enum):
        MODE_WINDOWED: int
        MODE_MINIMIZED: int
        MODE_MAXIMIZED: int
        MODE_FULLSCREEN: int
        MODE_EXCLUSIVE_FULLSCREEN: int
    class Window.Flags(Enum):
        FLAG_RESIZE_DISABLED: int
        FLAG_BORDERLESS: int
        FLAG_ALWAYS_ON_TOP: int
        FLAG_TRANSPARENT: int
        FLAG_NO_FOCUS: int
        FLAG_POPUP: int
        FLAG_EXTEND_TO_TITLE: int
        FLAG_MOUSE_PASSTHROUGH: int
        FLAG_MAX: int
    class Window.ContentScaleMode(Enum):
        CONTENT_SCALE_MODE_DISABLED: int
        CONTENT_SCALE_MODE_CANVAS_ITEMS: int
        CONTENT_SCALE_MODE_VIEWPORT: int
    class Window.ContentScaleAspect(Enum):
        CONTENT_SCALE_ASPECT_IGNORE: int
        CONTENT_SCALE_ASPECT_KEEP: int
        CONTENT_SCALE_ASPECT_KEEP_WIDTH: int
        CONTENT_SCALE_ASPECT_KEEP_HEIGHT: int
        CONTENT_SCALE_ASPECT_EXPAND: int
    class Window.LayoutDirection(Enum):
        LAYOUT_DIRECTION_INHERITED: int
        LAYOUT_DIRECTION_LOCALE: int
        LAYOUT_DIRECTION_LTR: int
        LAYOUT_DIRECTION_RTL: int
    class Window.WindowInitialPosition(Enum):
        WINDOW_INITIAL_POSITION_ABSOLUTE: int
        WINDOW_INITIAL_POSITION_CENTER_PRIMARY_SCREEN: int
        WINDOW_INITIAL_POSITION_CENTER_MAIN_WINDOW_SCREEN: int
        WINDOW_INITIAL_POSITION_CENTER_OTHER_SCREEN: int
        WINDOW_INITIAL_POSITION_CENTER_SCREEN_WITH_MOUSE_FOCUS: int
        WINDOW_INITIAL_POSITION_CENTER_SCREEN_WITH_KEYBOARD_FOCUS: int

    # Methods
    def set_title(self, title: GDString | str) -> None: ...
    def get_title(self) -> GDString: ...
    def get_window_id(self) -> int: ...
    def set_initial_position(self, initial_position: Window.WindowInitialPosition) -> None: ...
    def get_initial_position(self) -> Window.WindowInitialPosition: ...
    def set_current_screen(self, index: int) -> None: ...
    def get_current_screen(self) -> int: ...
    def set_position(self, position: Vector2i) -> None: ...
    def get_position(self) -> Vector2i: ...
    def set_size(self, size: Vector2i) -> None: ...
    def get_size(self) -> Vector2i: ...
    def reset_size(self) -> None: ...
    def get_position_with_decorations(self) -> Vector2i: ...
    def get_size_with_decorations(self) -> Vector2i: ...
    def set_max_size(self, max_size: Vector2i) -> None: ...
    def get_max_size(self) -> Vector2i: ...
    def set_min_size(self, min_size: Vector2i) -> None: ...
    def get_min_size(self) -> Vector2i: ...
    def set_mode(self, mode: Window.Mode) -> None: ...
    def get_mode(self) -> Window.Mode: ...
    def set_flag(self, flag: Window.Flags, enabled: bool) -> None: ...
    def get_flag(self, flag: Window.Flags) -> bool: ...
    def is_maximize_allowed(self) -> bool: ...
    def request_attention(self) -> None: ...
    def move_to_foreground(self) -> None: ...
    def set_visible(self, visible: bool) -> None: ...
    def is_visible(self) -> bool: ...
    def hide(self) -> None: ...
    def show(self) -> None: ...
    def set_transient(self, transient: bool) -> None: ...
    def is_transient(self) -> bool: ...
    def set_exclusive(self, exclusive: bool) -> None: ...
    def is_exclusive(self) -> bool: ...
    def set_unparent_when_invisible(self, unparent: bool) -> None: ...
    def can_draw(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def grab_focus(self) -> None: ...
    def set_ime_active(self, active: bool) -> None: ...
    def set_ime_position(self, position: Vector2i) -> None: ...
    def is_embedded(self) -> bool: ...
    def get_contents_minimum_size(self) -> Vector2: ...
    def set_content_scale_size(self, size: Vector2i) -> None: ...
    def get_content_scale_size(self) -> Vector2i: ...
    def set_content_scale_mode(self, mode: Window.ContentScaleMode) -> None: ...
    def get_content_scale_mode(self) -> Window.ContentScaleMode: ...
    def set_content_scale_aspect(self, aspect: Window.ContentScaleAspect) -> None: ...
    def get_content_scale_aspect(self) -> Window.ContentScaleAspect: ...
    def set_content_scale_factor(self, factor: float) -> None: ...
    def get_content_scale_factor(self) -> float: ...
    def set_use_font_oversampling(self, enable: bool) -> None: ...
    def is_using_font_oversampling(self) -> bool: ...
    def set_mouse_passthrough_polygon(self, polygon: PackedVector2Array) -> None: ...
    def get_mouse_passthrough_polygon(self) -> PackedVector2Array: ...
    def set_wrap_controls(self, enable: bool) -> None: ...
    def is_wrapping_controls(self) -> bool: ...
    def child_controls_changed(self) -> None: ...
    def set_theme(self, theme: Theme) -> None: ...
    def get_theme(self) -> Theme: ...
    def set_theme_type_variation(self, theme_type: StringName | str) -> None: ...
    def get_theme_type_variation(self) -> StringName: ...
    def begin_bulk_theme_override(self) -> None: ...
    def end_bulk_theme_override(self) -> None: ...
    def add_theme_icon_override(self, name: StringName | str, texture: Texture2D) -> None: ...
    def add_theme_stylebox_override(self, name: StringName | str, stylebox: StyleBox) -> None: ...
    def add_theme_font_override(self, name: StringName | str, font: Font) -> None: ...
    def add_theme_font_size_override(self, name: StringName | str, font_size: int) -> None: ...
    def add_theme_color_override(self, name: StringName | str, color: Color) -> None: ...
    def add_theme_constant_override(self, name: StringName | str, constant: int) -> None: ...
    def remove_theme_icon_override(self, name: StringName | str) -> None: ...
    def remove_theme_stylebox_override(self, name: StringName | str) -> None: ...
    def remove_theme_font_override(self, name: StringName | str) -> None: ...
    def remove_theme_font_size_override(self, name: StringName | str) -> None: ...
    def remove_theme_color_override(self, name: StringName | str) -> None: ...
    def remove_theme_constant_override(self, name: StringName | str) -> None: ...
    def get_theme_icon(self, name: StringName | str, theme_type: StringName | str = "") -> Texture2D: ...
    def get_theme_stylebox(self, name: StringName | str, theme_type: StringName | str = "") -> StyleBox: ...
    def get_theme_font(self, name: StringName | str, theme_type: StringName | str = "") -> Font: ...
    def get_theme_font_size(self, name: StringName | str, theme_type: StringName | str = "") -> int: ...
    def get_theme_color(self, name: StringName | str, theme_type: StringName | str = "") -> Color: ...
    def get_theme_constant(self, name: StringName | str, theme_type: StringName | str = "") -> int: ...
    def has_theme_icon_override(self, name: StringName | str) -> bool: ...
    def has_theme_stylebox_override(self, name: StringName | str) -> bool: ...
    def has_theme_font_override(self, name: StringName | str) -> bool: ...
    def has_theme_font_size_override(self, name: StringName | str) -> bool: ...
    def has_theme_color_override(self, name: StringName | str) -> bool: ...
    def has_theme_constant_override(self, name: StringName | str) -> bool: ...
    def has_theme_icon(self, name: StringName | str, theme_type: StringName | str = "") -> bool: ...
    def has_theme_stylebox(self, name: StringName | str, theme_type: StringName | str = "") -> bool: ...
    def has_theme_font(self, name: StringName | str, theme_type: StringName | str = "") -> bool: ...
    def has_theme_font_size(self, name: StringName | str, theme_type: StringName | str = "") -> bool: ...
    def has_theme_color(self, name: StringName | str, theme_type: StringName | str = "") -> bool: ...
    def has_theme_constant(self, name: StringName | str, theme_type: StringName | str = "") -> bool: ...
    def get_theme_default_base_scale(self) -> float: ...
    def get_theme_default_font(self) -> Font: ...
    def get_theme_default_font_size(self) -> int: ...
    def set_layout_direction(self, direction: Window.LayoutDirection) -> None: ...
    def get_layout_direction(self) -> Window.LayoutDirection: ...
    def is_layout_rtl(self) -> bool: ...
    def set_auto_translate(self, enable: bool) -> None: ...
    def is_auto_translating(self) -> bool: ...
    def popup(self, rect: Rect2i = Rect2i(0, 0, 0, 0)) -> None: ...
    def popup_on_parent(self, parent_rect: Rect2i) -> None: ...
    def popup_centered(self, minsize: Vector2i = Vector2i(0, 0)) -> None: ...
    def popup_centered_ratio(self, ratio: float = 0.8) -> None: ...
    def popup_centered_clamped(self, minsize: Vector2i = Vector2i(0, 0), fallback_ratio: float = 0.75) -> None: ...
    def popup_exclusive(self, from_node: Node, rect: Rect2i = Rect2i(0, 0, 0, 0)) -> None: ...
    def popup_exclusive_on_parent(self, from_node: Node, parent_rect: Rect2i) -> None: ...
    def popup_exclusive_centered(self, from_node: Node, minsize: Vector2i = Vector2i(0, 0)) -> None: ...
    def popup_exclusive_centered_ratio(self, from_node: Node, ratio: float = 0.8) -> None: ...
    def popup_exclusive_centered_clamped(self, from_node: Node, minsize: Vector2i = Vector2i(0, 0), fallback_ratio: float = 0.75) -> None: ...

    # Signals
    def window_input(self, event: InputEvent) -> None: ...
    def files_dropped(self, files: PackedStringArray) -> None: ...
    def mouse_entered(self) -> None: ...
    def mouse_exited(self) -> None: ...
    def focus_entered(self) -> None: ...
    def focus_exited(self) -> None: ...
    def close_requested(self) -> None: ...
    def go_back_requested(self) -> None: ...
    def visibility_changed(self) -> None: ...
    def about_to_popup(self) -> None: ...
    def theme_changed(self) -> None: ...
    def dpi_changed(self) -> None: ...
    def titlebar_changed(self) -> None: ...

    # Properties
    mode: int
    title: GDString
    initial_position: int
    position: Vector2i
    size: Vector2i
    current_screen: int
    mouse_passthrough_polygon: PackedVector2Array
    visible: bool
    wrap_controls: bool
    transient: bool
    exclusive: bool
    unresizable: bool
    borderless: bool
    always_on_top: bool
    transparent: bool
    unfocusable: bool
    popup_window: bool
    extend_to_title: bool
    mouse_passthrough: bool
    min_size: Vector2i
    max_size: Vector2i
    content_scale_size: Vector2i
    content_scale_mode: int
    content_scale_aspect: int
    content_scale_factor: float
    auto_translate: bool
    theme: Theme
    theme_type_variation: GDString

    # Constants
    NOTIFICATION_VISIBILITY_CHANGED: int
    NOTIFICATION_THEME_CHANGED: int


class WorldEnvironment(TypeInUse(Node)):
    @classmethod
    def new(cls) -> WorldEnvironment: ...

    # Methods
    def set_environment(self, env: Environment) -> None: ...
    def get_environment(self) -> Environment: ...
    def set_camera_attributes(self, camera_attributes: CameraAttributes) -> None: ...
    def get_camera_attributes(self) -> CameraAttributes: ...

    # Properties
    environment: Environment
    camera_attributes: CameraAttributesPractical | CameraAttributesPhysical


class XRNode3D(TypeInUse(Node3D)):

    # Methods
    def set_tracker(self, tracker_name: StringName | str) -> None: ...
    def get_tracker(self) -> StringName: ...
    def set_pose_name(self, pose: StringName | str) -> None: ...
    def get_pose_name(self) -> StringName: ...
    def get_is_active(self) -> bool: ...
    def get_has_tracking_data(self) -> bool: ...
    def get_pose(self) -> XRPose: ...
    def trigger_haptic_pulse(self, action_name: GDString | str, frequency: float, amplitude: float, duration_sec: float, delay_sec: float) -> None: ...

    # Properties
    tracker: GDString
    pose: GDString


class XROrigin3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> XROrigin3D: ...

    # Methods
    def set_world_scale(self, world_scale: float) -> None: ...
    def get_world_scale(self) -> float: ...
    def set_current(self, enabled: bool) -> None: ...
    def is_current(self) -> bool: ...

    # Properties
    world_scale: float
    current: bool


class AcceptDialog(TypeInUse(Window)):
    @classmethod
    def new(cls) -> AcceptDialog: ...

    # Methods
    def get_ok_button(self) -> Button: ...
    def get_label(self) -> Label: ...
    def set_hide_on_ok(self, enabled: bool) -> None: ...
    def get_hide_on_ok(self) -> bool: ...
    def set_close_on_escape(self, enabled: bool) -> None: ...
    def get_close_on_escape(self) -> bool: ...
    def add_button(self, text: GDString | str, right: bool = False, action: GDString | str = "") -> Button: ...
    def add_cancel_button(self, name: GDString | str) -> Button: ...
    def remove_button(self, button: Control) -> None: ...
    def register_text_enter(self, line_edit: Control) -> None: ...
    def set_text(self, text: GDString | str) -> None: ...
    def get_text(self) -> GDString: ...
    def set_autowrap(self, autowrap: bool) -> None: ...
    def has_autowrap(self) -> bool: ...
    def set_ok_button_text(self, text: GDString | str) -> None: ...
    def get_ok_button_text(self) -> GDString: ...

    # Signals
    def confirmed(self) -> None: ...
    def canceled(self) -> None: ...
    def custom_action(self, action: StringName | str) -> None: ...

    # Properties
    ok_button_text: GDString
    dialog_text: GDString
    dialog_hide_on_ok: bool
    dialog_close_on_escape: bool
    dialog_autowrap: bool


class AnimationNodeAdd2(TypeInUse(AnimationNodeSync)):
    def __init__(self): ...


class AnimationNodeAdd3(TypeInUse(AnimationNodeSync)):
    def __init__(self): ...


class AnimationNodeAnimation(TypeInUse(AnimationRootNode)):
    def __init__(self): ...

    # Enums
    class AnimationNodeAnimation.PlayMode(Enum):
        PLAY_MODE_FORWARD: int
        PLAY_MODE_BACKWARD: int

    # Methods
    def set_animation(self, name: StringName | str) -> None: ...
    def get_animation(self) -> StringName: ...
    def set_play_mode(self, mode: AnimationNodeAnimation.PlayMode) -> None: ...
    def get_play_mode(self) -> AnimationNodeAnimation.PlayMode: ...

    # Properties
    animation: StringName
    play_mode: int


class AnimationNodeBlend2(TypeInUse(AnimationNodeSync)):
    def __init__(self): ...


class AnimationNodeBlend3(TypeInUse(AnimationNodeSync)):
    def __init__(self): ...


class AnimationNodeBlendSpace1D(TypeInUse(AnimationRootNode)):
    def __init__(self): ...

    # Enums
    class AnimationNodeBlendSpace1D.BlendMode(Enum):
        BLEND_MODE_INTERPOLATED: int
        BLEND_MODE_DISCRETE: int
        BLEND_MODE_DISCRETE_CARRY: int

    # Methods
    def add_blend_point(self, node: AnimationRootNode, pos: float, at_index: int = -1) -> None: ...
    def set_blend_point_position(self, point: int, pos: float) -> None: ...
    def get_blend_point_position(self, point: int) -> float: ...
    def set_blend_point_node(self, point: int, node: AnimationRootNode) -> None: ...
    def get_blend_point_node(self, point: int) -> AnimationRootNode: ...
    def remove_blend_point(self, point: int) -> None: ...
    def get_blend_point_count(self) -> int: ...
    def set_min_space(self, min_space: float) -> None: ...
    def get_min_space(self) -> float: ...
    def set_max_space(self, max_space: float) -> None: ...
    def get_max_space(self) -> float: ...
    def set_snap(self, snap: float) -> None: ...
    def get_snap(self) -> float: ...
    def set_value_label(self, text: GDString | str) -> None: ...
    def get_value_label(self) -> GDString: ...
    def set_blend_mode(self, mode: AnimationNodeBlendSpace1D.BlendMode) -> None: ...
    def get_blend_mode(self) -> AnimationNodeBlendSpace1D.BlendMode: ...
    def set_use_sync(self, enable: bool) -> None: ...
    def is_using_sync(self) -> bool: ...

    # Properties
    min_space: float
    max_space: float
    snap: float
    value_label: GDString
    blend_mode: int
    sync: bool


class AnimationNodeBlendSpace2D(TypeInUse(AnimationRootNode)):
    def __init__(self): ...

    # Enums
    class AnimationNodeBlendSpace2D.BlendMode(Enum):
        BLEND_MODE_INTERPOLATED: int
        BLEND_MODE_DISCRETE: int
        BLEND_MODE_DISCRETE_CARRY: int

    # Methods
    def add_blend_point(self, node: AnimationRootNode, pos: Vector2, at_index: int = -1) -> None: ...
    def set_blend_point_position(self, point: int, pos: Vector2) -> None: ...
    def get_blend_point_position(self, point: int) -> Vector2: ...
    def set_blend_point_node(self, point: int, node: AnimationRootNode) -> None: ...
    def get_blend_point_node(self, point: int) -> AnimationRootNode: ...
    def remove_blend_point(self, point: int) -> None: ...
    def get_blend_point_count(self) -> int: ...
    def add_triangle(self, x: int, y: int, z: int, at_index: int = -1) -> None: ...
    def get_triangle_point(self, triangle: int, point: int) -> int: ...
    def remove_triangle(self, triangle: int) -> None: ...
    def get_triangle_count(self) -> int: ...
    def set_min_space(self, min_space: Vector2) -> None: ...
    def get_min_space(self) -> Vector2: ...
    def set_max_space(self, max_space: Vector2) -> None: ...
    def get_max_space(self) -> Vector2: ...
    def set_snap(self, snap: Vector2) -> None: ...
    def get_snap(self) -> Vector2: ...
    def set_x_label(self, text: GDString | str) -> None: ...
    def get_x_label(self) -> GDString: ...
    def set_y_label(self, text: GDString | str) -> None: ...
    def get_y_label(self) -> GDString: ...
    def set_auto_triangles(self, enable: bool) -> None: ...
    def get_auto_triangles(self) -> bool: ...
    def set_blend_mode(self, mode: AnimationNodeBlendSpace2D.BlendMode) -> None: ...
    def get_blend_mode(self) -> AnimationNodeBlendSpace2D.BlendMode: ...
    def set_use_sync(self, enable: bool) -> None: ...
    def is_using_sync(self) -> bool: ...

    # Signals
    def triangles_updated(self) -> None: ...

    # Properties
    auto_triangles: bool
    triangles: PackedInt32Array
    min_space: Vector2
    max_space: Vector2
    snap: Vector2
    x_label: GDString
    y_label: GDString
    blend_mode: int
    sync: bool


class AnimationNodeBlendTree(TypeInUse(AnimationRootNode)):
    def __init__(self): ...

    # Methods
    def add_node(self, name: StringName | str, node: AnimationNode, position: Vector2 = Vector2(0, 0)) -> None: ...
    def get_node(self, name: StringName | str) -> AnimationNode: ...
    def remove_node(self, name: StringName | str) -> None: ...
    def rename_node(self, name: StringName | str, new_name: StringName | str) -> None: ...
    def has_node(self, name: StringName | str) -> bool: ...
    def connect_node(self, input_node: StringName | str, input_index: int, output_node: StringName | str) -> None: ...
    def disconnect_node(self, input_node: StringName | str, input_index: int) -> None: ...
    def set_node_position(self, name: StringName | str, position: Vector2) -> None: ...
    def get_node_position(self, name: StringName | str) -> Vector2: ...
    def set_graph_offset(self, offset: Vector2) -> None: ...
    def get_graph_offset(self) -> Vector2: ...

    # Signals
    def node_changed(self, node_name: StringName | str) -> None: ...

    # Properties
    graph_offset: Vector2

    # Constants
    CONNECTION_OK: int
    CONNECTION_ERROR_NO_INPUT: int
    CONNECTION_ERROR_NO_INPUT_INDEX: int
    CONNECTION_ERROR_NO_OUTPUT: int
    CONNECTION_ERROR_SAME_NODE: int
    CONNECTION_ERROR_CONNECTION_EXISTS: int


class AnimationNodeOneShot(TypeInUse(AnimationNodeSync)):
    def __init__(self): ...

    # Enums
    class AnimationNodeOneShot.OneShotRequest(Enum):
        ONE_SHOT_REQUEST_NONE: int
        ONE_SHOT_REQUEST_FIRE: int
        ONE_SHOT_REQUEST_ABORT: int
        ONE_SHOT_REQUEST_FADE_OUT: int
    class AnimationNodeOneShot.MixMode(Enum):
        MIX_MODE_BLEND: int
        MIX_MODE_ADD: int

    # Methods
    def set_fadein_time(self, time: float) -> None: ...
    def get_fadein_time(self) -> float: ...
    def set_fadein_curve(self, curve: Curve) -> None: ...
    def get_fadein_curve(self) -> Curve: ...
    def set_fadeout_time(self, time: float) -> None: ...
    def get_fadeout_time(self) -> float: ...
    def set_fadeout_curve(self, curve: Curve) -> None: ...
    def get_fadeout_curve(self) -> Curve: ...
    def set_autorestart(self, active: bool) -> None: ...
    def has_autorestart(self) -> bool: ...
    def set_autorestart_delay(self, time: float) -> None: ...
    def get_autorestart_delay(self) -> float: ...
    def set_autorestart_random_delay(self, time: float) -> None: ...
    def get_autorestart_random_delay(self) -> float: ...
    def set_mix_mode(self, mode: AnimationNodeOneShot.MixMode) -> None: ...
    def get_mix_mode(self) -> AnimationNodeOneShot.MixMode: ...

    # Properties
    mix_mode: int
    fadein_time: float
    fadein_curve: Curve
    fadeout_time: float
    fadeout_curve: Curve
    autorestart: bool
    autorestart_delay: float
    autorestart_random_delay: float


class AnimationNodeStateMachine(TypeInUse(AnimationRootNode)):
    def __init__(self): ...

    # Enums
    class AnimationNodeStateMachine.StateMachineType(Enum):
        STATE_MACHINE_TYPE_ROOT: int
        STATE_MACHINE_TYPE_NESTED: int
        STATE_MACHINE_TYPE_GROUPED: int

    # Methods
    def add_node(self, name: StringName | str, node: AnimationNode, position: Vector2 = Vector2(0, 0)) -> None: ...
    def replace_node(self, name: StringName | str, node: AnimationNode) -> None: ...
    def get_node(self, name: StringName | str) -> AnimationNode: ...
    def remove_node(self, name: StringName | str) -> None: ...
    def rename_node(self, name: StringName | str, new_name: StringName | str) -> None: ...
    def has_node(self, name: StringName | str) -> bool: ...
    def get_node_name(self, node: AnimationNode) -> StringName: ...
    def set_node_position(self, name: StringName | str, position: Vector2) -> None: ...
    def get_node_position(self, name: StringName | str) -> Vector2: ...
    def has_transition(self, from_: StringName | str, to: StringName | str) -> bool: ...
    def add_transition(self, from_: StringName | str, to: StringName | str, transition: AnimationNodeStateMachineTransition) -> None: ...
    def get_transition(self, idx: int) -> AnimationNodeStateMachineTransition: ...
    def get_transition_from(self, idx: int) -> StringName: ...
    def get_transition_to(self, idx: int) -> StringName: ...
    def get_transition_count(self) -> int: ...
    def remove_transition_by_index(self, idx: int) -> None: ...
    def remove_transition(self, from_: StringName | str, to: StringName | str) -> None: ...
    def set_graph_offset(self, offset: Vector2) -> None: ...
    def get_graph_offset(self) -> Vector2: ...
    def set_state_machine_type(self, state_machine_type: AnimationNodeStateMachine.StateMachineType) -> None: ...
    def get_state_machine_type(self) -> AnimationNodeStateMachine.StateMachineType: ...
    def set_allow_transition_to_self(self, enable: bool) -> None: ...
    def is_allow_transition_to_self(self) -> bool: ...
    def set_reset_ends(self, enable: bool) -> None: ...
    def are_ends_reset(self) -> bool: ...

    # Properties
    state_machine_type: int
    allow_transition_to_self: bool
    reset_ends: bool


class AnimationNodeSub2(TypeInUse(AnimationNodeSync)):
    def __init__(self): ...


class AnimationPlayer(TypeInUse(Node)):
    @classmethod
    def new(cls) -> AnimationPlayer: ...

    # Enums
    class AnimationPlayer.AnimationProcessCallback(Enum):
        ANIMATION_PROCESS_PHYSICS: int
        ANIMATION_PROCESS_IDLE: int
        ANIMATION_PROCESS_MANUAL: int
    class AnimationPlayer.AnimationMethodCallMode(Enum):
        ANIMATION_METHOD_CALL_DEFERRED: int
        ANIMATION_METHOD_CALL_IMMEDIATE: int

    # Methods
    def add_animation_library(self, name: StringName | str, library: AnimationLibrary) -> Error: ...
    def remove_animation_library(self, name: StringName | str) -> None: ...
    def rename_animation_library(self, name: StringName | str, newname: StringName | str) -> None: ...
    def has_animation_library(self, name: StringName | str) -> bool: ...
    def get_animation_library(self, name: StringName | str) -> AnimationLibrary: ...
    def get_animation_library_list(self) -> GDArray: ...
    def has_animation(self, name: StringName | str) -> bool: ...
    def get_animation(self, name: StringName | str) -> Animation: ...
    def get_animation_list(self) -> PackedStringArray: ...
    def animation_set_next(self, anim_from: StringName | str, anim_to: StringName | str) -> None: ...
    def animation_get_next(self, anim_from: StringName | str) -> StringName: ...
    def set_blend_time(self, anim_from: StringName | str, anim_to: StringName | str, sec: float) -> None: ...
    def get_blend_time(self, anim_from: StringName | str, anim_to: StringName | str) -> float: ...
    def set_default_blend_time(self, sec: float) -> None: ...
    def get_default_blend_time(self) -> float: ...
    def play(self, name: StringName | str = "", custom_blend: float = -1, custom_speed: float = 1.0, from_end: bool = False) -> None: ...
    def play_backwards(self, name: StringName | str = "", custom_blend: float = -1) -> None: ...
    def pause(self) -> None: ...
    def stop(self, keep_state: bool = False) -> None: ...
    def is_playing(self) -> bool: ...
    def set_current_animation(self, anim: GDString | str) -> None: ...
    def get_current_animation(self) -> GDString: ...
    def set_assigned_animation(self, anim: GDString | str) -> None: ...
    def get_assigned_animation(self) -> GDString: ...
    def queue(self, name: StringName | str) -> None: ...
    def get_queue(self) -> PackedStringArray: ...
    def clear_queue(self) -> None: ...
    def set_active(self, active: bool) -> None: ...
    def is_active(self) -> bool: ...
    def set_speed_scale(self, speed: float) -> None: ...
    def get_speed_scale(self) -> float: ...
    def get_playing_speed(self) -> float: ...
    def set_autoplay(self, name: GDString | str) -> None: ...
    def get_autoplay(self) -> GDString: ...
    def set_reset_on_save_enabled(self, enabled: bool) -> None: ...
    def is_reset_on_save_enabled(self) -> bool: ...
    def set_root(self, path: NodePath | str) -> None: ...
    def get_root(self) -> NodePath: ...
    def find_animation(self, animation: Animation) -> StringName: ...
    def find_animation_library(self, animation: Animation) -> StringName: ...
    def clear_caches(self) -> None: ...
    def set_process_callback(self, mode: AnimationPlayer.AnimationProcessCallback) -> None: ...
    def get_process_callback(self) -> AnimationPlayer.AnimationProcessCallback: ...
    def set_method_call_mode(self, mode: AnimationPlayer.AnimationMethodCallMode) -> None: ...
    def get_method_call_mode(self) -> AnimationPlayer.AnimationMethodCallMode: ...
    def set_audio_max_polyphony(self, max_polyphony: int) -> None: ...
    def get_audio_max_polyphony(self) -> int: ...
    def set_movie_quit_on_finish_enabled(self, enabled: bool) -> None: ...
    def is_movie_quit_on_finish_enabled(self) -> bool: ...
    def get_current_animation_position(self) -> float: ...
    def get_current_animation_length(self) -> float: ...
    def seek(self, seconds: float, update: bool = False) -> None: ...
    def advance(self, delta: float) -> None: ...

    # Signals
    def animation_finished(self, anim_name: StringName | str) -> None: ...
    def animation_changed(self, old_name: StringName | str, new_name: StringName | str) -> None: ...
    def animation_started(self, anim_name: StringName | str) -> None: ...
    def animation_list_changed(self) -> None: ...
    def animation_libraries_updated(self) -> None: ...
    def caches_cleared(self) -> None: ...

    # Properties
    root_node: NodePath
    current_animation: StringName
    assigned_animation: StringName
    autoplay: StringName
    reset_on_save: bool
    current_animation_length: float
    current_animation_position: float
    playback_process_mode: int
    playback_default_blend_time: float
    playback_active: bool
    speed_scale: float
    method_call_mode: int
    audio_max_polyphony: int
    movie_quit_on_finish: bool


class AnimationTree(TypeInUse(Node)):
    @classmethod
    def new(cls) -> AnimationTree: ...

    # Enums
    class AnimationTree.AnimationProcessCallback(Enum):
        ANIMATION_PROCESS_PHYSICS: int
        ANIMATION_PROCESS_IDLE: int
        ANIMATION_PROCESS_MANUAL: int

    # Methods
    def set_active(self, active: bool) -> None: ...
    def is_active(self) -> bool: ...
    def set_tree_root(self, root: AnimationNode) -> None: ...
    def get_tree_root(self) -> AnimationNode: ...
    def set_process_callback(self, mode: AnimationTree.AnimationProcessCallback) -> None: ...
    def get_process_callback(self) -> AnimationTree.AnimationProcessCallback: ...
    def set_animation_player(self, root: NodePath | str) -> None: ...
    def get_animation_player(self) -> NodePath: ...
    def set_advance_expression_base_node(self, node: NodePath | str) -> None: ...
    def get_advance_expression_base_node(self) -> NodePath: ...
    def set_root_motion_track(self, path: NodePath | str) -> None: ...
    def get_root_motion_track(self) -> NodePath: ...
    def set_audio_max_polyphony(self, max_polyphony: int) -> None: ...
    def get_audio_max_polyphony(self) -> int: ...
    def get_root_motion_position(self) -> Vector3: ...
    def get_root_motion_rotation(self) -> Quaternion: ...
    def get_root_motion_scale(self) -> Vector3: ...
    def get_root_motion_position_accumulator(self) -> Vector3: ...
    def get_root_motion_rotation_accumulator(self) -> Quaternion: ...
    def get_root_motion_scale_accumulator(self) -> Vector3: ...
    def advance(self, delta: float) -> None: ...

    # Signals
    def animation_player_changed(self) -> None: ...
    def animation_started(self, anim_name: StringName | str) -> None: ...
    def animation_finished(self, anim_name: StringName | str) -> None: ...

    # Properties
    tree_root: AnimationRootNode
    anim_player: NodePath
    advance_expression_base_node: NodePath
    active: bool
    process_callback: int
    audio_max_polyphony: int
    root_motion_track: NodePath


class ArrayMesh(TypeInUse(Mesh)):
    def __init__(self): ...

    # Methods
    def add_blend_shape(self, name: StringName | str) -> None: ...
    def get_blend_shape_count(self) -> int: ...
    def get_blend_shape_name(self, index: int) -> StringName: ...
    def set_blend_shape_name(self, index: int, name: StringName | str) -> None: ...
    def clear_blend_shapes(self) -> None: ...
    def set_blend_shape_mode(self, mode: Mesh.BlendShapeMode) -> None: ...
    def get_blend_shape_mode(self) -> Mesh.BlendShapeMode: ...
    def add_surface_from_arrays(self, primitive: Mesh.PrimitiveType, arrays: GDArray, blend_shapes: GDArray = [], lods: GDDictionary | Mapping[IntoGDAny, IntoGDAny] = {}, flags: Mesh.ArrayFormat = 0) -> None: ...
    def clear_surfaces(self) -> None: ...
    def surface_update_vertex_region(self, surf_idx: int, offset: int, data: PackedByteArray) -> None: ...
    def surface_update_attribute_region(self, surf_idx: int, offset: int, data: PackedByteArray) -> None: ...
    def surface_update_skin_region(self, surf_idx: int, offset: int, data: PackedByteArray) -> None: ...
    def surface_get_array_len(self, surf_idx: int) -> int: ...
    def surface_get_array_index_len(self, surf_idx: int) -> int: ...
    def surface_get_format(self, surf_idx: int) -> Mesh.ArrayFormat: ...
    def surface_get_primitive_type(self, surf_idx: int) -> Mesh.PrimitiveType: ...
    def surface_find_by_name(self, name: GDString | str) -> int: ...
    def surface_set_name(self, surf_idx: int, name: GDString | str) -> None: ...
    def surface_get_name(self, surf_idx: int) -> GDString: ...
    def regen_normal_maps(self) -> None: ...
    def lightmap_unwrap(self, transform: Transform3D, texel_size: float) -> Error: ...
    def set_custom_aabb(self, aabb: AABB) -> None: ...
    def get_custom_aabb(self) -> AABB: ...
    def set_shadow_mesh(self, mesh: ArrayMesh) -> None: ...
    def get_shadow_mesh(self) -> ArrayMesh: ...

    # Properties
    blend_shape_mode: int
    custom_aabb: AABB
    shadow_mesh: ArrayMesh


class ArrayOccluder3D(TypeInUse(Occluder3D)):
    def __init__(self): ...

    # Methods
    def set_arrays(self, vertices: PackedVector3Array, indices: PackedInt32Array) -> None: ...
    def set_vertices(self, vertices: PackedVector3Array) -> None: ...
    def set_indices(self, indices: PackedInt32Array) -> None: ...

    # Properties
    vertices: PackedVector3Array
    indices: PackedInt32Array


class AudioEffectBandLimitFilter(TypeInUse(AudioEffectFilter)):
    def __init__(self): ...


class AudioEffectBandPassFilter(TypeInUse(AudioEffectFilter)):
    def __init__(self): ...


class AudioListener3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> AudioListener3D: ...

    # Methods
    def make_current(self) -> None: ...
    def clear_current(self) -> None: ...
    def is_current(self) -> bool: ...
    def get_listener_transform(self) -> Transform3D: ...


class AudioStreamGeneratorPlayback(TypeInUse(AudioStreamPlaybackResampled)):

    # Methods
    def push_frame(self, frame: Vector2) -> bool: ...
    def can_push_buffer(self, amount: int) -> bool: ...
    def push_buffer(self, frames: PackedVector2Array) -> bool: ...
    def get_frames_available(self) -> int: ...
    def get_skips(self) -> int: ...
    def clear_buffer(self) -> None: ...


class AudioStreamPlaybackOggVorbis(TypeInUse(AudioStreamPlaybackResampled)):
    def __init__(self): ...


class AudioStreamPlayer(TypeInUse(Node)):
    @classmethod
    def new(cls) -> AudioStreamPlayer: ...

    # Enums
    class AudioStreamPlayer.MixTarget(Enum):
        MIX_TARGET_STEREO: int
        MIX_TARGET_SURROUND: int
        MIX_TARGET_CENTER: int

    # Methods
    def set_stream(self, stream: AudioStream) -> None: ...
    def get_stream(self) -> AudioStream: ...
    def set_volume_db(self, volume_db: float) -> None: ...
    def get_volume_db(self) -> float: ...
    def set_pitch_scale(self, pitch_scale: float) -> None: ...
    def get_pitch_scale(self) -> float: ...
    def play(self, from_position: float = 0.0) -> None: ...
    def seek(self, to_position: float) -> None: ...
    def stop(self) -> None: ...
    def is_playing(self) -> bool: ...
    def get_playback_position(self) -> float: ...
    def set_bus(self, bus: StringName | str) -> None: ...
    def get_bus(self) -> StringName: ...
    def set_autoplay(self, enable: bool) -> None: ...
    def is_autoplay_enabled(self) -> bool: ...
    def set_mix_target(self, mix_target: AudioStreamPlayer.MixTarget) -> None: ...
    def get_mix_target(self) -> AudioStreamPlayer.MixTarget: ...
    def set_stream_paused(self, pause: bool) -> None: ...
    def get_stream_paused(self) -> bool: ...
    def set_max_polyphony(self, max_polyphony: int) -> None: ...
    def get_max_polyphony(self) -> int: ...
    def has_stream_playback(self) -> bool: ...
    def get_stream_playback(self) -> AudioStreamPlayback: ...

    # Signals
    def finished(self) -> None: ...

    # Properties
    stream: AudioStream
    volume_db: float
    pitch_scale: float
    playing: bool
    autoplay: bool
    stream_paused: bool
    mix_target: int
    max_polyphony: int
    bus: StringName


class AudioStreamPlayer3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> AudioStreamPlayer3D: ...

    # Enums
    class AudioStreamPlayer3D.AttenuationModel(Enum):
        ATTENUATION_INVERSE_DISTANCE: int
        ATTENUATION_INVERSE_SQUARE_DISTANCE: int
        ATTENUATION_LOGARITHMIC: int
        ATTENUATION_DISABLED: int
    class AudioStreamPlayer3D.DopplerTracking(Enum):
        DOPPLER_TRACKING_DISABLED: int
        DOPPLER_TRACKING_IDLE_STEP: int
        DOPPLER_TRACKING_PHYSICS_STEP: int

    # Methods
    def set_stream(self, stream: AudioStream) -> None: ...
    def get_stream(self) -> AudioStream: ...
    def set_volume_db(self, volume_db: float) -> None: ...
    def get_volume_db(self) -> float: ...
    def set_unit_size(self, unit_size: float) -> None: ...
    def get_unit_size(self) -> float: ...
    def set_max_db(self, max_db: float) -> None: ...
    def get_max_db(self) -> float: ...
    def set_pitch_scale(self, pitch_scale: float) -> None: ...
    def get_pitch_scale(self) -> float: ...
    def play(self, from_position: float = 0.0) -> None: ...
    def seek(self, to_position: float) -> None: ...
    def stop(self) -> None: ...
    def is_playing(self) -> bool: ...
    def get_playback_position(self) -> float: ...
    def set_bus(self, bus: StringName | str) -> None: ...
    def get_bus(self) -> StringName: ...
    def set_autoplay(self, enable: bool) -> None: ...
    def is_autoplay_enabled(self) -> bool: ...
    def set_max_distance(self, meters: float) -> None: ...
    def get_max_distance(self) -> float: ...
    def set_area_mask(self, mask: int) -> None: ...
    def get_area_mask(self) -> int: ...
    def set_emission_angle(self, degrees: float) -> None: ...
    def get_emission_angle(self) -> float: ...
    def set_emission_angle_enabled(self, enabled: bool) -> None: ...
    def is_emission_angle_enabled(self) -> bool: ...
    def set_emission_angle_filter_attenuation_db(self, db: float) -> None: ...
    def get_emission_angle_filter_attenuation_db(self) -> float: ...
    def set_attenuation_filter_cutoff_hz(self, degrees: float) -> None: ...
    def get_attenuation_filter_cutoff_hz(self) -> float: ...
    def set_attenuation_filter_db(self, db: float) -> None: ...
    def get_attenuation_filter_db(self) -> float: ...
    def set_attenuation_model(self, model: AudioStreamPlayer3D.AttenuationModel) -> None: ...
    def get_attenuation_model(self) -> AudioStreamPlayer3D.AttenuationModel: ...
    def set_doppler_tracking(self, mode: AudioStreamPlayer3D.DopplerTracking) -> None: ...
    def get_doppler_tracking(self) -> AudioStreamPlayer3D.DopplerTracking: ...
    def set_stream_paused(self, pause: bool) -> None: ...
    def get_stream_paused(self) -> bool: ...
    def set_max_polyphony(self, max_polyphony: int) -> None: ...
    def get_max_polyphony(self) -> int: ...
    def set_panning_strength(self, panning_strength: float) -> None: ...
    def get_panning_strength(self) -> float: ...
    def has_stream_playback(self) -> bool: ...
    def get_stream_playback(self) -> AudioStreamPlayback: ...

    # Signals
    def finished(self) -> None: ...

    # Properties
    stream: AudioStream
    attenuation_model: int
    volume_db: float
    unit_size: float
    max_db: float
    pitch_scale: float
    playing: bool
    autoplay: bool
    stream_paused: bool
    max_distance: float
    max_polyphony: int
    panning_strength: float
    bus: StringName
    area_mask: int
    emission_angle_enabled: bool
    emission_angle_degrees: float
    emission_angle_filter_attenuation_db: float
    attenuation_filter_cutoff_hz: float
    attenuation_filter_db: float
    doppler_tracking: int


class BaseMaterial3D(TypeInUse(Material)):

    # Enums
    class BaseMaterial3D.TextureParam(Enum):
        TEXTURE_ALBEDO: int
        TEXTURE_METALLIC: int
        TEXTURE_ROUGHNESS: int
        TEXTURE_EMISSION: int
        TEXTURE_NORMAL: int
        TEXTURE_RIM: int
        TEXTURE_CLEARCOAT: int
        TEXTURE_FLOWMAP: int
        TEXTURE_AMBIENT_OCCLUSION: int
        TEXTURE_HEIGHTMAP: int
        TEXTURE_SUBSURFACE_SCATTERING: int
        TEXTURE_SUBSURFACE_TRANSMITTANCE: int
        TEXTURE_BACKLIGHT: int
        TEXTURE_REFRACTION: int
        TEXTURE_DETAIL_MASK: int
        TEXTURE_DETAIL_ALBEDO: int
        TEXTURE_DETAIL_NORMAL: int
        TEXTURE_ORM: int
        TEXTURE_MAX: int
    class BaseMaterial3D.TextureFilter(Enum):
        TEXTURE_FILTER_NEAREST: int
        TEXTURE_FILTER_LINEAR: int
        TEXTURE_FILTER_NEAREST_WITH_MIPMAPS: int
        TEXTURE_FILTER_LINEAR_WITH_MIPMAPS: int
        TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC: int
        TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC: int
        TEXTURE_FILTER_MAX: int
    class BaseMaterial3D.DetailUV(Enum):
        DETAIL_UV_1: int
        DETAIL_UV_2: int
    class BaseMaterial3D.Transparency(Enum):
        TRANSPARENCY_DISABLED: int
        TRANSPARENCY_ALPHA: int
        TRANSPARENCY_ALPHA_SCISSOR: int
        TRANSPARENCY_ALPHA_HASH: int
        TRANSPARENCY_ALPHA_DEPTH_PRE_PASS: int
        TRANSPARENCY_MAX: int
    class BaseMaterial3D.ShadingMode(Enum):
        SHADING_MODE_UNSHADED: int
        SHADING_MODE_PER_PIXEL: int
        SHADING_MODE_PER_VERTEX: int
        SHADING_MODE_MAX: int
    class BaseMaterial3D.Feature(Enum):
        FEATURE_EMISSION: int
        FEATURE_NORMAL_MAPPING: int
        FEATURE_RIM: int
        FEATURE_CLEARCOAT: int
        FEATURE_ANISOTROPY: int
        FEATURE_AMBIENT_OCCLUSION: int
        FEATURE_HEIGHT_MAPPING: int
        FEATURE_SUBSURFACE_SCATTERING: int
        FEATURE_SUBSURFACE_TRANSMITTANCE: int
        FEATURE_BACKLIGHT: int
        FEATURE_REFRACTION: int
        FEATURE_DETAIL: int
        FEATURE_MAX: int
    class BaseMaterial3D.BlendMode(Enum):
        BLEND_MODE_MIX: int
        BLEND_MODE_ADD: int
        BLEND_MODE_SUB: int
        BLEND_MODE_MUL: int
    class BaseMaterial3D.AlphaAntiAliasing(Enum):
        ALPHA_ANTIALIASING_OFF: int
        ALPHA_ANTIALIASING_ALPHA_TO_COVERAGE: int
        ALPHA_ANTIALIASING_ALPHA_TO_COVERAGE_AND_TO_ONE: int
    class BaseMaterial3D.DepthDrawMode(Enum):
        DEPTH_DRAW_OPAQUE_ONLY: int
        DEPTH_DRAW_ALWAYS: int
        DEPTH_DRAW_DISABLED: int
    class BaseMaterial3D.CullMode(Enum):
        CULL_BACK: int
        CULL_FRONT: int
        CULL_DISABLED: int
    class BaseMaterial3D.Flags(Enum):
        FLAG_DISABLE_DEPTH_TEST: int
        FLAG_ALBEDO_FROM_VERTEX_COLOR: int
        FLAG_SRGB_VERTEX_COLOR: int
        FLAG_USE_POINT_SIZE: int
        FLAG_FIXED_SIZE: int
        FLAG_BILLBOARD_KEEP_SCALE: int
        FLAG_UV1_USE_TRIPLANAR: int
        FLAG_UV2_USE_TRIPLANAR: int
        FLAG_UV1_USE_WORLD_TRIPLANAR: int
        FLAG_UV2_USE_WORLD_TRIPLANAR: int
        FLAG_AO_ON_UV2: int
        FLAG_EMISSION_ON_UV2: int
        FLAG_ALBEDO_TEXTURE_FORCE_SRGB: int
        FLAG_DONT_RECEIVE_SHADOWS: int
        FLAG_DISABLE_AMBIENT_LIGHT: int
        FLAG_USE_SHADOW_TO_OPACITY: int
        FLAG_USE_TEXTURE_REPEAT: int
        FLAG_INVERT_HEIGHTMAP: int
        FLAG_SUBSURFACE_MODE_SKIN: int
        FLAG_PARTICLE_TRAILS_MODE: int
        FLAG_ALBEDO_TEXTURE_MSDF: int
        FLAG_MAX: int
    class BaseMaterial3D.DiffuseMode(Enum):
        DIFFUSE_BURLEY: int
        DIFFUSE_LAMBERT: int
        DIFFUSE_LAMBERT_WRAP: int
        DIFFUSE_TOON: int
    class BaseMaterial3D.SpecularMode(Enum):
        SPECULAR_SCHLICK_GGX: int
        SPECULAR_TOON: int
        SPECULAR_DISABLED: int
    class BaseMaterial3D.BillboardMode(Enum):
        BILLBOARD_DISABLED: int
        BILLBOARD_ENABLED: int
        BILLBOARD_FIXED_Y: int
        BILLBOARD_PARTICLES: int
    class BaseMaterial3D.TextureChannel(Enum):
        TEXTURE_CHANNEL_RED: int
        TEXTURE_CHANNEL_GREEN: int
        TEXTURE_CHANNEL_BLUE: int
        TEXTURE_CHANNEL_ALPHA: int
        TEXTURE_CHANNEL_GRAYSCALE: int
    class BaseMaterial3D.EmissionOperator(Enum):
        EMISSION_OP_ADD: int
        EMISSION_OP_MULTIPLY: int
    class BaseMaterial3D.DistanceFadeMode(Enum):
        DISTANCE_FADE_DISABLED: int
        DISTANCE_FADE_PIXEL_ALPHA: int
        DISTANCE_FADE_PIXEL_DITHER: int
        DISTANCE_FADE_OBJECT_DITHER: int

    # Methods
    def set_albedo(self, albedo: Color) -> None: ...
    def get_albedo(self) -> Color: ...
    def set_transparency(self, transparency: BaseMaterial3D.Transparency) -> None: ...
    def get_transparency(self) -> BaseMaterial3D.Transparency: ...
    def set_alpha_antialiasing(self, alpha_aa: BaseMaterial3D.AlphaAntiAliasing) -> None: ...
    def get_alpha_antialiasing(self) -> BaseMaterial3D.AlphaAntiAliasing: ...
    def set_alpha_antialiasing_edge(self, edge: float) -> None: ...
    def get_alpha_antialiasing_edge(self) -> float: ...
    def set_shading_mode(self, shading_mode: BaseMaterial3D.ShadingMode) -> None: ...
    def get_shading_mode(self) -> BaseMaterial3D.ShadingMode: ...
    def set_specular(self, specular: float) -> None: ...
    def get_specular(self) -> float: ...
    def set_metallic(self, metallic: float) -> None: ...
    def get_metallic(self) -> float: ...
    def set_roughness(self, roughness: float) -> None: ...
    def get_roughness(self) -> float: ...
    def set_emission(self, emission: Color) -> None: ...
    def get_emission(self) -> Color: ...
    def set_emission_energy_multiplier(self, emission_energy_multiplier: float) -> None: ...
    def get_emission_energy_multiplier(self) -> float: ...
    def set_emission_intensity(self, emission_energy_multiplier: float) -> None: ...
    def get_emission_intensity(self) -> float: ...
    def set_normal_scale(self, normal_scale: float) -> None: ...
    def get_normal_scale(self) -> float: ...
    def set_rim(self, rim: float) -> None: ...
    def get_rim(self) -> float: ...
    def set_rim_tint(self, rim_tint: float) -> None: ...
    def get_rim_tint(self) -> float: ...
    def set_clearcoat(self, clearcoat: float) -> None: ...
    def get_clearcoat(self) -> float: ...
    def set_clearcoat_roughness(self, clearcoat_roughness: float) -> None: ...
    def get_clearcoat_roughness(self) -> float: ...
    def set_anisotropy(self, anisotropy: float) -> None: ...
    def get_anisotropy(self) -> float: ...
    def set_heightmap_scale(self, heightmap_scale: float) -> None: ...
    def get_heightmap_scale(self) -> float: ...
    def set_subsurface_scattering_strength(self, strength: float) -> None: ...
    def get_subsurface_scattering_strength(self) -> float: ...
    def set_transmittance_color(self, color: Color) -> None: ...
    def get_transmittance_color(self) -> Color: ...
    def set_transmittance_depth(self, depth: float) -> None: ...
    def get_transmittance_depth(self) -> float: ...
    def set_transmittance_boost(self, boost: float) -> None: ...
    def get_transmittance_boost(self) -> float: ...
    def set_backlight(self, backlight: Color) -> None: ...
    def get_backlight(self) -> Color: ...
    def set_refraction(self, refraction: float) -> None: ...
    def get_refraction(self) -> float: ...
    def set_point_size(self, point_size: float) -> None: ...
    def get_point_size(self) -> float: ...
    def set_detail_uv(self, detail_uv: BaseMaterial3D.DetailUV) -> None: ...
    def get_detail_uv(self) -> BaseMaterial3D.DetailUV: ...
    def set_blend_mode(self, blend_mode: BaseMaterial3D.BlendMode) -> None: ...
    def get_blend_mode(self) -> BaseMaterial3D.BlendMode: ...
    def set_depth_draw_mode(self, depth_draw_mode: BaseMaterial3D.DepthDrawMode) -> None: ...
    def get_depth_draw_mode(self) -> BaseMaterial3D.DepthDrawMode: ...
    def set_cull_mode(self, cull_mode: BaseMaterial3D.CullMode) -> None: ...
    def get_cull_mode(self) -> BaseMaterial3D.CullMode: ...
    def set_diffuse_mode(self, diffuse_mode: BaseMaterial3D.DiffuseMode) -> None: ...
    def get_diffuse_mode(self) -> BaseMaterial3D.DiffuseMode: ...
    def set_specular_mode(self, specular_mode: BaseMaterial3D.SpecularMode) -> None: ...
    def get_specular_mode(self) -> BaseMaterial3D.SpecularMode: ...
    def set_flag(self, flag: BaseMaterial3D.Flags, enable: bool) -> None: ...
    def get_flag(self, flag: BaseMaterial3D.Flags) -> bool: ...
    def set_texture_filter(self, mode: BaseMaterial3D.TextureFilter) -> None: ...
    def get_texture_filter(self) -> BaseMaterial3D.TextureFilter: ...
    def set_feature(self, feature: BaseMaterial3D.Feature, enable: bool) -> None: ...
    def get_feature(self, feature: BaseMaterial3D.Feature) -> bool: ...
    def set_texture(self, param: BaseMaterial3D.TextureParam, texture: Texture2D) -> None: ...
    def get_texture(self, param: BaseMaterial3D.TextureParam) -> Texture2D: ...
    def set_detail_blend_mode(self, detail_blend_mode: BaseMaterial3D.BlendMode) -> None: ...
    def get_detail_blend_mode(self) -> BaseMaterial3D.BlendMode: ...
    def set_uv1_scale(self, scale: Vector3) -> None: ...
    def get_uv1_scale(self) -> Vector3: ...
    def set_uv1_offset(self, offset: Vector3) -> None: ...
    def get_uv1_offset(self) -> Vector3: ...
    def set_uv1_triplanar_blend_sharpness(self, sharpness: float) -> None: ...
    def get_uv1_triplanar_blend_sharpness(self) -> float: ...
    def set_uv2_scale(self, scale: Vector3) -> None: ...
    def get_uv2_scale(self) -> Vector3: ...
    def set_uv2_offset(self, offset: Vector3) -> None: ...
    def get_uv2_offset(self) -> Vector3: ...
    def set_uv2_triplanar_blend_sharpness(self, sharpness: float) -> None: ...
    def get_uv2_triplanar_blend_sharpness(self) -> float: ...
    def set_billboard_mode(self, mode: BaseMaterial3D.BillboardMode) -> None: ...
    def get_billboard_mode(self) -> BaseMaterial3D.BillboardMode: ...
    def set_particles_anim_h_frames(self, frames: int) -> None: ...
    def get_particles_anim_h_frames(self) -> int: ...
    def set_particles_anim_v_frames(self, frames: int) -> None: ...
    def get_particles_anim_v_frames(self) -> int: ...
    def set_particles_anim_loop(self, loop: bool) -> None: ...
    def get_particles_anim_loop(self) -> bool: ...
    def set_heightmap_deep_parallax(self, enable: bool) -> None: ...
    def is_heightmap_deep_parallax_enabled(self) -> bool: ...
    def set_heightmap_deep_parallax_min_layers(self, layer: int) -> None: ...
    def get_heightmap_deep_parallax_min_layers(self) -> int: ...
    def set_heightmap_deep_parallax_max_layers(self, layer: int) -> None: ...
    def get_heightmap_deep_parallax_max_layers(self) -> int: ...
    def set_heightmap_deep_parallax_flip_tangent(self, flip: bool) -> None: ...
    def get_heightmap_deep_parallax_flip_tangent(self) -> bool: ...
    def set_heightmap_deep_parallax_flip_binormal(self, flip: bool) -> None: ...
    def get_heightmap_deep_parallax_flip_binormal(self) -> bool: ...
    def set_grow(self, amount: float) -> None: ...
    def get_grow(self) -> float: ...
    def set_emission_operator(self, operator: BaseMaterial3D.EmissionOperator) -> None: ...
    def get_emission_operator(self) -> BaseMaterial3D.EmissionOperator: ...
    def set_ao_light_affect(self, amount: float) -> None: ...
    def get_ao_light_affect(self) -> float: ...
    def set_alpha_scissor_threshold(self, threshold: float) -> None: ...
    def get_alpha_scissor_threshold(self) -> float: ...
    def set_alpha_hash_scale(self, threshold: float) -> None: ...
    def get_alpha_hash_scale(self) -> float: ...
    def set_grow_enabled(self, enable: bool) -> None: ...
    def is_grow_enabled(self) -> bool: ...
    def set_metallic_texture_channel(self, channel: BaseMaterial3D.TextureChannel) -> None: ...
    def get_metallic_texture_channel(self) -> BaseMaterial3D.TextureChannel: ...
    def set_roughness_texture_channel(self, channel: BaseMaterial3D.TextureChannel) -> None: ...
    def get_roughness_texture_channel(self) -> BaseMaterial3D.TextureChannel: ...
    def set_ao_texture_channel(self, channel: BaseMaterial3D.TextureChannel) -> None: ...
    def get_ao_texture_channel(self) -> BaseMaterial3D.TextureChannel: ...
    def set_refraction_texture_channel(self, channel: BaseMaterial3D.TextureChannel) -> None: ...
    def get_refraction_texture_channel(self) -> BaseMaterial3D.TextureChannel: ...
    def set_proximity_fade_enabled(self, enabled: bool) -> None: ...
    def is_proximity_fade_enabled(self) -> bool: ...
    def set_proximity_fade_distance(self, distance: float) -> None: ...
    def get_proximity_fade_distance(self) -> float: ...
    def set_msdf_pixel_range(self, range: float) -> None: ...
    def get_msdf_pixel_range(self) -> float: ...
    def set_msdf_outline_size(self, size: float) -> None: ...
    def get_msdf_outline_size(self) -> float: ...
    def set_distance_fade(self, mode: BaseMaterial3D.DistanceFadeMode) -> None: ...
    def get_distance_fade(self) -> BaseMaterial3D.DistanceFadeMode: ...
    def set_distance_fade_max_distance(self, distance: float) -> None: ...
    def get_distance_fade_max_distance(self) -> float: ...
    def set_distance_fade_min_distance(self, distance: float) -> None: ...
    def get_distance_fade_min_distance(self) -> float: ...

    # Properties
    transparency: int
    alpha_scissor_threshold: float
    alpha_hash_scale: float
    alpha_antialiasing_mode: int
    alpha_antialiasing_edge: float
    blend_mode: int
    cull_mode: int
    depth_draw_mode: int
    no_depth_test: bool
    shading_mode: int
    diffuse_mode: int
    specular_mode: int
    disable_ambient_light: bool
    vertex_color_use_as_albedo: bool
    vertex_color_is_srgb: bool
    albedo_color: Color
    albedo_texture: Texture2D
    albedo_texture_force_srgb: bool
    albedo_texture_msdf: bool
    orm_texture: Texture2D
    metallic: float
    metallic_specular: float
    metallic_texture: Texture2D
    metallic_texture_channel: int
    roughness: float
    roughness_texture: Texture2D
    roughness_texture_channel: int
    emission_enabled: bool
    emission: Color
    emission_energy_multiplier: float
    emission_intensity: float
    emission_operator: int
    emission_on_uv2: bool
    emission_texture: Texture2D
    normal_enabled: bool
    normal_scale: float
    normal_texture: Texture2D
    rim_enabled: bool
    rim: float
    rim_tint: float
    rim_texture: Texture2D
    clearcoat_enabled: bool
    clearcoat: float
    clearcoat_roughness: float
    clearcoat_texture: Texture2D
    anisotropy_enabled: bool
    anisotropy: float
    anisotropy_flowmap: Texture2D
    ao_enabled: bool
    ao_light_affect: float
    ao_texture: Texture2D
    ao_on_uv2: bool
    ao_texture_channel: int
    heightmap_enabled: bool
    heightmap_scale: float
    heightmap_deep_parallax: bool
    heightmap_min_layers: int
    heightmap_max_layers: int
    heightmap_flip_tangent: bool
    heightmap_flip_binormal: bool
    heightmap_texture: Texture2D
    heightmap_flip_texture: bool
    subsurf_scatter_enabled: bool
    subsurf_scatter_strength: float
    subsurf_scatter_skin_mode: bool
    subsurf_scatter_texture: Texture2D
    subsurf_scatter_transmittance_enabled: bool
    subsurf_scatter_transmittance_color: Color
    subsurf_scatter_transmittance_texture: Texture2D
    subsurf_scatter_transmittance_depth: float
    subsurf_scatter_transmittance_boost: float
    backlight_enabled: bool
    backlight: Color
    backlight_texture: Texture2D
    refraction_enabled: bool
    refraction_scale: float
    refraction_texture: Texture2D
    refraction_texture_channel: int
    detail_enabled: bool
    detail_mask: Texture2D
    detail_blend_mode: int
    detail_uv_layer: int
    detail_albedo: Texture2D
    detail_normal: Texture2D
    uv1_scale: Vector3
    uv1_offset: Vector3
    uv1_triplanar: bool
    uv1_triplanar_sharpness: float
    uv1_world_triplanar: bool
    uv2_scale: Vector3
    uv2_offset: Vector3
    uv2_triplanar: bool
    uv2_triplanar_sharpness: float
    uv2_world_triplanar: bool
    texture_filter: int
    texture_repeat: bool
    disable_receive_shadows: bool
    shadow_to_opacity: bool
    billboard_mode: int
    billboard_keep_scale: bool
    particles_anim_h_frames: int
    particles_anim_v_frames: int
    particles_anim_loop: bool
    grow: bool
    grow_amount: float
    fixed_size: bool
    use_point_size: bool
    point_size: float
    use_particle_trails: bool
    proximity_fade_enabled: bool
    proximity_fade_distance: float
    msdf_pixel_range: float
    msdf_outline_size: float
    distance_fade_mode: int
    distance_fade_min_distance: float
    distance_fade_max_distance: float


class BoneAttachment3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> BoneAttachment3D: ...

    # Methods
    def set_bone_name(self, bone_name: GDString | str) -> None: ...
    def get_bone_name(self) -> GDString: ...
    def set_bone_idx(self, bone_idx: int) -> None: ...
    def get_bone_idx(self) -> int: ...
    def on_bone_pose_update(self, bone_index: int) -> None: ...
    def set_override_pose(self, override_pose: bool) -> None: ...
    def get_override_pose(self) -> bool: ...
    def set_use_external_skeleton(self, use_external_skeleton: bool) -> None: ...
    def get_use_external_skeleton(self) -> bool: ...
    def set_external_skeleton(self, external_skeleton: NodePath | str) -> None: ...
    def get_external_skeleton(self) -> NodePath: ...

    # Properties
    bone_name: StringName
    bone_idx: int
    override_pose: bool


class BoxMesh(TypeInUse(PrimitiveMesh)):
    def __init__(self): ...

    # Methods
    def set_size(self, size: Vector3) -> None: ...
    def get_size(self) -> Vector3: ...
    def set_subdivide_width(self, subdivide: int) -> None: ...
    def get_subdivide_width(self) -> int: ...
    def set_subdivide_height(self, divisions: int) -> None: ...
    def get_subdivide_height(self) -> int: ...
    def set_subdivide_depth(self, divisions: int) -> None: ...
    def get_subdivide_depth(self) -> int: ...

    # Properties
    size: Vector3
    subdivide_width: int
    subdivide_height: int
    subdivide_depth: int


class BoxOccluder3D(TypeInUse(Occluder3D)):
    def __init__(self): ...

    # Methods
    def set_size(self, size: Vector3) -> None: ...
    def get_size(self) -> Vector3: ...

    # Properties
    size: Vector3


class Camera3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> Camera3D: ...

    # Enums
    class Camera3D.ProjectionType(Enum):
        PROJECTION_PERSPECTIVE: int
        PROJECTION_ORTHOGONAL: int
        PROJECTION_FRUSTUM: int
    class Camera3D.KeepAspect(Enum):
        KEEP_WIDTH: int
        KEEP_HEIGHT: int
    class Camera3D.DopplerTracking(Enum):
        DOPPLER_TRACKING_DISABLED: int
        DOPPLER_TRACKING_IDLE_STEP: int
        DOPPLER_TRACKING_PHYSICS_STEP: int

    # Methods
    def project_ray_normal(self, screen_point: Vector2) -> Vector3: ...
    def project_local_ray_normal(self, screen_point: Vector2) -> Vector3: ...
    def project_ray_origin(self, screen_point: Vector2) -> Vector3: ...
    def unproject_position(self, world_point: Vector3) -> Vector2: ...
    def is_position_behind(self, world_point: Vector3) -> bool: ...
    def project_position(self, screen_point: Vector2, z_depth: float) -> Vector3: ...
    def set_perspective(self, fov: float, z_near: float, z_far: float) -> None: ...
    def set_orthogonal(self, size: float, z_near: float, z_far: float) -> None: ...
    def set_frustum(self, size: float, offset: Vector2, z_near: float, z_far: float) -> None: ...
    def make_current(self) -> None: ...
    def clear_current(self, enable_next: bool = True) -> None: ...
    def set_current(self, enabled: bool) -> None: ...
    def is_current(self) -> bool: ...
    def get_camera_transform(self) -> Transform3D: ...
    def get_camera_projection(self) -> Projection: ...
    def get_fov(self) -> float: ...
    def get_frustum_offset(self) -> Vector2: ...
    def get_size(self) -> float: ...
    def get_far(self) -> float: ...
    def get_near(self) -> float: ...
    def set_fov(self, fov: float) -> None: ...
    def set_frustum_offset(self, offset: Vector2) -> None: ...
    def set_size(self, size: float) -> None: ...
    def set_far(self, far: float) -> None: ...
    def set_near(self, near: float) -> None: ...
    def get_projection(self) -> Camera3D.ProjectionType: ...
    def set_projection(self, mode: Camera3D.ProjectionType) -> None: ...
    def set_h_offset(self, offset: float) -> None: ...
    def get_h_offset(self) -> float: ...
    def set_v_offset(self, offset: float) -> None: ...
    def get_v_offset(self) -> float: ...
    def set_cull_mask(self, mask: int) -> None: ...
    def get_cull_mask(self) -> int: ...
    def set_environment(self, env: Environment) -> None: ...
    def get_environment(self) -> Environment: ...
    def set_attributes(self, env: CameraAttributes) -> None: ...
    def get_attributes(self) -> CameraAttributes: ...
    def set_keep_aspect_mode(self, mode: Camera3D.KeepAspect) -> None: ...
    def get_keep_aspect_mode(self) -> Camera3D.KeepAspect: ...
    def set_doppler_tracking(self, mode: Camera3D.DopplerTracking) -> None: ...
    def get_doppler_tracking(self) -> Camera3D.DopplerTracking: ...
    def get_frustum(self) -> GDArray: ...
    def is_position_in_frustum(self, world_point: Vector3) -> bool: ...
    def get_camera_rid(self) -> RID: ...
    def get_pyramid_shape_rid(self) -> RID: ...
    def set_cull_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_cull_mask_value(self, layer_number: int) -> bool: ...

    # Properties
    keep_aspect: int
    cull_mask: int
    environment: Environment
    attributes: CameraAttributesPractical | CameraAttributesPhysical
    h_offset: float
    v_offset: float
    doppler_tracking: int
    projection: int
    current: bool
    fov: float
    size: float
    frustum_offset: Vector2
    near: float
    far: float


class CanvasItem(TypeInUse(Node)):

    # Enums
    class CanvasItem.TextureFilter(Enum):
        TEXTURE_FILTER_PARENT_NODE: int
        TEXTURE_FILTER_NEAREST: int
        TEXTURE_FILTER_LINEAR: int
        TEXTURE_FILTER_NEAREST_WITH_MIPMAPS: int
        TEXTURE_FILTER_LINEAR_WITH_MIPMAPS: int
        TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC: int
        TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC: int
        TEXTURE_FILTER_MAX: int
    class CanvasItem.TextureRepeat(Enum):
        TEXTURE_REPEAT_PARENT_NODE: int
        TEXTURE_REPEAT_DISABLED: int
        TEXTURE_REPEAT_ENABLED: int
        TEXTURE_REPEAT_MIRROR: int
        TEXTURE_REPEAT_MAX: int
    class CanvasItem.ClipChildrenMode(Enum):
        CLIP_CHILDREN_DISABLED: int
        CLIP_CHILDREN_ONLY: int
        CLIP_CHILDREN_AND_DRAW: int
        CLIP_CHILDREN_MAX: int

    # Methods
    def get_canvas_item(self) -> RID: ...
    def set_visible(self, visible: bool) -> None: ...
    def is_visible(self) -> bool: ...
    def is_visible_in_tree(self) -> bool: ...
    def show(self) -> None: ...
    def hide(self) -> None: ...
    def queue_redraw(self) -> None: ...
    def move_to_front(self) -> None: ...
    def set_as_top_level(self, enable: bool) -> None: ...
    def is_set_as_top_level(self) -> bool: ...
    def set_light_mask(self, light_mask: int) -> None: ...
    def get_light_mask(self) -> int: ...
    def set_modulate(self, modulate: Color) -> None: ...
    def get_modulate(self) -> Color: ...
    def set_self_modulate(self, self_modulate: Color) -> None: ...
    def get_self_modulate(self) -> Color: ...
    def set_z_index(self, z_index: int) -> None: ...
    def get_z_index(self) -> int: ...
    def set_z_as_relative(self, enable: bool) -> None: ...
    def is_z_relative(self) -> bool: ...
    def set_y_sort_enabled(self, enabled: bool) -> None: ...
    def is_y_sort_enabled(self) -> bool: ...
    def set_draw_behind_parent(self, enable: bool) -> None: ...
    def is_draw_behind_parent_enabled(self) -> bool: ...
    def draw_line(self, from_: Vector2, to: Vector2, color: Color, width: float = -1.0, antialiased: bool = False) -> None: ...
    def draw_dashed_line(self, from_: Vector2, to: Vector2, color: Color, width: float = -1.0, dash: float = 2.0, aligned: bool = True) -> None: ...
    def draw_polyline(self, points: PackedVector2Array, color: Color, width: float = -1.0, antialiased: bool = False) -> None: ...
    def draw_polyline_colors(self, points: PackedVector2Array, colors: PackedColorArray, width: float = -1.0, antialiased: bool = False) -> None: ...
    def draw_arc(self, center: Vector2, radius: float, start_angle: float, end_angle: float, point_count: int, color: Color, width: float = -1.0, antialiased: bool = False) -> None: ...
    def draw_multiline(self, points: PackedVector2Array, color: Color, width: float = -1.0) -> None: ...
    def draw_multiline_colors(self, points: PackedVector2Array, colors: PackedColorArray, width: float = -1.0) -> None: ...
    def draw_rect(self, rect: Rect2, color: Color, filled: bool = True, width: float = -1.0) -> None: ...
    def draw_circle(self, position: Vector2, radius: float, color: Color) -> None: ...
    def draw_texture(self, texture: Texture2D, position: Vector2, modulate: Color = Color(1, 1, 1, 1)) -> None: ...
    def draw_texture_rect(self, texture: Texture2D, rect: Rect2, tile: bool, modulate: Color = Color(1, 1, 1, 1), transpose: bool = False) -> None: ...
    def draw_texture_rect_region(self, texture: Texture2D, rect: Rect2, src_rect: Rect2, modulate: Color = Color(1, 1, 1, 1), transpose: bool = False, clip_uv: bool = True) -> None: ...
    def draw_msdf_texture_rect_region(self, texture: Texture2D, rect: Rect2, src_rect: Rect2, modulate: Color = Color(1, 1, 1, 1), outline: float = 0.0, pixel_range: float = 4.0, scale: float = 1.0) -> None: ...
    def draw_lcd_texture_rect_region(self, texture: Texture2D, rect: Rect2, src_rect: Rect2, modulate: Color = Color(1, 1, 1, 1)) -> None: ...
    def draw_style_box(self, style_box: StyleBox, rect: Rect2) -> None: ...
    def draw_primitive(self, points: PackedVector2Array, colors: PackedColorArray, uvs: PackedVector2Array, texture: Texture2D = None) -> None: ...
    def draw_polygon(self, points: PackedVector2Array, colors: PackedColorArray, uvs: PackedVector2Array = PackedVector2Array(), texture: Texture2D = None) -> None: ...
    def draw_colored_polygon(self, points: PackedVector2Array, color: Color, uvs: PackedVector2Array = PackedVector2Array(), texture: Texture2D = None) -> None: ...
    def draw_string(self, font: Font, pos: Vector2, text: GDString | str, alignment: HorizontalAlignment = 0, width: float = -1, font_size: int = 16, modulate: Color = Color(1, 1, 1, 1), justification_flags: TextServer.JustificationFlag = 3, direction: TextServer.Direction = 0, orientation: TextServer.Orientation = 0) -> None: ...
    def draw_multiline_string(self, font: Font, pos: Vector2, text: GDString | str, alignment: HorizontalAlignment = 0, width: float = -1, font_size: int = 16, max_lines: int = -1, modulate: Color = Color(1, 1, 1, 1), brk_flags: TextServer.LineBreakFlag = 3, justification_flags: TextServer.JustificationFlag = 3, direction: TextServer.Direction = 0, orientation: TextServer.Orientation = 0) -> None: ...
    def draw_string_outline(self, font: Font, pos: Vector2, text: GDString | str, alignment: HorizontalAlignment = 0, width: float = -1, font_size: int = 16, size: int = 1, modulate: Color = Color(1, 1, 1, 1), justification_flags: TextServer.JustificationFlag = 3, direction: TextServer.Direction = 0, orientation: TextServer.Orientation = 0) -> None: ...
    def draw_multiline_string_outline(self, font: Font, pos: Vector2, text: GDString | str, alignment: HorizontalAlignment = 0, width: float = -1, font_size: int = 16, max_lines: int = -1, size: int = 1, modulate: Color = Color(1, 1, 1, 1), brk_flags: TextServer.LineBreakFlag = 3, justification_flags: TextServer.JustificationFlag = 3, direction: TextServer.Direction = 0, orientation: TextServer.Orientation = 0) -> None: ...
    def draw_char(self, font: Font, pos: Vector2, char_: GDString | str, font_size: int = 16, modulate: Color = Color(1, 1, 1, 1)) -> None: ...
    def draw_char_outline(self, font: Font, pos: Vector2, char_: GDString | str, font_size: int = 16, size: int = -1, modulate: Color = Color(1, 1, 1, 1)) -> None: ...
    def draw_mesh(self, mesh: Mesh, texture: Texture2D, transform: Transform2D = Transform2D(1, 0, 0, 1, 0, 0), modulate: Color = Color(1, 1, 1, 1)) -> None: ...
    def draw_multimesh(self, multimesh: MultiMesh, texture: Texture2D) -> None: ...
    def draw_set_transform(self, position: Vector2, rotation: float = 0.0, scale: Vector2 = Vector2(1, 1)) -> None: ...
    def draw_set_transform_matrix(self, xform: Transform2D) -> None: ...
    def draw_animation_slice(self, animation_length: float, slice_begin: float, slice_end: float, offset: float = 0.0) -> None: ...
    def draw_end_animation(self) -> None: ...
    def get_transform(self) -> Transform2D: ...
    def get_global_transform(self) -> Transform2D: ...
    def get_global_transform_with_canvas(self) -> Transform2D: ...
    def get_viewport_transform(self) -> Transform2D: ...
    def get_viewport_rect(self) -> Rect2: ...
    def get_canvas_transform(self) -> Transform2D: ...
    def get_screen_transform(self) -> Transform2D: ...
    def get_local_mouse_position(self) -> Vector2: ...
    def get_global_mouse_position(self) -> Vector2: ...
    def get_canvas(self) -> RID: ...
    def get_world_2d(self) -> World2D: ...
    def set_material(self, material: Material) -> None: ...
    def get_material(self) -> Material: ...
    def set_use_parent_material(self, enable: bool) -> None: ...
    def get_use_parent_material(self) -> bool: ...
    def set_notify_local_transform(self, enable: bool) -> None: ...
    def is_local_transform_notification_enabled(self) -> bool: ...
    def set_notify_transform(self, enable: bool) -> None: ...
    def is_transform_notification_enabled(self) -> bool: ...
    def force_update_transform(self) -> None: ...
    def make_canvas_position_local(self, screen_point: Vector2) -> Vector2: ...
    def make_input_local(self, event: InputEvent) -> InputEvent: ...
    def set_visibility_layer(self, layer: int) -> None: ...
    def get_visibility_layer(self) -> int: ...
    def set_visibility_layer_bit(self, layer: int, enabled: bool) -> None: ...
    def get_visibility_layer_bit(self, layer: int) -> bool: ...
    def set_texture_filter(self, mode: CanvasItem.TextureFilter) -> None: ...
    def get_texture_filter(self) -> CanvasItem.TextureFilter: ...
    def set_texture_repeat(self, mode: CanvasItem.TextureRepeat) -> None: ...
    def get_texture_repeat(self) -> CanvasItem.TextureRepeat: ...
    def set_clip_children_mode(self, mode: CanvasItem.ClipChildrenMode) -> None: ...
    def get_clip_children_mode(self) -> CanvasItem.ClipChildrenMode: ...

    # Signals
    def draw(self) -> None: ...
    def visibility_changed(self) -> None: ...
    def hidden(self) -> None: ...
    def item_rect_changed(self) -> None: ...

    # Properties
    visible: bool
    modulate: Color
    self_modulate: Color
    show_behind_parent: bool
    top_level: bool
    clip_children: int
    light_mask: int
    visibility_layer: int
    z_index: int
    z_as_relative: bool
    y_sort_enabled: bool
    texture_filter: int
    texture_repeat: int
    material: CanvasItemMaterial | ShaderMaterial
    use_parent_material: bool

    # Constants
    NOTIFICATION_TRANSFORM_CHANGED: int
    NOTIFICATION_LOCAL_TRANSFORM_CHANGED: int
    NOTIFICATION_DRAW: int
    NOTIFICATION_VISIBILITY_CHANGED: int
    NOTIFICATION_ENTER_CANVAS: int
    NOTIFICATION_EXIT_CANVAS: int
    NOTIFICATION_WORLD_2D_CHANGED: int


class CanvasItemMaterial(TypeInUse(Material)):
    def __init__(self): ...

    # Enums
    class CanvasItemMaterial.BlendMode(Enum):
        BLEND_MODE_MIX: int
        BLEND_MODE_ADD: int
        BLEND_MODE_SUB: int
        BLEND_MODE_MUL: int
        BLEND_MODE_PREMULT_ALPHA: int
    class CanvasItemMaterial.LightMode(Enum):
        LIGHT_MODE_NORMAL: int
        LIGHT_MODE_UNSHADED: int
        LIGHT_MODE_LIGHT_ONLY: int

    # Methods
    def set_blend_mode(self, blend_mode: CanvasItemMaterial.BlendMode) -> None: ...
    def get_blend_mode(self) -> CanvasItemMaterial.BlendMode: ...
    def set_light_mode(self, light_mode: CanvasItemMaterial.LightMode) -> None: ...
    def get_light_mode(self) -> CanvasItemMaterial.LightMode: ...
    def set_particles_animation(self, particles_anim: bool) -> None: ...
    def get_particles_animation(self) -> bool: ...
    def set_particles_anim_h_frames(self, frames: int) -> None: ...
    def get_particles_anim_h_frames(self) -> int: ...
    def set_particles_anim_v_frames(self, frames: int) -> None: ...
    def get_particles_anim_v_frames(self) -> int: ...
    def set_particles_anim_loop(self, loop: bool) -> None: ...
    def get_particles_anim_loop(self) -> bool: ...

    # Properties
    blend_mode: int
    light_mode: int
    particles_animation: bool
    particles_anim_h_frames: int
    particles_anim_v_frames: int
    particles_anim_loop: bool


class CanvasLayer(TypeInUse(Node)):
    @classmethod
    def new(cls) -> CanvasLayer: ...

    # Methods
    def set_layer(self, layer: int) -> None: ...
    def get_layer(self) -> int: ...
    def set_visible(self, visible: bool) -> None: ...
    def is_visible(self) -> bool: ...
    def show(self) -> None: ...
    def hide(self) -> None: ...
    def set_transform(self, transform: Transform2D) -> None: ...
    def get_transform(self) -> Transform2D: ...
    def get_final_transform(self) -> Transform2D: ...
    def set_offset(self, offset: Vector2) -> None: ...
    def get_offset(self) -> Vector2: ...
    def set_rotation(self, radians: float) -> None: ...
    def get_rotation(self) -> float: ...
    def set_scale(self, scale: Vector2) -> None: ...
    def get_scale(self) -> Vector2: ...
    def set_follow_viewport(self, enable: bool) -> None: ...
    def is_following_viewport(self) -> bool: ...
    def set_follow_viewport_scale(self, scale: float) -> None: ...
    def get_follow_viewport_scale(self) -> float: ...
    def set_custom_viewport(self, viewport: Node) -> None: ...
    def get_custom_viewport(self) -> Node: ...
    def get_canvas(self) -> RID: ...

    # Signals
    def visibility_changed(self) -> None: ...

    # Properties
    layer: int
    visible: bool
    offset: Vector2
    rotation: float
    scale: Vector2
    transform: Transform2D
    custom_viewport: Viewport
    follow_viewport_enabled: bool
    follow_viewport_scale: float


class CapsuleMesh(TypeInUse(PrimitiveMesh)):
    def __init__(self): ...

    # Methods
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...
    def set_radial_segments(self, segments: int) -> None: ...
    def get_radial_segments(self) -> int: ...
    def set_rings(self, rings: int) -> None: ...
    def get_rings(self) -> int: ...

    # Properties
    radius: float
    height: float
    radial_segments: int
    rings: int


class CollisionObject3D(TypeInUse(Node3D)):

    # Enums
    class CollisionObject3D.DisableMode(Enum):
        DISABLE_MODE_REMOVE: int
        DISABLE_MODE_MAKE_STATIC: int
        DISABLE_MODE_KEEP_ACTIVE: int

    # Methods
    def set_collision_layer(self, layer: int) -> None: ...
    def get_collision_layer(self) -> int: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_layer_value(self, layer_number: int) -> bool: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_collision_priority(self, priority: float) -> None: ...
    def get_collision_priority(self) -> float: ...
    def set_disable_mode(self, mode: CollisionObject3D.DisableMode) -> None: ...
    def get_disable_mode(self) -> CollisionObject3D.DisableMode: ...
    def set_ray_pickable(self, ray_pickable: bool) -> None: ...
    def is_ray_pickable(self) -> bool: ...
    def set_capture_input_on_drag(self, enable: bool) -> None: ...
    def get_capture_input_on_drag(self) -> bool: ...
    def get_rid(self) -> RID: ...
    def create_shape_owner(self, owner: GDObject) -> int: ...
    def remove_shape_owner(self, owner_id: int) -> None: ...
    def get_shape_owners(self) -> PackedInt32Array: ...
    def shape_owner_set_transform(self, owner_id: int, transform: Transform3D) -> None: ...
    def shape_owner_get_transform(self, owner_id: int) -> Transform3D: ...
    def shape_owner_get_owner(self, owner_id: int) -> GDObject: ...
    def shape_owner_set_disabled(self, owner_id: int, disabled: bool) -> None: ...
    def is_shape_owner_disabled(self, owner_id: int) -> bool: ...
    def shape_owner_add_shape(self, owner_id: int, shape: Shape3D) -> None: ...
    def shape_owner_get_shape_count(self, owner_id: int) -> int: ...
    def shape_owner_get_shape(self, owner_id: int, shape_id: int) -> Shape3D: ...
    def shape_owner_get_shape_index(self, owner_id: int, shape_id: int) -> int: ...
    def shape_owner_remove_shape(self, owner_id: int, shape_id: int) -> None: ...
    def shape_owner_clear_shapes(self, owner_id: int) -> None: ...
    def shape_find_owner(self, shape_index: int) -> int: ...

    # Signals
    def input_event(self, camera: Node, event: InputEvent, position: Vector3, normal: Vector3, shape_idx: int) -> None: ...
    def mouse_entered(self) -> None: ...
    def mouse_exited(self) -> None: ...

    # Properties
    disable_mode: int
    collision_layer: int
    collision_mask: int
    collision_priority: float
    input_ray_pickable: bool
    input_capture_on_drag: bool


class CollisionPolygon3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> CollisionPolygon3D: ...

    # Methods
    def set_depth(self, depth: float) -> None: ...
    def get_depth(self) -> float: ...
    def set_polygon(self, polygon: PackedVector2Array) -> None: ...
    def get_polygon(self) -> PackedVector2Array: ...
    def set_disabled(self, disabled: bool) -> None: ...
    def is_disabled(self) -> bool: ...
    def set_margin(self, margin: float) -> None: ...
    def get_margin(self) -> float: ...

    # Properties
    depth: float
    disabled: bool
    polygon: PackedVector2Array
    margin: float


class CollisionShape3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> CollisionShape3D: ...

    # Methods
    def resource_changed(self, resource: Resource) -> None: ...
    def set_shape(self, shape: Shape3D) -> None: ...
    def get_shape(self) -> Shape3D: ...
    def set_disabled(self, enable: bool) -> None: ...
    def is_disabled(self) -> bool: ...
    def make_convex_from_siblings(self) -> None: ...

    # Properties
    shape: Shape3D
    disabled: bool


class CompressedCubemap(TypeInUse(CompressedTextureLayered)):
    def __init__(self): ...


class CompressedCubemapArray(TypeInUse(CompressedTextureLayered)):
    def __init__(self): ...


class CompressedTexture2DArray(TypeInUse(CompressedTextureLayered)):
    def __init__(self): ...


class ConfirmationDialog(TypeInUse(AcceptDialog)):
    @classmethod
    def new(cls) -> ConfirmationDialog: ...

    # Methods
    def get_cancel_button(self) -> Button: ...
    def set_cancel_button_text(self, text: GDString | str) -> None: ...
    def get_cancel_button_text(self) -> GDString: ...

    # Properties
    cancel_button_text: GDString


class Control(TypeInUse(CanvasItem)):
    @classmethod
    def new(cls) -> Control: ...

    # Enums
    class Control.FocusMode(Enum):
        FOCUS_NONE: int
        FOCUS_CLICK: int
        FOCUS_ALL: int
    class Control.CursorShape(Enum):
        CURSOR_ARROW: int
        CURSOR_IBEAM: int
        CURSOR_POINTING_HAND: int
        CURSOR_CROSS: int
        CURSOR_WAIT: int
        CURSOR_BUSY: int
        CURSOR_DRAG: int
        CURSOR_CAN_DROP: int
        CURSOR_FORBIDDEN: int
        CURSOR_VSIZE: int
        CURSOR_HSIZE: int
        CURSOR_BDIAGSIZE: int
        CURSOR_FDIAGSIZE: int
        CURSOR_MOVE: int
        CURSOR_VSPLIT: int
        CURSOR_HSPLIT: int
        CURSOR_HELP: int
    class Control.LayoutPreset(Enum):
        PRESET_TOP_LEFT: int
        PRESET_TOP_RIGHT: int
        PRESET_BOTTOM_LEFT: int
        PRESET_BOTTOM_RIGHT: int
        PRESET_CENTER_LEFT: int
        PRESET_CENTER_TOP: int
        PRESET_CENTER_RIGHT: int
        PRESET_CENTER_BOTTOM: int
        PRESET_CENTER: int
        PRESET_LEFT_WIDE: int
        PRESET_TOP_WIDE: int
        PRESET_RIGHT_WIDE: int
        PRESET_BOTTOM_WIDE: int
        PRESET_VCENTER_WIDE: int
        PRESET_HCENTER_WIDE: int
        PRESET_FULL_RECT: int
    class Control.LayoutPresetMode(Enum):
        PRESET_MODE_MINSIZE: int
        PRESET_MODE_KEEP_WIDTH: int
        PRESET_MODE_KEEP_HEIGHT: int
        PRESET_MODE_KEEP_SIZE: int
    class Control.SizeFlags(Enum):
        SIZE_SHRINK_BEGIN: int
        SIZE_FILL: int
        SIZE_EXPAND: int
        SIZE_EXPAND_FILL: int
        SIZE_SHRINK_CENTER: int
        SIZE_SHRINK_END: int
    class Control.MouseFilter(Enum):
        MOUSE_FILTER_STOP: int
        MOUSE_FILTER_PASS: int
        MOUSE_FILTER_IGNORE: int
    class Control.GrowDirection(Enum):
        GROW_DIRECTION_BEGIN: int
        GROW_DIRECTION_END: int
        GROW_DIRECTION_BOTH: int
    class Control.Anchor(Enum):
        ANCHOR_BEGIN: int
        ANCHOR_END: int
    class Control.LayoutDirection(Enum):
        LAYOUT_DIRECTION_INHERITED: int
        LAYOUT_DIRECTION_LOCALE: int
        LAYOUT_DIRECTION_LTR: int
        LAYOUT_DIRECTION_RTL: int
    class Control.TextDirection(Enum):
        TEXT_DIRECTION_INHERITED: int
        TEXT_DIRECTION_AUTO: int
        TEXT_DIRECTION_LTR: int
        TEXT_DIRECTION_RTL: int

    # Methods
    def accept_event(self) -> None: ...
    def get_minimum_size(self) -> Vector2: ...
    def get_combined_minimum_size(self) -> Vector2: ...
    def set_anchors_preset(self, preset: Control.LayoutPreset, keep_offsets: bool = False) -> None: ...
    def set_offsets_preset(self, preset: Control.LayoutPreset, resize_mode: Control.LayoutPresetMode = 0, margin: int = 0) -> None: ...
    def set_anchors_and_offsets_preset(self, preset: Control.LayoutPreset, resize_mode: Control.LayoutPresetMode = 0, margin: int = 0) -> None: ...
    def set_anchor(self, side: Side, anchor: float, keep_offset: bool = False, push_opposite_anchor: bool = True) -> None: ...
    def get_anchor(self, side: Side) -> float: ...
    def set_offset(self, side: Side, offset: float) -> None: ...
    def get_offset(self, offset: Side) -> float: ...
    def set_anchor_and_offset(self, side: Side, anchor: float, offset: float, push_opposite_anchor: bool = False) -> None: ...
    def set_begin(self, position: Vector2) -> None: ...
    def set_end(self, position: Vector2) -> None: ...
    def set_position(self, position: Vector2, keep_offsets: bool = False) -> None: ...
    def set_size(self, size: Vector2, keep_offsets: bool = False) -> None: ...
    def reset_size(self) -> None: ...
    def set_custom_minimum_size(self, size: Vector2) -> None: ...
    def set_global_position(self, position: Vector2, keep_offsets: bool = False) -> None: ...
    def set_rotation(self, radians: float) -> None: ...
    def set_rotation_degrees(self, degrees: float) -> None: ...
    def set_scale(self, scale: Vector2) -> None: ...
    def set_pivot_offset(self, pivot_offset: Vector2) -> None: ...
    def get_begin(self) -> Vector2: ...
    def get_end(self) -> Vector2: ...
    def get_position(self) -> Vector2: ...
    def get_size(self) -> Vector2: ...
    def get_rotation(self) -> float: ...
    def get_rotation_degrees(self) -> float: ...
    def get_scale(self) -> Vector2: ...
    def get_pivot_offset(self) -> Vector2: ...
    def get_custom_minimum_size(self) -> Vector2: ...
    def get_parent_area_size(self) -> Vector2: ...
    def get_global_position(self) -> Vector2: ...
    def get_screen_position(self) -> Vector2: ...
    def get_rect(self) -> Rect2: ...
    def get_global_rect(self) -> Rect2: ...
    def set_focus_mode(self, mode: Control.FocusMode) -> None: ...
    def get_focus_mode(self) -> Control.FocusMode: ...
    def has_focus(self) -> bool: ...
    def grab_focus(self) -> None: ...
    def release_focus(self) -> None: ...
    def find_prev_valid_focus(self) -> Control: ...
    def find_next_valid_focus(self) -> Control: ...
    def set_h_size_flags(self, flags: Control.SizeFlags) -> None: ...
    def get_h_size_flags(self) -> Control.SizeFlags: ...
    def set_stretch_ratio(self, ratio: float) -> None: ...
    def get_stretch_ratio(self) -> float: ...
    def set_v_size_flags(self, flags: Control.SizeFlags) -> None: ...
    def get_v_size_flags(self) -> Control.SizeFlags: ...
    def set_theme(self, theme: Theme) -> None: ...
    def get_theme(self) -> Theme: ...
    def set_theme_type_variation(self, theme_type: StringName | str) -> None: ...
    def get_theme_type_variation(self) -> StringName: ...
    def begin_bulk_theme_override(self) -> None: ...
    def end_bulk_theme_override(self) -> None: ...
    def add_theme_icon_override(self, name: StringName | str, texture: Texture2D) -> None: ...
    def add_theme_stylebox_override(self, name: StringName | str, stylebox: StyleBox) -> None: ...
    def add_theme_font_override(self, name: StringName | str, font: Font) -> None: ...
    def add_theme_font_size_override(self, name: StringName | str, font_size: int) -> None: ...
    def add_theme_color_override(self, name: StringName | str, color: Color) -> None: ...
    def add_theme_constant_override(self, name: StringName | str, constant: int) -> None: ...
    def remove_theme_icon_override(self, name: StringName | str) -> None: ...
    def remove_theme_stylebox_override(self, name: StringName | str) -> None: ...
    def remove_theme_font_override(self, name: StringName | str) -> None: ...
    def remove_theme_font_size_override(self, name: StringName | str) -> None: ...
    def remove_theme_color_override(self, name: StringName | str) -> None: ...
    def remove_theme_constant_override(self, name: StringName | str) -> None: ...
    def get_theme_icon(self, name: StringName | str, theme_type: StringName | str = "") -> Texture2D: ...
    def get_theme_stylebox(self, name: StringName | str, theme_type: StringName | str = "") -> StyleBox: ...
    def get_theme_font(self, name: StringName | str, theme_type: StringName | str = "") -> Font: ...
    def get_theme_font_size(self, name: StringName | str, theme_type: StringName | str = "") -> int: ...
    def get_theme_color(self, name: StringName | str, theme_type: StringName | str = "") -> Color: ...
    def get_theme_constant(self, name: StringName | str, theme_type: StringName | str = "") -> int: ...
    def has_theme_icon_override(self, name: StringName | str) -> bool: ...
    def has_theme_stylebox_override(self, name: StringName | str) -> bool: ...
    def has_theme_font_override(self, name: StringName | str) -> bool: ...
    def has_theme_font_size_override(self, name: StringName | str) -> bool: ...
    def has_theme_color_override(self, name: StringName | str) -> bool: ...
    def has_theme_constant_override(self, name: StringName | str) -> bool: ...
    def has_theme_icon(self, name: StringName | str, theme_type: StringName | str = "") -> bool: ...
    def has_theme_stylebox(self, name: StringName | str, theme_type: StringName | str = "") -> bool: ...
    def has_theme_font(self, name: StringName | str, theme_type: StringName | str = "") -> bool: ...
    def has_theme_font_size(self, name: StringName | str, theme_type: StringName | str = "") -> bool: ...
    def has_theme_color(self, name: StringName | str, theme_type: StringName | str = "") -> bool: ...
    def has_theme_constant(self, name: StringName | str, theme_type: StringName | str = "") -> bool: ...
    def get_theme_default_base_scale(self) -> float: ...
    def get_theme_default_font(self) -> Font: ...
    def get_theme_default_font_size(self) -> int: ...
    def get_parent_control(self) -> Control: ...
    def set_h_grow_direction(self, direction: Control.GrowDirection) -> None: ...
    def get_h_grow_direction(self) -> Control.GrowDirection: ...
    def set_v_grow_direction(self, direction: Control.GrowDirection) -> None: ...
    def get_v_grow_direction(self) -> Control.GrowDirection: ...
    def set_tooltip_text(self, hint: GDString | str) -> None: ...
    def get_tooltip_text(self) -> GDString: ...
    def get_tooltip(self, at_position: Vector2 = Vector2(0, 0)) -> GDString: ...
    def set_default_cursor_shape(self, shape: Control.CursorShape) -> None: ...
    def get_default_cursor_shape(self) -> Control.CursorShape: ...
    def get_cursor_shape(self, position: Vector2 = Vector2(0, 0)) -> Control.CursorShape: ...
    def set_focus_neighbor(self, side: Side, neighbor: NodePath | str) -> None: ...
    def get_focus_neighbor(self, side: Side) -> NodePath: ...
    def set_focus_next(self, next: NodePath | str) -> None: ...
    def get_focus_next(self) -> NodePath: ...
    def set_focus_previous(self, previous: NodePath | str) -> None: ...
    def get_focus_previous(self) -> NodePath: ...
    def force_drag(self, data: GDAny, preview: Control) -> None: ...
    def set_mouse_filter(self, filter: Control.MouseFilter) -> None: ...
    def get_mouse_filter(self) -> Control.MouseFilter: ...
    def set_force_pass_scroll_events(self, force_pass_scroll_events: bool) -> None: ...
    def is_force_pass_scroll_events(self) -> bool: ...
    def set_clip_contents(self, enable: bool) -> None: ...
    def is_clipping_contents(self) -> bool: ...
    def grab_click_focus(self) -> None: ...
    def set_drag_forwarding(self, drag_func: GDCallable, can_drop_func: GDCallable, drop_func: GDCallable) -> None: ...
    def set_drag_preview(self, control: Control) -> None: ...
    def is_drag_successful(self) -> bool: ...
    def warp_mouse(self, position: Vector2) -> None: ...
    def set_shortcut_context(self, node: Node) -> None: ...
    def get_shortcut_context(self) -> Node: ...
    def update_minimum_size(self) -> None: ...
    def set_layout_direction(self, direction: Control.LayoutDirection) -> None: ...
    def get_layout_direction(self) -> Control.LayoutDirection: ...
    def is_layout_rtl(self) -> bool: ...
    def set_auto_translate(self, enable: bool) -> None: ...
    def is_auto_translating(self) -> bool: ...
    def set_localize_numeral_system(self, enable: bool) -> None: ...
    def is_localizing_numeral_system(self) -> bool: ...

    # Signals
    def resized(self) -> None: ...
    def gui_input(self, event: InputEvent) -> None: ...
    def mouse_entered(self) -> None: ...
    def mouse_exited(self) -> None: ...
    def focus_entered(self) -> None: ...
    def focus_exited(self) -> None: ...
    def size_flags_changed(self) -> None: ...
    def minimum_size_changed(self) -> None: ...
    def theme_changed(self) -> None: ...

    # Properties
    clip_contents: bool
    custom_minimum_size: Vector2
    layout_direction: int
    layout_mode: int
    anchors_preset: int
    anchor_left: float
    anchor_top: float
    anchor_right: float
    anchor_bottom: float
    offset_left: int
    offset_top: int
    offset_right: int
    offset_bottom: int
    grow_horizontal: int
    grow_vertical: int
    size: Vector2
    position: Vector2
    global_position: Vector2
    rotation: float
    rotation_degrees: float
    scale: Vector2
    pivot_offset: Vector2
    size_flags_horizontal: int
    size_flags_vertical: int
    size_flags_stretch_ratio: float
    auto_translate: bool
    localize_numeral_system: bool
    tooltip_text: GDString
    focus_neighbor_left: NodePath
    focus_neighbor_top: NodePath
    focus_neighbor_right: NodePath
    focus_neighbor_bottom: NodePath
    focus_next: NodePath
    focus_previous: NodePath
    focus_mode: int
    mouse_filter: int
    mouse_force_pass_scroll_events: bool
    mouse_default_cursor_shape: int
    shortcut_context: GDObject
    theme: Theme
    theme_type_variation: GDString

    # Constants
    NOTIFICATION_RESIZED: int
    NOTIFICATION_MOUSE_ENTER: int
    NOTIFICATION_MOUSE_EXIT: int
    NOTIFICATION_FOCUS_ENTER: int
    NOTIFICATION_FOCUS_EXIT: int
    NOTIFICATION_THEME_CHANGED: int
    NOTIFICATION_SCROLL_BEGIN: int
    NOTIFICATION_SCROLL_END: int
    NOTIFICATION_LAYOUT_DIRECTION_CHANGED: int


class Cubemap(TypeInUse(ImageTextureLayered)):
    def __init__(self): ...

    # Methods
    def create_placeholder(self) -> Resource: ...


class CubemapArray(TypeInUse(ImageTextureLayered)):
    def __init__(self): ...

    # Methods
    def create_placeholder(self) -> Resource: ...


class CylinderMesh(TypeInUse(PrimitiveMesh)):
    def __init__(self): ...

    # Methods
    def set_top_radius(self, radius: float) -> None: ...
    def get_top_radius(self) -> float: ...
    def set_bottom_radius(self, radius: float) -> None: ...
    def get_bottom_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...
    def set_radial_segments(self, segments: int) -> None: ...
    def get_radial_segments(self) -> int: ...
    def set_rings(self, rings: int) -> None: ...
    def get_rings(self) -> int: ...
    def set_cap_top(self, cap_top: bool) -> None: ...
    def is_cap_top(self) -> bool: ...
    def set_cap_bottom(self, cap_bottom: bool) -> None: ...
    def is_cap_bottom(self) -> bool: ...

    # Properties
    top_radius: float
    bottom_radius: float
    height: float
    radial_segments: int
    rings: int
    cap_top: bool
    cap_bottom: bool


class Decal(TypeInUse(VisualInstance3D)):
    @classmethod
    def new(cls) -> Decal: ...

    # Enums
    class Decal.DecalTexture(Enum):
        TEXTURE_ALBEDO: int
        TEXTURE_NORMAL: int
        TEXTURE_ORM: int
        TEXTURE_EMISSION: int
        TEXTURE_MAX: int

    # Methods
    def set_size(self, size: Vector3) -> None: ...
    def get_size(self) -> Vector3: ...
    def set_texture(self, type: Decal.DecalTexture, texture: Texture2D) -> None: ...
    def get_texture(self, type: Decal.DecalTexture) -> Texture2D: ...
    def set_emission_energy(self, energy: float) -> None: ...
    def get_emission_energy(self) -> float: ...
    def set_albedo_mix(self, energy: float) -> None: ...
    def get_albedo_mix(self) -> float: ...
    def set_modulate(self, color: Color) -> None: ...
    def get_modulate(self) -> Color: ...
    def set_upper_fade(self, fade: float) -> None: ...
    def get_upper_fade(self) -> float: ...
    def set_lower_fade(self, fade: float) -> None: ...
    def get_lower_fade(self) -> float: ...
    def set_normal_fade(self, fade: float) -> None: ...
    def get_normal_fade(self) -> float: ...
    def set_enable_distance_fade(self, enable: bool) -> None: ...
    def is_distance_fade_enabled(self) -> bool: ...
    def set_distance_fade_begin(self, distance: float) -> None: ...
    def get_distance_fade_begin(self) -> float: ...
    def set_distance_fade_length(self, distance: float) -> None: ...
    def get_distance_fade_length(self) -> float: ...
    def set_cull_mask(self, mask: int) -> None: ...
    def get_cull_mask(self) -> int: ...

    # Properties
    size: Vector3
    texture_albedo: Texture
    texture_normal: Texture
    texture_orm: Texture
    texture_emission: Texture
    emission_energy: float
    modulate: Color
    albedo_mix: float
    normal_fade: float
    upper_fade: float
    lower_fade: float
    distance_fade_enabled: bool
    distance_fade_begin: float
    distance_fade_length: float
    cull_mask: int


class ENetPacketPeer(TypeInUse(PacketPeer)):

    # Enums
    class ENetPacketPeer.PeerState(Enum):
        STATE_DISCONNECTED: int
        STATE_CONNECTING: int
        STATE_ACKNOWLEDGING_CONNECT: int
        STATE_CONNECTION_PENDING: int
        STATE_CONNECTION_SUCCEEDED: int
        STATE_CONNECTED: int
        STATE_DISCONNECT_LATER: int
        STATE_DISCONNECTING: int
        STATE_ACKNOWLEDGING_DISCONNECT: int
        STATE_ZOMBIE: int
    class ENetPacketPeer.PeerStatistic(Enum):
        PEER_PACKET_LOSS: int
        PEER_PACKET_LOSS_VARIANCE: int
        PEER_PACKET_LOSS_EPOCH: int
        PEER_ROUND_TRIP_TIME: int
        PEER_ROUND_TRIP_TIME_VARIANCE: int
        PEER_LAST_ROUND_TRIP_TIME: int
        PEER_LAST_ROUND_TRIP_TIME_VARIANCE: int
        PEER_PACKET_THROTTLE: int
        PEER_PACKET_THROTTLE_LIMIT: int
        PEER_PACKET_THROTTLE_COUNTER: int
        PEER_PACKET_THROTTLE_EPOCH: int
        PEER_PACKET_THROTTLE_ACCELERATION: int
        PEER_PACKET_THROTTLE_DECELERATION: int
        PEER_PACKET_THROTTLE_INTERVAL: int

    # Methods
    def peer_disconnect(self, data: int = 0) -> None: ...
    def peer_disconnect_later(self, data: int = 0) -> None: ...
    def peer_disconnect_now(self, data: int = 0) -> None: ...
    def ping(self) -> None: ...
    def ping_interval(self, ping_interval: int) -> None: ...
    def reset(self) -> None: ...
    def send(self, channel: int, packet: PackedByteArray, flags: int) -> Error: ...
    def throttle_configure(self, interval: int, acceleration: int, deceleration: int) -> None: ...
    def set_timeout(self, timeout: int, timeout_min: int, timeout_max: int) -> None: ...
    def get_remote_address(self) -> GDString: ...
    def get_remote_port(self) -> int: ...
    def get_statistic(self, statistic: ENetPacketPeer.PeerStatistic) -> float: ...
    def get_state(self) -> ENetPacketPeer.PeerState: ...
    def get_channels(self) -> int: ...
    def is_active(self) -> bool: ...

    # Constants
    PACKET_LOSS_SCALE: int
    PACKET_THROTTLE_SCALE: int
    FLAG_RELIABLE: int
    FLAG_UNSEQUENCED: int
    FLAG_UNRELIABLE_FRAGMENT: int


class EditorCommandPalette(TypeInUse(ConfirmationDialog)):

    # Methods
    def add_command(self, command_name: GDString | str, key_name: GDString | str, binded_callable: GDCallable, shortcut_text: GDString | str = "None") -> None: ...
    def remove_command(self, key_name: GDString | str) -> None: ...


class EditorExportPlatformLinuxBSD(TypeInUse(EditorExportPlatformPC)):
    pass


class EditorFileDialog(TypeInUse(ConfirmationDialog)):

    # Enums
    class EditorFileDialog.FileMode(Enum):
        FILE_MODE_OPEN_FILE: int
        FILE_MODE_OPEN_FILES: int
        FILE_MODE_OPEN_DIR: int
        FILE_MODE_OPEN_ANY: int
        FILE_MODE_SAVE_FILE: int
    class EditorFileDialog.Access(Enum):
        ACCESS_RESOURCES: int
        ACCESS_USERDATA: int
        ACCESS_FILESYSTEM: int
    class EditorFileDialog.DisplayMode(Enum):
        DISPLAY_THUMBNAILS: int
        DISPLAY_LIST: int

    # Methods
    def clear_filters(self) -> None: ...
    def add_filter(self, filter: GDString | str, description: GDString | str = "") -> None: ...
    def set_filters(self, filters: PackedStringArray) -> None: ...
    def get_filters(self) -> PackedStringArray: ...
    def get_current_dir(self) -> GDString: ...
    def get_current_file(self) -> GDString: ...
    def get_current_path(self) -> GDString: ...
    def set_current_dir(self, dir: GDString | str) -> None: ...
    def set_current_file(self, file: GDString | str) -> None: ...
    def set_current_path(self, path: GDString | str) -> None: ...
    def set_file_mode(self, mode: EditorFileDialog.FileMode) -> None: ...
    def get_file_mode(self) -> EditorFileDialog.FileMode: ...
    def get_vbox(self) -> VBoxContainer: ...
    def get_line_edit(self) -> LineEdit: ...
    def set_access(self, access: EditorFileDialog.Access) -> None: ...
    def get_access(self) -> EditorFileDialog.Access: ...
    def set_show_hidden_files(self, show: bool) -> None: ...
    def is_showing_hidden_files(self) -> bool: ...
    def set_display_mode(self, mode: EditorFileDialog.DisplayMode) -> None: ...
    def get_display_mode(self) -> EditorFileDialog.DisplayMode: ...
    def set_disable_overwrite_warning(self, disable: bool) -> None: ...
    def is_overwrite_warning_disabled(self) -> bool: ...
    def invalidate(self) -> None: ...

    # Signals
    def file_selected(self, path: GDString | str) -> None: ...
    def files_selected(self, paths: PackedStringArray) -> None: ...
    def dir_selected(self, dir: GDString | str) -> None: ...

    # Properties
    access: int
    display_mode: int
    file_mode: int
    current_dir: GDString
    current_file: GDString
    current_path: GDString
    filters: PackedStringArray
    show_hidden_files: bool
    disable_overwrite_warning: bool


class EditorFileSystem(TypeInUse(Node)):

    # Methods
    def get_filesystem(self) -> EditorFileSystemDirectory: ...
    def is_scanning(self) -> bool: ...
    def get_scanning_progress(self) -> float: ...
    def scan(self) -> None: ...
    def scan_sources(self) -> None: ...
    def update_file(self, path: GDString | str) -> None: ...
    def get_filesystem_path(self, path: GDString | str) -> EditorFileSystemDirectory: ...
    def get_file_type(self, path: GDString | str) -> GDString: ...
    def reimport_files(self, files: PackedStringArray) -> None: ...

    # Signals
    def filesystem_changed(self) -> None: ...
    def script_classes_updated(self) -> None: ...
    def sources_changed(self, exist: bool) -> None: ...
    def resources_reimported(self, resources: PackedStringArray) -> None: ...
    def resources_reload(self, resources: PackedStringArray) -> None: ...


class EditorNode3DGizmo(TypeInUse(Node3DGizmo)):

    # Methods
    def add_lines(self, lines: PackedVector3Array, material: Material, billboard: bool = False, modulate: Color = Color(1, 1, 1, 1)) -> None: ...
    def add_mesh(self, mesh: Mesh, material: Material = None, transform: Transform3D = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0), skeleton: SkinReference = None) -> None: ...
    def add_collision_segments(self, segments: PackedVector3Array) -> None: ...
    def add_collision_triangles(self, triangles: TriangleMesh) -> None: ...
    def add_unscaled_billboard(self, material: Material, default_scale: float = 1, modulate: Color = Color(1, 1, 1, 1)) -> None: ...
    def add_handles(self, handles: PackedVector3Array, material: Material, ids: PackedInt32Array, billboard: bool = False, secondary: bool = False) -> None: ...
    def set_node_3d(self, node: Node) -> None: ...
    def get_node_3d(self) -> Node3D: ...
    def get_plugin(self) -> EditorNode3DGizmoPlugin: ...
    def clear(self) -> None: ...
    def set_hidden(self, hidden: bool) -> None: ...
    def is_subgizmo_selected(self, id: int) -> bool: ...
    def get_subgizmo_selection(self) -> PackedInt32Array: ...


class EditorPlugin(TypeInUse(Node)):

    # Enums
    class EditorPlugin.CustomControlContainer(Enum):
        CONTAINER_TOOLBAR: int
        CONTAINER_SPATIAL_EDITOR_MENU: int
        CONTAINER_SPATIAL_EDITOR_SIDE_LEFT: int
        CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT: int
        CONTAINER_SPATIAL_EDITOR_BOTTOM: int
        CONTAINER_CANVAS_EDITOR_MENU: int
        CONTAINER_CANVAS_EDITOR_SIDE_LEFT: int
        CONTAINER_CANVAS_EDITOR_SIDE_RIGHT: int
        CONTAINER_CANVAS_EDITOR_BOTTOM: int
        CONTAINER_INSPECTOR_BOTTOM: int
        CONTAINER_PROJECT_SETTING_TAB_LEFT: int
        CONTAINER_PROJECT_SETTING_TAB_RIGHT: int
    class EditorPlugin.DockSlot(Enum):
        DOCK_SLOT_LEFT_UL: int
        DOCK_SLOT_LEFT_BL: int
        DOCK_SLOT_LEFT_UR: int
        DOCK_SLOT_LEFT_BR: int
        DOCK_SLOT_RIGHT_UL: int
        DOCK_SLOT_RIGHT_BL: int
        DOCK_SLOT_RIGHT_UR: int
        DOCK_SLOT_RIGHT_BR: int
        DOCK_SLOT_MAX: int
    class EditorPlugin.AfterGUIInput(Enum):
        AFTER_GUI_INPUT_PASS: int
        AFTER_GUI_INPUT_STOP: int
        AFTER_GUI_INPUT_CUSTOM: int

    # Methods
    def add_control_to_container(self, container: EditorPlugin.CustomControlContainer, control: Control) -> None: ...
    def add_control_to_bottom_panel(self, control: Control, title: GDString | str) -> Button: ...
    def add_control_to_dock(self, slot: EditorPlugin.DockSlot, control: Control) -> None: ...
    def remove_control_from_docks(self, control: Control) -> None: ...
    def remove_control_from_bottom_panel(self, control: Control) -> None: ...
    def remove_control_from_container(self, container: EditorPlugin.CustomControlContainer, control: Control) -> None: ...
    def add_tool_menu_item(self, name: GDString | str, callable: GDCallable) -> None: ...
    def add_tool_submenu_item(self, name: GDString | str, submenu: PopupMenu) -> None: ...
    def remove_tool_menu_item(self, name: GDString | str) -> None: ...
    def get_export_as_menu(self) -> PopupMenu: ...
    def add_custom_type(self, type: GDString | str, base: GDString | str, script: Script, icon: Texture2D) -> None: ...
    def remove_custom_type(self, type: GDString | str) -> None: ...
    def add_autoload_singleton(self, name: GDString | str, path: GDString | str) -> None: ...
    def remove_autoload_singleton(self, name: GDString | str) -> None: ...
    def update_overlays(self) -> int: ...
    def make_bottom_panel_item_visible(self, item: Control) -> None: ...
    def hide_bottom_panel(self) -> None: ...
    def get_undo_redo(self) -> EditorUndoRedoManager: ...
    def add_undo_redo_inspector_hook_callback(self, callable: GDCallable) -> None: ...
    def remove_undo_redo_inspector_hook_callback(self, callable: GDCallable) -> None: ...
    def queue_save_layout(self) -> None: ...
    def add_translation_parser_plugin(self, parser: EditorTranslationParserPlugin) -> None: ...
    def remove_translation_parser_plugin(self, parser: EditorTranslationParserPlugin) -> None: ...
    def add_import_plugin(self, importer: EditorImportPlugin, first_priority: bool = False) -> None: ...
    def remove_import_plugin(self, importer: EditorImportPlugin) -> None: ...
    def add_scene_format_importer_plugin(self, scene_format_importer: EditorSceneFormatImporter, first_priority: bool = False) -> None: ...
    def remove_scene_format_importer_plugin(self, scene_format_importer: EditorSceneFormatImporter) -> None: ...
    def add_scene_post_import_plugin(self, scene_import_plugin: EditorScenePostImportPlugin, first_priority: bool = False) -> None: ...
    def remove_scene_post_import_plugin(self, scene_import_plugin: EditorScenePostImportPlugin) -> None: ...
    def add_export_plugin(self, plugin: EditorExportPlugin) -> None: ...
    def remove_export_plugin(self, plugin: EditorExportPlugin) -> None: ...
    def add_node_3d_gizmo_plugin(self, plugin: EditorNode3DGizmoPlugin) -> None: ...
    def remove_node_3d_gizmo_plugin(self, plugin: EditorNode3DGizmoPlugin) -> None: ...
    def add_inspector_plugin(self, plugin: EditorInspectorPlugin) -> None: ...
    def remove_inspector_plugin(self, plugin: EditorInspectorPlugin) -> None: ...
    def add_resource_conversion_plugin(self, plugin: EditorResourceConversionPlugin) -> None: ...
    def remove_resource_conversion_plugin(self, plugin: EditorResourceConversionPlugin) -> None: ...
    def set_input_event_forwarding_always_enabled(self) -> None: ...
    def set_force_draw_over_forwarding_enabled(self) -> None: ...
    def get_editor_interface(self) -> EditorInterface: ...
    def get_script_create_dialog(self) -> ScriptCreateDialog: ...
    def add_debugger_plugin(self, script: EditorDebuggerPlugin) -> None: ...
    def remove_debugger_plugin(self, script: EditorDebuggerPlugin) -> None: ...

    # Signals
    def scene_changed(self, scene_root: Node) -> None: ...
    def scene_closed(self, filepath: GDString | str) -> None: ...
    def main_screen_changed(self, screen_name: GDString | str) -> None: ...
    def resource_saved(self, resource: Resource) -> None: ...
    def project_settings_changed(self) -> None: ...


class EditorResourcePreview(TypeInUse(Node)):

    # Methods
    def queue_resource_preview(self, path: GDString | str, receiver: GDObject, receiver_func: StringName | str, userdata: GDAny) -> None: ...
    def queue_edited_resource_preview(self, resource: Resource, receiver: GDObject, receiver_func: StringName | str, userdata: GDAny) -> None: ...
    def add_preview_generator(self, generator: EditorResourcePreviewGenerator) -> None: ...
    def remove_preview_generator(self, generator: EditorResourcePreviewGenerator) -> None: ...
    def check_for_invalidation(self, path: GDString | str) -> None: ...

    # Signals
    def preview_invalidated(self, path: GDString | str) -> None: ...


class FastNoiseLite(TypeInUse(Noise)):
    def __init__(self): ...

    # Enums
    class FastNoiseLite.NoiseType(Enum):
        TYPE_VALUE: int
        TYPE_VALUE_CUBIC: int
        TYPE_PERLIN: int
        TYPE_CELLULAR: int
        TYPE_SIMPLEX: int
        TYPE_SIMPLEX_SMOOTH: int
    class FastNoiseLite.FractalType(Enum):
        FRACTAL_NONE: int
        FRACTAL_FBM: int
        FRACTAL_RIDGED: int
        FRACTAL_PING_PONG: int
    class FastNoiseLite.CellularDistanceFunction(Enum):
        DISTANCE_EUCLIDEAN: int
        DISTANCE_EUCLIDEAN_SQUARED: int
        DISTANCE_MANHATTAN: int
        DISTANCE_HYBRID: int
    class FastNoiseLite.CellularReturnType(Enum):
        RETURN_CELL_VALUE: int
        RETURN_DISTANCE: int
        RETURN_DISTANCE2: int
        RETURN_DISTANCE2_ADD: int
        RETURN_DISTANCE2_SUB: int
        RETURN_DISTANCE2_MUL: int
        RETURN_DISTANCE2_DIV: int
    class FastNoiseLite.DomainWarpType(Enum):
        DOMAIN_WARP_SIMPLEX: int
        DOMAIN_WARP_SIMPLEX_REDUCED: int
        DOMAIN_WARP_BASIC_GRID: int
    class FastNoiseLite.DomainWarpFractalType(Enum):
        DOMAIN_WARP_FRACTAL_NONE: int
        DOMAIN_WARP_FRACTAL_PROGRESSIVE: int
        DOMAIN_WARP_FRACTAL_INDEPENDENT: int

    # Methods
    def set_noise_type(self, type: FastNoiseLite.NoiseType) -> None: ...
    def get_noise_type(self) -> FastNoiseLite.NoiseType: ...
    def set_seed(self, seed: int) -> None: ...
    def get_seed(self) -> int: ...
    def set_frequency(self, freq: float) -> None: ...
    def get_frequency(self) -> float: ...
    def set_offset(self, offset: Vector3) -> None: ...
    def get_offset(self) -> Vector3: ...
    def set_fractal_type(self, type: FastNoiseLite.FractalType) -> None: ...
    def get_fractal_type(self) -> FastNoiseLite.FractalType: ...
    def set_fractal_octaves(self, octave_count: int) -> None: ...
    def get_fractal_octaves(self) -> int: ...
    def set_fractal_lacunarity(self, lacunarity: float) -> None: ...
    def get_fractal_lacunarity(self) -> float: ...
    def set_fractal_gain(self, gain: float) -> None: ...
    def get_fractal_gain(self) -> float: ...
    def set_fractal_weighted_strength(self, weighted_strength: float) -> None: ...
    def get_fractal_weighted_strength(self) -> float: ...
    def set_fractal_ping_pong_strength(self, ping_pong_strength: float) -> None: ...
    def get_fractal_ping_pong_strength(self) -> float: ...
    def set_cellular_distance_function(self, func: FastNoiseLite.CellularDistanceFunction) -> None: ...
    def get_cellular_distance_function(self) -> FastNoiseLite.CellularDistanceFunction: ...
    def set_cellular_jitter(self, jitter: float) -> None: ...
    def get_cellular_jitter(self) -> float: ...
    def set_cellular_return_type(self, ret: FastNoiseLite.CellularReturnType) -> None: ...
    def get_cellular_return_type(self) -> FastNoiseLite.CellularReturnType: ...
    def set_domain_warp_enabled(self, domain_warp_enabled: bool) -> None: ...
    def is_domain_warp_enabled(self) -> bool: ...
    def set_domain_warp_type(self, domain_warp_type: FastNoiseLite.DomainWarpType) -> None: ...
    def get_domain_warp_type(self) -> FastNoiseLite.DomainWarpType: ...
    def set_domain_warp_amplitude(self, domain_warp_amplitude: float) -> None: ...
    def get_domain_warp_amplitude(self) -> float: ...
    def set_domain_warp_frequency(self, domain_warp_frequency: float) -> None: ...
    def get_domain_warp_frequency(self) -> float: ...
    def set_domain_warp_fractal_type(self, domain_warp_fractal_type: FastNoiseLite.DomainWarpFractalType) -> None: ...
    def get_domain_warp_fractal_type(self) -> FastNoiseLite.DomainWarpFractalType: ...
    def set_domain_warp_fractal_octaves(self, domain_warp_octave_count: int) -> None: ...
    def get_domain_warp_fractal_octaves(self) -> int: ...
    def set_domain_warp_fractal_lacunarity(self, domain_warp_lacunarity: float) -> None: ...
    def get_domain_warp_fractal_lacunarity(self) -> float: ...
    def set_domain_warp_fractal_gain(self, domain_warp_gain: float) -> None: ...
    def get_domain_warp_fractal_gain(self) -> float: ...

    # Properties
    noise_type: int
    seed: int
    frequency: float
    offset: Vector3
    fractal_type: int
    fractal_octaves: int
    fractal_lacunarity: float
    fractal_gain: float
    fractal_weighted_strength: float
    fractal_ping_pong_strength: float
    cellular_distance_function: int
    cellular_jitter: float
    cellular_return_type: int
    domain_warp_enabled: bool
    domain_warp_type: int
    domain_warp_amplitude: float
    domain_warp_frequency: float
    domain_warp_fractal_type: int
    domain_warp_fractal_octaves: int
    domain_warp_fractal_lacunarity: float
    domain_warp_fractal_gain: float


class FileDialog(TypeInUse(ConfirmationDialog)):
    @classmethod
    def new(cls) -> FileDialog: ...

    # Enums
    class FileDialog.FileMode(Enum):
        FILE_MODE_OPEN_FILE: int
        FILE_MODE_OPEN_FILES: int
        FILE_MODE_OPEN_DIR: int
        FILE_MODE_OPEN_ANY: int
        FILE_MODE_SAVE_FILE: int
    class FileDialog.Access(Enum):
        ACCESS_RESOURCES: int
        ACCESS_USERDATA: int
        ACCESS_FILESYSTEM: int

    # Methods
    def clear_filters(self) -> None: ...
    def add_filter(self, filter: GDString | str, description: GDString | str = "") -> None: ...
    def set_filters(self, filters: PackedStringArray) -> None: ...
    def get_filters(self) -> PackedStringArray: ...
    def get_current_dir(self) -> GDString: ...
    def get_current_file(self) -> GDString: ...
    def get_current_path(self) -> GDString: ...
    def set_current_dir(self, dir: GDString | str) -> None: ...
    def set_current_file(self, file: GDString | str) -> None: ...
    def set_current_path(self, path: GDString | str) -> None: ...
    def set_mode_overrides_title(self, override: bool) -> None: ...
    def is_mode_overriding_title(self) -> bool: ...
    def set_file_mode(self, mode: FileDialog.FileMode) -> None: ...
    def get_file_mode(self) -> FileDialog.FileMode: ...
    def get_vbox(self) -> VBoxContainer: ...
    def get_line_edit(self) -> LineEdit: ...
    def set_access(self, access: FileDialog.Access) -> None: ...
    def get_access(self) -> FileDialog.Access: ...
    def set_root_subfolder(self, dir: GDString | str) -> None: ...
    def get_root_subfolder(self) -> GDString: ...
    def set_show_hidden_files(self, show: bool) -> None: ...
    def is_showing_hidden_files(self) -> bool: ...
    def deselect_all(self) -> None: ...
    def invalidate(self) -> None: ...

    # Signals
    def file_selected(self, path: GDString | str) -> None: ...
    def files_selected(self, paths: PackedStringArray) -> None: ...
    def dir_selected(self, dir: GDString | str) -> None: ...

    # Properties
    mode_overrides_title: bool
    file_mode: int
    access: int
    root_subfolder: GDString
    filters: PackedStringArray
    show_hidden_files: bool
    current_dir: GDString
    current_file: GDString
    current_path: GDString


class FogMaterial(TypeInUse(Material)):
    def __init__(self): ...

    # Methods
    def set_density(self, density: float) -> None: ...
    def get_density(self) -> float: ...
    def set_albedo(self, albedo: Color) -> None: ...
    def get_albedo(self) -> Color: ...
    def set_emission(self, emission: Color) -> None: ...
    def get_emission(self) -> Color: ...
    def set_height_falloff(self, height_falloff: float) -> None: ...
    def get_height_falloff(self) -> float: ...
    def set_edge_fade(self, edge_fade: float) -> None: ...
    def get_edge_fade(self) -> float: ...
    def set_density_texture(self, density_texture: Texture3D) -> None: ...
    def get_density_texture(self) -> Texture3D: ...

    # Properties
    density: float
    albedo: Color
    emission: Color
    height_falloff: float
    edge_fade: float
    density_texture: Texture3D


class FogVolume(TypeInUse(VisualInstance3D)):
    @classmethod
    def new(cls) -> FogVolume: ...

    # Methods
    def set_size(self, size: Vector3) -> None: ...
    def get_size(self) -> Vector3: ...
    def set_shape(self, shape: RenderingServer.FogVolumeShape) -> None: ...
    def get_shape(self) -> RenderingServer.FogVolumeShape: ...
    def set_material(self, material: Material) -> None: ...
    def get_material(self) -> Material: ...

    # Properties
    size: Vector3
    shape: int
    material: FogMaterial | ShaderMaterial


class GPUParticlesAttractor3D(TypeInUse(VisualInstance3D)):

    # Methods
    def set_cull_mask(self, mask: int) -> None: ...
    def get_cull_mask(self) -> int: ...
    def set_strength(self, strength: float) -> None: ...
    def get_strength(self) -> float: ...
    def set_attenuation(self, attenuation: float) -> None: ...
    def get_attenuation(self) -> float: ...
    def set_directionality(self, amount: float) -> None: ...
    def get_directionality(self) -> float: ...

    # Properties
    strength: float
    attenuation: float
    directionality: float
    cull_mask: int


class GPUParticlesAttractorBox3D(TypeInUse(GPUParticlesAttractor3D)):
    @classmethod
    def new(cls) -> GPUParticlesAttractorBox3D: ...

    # Methods
    def set_size(self, size: Vector3) -> None: ...
    def get_size(self) -> Vector3: ...

    # Properties
    size: Vector3


class GPUParticlesAttractorSphere3D(TypeInUse(GPUParticlesAttractor3D)):
    @classmethod
    def new(cls) -> GPUParticlesAttractorSphere3D: ...

    # Methods
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...

    # Properties
    radius: float


class GPUParticlesAttractorVectorField3D(TypeInUse(GPUParticlesAttractor3D)):
    @classmethod
    def new(cls) -> GPUParticlesAttractorVectorField3D: ...

    # Methods
    def set_size(self, size: Vector3) -> None: ...
    def get_size(self) -> Vector3: ...
    def set_texture(self, texture: Texture3D) -> None: ...
    def get_texture(self) -> Texture3D: ...

    # Properties
    size: Vector3
    texture: Texture3D


class GPUParticlesCollision3D(TypeInUse(VisualInstance3D)):

    # Methods
    def set_cull_mask(self, mask: int) -> None: ...
    def get_cull_mask(self) -> int: ...

    # Properties
    cull_mask: int


class GPUParticlesCollisionBox3D(TypeInUse(GPUParticlesCollision3D)):
    @classmethod
    def new(cls) -> GPUParticlesCollisionBox3D: ...

    # Methods
    def set_size(self, size: Vector3) -> None: ...
    def get_size(self) -> Vector3: ...

    # Properties
    size: Vector3


class GPUParticlesCollisionHeightField3D(TypeInUse(GPUParticlesCollision3D)):
    @classmethod
    def new(cls) -> GPUParticlesCollisionHeightField3D: ...

    # Enums
    class GPUParticlesCollisionHeightField3D.Resolution(Enum):
        RESOLUTION_256: int
        RESOLUTION_512: int
        RESOLUTION_1024: int
        RESOLUTION_2048: int
        RESOLUTION_4096: int
        RESOLUTION_8192: int
        RESOLUTION_MAX: int
    class GPUParticlesCollisionHeightField3D.UpdateMode(Enum):
        UPDATE_MODE_WHEN_MOVED: int
        UPDATE_MODE_ALWAYS: int

    # Methods
    def set_size(self, size: Vector3) -> None: ...
    def get_size(self) -> Vector3: ...
    def set_resolution(self, resolution: GPUParticlesCollisionHeightField3D.Resolution) -> None: ...
    def get_resolution(self) -> GPUParticlesCollisionHeightField3D.Resolution: ...
    def set_update_mode(self, update_mode: GPUParticlesCollisionHeightField3D.UpdateMode) -> None: ...
    def get_update_mode(self) -> GPUParticlesCollisionHeightField3D.UpdateMode: ...
    def set_follow_camera_enabled(self, enabled: bool) -> None: ...
    def is_follow_camera_enabled(self) -> bool: ...

    # Properties
    size: Vector3
    resolution: int
    update_mode: int
    follow_camera_enabled: bool


class GPUParticlesCollisionSDF3D(TypeInUse(GPUParticlesCollision3D)):
    @classmethod
    def new(cls) -> GPUParticlesCollisionSDF3D: ...

    # Enums
    class GPUParticlesCollisionSDF3D.Resolution(Enum):
        RESOLUTION_16: int
        RESOLUTION_32: int
        RESOLUTION_64: int
        RESOLUTION_128: int
        RESOLUTION_256: int
        RESOLUTION_512: int
        RESOLUTION_MAX: int

    # Methods
    def set_size(self, size: Vector3) -> None: ...
    def get_size(self) -> Vector3: ...
    def set_resolution(self, resolution: GPUParticlesCollisionSDF3D.Resolution) -> None: ...
    def get_resolution(self) -> GPUParticlesCollisionSDF3D.Resolution: ...
    def set_texture(self, texture: Texture3D) -> None: ...
    def get_texture(self) -> Texture3D: ...
    def set_thickness(self, thickness: float) -> None: ...
    def get_thickness(self) -> float: ...
    def set_bake_mask(self, mask: int) -> None: ...
    def get_bake_mask(self) -> int: ...
    def set_bake_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_bake_mask_value(self, layer_number: int) -> bool: ...

    # Properties
    size: Vector3
    resolution: int
    thickness: float
    bake_mask: int
    texture: Texture3D


class GPUParticlesCollisionSphere3D(TypeInUse(GPUParticlesCollision3D)):
    @classmethod
    def new(cls) -> GPUParticlesCollisionSphere3D: ...

    # Methods
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...

    # Properties
    radius: float


class GeometryInstance3D(TypeInUse(VisualInstance3D)):
    @classmethod
    def new(cls) -> GeometryInstance3D: ...

    # Enums
    class GeometryInstance3D.ShadowCastingSetting(Enum):
        SHADOW_CASTING_SETTING_OFF: int
        SHADOW_CASTING_SETTING_ON: int
        SHADOW_CASTING_SETTING_DOUBLE_SIDED: int
        SHADOW_CASTING_SETTING_SHADOWS_ONLY: int
    class GeometryInstance3D.GIMode(Enum):
        GI_MODE_DISABLED: int
        GI_MODE_STATIC: int
        GI_MODE_DYNAMIC: int
    class GeometryInstance3D.LightmapScale(Enum):
        LIGHTMAP_SCALE_1X: int
        LIGHTMAP_SCALE_2X: int
        LIGHTMAP_SCALE_4X: int
        LIGHTMAP_SCALE_8X: int
        LIGHTMAP_SCALE_MAX: int
    class GeometryInstance3D.VisibilityRangeFadeMode(Enum):
        VISIBILITY_RANGE_FADE_DISABLED: int
        VISIBILITY_RANGE_FADE_SELF: int
        VISIBILITY_RANGE_FADE_DEPENDENCIES: int

    # Methods
    def set_material_override(self, material: Material) -> None: ...
    def get_material_override(self) -> Material: ...
    def set_material_overlay(self, material: Material) -> None: ...
    def get_material_overlay(self) -> Material: ...
    def set_cast_shadows_setting(self, shadow_casting_setting: GeometryInstance3D.ShadowCastingSetting) -> None: ...
    def get_cast_shadows_setting(self) -> GeometryInstance3D.ShadowCastingSetting: ...
    def set_lod_bias(self, bias: float) -> None: ...
    def get_lod_bias(self) -> float: ...
    def set_transparency(self, transparency: float) -> None: ...
    def get_transparency(self) -> float: ...
    def set_visibility_range_end_margin(self, distance: float) -> None: ...
    def get_visibility_range_end_margin(self) -> float: ...
    def set_visibility_range_end(self, distance: float) -> None: ...
    def get_visibility_range_end(self) -> float: ...
    def set_visibility_range_begin_margin(self, distance: float) -> None: ...
    def get_visibility_range_begin_margin(self) -> float: ...
    def set_visibility_range_begin(self, distance: float) -> None: ...
    def get_visibility_range_begin(self) -> float: ...
    def set_visibility_range_fade_mode(self, mode: GeometryInstance3D.VisibilityRangeFadeMode) -> None: ...
    def get_visibility_range_fade_mode(self) -> GeometryInstance3D.VisibilityRangeFadeMode: ...
    def set_instance_shader_parameter(self, name: StringName | str, value: GDAny) -> None: ...
    def get_instance_shader_parameter(self, name: StringName | str) -> GDAny: ...
    def set_extra_cull_margin(self, margin: float) -> None: ...
    def get_extra_cull_margin(self) -> float: ...
    def set_lightmap_scale(self, scale: GeometryInstance3D.LightmapScale) -> None: ...
    def get_lightmap_scale(self) -> GeometryInstance3D.LightmapScale: ...
    def set_gi_mode(self, mode: GeometryInstance3D.GIMode) -> None: ...
    def get_gi_mode(self) -> GeometryInstance3D.GIMode: ...
    def set_ignore_occlusion_culling(self, ignore_culling: bool) -> None: ...
    def is_ignoring_occlusion_culling(self) -> bool: ...
    def set_custom_aabb(self, aabb: AABB) -> None: ...
    def get_custom_aabb(self) -> AABB: ...

    # Properties
    material_override: BaseMaterial3D | ShaderMaterial
    material_overlay: BaseMaterial3D | ShaderMaterial
    transparency: float
    cast_shadow: int
    extra_cull_margin: float
    custom_aabb: AABB
    lod_bias: float
    ignore_occlusion_culling: bool
    gi_mode: int
    gi_lightmap_scale: int
    visibility_range_begin: float
    visibility_range_begin_margin: float
    visibility_range_end: float
    visibility_range_end_margin: float
    visibility_range_fade_mode: int


class GraphEdit(TypeInUse(Control)):
    @classmethod
    def new(cls) -> GraphEdit: ...

    # Enums
    class GraphEdit.PanningScheme(Enum):
        SCROLL_ZOOMS: int
        SCROLL_PANS: int

    # Methods
    def connect_node(self, from_node: StringName | str, from_port: int, to_node: StringName | str, to_port: int) -> Error: ...
    def is_node_connected(self, from_node: StringName | str, from_port: int, to_node: StringName | str, to_port: int) -> bool: ...
    def disconnect_node(self, from_node: StringName | str, from_port: int, to_node: StringName | str, to_port: int) -> None: ...
    def set_connection_activity(self, from_node: StringName | str, from_port: int, to_node: StringName | str, to_port: int, amount: float) -> None: ...
    def get_connection_list(self) -> GDArray: ...
    def clear_connections(self) -> None: ...
    def force_connection_drag_end(self) -> None: ...
    def get_scroll_ofs(self) -> Vector2: ...
    def set_scroll_ofs(self, offset: Vector2) -> None: ...
    def add_valid_right_disconnect_type(self, type: int) -> None: ...
    def remove_valid_right_disconnect_type(self, type: int) -> None: ...
    def add_valid_left_disconnect_type(self, type: int) -> None: ...
    def remove_valid_left_disconnect_type(self, type: int) -> None: ...
    def add_valid_connection_type(self, from_type: int, to_type: int) -> None: ...
    def remove_valid_connection_type(self, from_type: int, to_type: int) -> None: ...
    def is_valid_connection_type(self, from_type: int, to_type: int) -> bool: ...
    def get_connection_line(self, from_node: Vector2, to_node: Vector2) -> PackedVector2Array: ...
    def set_panning_scheme(self, scheme: GraphEdit.PanningScheme) -> None: ...
    def get_panning_scheme(self) -> GraphEdit.PanningScheme: ...
    def set_zoom(self, zoom: float) -> None: ...
    def get_zoom(self) -> float: ...
    def set_zoom_min(self, zoom_min: float) -> None: ...
    def get_zoom_min(self) -> float: ...
    def set_zoom_max(self, zoom_max: float) -> None: ...
    def get_zoom_max(self) -> float: ...
    def set_zoom_step(self, zoom_step: float) -> None: ...
    def get_zoom_step(self) -> float: ...
    def set_show_zoom_label(self, enable: bool) -> None: ...
    def is_showing_zoom_label(self) -> bool: ...
    def set_snap(self, pixels: int) -> None: ...
    def get_snap(self) -> int: ...
    def set_use_snap(self, enable: bool) -> None: ...
    def is_using_snap(self) -> bool: ...
    def set_connection_lines_curvature(self, curvature: float) -> None: ...
    def get_connection_lines_curvature(self) -> float: ...
    def set_connection_lines_thickness(self, pixels: float) -> None: ...
    def get_connection_lines_thickness(self) -> float: ...
    def set_connection_lines_antialiased(self, pixels: bool) -> None: ...
    def is_connection_lines_antialiased(self) -> bool: ...
    def set_minimap_size(self, size: Vector2) -> None: ...
    def get_minimap_size(self) -> Vector2: ...
    def set_minimap_opacity(self, opacity: float) -> None: ...
    def get_minimap_opacity(self) -> float: ...
    def set_minimap_enabled(self, enable: bool) -> None: ...
    def is_minimap_enabled(self) -> bool: ...
    def set_arrange_nodes_button_hidden(self, enable: bool) -> None: ...
    def is_arrange_nodes_button_hidden(self) -> bool: ...
    def set_right_disconnects(self, enable: bool) -> None: ...
    def is_right_disconnects_enabled(self) -> bool: ...
    def get_zoom_hbox(self) -> HBoxContainer: ...
    def arrange_nodes(self) -> None: ...
    def set_selected(self, node: Node) -> None: ...

    # Signals
    def connection_request(self, from_node: StringName | str, from_port: int, to_node: StringName | str, to_port: int) -> None: ...
    def disconnection_request(self, from_node: StringName | str, from_port: int, to_node: StringName | str, to_port: int) -> None: ...
    def popup_request(self, position: Vector2) -> None: ...
    def duplicate_nodes_request(self) -> None: ...
    def copy_nodes_request(self) -> None: ...
    def paste_nodes_request(self) -> None: ...
    def node_selected(self, node: Node) -> None: ...
    def node_deselected(self, node: Node) -> None: ...
    def connection_to_empty(self, from_node: StringName | str, from_port: int, release_position: Vector2) -> None: ...
    def connection_from_empty(self, to_node: StringName | str, to_port: int, release_position: Vector2) -> None: ...
    def delete_nodes_request(self, nodes: GDArray) -> None: ...
    def begin_node_move(self) -> None: ...
    def end_node_move(self) -> None: ...
    def scroll_offset_changed(self, offset: Vector2) -> None: ...
    def connection_drag_started(self, from_node: StringName | str, from_port: int, is_output: bool) -> None: ...
    def connection_drag_ended(self) -> None: ...

    # Properties
    right_disconnects: bool
    scroll_offset: Vector2
    snap_distance: int
    use_snap: bool
    panning_scheme: int
    connection_lines_curvature: float
    connection_lines_thickness: float
    connection_lines_antialiased: bool
    zoom: float
    zoom_min: float
    zoom_max: float
    zoom_step: float
    show_zoom_label: bool
    minimap_enabled: bool
    minimap_size: Vector2
    minimap_opacity: float
    arrange_nodes_button_hidden: bool


class GridMap(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> GridMap: ...

    # Methods
    def set_collision_layer(self, layer: int) -> None: ...
    def get_collision_layer(self) -> int: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_collision_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_layer_value(self, layer_number: int) -> bool: ...
    def set_collision_priority(self, priority: float) -> None: ...
    def get_collision_priority(self) -> float: ...
    def set_physics_material(self, material: PhysicsMaterial) -> None: ...
    def get_physics_material(self) -> PhysicsMaterial: ...
    def set_bake_navigation(self, bake_navigation: bool) -> None: ...
    def is_baking_navigation(self) -> bool: ...
    def set_navigation_map(self, navigation_map: RID) -> None: ...
    def get_navigation_map(self) -> RID: ...
    def set_mesh_library(self, mesh_library: MeshLibrary) -> None: ...
    def get_mesh_library(self) -> MeshLibrary: ...
    def set_cell_size(self, size: Vector3) -> None: ...
    def get_cell_size(self) -> Vector3: ...
    def set_cell_scale(self, scale: float) -> None: ...
    def get_cell_scale(self) -> float: ...
    def set_octant_size(self, size: int) -> None: ...
    def get_octant_size(self) -> int: ...
    def set_cell_item(self, position: Vector3i, item: int, orientation: int = 0) -> None: ...
    def get_cell_item(self, position: Vector3i) -> int: ...
    def get_cell_item_orientation(self, position: Vector3i) -> int: ...
    def get_cell_item_basis(self, position: Vector3i) -> Basis: ...
    def get_basis_with_orthogonal_index(self, index: int) -> Basis: ...
    def get_orthogonal_index_from_basis(self, basis: Basis) -> int: ...
    def local_to_map(self, local_position: Vector3) -> Vector3i: ...
    def map_to_local(self, map_position: Vector3i) -> Vector3: ...
    def resource_changed(self, resource: Resource) -> None: ...
    def set_center_x(self, enable: bool) -> None: ...
    def get_center_x(self) -> bool: ...
    def set_center_y(self, enable: bool) -> None: ...
    def get_center_y(self) -> bool: ...
    def set_center_z(self, enable: bool) -> None: ...
    def get_center_z(self) -> bool: ...
    def clear(self) -> None: ...
    def get_used_cells(self) -> GDArray: ...
    def get_used_cells_by_item(self, item: int) -> GDArray: ...
    def get_meshes(self) -> GDArray: ...
    def get_bake_meshes(self) -> GDArray: ...
    def get_bake_mesh_instance(self, idx: int) -> RID: ...
    def clear_baked_meshes(self) -> None: ...
    def make_baked_meshes(self, gen_lightmap_uv: bool = False, lightmap_uv_texel_size: float = 0.1) -> None: ...

    # Signals
    def cell_size_changed(self, cell_size: Vector3) -> None: ...

    # Properties
    mesh_library: MeshLibrary
    physics_material: PhysicsMaterial
    cell_size: Vector3
    cell_octant_size: int
    cell_center_x: bool
    cell_center_y: bool
    cell_center_z: bool
    cell_scale: float
    collision_layer: int
    collision_mask: int
    collision_priority: float
    bake_navigation: bool

    # Constants
    INVALID_CELL_ITEM: int


class HTTPRequest(TypeInUse(Node)):
    @classmethod
    def new(cls) -> HTTPRequest: ...

    # Enums
    class HTTPRequest.Result(Enum):
        RESULT_SUCCESS: int
        RESULT_CHUNKED_BODY_SIZE_MISMATCH: int
        RESULT_CANT_CONNECT: int
        RESULT_CANT_RESOLVE: int
        RESULT_CONNECTION_ERROR: int
        RESULT_TLS_HANDSHAKE_ERROR: int
        RESULT_NO_RESPONSE: int
        RESULT_BODY_SIZE_LIMIT_EXCEEDED: int
        RESULT_BODY_DECOMPRESS_FAILED: int
        RESULT_REQUEST_FAILED: int
        RESULT_DOWNLOAD_FILE_CANT_OPEN: int
        RESULT_DOWNLOAD_FILE_WRITE_ERROR: int
        RESULT_REDIRECT_LIMIT_REACHED: int
        RESULT_TIMEOUT: int

    # Methods
    def request(self, url: GDString | str, custom_headers: PackedStringArray = PackedStringArray(), method: HTTPClient.Method = 0, request_data: GDString | str = "") -> Error: ...
    def request_raw(self, url: GDString | str, custom_headers: PackedStringArray = PackedStringArray(), method: HTTPClient.Method = 0, request_data_raw: PackedByteArray = PackedByteArray()) -> Error: ...
    def cancel_request(self) -> None: ...
    def set_tls_options(self, client_options: TLSOptions) -> None: ...
    def get_http_client_status(self) -> HTTPClient.Status: ...
    def set_use_threads(self, enable: bool) -> None: ...
    def is_using_threads(self) -> bool: ...
    def set_accept_gzip(self, enable: bool) -> None: ...
    def is_accepting_gzip(self) -> bool: ...
    def set_body_size_limit(self, bytes: int) -> None: ...
    def get_body_size_limit(self) -> int: ...
    def set_max_redirects(self, amount: int) -> None: ...
    def get_max_redirects(self) -> int: ...
    def set_download_file(self, path: GDString | str) -> None: ...
    def get_download_file(self) -> GDString: ...
    def get_downloaded_bytes(self) -> int: ...
    def get_body_size(self) -> int: ...
    def set_timeout(self, timeout: float) -> None: ...
    def get_timeout(self) -> float: ...
    def set_download_chunk_size(self, chunk_size: int) -> None: ...
    def get_download_chunk_size(self) -> int: ...
    def set_http_proxy(self, host: GDString | str, port: int) -> None: ...
    def set_https_proxy(self, host: GDString | str, port: int) -> None: ...

    # Signals
    def request_completed(self, result: int, response_code: int, headers: PackedStringArray, body: PackedByteArray) -> None: ...

    # Properties
    download_file: GDString
    download_chunk_size: int
    use_threads: bool
    accept_gzip: bool
    body_size_limit: int
    max_redirects: int
    timeout: float


class ImmediateMesh(TypeInUse(Mesh)):
    def __init__(self): ...

    # Methods
    def surface_begin(self, primitive: Mesh.PrimitiveType, material: Material = None) -> None: ...
    def surface_set_color(self, color: Color) -> None: ...
    def surface_set_normal(self, normal: Vector3) -> None: ...
    def surface_set_tangent(self, tangent: Plane) -> None: ...
    def surface_set_uv(self, uv: Vector2) -> None: ...
    def surface_set_uv2(self, uv2: Vector2) -> None: ...
    def surface_add_vertex(self, vertex: Vector3) -> None: ...
    def surface_add_vertex_2d(self, vertex: Vector2) -> None: ...
    def surface_end(self) -> None: ...
    def clear_surfaces(self) -> None: ...


class ImporterMeshInstance3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> ImporterMeshInstance3D: ...

    # Methods
    def set_mesh(self, mesh: ImporterMesh) -> None: ...
    def get_mesh(self) -> ImporterMesh: ...
    def set_skin(self, skin: Skin) -> None: ...
    def get_skin(self) -> Skin: ...
    def set_skeleton_path(self, skeleton_path: NodePath | str) -> None: ...
    def get_skeleton_path(self) -> NodePath: ...

    # Properties
    mesh: ImporterMesh
    skin: Skin
    skeleton_path: NodePath


class InputEventGesture(TypeInUse(InputEventWithModifiers)):

    # Methods
    def set_position(self, position: Vector2) -> None: ...
    def get_position(self) -> Vector2: ...

    # Properties
    position: Vector2


class InputEventKey(TypeInUse(InputEventWithModifiers)):
    def __init__(self): ...

    # Methods
    def set_pressed(self, pressed: bool) -> None: ...
    def set_keycode(self, keycode: Key) -> None: ...
    def get_keycode(self) -> Key: ...
    def set_physical_keycode(self, physical_keycode: Key) -> None: ...
    def get_physical_keycode(self) -> Key: ...
    def set_key_label(self, key_label: Key) -> None: ...
    def get_key_label(self) -> Key: ...
    def set_unicode(self, unicode: int) -> None: ...
    def get_unicode(self) -> int: ...
    def set_echo(self, echo: bool) -> None: ...
    def get_keycode_with_modifiers(self) -> Key: ...
    def get_physical_keycode_with_modifiers(self) -> Key: ...
    def get_key_label_with_modifiers(self) -> Key: ...
    def as_text_keycode(self) -> GDString: ...
    def as_text_physical_keycode(self) -> GDString: ...
    def as_text_key_label(self) -> GDString: ...

    # Properties
    pressed: bool
    keycode: int
    physical_keycode: int
    key_label: int
    unicode: int
    echo: bool


class InputEventMagnifyGesture(TypeInUse(InputEventGesture)):
    def __init__(self): ...

    # Methods
    def set_factor(self, factor: float) -> None: ...
    def get_factor(self) -> float: ...

    # Properties
    factor: float


class InputEventMouse(TypeInUse(InputEventWithModifiers)):

    # Methods
    def set_button_mask(self, button_mask: MouseButtonMask) -> None: ...
    def get_button_mask(self) -> MouseButtonMask: ...
    def set_position(self, position: Vector2) -> None: ...
    def get_position(self) -> Vector2: ...
    def set_global_position(self, global_position: Vector2) -> None: ...
    def get_global_position(self) -> Vector2: ...

    # Properties
    button_mask: int
    position: Vector2
    global_position: Vector2


class InputEventMouseButton(TypeInUse(InputEventMouse)):
    def __init__(self): ...

    # Methods
    def set_factor(self, factor: float) -> None: ...
    def get_factor(self) -> float: ...
    def set_button_index(self, button_index: MouseButton) -> None: ...
    def get_button_index(self) -> MouseButton: ...
    def set_pressed(self, pressed: bool) -> None: ...
    def set_canceled(self, canceled: bool) -> None: ...
    def set_double_click(self, double_click: bool) -> None: ...
    def is_double_click(self) -> bool: ...

    # Properties
    factor: float
    button_index: int
    canceled: bool
    pressed: bool
    double_click: bool


class InputEventMouseMotion(TypeInUse(InputEventMouse)):
    def __init__(self): ...

    # Methods
    def set_tilt(self, tilt: Vector2) -> None: ...
    def get_tilt(self) -> Vector2: ...
    def set_pressure(self, pressure: float) -> None: ...
    def get_pressure(self) -> float: ...
    def set_pen_inverted(self, pen_inverted: bool) -> None: ...
    def get_pen_inverted(self) -> bool: ...
    def set_relative(self, relative: Vector2) -> None: ...
    def get_relative(self) -> Vector2: ...
    def set_velocity(self, velocity: Vector2) -> None: ...
    def get_velocity(self) -> Vector2: ...

    # Properties
    tilt: Vector2
    pressure: float
    pen_inverted: bool
    relative: Vector2
    velocity: Vector2


class InputEventPanGesture(TypeInUse(InputEventGesture)):
    def __init__(self): ...

    # Methods
    def set_delta(self, delta: Vector2) -> None: ...
    def get_delta(self) -> Vector2: ...

    # Properties
    delta: Vector2


class InstancePlaceholder(TypeInUse(Node)):

    # Methods
    def get_stored_values(self, with_order: bool = False) -> GDDictionary: ...
    def create_instance(self, replace: bool = False, custom_scene: PackedScene = None) -> Node: ...
    def get_instance_path(self) -> GDString: ...


class ItemList(TypeInUse(Control)):
    @classmethod
    def new(cls) -> ItemList: ...

    # Enums
    class ItemList.IconMode(Enum):
        ICON_MODE_TOP: int
        ICON_MODE_LEFT: int
    class ItemList.SelectMode(Enum):
        SELECT_SINGLE: int
        SELECT_MULTI: int

    # Methods
    def add_item(self, text: GDString | str, icon: Texture2D = None, selectable: bool = True) -> int: ...
    def add_icon_item(self, icon: Texture2D, selectable: bool = True) -> int: ...
    def set_item_text(self, idx: int, text: GDString | str) -> None: ...
    def get_item_text(self, idx: int) -> GDString: ...
    def set_item_icon(self, idx: int, icon: Texture2D) -> None: ...
    def get_item_icon(self, idx: int) -> Texture2D: ...
    def set_item_text_direction(self, idx: int, direction: Control.TextDirection) -> None: ...
    def get_item_text_direction(self, idx: int) -> Control.TextDirection: ...
    def set_item_language(self, idx: int, language: GDString | str) -> None: ...
    def get_item_language(self, idx: int) -> GDString: ...
    def set_item_icon_transposed(self, idx: int, transposed: bool) -> None: ...
    def is_item_icon_transposed(self, idx: int) -> bool: ...
    def set_item_icon_region(self, idx: int, rect: Rect2) -> None: ...
    def get_item_icon_region(self, idx: int) -> Rect2: ...
    def set_item_icon_modulate(self, idx: int, modulate: Color) -> None: ...
    def get_item_icon_modulate(self, idx: int) -> Color: ...
    def set_item_selectable(self, idx: int, selectable: bool) -> None: ...
    def is_item_selectable(self, idx: int) -> bool: ...
    def set_item_disabled(self, idx: int, disabled: bool) -> None: ...
    def is_item_disabled(self, idx: int) -> bool: ...
    def set_item_metadata(self, idx: int, metadata: GDAny) -> None: ...
    def get_item_metadata(self, idx: int) -> GDAny: ...
    def set_item_custom_bg_color(self, idx: int, custom_bg_color: Color) -> None: ...
    def get_item_custom_bg_color(self, idx: int) -> Color: ...
    def set_item_custom_fg_color(self, idx: int, custom_fg_color: Color) -> None: ...
    def get_item_custom_fg_color(self, idx: int) -> Color: ...
    def get_item_rect(self, idx: int, expand: bool = True) -> Rect2: ...
    def set_item_tooltip_enabled(self, idx: int, enable: bool) -> None: ...
    def is_item_tooltip_enabled(self, idx: int) -> bool: ...
    def set_item_tooltip(self, idx: int, tooltip: GDString | str) -> None: ...
    def get_item_tooltip(self, idx: int) -> GDString: ...
    def select(self, idx: int, single: bool = True) -> None: ...
    def deselect(self, idx: int) -> None: ...
    def deselect_all(self) -> None: ...
    def is_selected(self, idx: int) -> bool: ...
    def get_selected_items(self) -> PackedInt32Array: ...
    def move_item(self, from_idx: int, to_idx: int) -> None: ...
    def set_item_count(self, count: int) -> None: ...
    def get_item_count(self) -> int: ...
    def remove_item(self, idx: int) -> None: ...
    def clear(self) -> None: ...
    def sort_items_by_text(self) -> None: ...
    def set_fixed_column_width(self, width: int) -> None: ...
    def get_fixed_column_width(self) -> int: ...
    def set_same_column_width(self, enable: bool) -> None: ...
    def is_same_column_width(self) -> bool: ...
    def set_max_text_lines(self, lines: int) -> None: ...
    def get_max_text_lines(self) -> int: ...
    def set_max_columns(self, amount: int) -> None: ...
    def get_max_columns(self) -> int: ...
    def set_select_mode(self, mode: ItemList.SelectMode) -> None: ...
    def get_select_mode(self) -> ItemList.SelectMode: ...
    def set_icon_mode(self, mode: ItemList.IconMode) -> None: ...
    def get_icon_mode(self) -> ItemList.IconMode: ...
    def set_fixed_icon_size(self, size: Vector2i) -> None: ...
    def get_fixed_icon_size(self) -> Vector2i: ...
    def set_icon_scale(self, scale: float) -> None: ...
    def get_icon_scale(self) -> float: ...
    def set_allow_rmb_select(self, allow: bool) -> None: ...
    def get_allow_rmb_select(self) -> bool: ...
    def set_allow_reselect(self, allow: bool) -> None: ...
    def get_allow_reselect(self) -> bool: ...
    def set_allow_search(self, allow: bool) -> None: ...
    def get_allow_search(self) -> bool: ...
    def set_auto_height(self, enable: bool) -> None: ...
    def has_auto_height(self) -> bool: ...
    def is_anything_selected(self) -> bool: ...
    def get_item_at_position(self, position: Vector2, exact: bool = False) -> int: ...
    def ensure_current_is_visible(self) -> None: ...
    def get_v_scroll_bar(self) -> VScrollBar: ...
    def set_text_overrun_behavior(self, overrun_behavior: TextServer.OverrunBehavior) -> None: ...
    def get_text_overrun_behavior(self) -> TextServer.OverrunBehavior: ...

    # Signals
    def item_selected(self, index: int) -> None: ...
    def empty_clicked(self, at_position: Vector2, mouse_button_index: int) -> None: ...
    def item_clicked(self, index: int, at_position: Vector2, mouse_button_index: int) -> None: ...
    def multi_selected(self, index: int, selected: bool) -> None: ...
    def item_activated(self, index: int) -> None: ...

    # Properties
    select_mode: int
    allow_reselect: bool
    allow_rmb_select: bool
    allow_search: bool
    max_text_lines: int
    auto_height: bool
    text_overrun_behavior: int
    item_count: int
    max_columns: int
    same_column_width: bool
    fixed_column_width: int
    icon_mode: int
    icon_scale: float
    fixed_icon_size: Vector2i


class Joint3D(TypeInUse(Node3D)):

    # Methods
    def set_node_a(self, node: NodePath | str) -> None: ...
    def get_node_a(self) -> NodePath: ...
    def set_node_b(self, node: NodePath | str) -> None: ...
    def get_node_b(self) -> NodePath: ...
    def set_solver_priority(self, priority: int) -> None: ...
    def get_solver_priority(self) -> int: ...
    def set_exclude_nodes_from_collision(self, enable: bool) -> None: ...
    def get_exclude_nodes_from_collision(self) -> bool: ...

    # Properties
    node_a: NodePath
    node_b: NodePath
    solver_priority: int
    exclude_nodes_from_collision: bool


class Label(TypeInUse(Control)):
    @classmethod
    def new(cls) -> Label: ...

    # Methods
    def set_horizontal_alignment(self, alignment: HorizontalAlignment) -> None: ...
    def get_horizontal_alignment(self) -> HorizontalAlignment: ...
    def set_vertical_alignment(self, alignment: VerticalAlignment) -> None: ...
    def get_vertical_alignment(self) -> VerticalAlignment: ...
    def set_text(self, text: GDString | str) -> None: ...
    def get_text(self) -> GDString: ...
    def set_label_settings(self, settings: LabelSettings) -> None: ...
    def get_label_settings(self) -> LabelSettings: ...
    def set_text_direction(self, direction: Control.TextDirection) -> None: ...
    def get_text_direction(self) -> Control.TextDirection: ...
    def set_language(self, language: GDString | str) -> None: ...
    def get_language(self) -> GDString: ...
    def set_autowrap_mode(self, autowrap_mode: TextServer.AutowrapMode) -> None: ...
    def get_autowrap_mode(self) -> TextServer.AutowrapMode: ...
    def set_justification_flags(self, justification_flags: TextServer.JustificationFlag) -> None: ...
    def get_justification_flags(self) -> TextServer.JustificationFlag: ...
    def set_clip_text(self, enable: bool) -> None: ...
    def is_clipping_text(self) -> bool: ...
    def set_tab_stops(self, tab_stops: PackedFloat32Array) -> None: ...
    def get_tab_stops(self) -> PackedFloat32Array: ...
    def set_text_overrun_behavior(self, overrun_behavior: TextServer.OverrunBehavior) -> None: ...
    def get_text_overrun_behavior(self) -> TextServer.OverrunBehavior: ...
    def set_uppercase(self, enable: bool) -> None: ...
    def is_uppercase(self) -> bool: ...
    def get_line_height(self, line: int = -1) -> int: ...
    def get_line_count(self) -> int: ...
    def get_visible_line_count(self) -> int: ...
    def get_total_character_count(self) -> int: ...
    def set_visible_characters(self, amount: int) -> None: ...
    def get_visible_characters(self) -> int: ...
    def get_visible_characters_behavior(self) -> TextServer.VisibleCharactersBehavior: ...
    def set_visible_characters_behavior(self, behavior: TextServer.VisibleCharactersBehavior) -> None: ...
    def set_visible_ratio(self, ratio: float) -> None: ...
    def get_visible_ratio(self) -> float: ...
    def set_lines_skipped(self, lines_skipped: int) -> None: ...
    def get_lines_skipped(self) -> int: ...
    def set_max_lines_visible(self, lines_visible: int) -> None: ...
    def get_max_lines_visible(self) -> int: ...
    def set_structured_text_bidi_override(self, parser: TextServer.StructuredTextParser) -> None: ...
    def get_structured_text_bidi_override(self) -> TextServer.StructuredTextParser: ...
    def set_structured_text_bidi_override_options(self, args: GDArray) -> None: ...
    def get_structured_text_bidi_override_options(self) -> GDArray: ...

    # Properties
    text: GDString
    label_settings: LabelSettings
    horizontal_alignment: int
    vertical_alignment: int
    autowrap_mode: int
    justification_flags: int
    clip_text: bool
    text_overrun_behavior: int
    uppercase: bool
    tab_stops: PackedFloat32Array
    lines_skipped: int
    max_lines_visible: int
    visible_characters: int
    visible_characters_behavior: int
    visible_ratio: float
    text_direction: int
    language: GDString
    structured_text_bidi_override: int
    structured_text_bidi_override_options: GDArray


class Label3D(TypeInUse(GeometryInstance3D)):
    @classmethod
    def new(cls) -> Label3D: ...

    # Enums
    class Label3D.DrawFlags(Enum):
        FLAG_SHADED: int
        FLAG_DOUBLE_SIDED: int
        FLAG_DISABLE_DEPTH_TEST: int
        FLAG_FIXED_SIZE: int
        FLAG_MAX: int
    class Label3D.AlphaCutMode(Enum):
        ALPHA_CUT_DISABLED: int
        ALPHA_CUT_DISCARD: int
        ALPHA_CUT_OPAQUE_PREPASS: int
        ALPHA_CUT_HASH: int

    # Methods
    def set_horizontal_alignment(self, alignment: HorizontalAlignment) -> None: ...
    def get_horizontal_alignment(self) -> HorizontalAlignment: ...
    def set_vertical_alignment(self, alignment: VerticalAlignment) -> None: ...
    def get_vertical_alignment(self) -> VerticalAlignment: ...
    def set_modulate(self, modulate: Color) -> None: ...
    def get_modulate(self) -> Color: ...
    def set_outline_modulate(self, modulate: Color) -> None: ...
    def get_outline_modulate(self) -> Color: ...
    def set_text(self, text: GDString | str) -> None: ...
    def get_text(self) -> GDString: ...
    def set_text_direction(self, direction: TextServer.Direction) -> None: ...
    def get_text_direction(self) -> TextServer.Direction: ...
    def set_language(self, language: GDString | str) -> None: ...
    def get_language(self) -> GDString: ...
    def set_structured_text_bidi_override(self, parser: TextServer.StructuredTextParser) -> None: ...
    def get_structured_text_bidi_override(self) -> TextServer.StructuredTextParser: ...
    def set_structured_text_bidi_override_options(self, args: GDArray) -> None: ...
    def get_structured_text_bidi_override_options(self) -> GDArray: ...
    def set_uppercase(self, enable: bool) -> None: ...
    def is_uppercase(self) -> bool: ...
    def set_render_priority(self, priority: int) -> None: ...
    def get_render_priority(self) -> int: ...
    def set_outline_render_priority(self, priority: int) -> None: ...
    def get_outline_render_priority(self) -> int: ...
    def set_font(self, font: Font) -> None: ...
    def get_font(self) -> Font: ...
    def set_font_size(self, size: int) -> None: ...
    def get_font_size(self) -> int: ...
    def set_outline_size(self, outline_size: int) -> None: ...
    def get_outline_size(self) -> int: ...
    def set_line_spacing(self, line_spacing: float) -> None: ...
    def get_line_spacing(self) -> float: ...
    def set_autowrap_mode(self, autowrap_mode: TextServer.AutowrapMode) -> None: ...
    def get_autowrap_mode(self) -> TextServer.AutowrapMode: ...
    def set_justification_flags(self, justification_flags: TextServer.JustificationFlag) -> None: ...
    def get_justification_flags(self) -> TextServer.JustificationFlag: ...
    def set_width(self, width: float) -> None: ...
    def get_width(self) -> float: ...
    def set_pixel_size(self, pixel_size: float) -> None: ...
    def get_pixel_size(self) -> float: ...
    def set_offset(self, offset: Vector2) -> None: ...
    def get_offset(self) -> Vector2: ...
    def set_draw_flag(self, flag: Label3D.DrawFlags, enabled: bool) -> None: ...
    def get_draw_flag(self, flag: Label3D.DrawFlags) -> bool: ...
    def set_billboard_mode(self, mode: BaseMaterial3D.BillboardMode) -> None: ...
    def get_billboard_mode(self) -> BaseMaterial3D.BillboardMode: ...
    def set_alpha_cut_mode(self, mode: Label3D.AlphaCutMode) -> None: ...
    def get_alpha_cut_mode(self) -> Label3D.AlphaCutMode: ...
    def set_alpha_scissor_threshold(self, threshold: float) -> None: ...
    def get_alpha_scissor_threshold(self) -> float: ...
    def set_alpha_hash_scale(self, threshold: float) -> None: ...
    def get_alpha_hash_scale(self) -> float: ...
    def set_alpha_antialiasing(self, alpha_aa: BaseMaterial3D.AlphaAntiAliasing) -> None: ...
    def get_alpha_antialiasing(self) -> BaseMaterial3D.AlphaAntiAliasing: ...
    def set_alpha_antialiasing_edge(self, edge: float) -> None: ...
    def get_alpha_antialiasing_edge(self) -> float: ...
    def set_texture_filter(self, mode: BaseMaterial3D.TextureFilter) -> None: ...
    def get_texture_filter(self) -> BaseMaterial3D.TextureFilter: ...
    def generate_triangle_mesh(self) -> TriangleMesh: ...

    # Properties
    pixel_size: float
    offset: Vector2
    billboard: int
    shaded: bool
    double_sided: bool
    no_depth_test: bool
    fixed_size: bool
    alpha_cut: int
    alpha_scissor_threshold: float
    alpha_hash_scale: float
    alpha_antialiasing_mode: int
    alpha_antialiasing_edge: float
    texture_filter: int
    render_priority: int
    outline_render_priority: int
    modulate: Color
    outline_modulate: Color
    text: GDString
    font: Font
    font_size: int
    outline_size: int
    horizontal_alignment: int
    vertical_alignment: int
    uppercase: bool
    line_spacing: float
    autowrap_mode: int
    justification_flags: int
    width: float
    text_direction: int
    language: GDString
    structured_text_bidi_override: int
    structured_text_bidi_override_options: GDArray


class Light3D(TypeInUse(VisualInstance3D)):

    # Enums
    class Light3D.Param(Enum):
        PARAM_ENERGY: int
        PARAM_INDIRECT_ENERGY: int
        PARAM_VOLUMETRIC_FOG_ENERGY: int
        PARAM_SPECULAR: int
        PARAM_RANGE: int
        PARAM_SIZE: int
        PARAM_ATTENUATION: int
        PARAM_SPOT_ANGLE: int
        PARAM_SPOT_ATTENUATION: int
        PARAM_SHADOW_MAX_DISTANCE: int
        PARAM_SHADOW_SPLIT_1_OFFSET: int
        PARAM_SHADOW_SPLIT_2_OFFSET: int
        PARAM_SHADOW_SPLIT_3_OFFSET: int
        PARAM_SHADOW_FADE_START: int
        PARAM_SHADOW_NORMAL_BIAS: int
        PARAM_SHADOW_BIAS: int
        PARAM_SHADOW_PANCAKE_SIZE: int
        PARAM_SHADOW_OPACITY: int
        PARAM_SHADOW_BLUR: int
        PARAM_TRANSMITTANCE_BIAS: int
        PARAM_INTENSITY: int
        PARAM_MAX: int
    class Light3D.BakeMode(Enum):
        BAKE_DISABLED: int
        BAKE_STATIC: int
        BAKE_DYNAMIC: int

    # Methods
    def set_editor_only(self, editor_only: bool) -> None: ...
    def is_editor_only(self) -> bool: ...
    def set_param(self, param: Light3D.Param, value: float) -> None: ...
    def get_param(self, param: Light3D.Param) -> float: ...
    def set_shadow(self, enabled: bool) -> None: ...
    def has_shadow(self) -> bool: ...
    def set_negative(self, enabled: bool) -> None: ...
    def is_negative(self) -> bool: ...
    def set_cull_mask(self, cull_mask: int) -> None: ...
    def get_cull_mask(self) -> int: ...
    def set_enable_distance_fade(self, enable: bool) -> None: ...
    def is_distance_fade_enabled(self) -> bool: ...
    def set_distance_fade_begin(self, distance: float) -> None: ...
    def get_distance_fade_begin(self) -> float: ...
    def set_distance_fade_shadow(self, distance: float) -> None: ...
    def get_distance_fade_shadow(self) -> float: ...
    def set_distance_fade_length(self, distance: float) -> None: ...
    def get_distance_fade_length(self) -> float: ...
    def set_color(self, color: Color) -> None: ...
    def get_color(self) -> Color: ...
    def set_shadow_reverse_cull_face(self, enable: bool) -> None: ...
    def get_shadow_reverse_cull_face(self) -> bool: ...
    def set_bake_mode(self, bake_mode: Light3D.BakeMode) -> None: ...
    def get_bake_mode(self) -> Light3D.BakeMode: ...
    def set_projector(self, projector: Texture2D) -> None: ...
    def get_projector(self) -> Texture2D: ...
    def set_temperature(self, temperature: float) -> None: ...
    def get_temperature(self) -> float: ...
    def get_correlated_color(self) -> Color: ...

    # Properties
    light_intensity_lumens: float
    light_intensity_lux: float
    light_temperature: float
    light_color: Color
    light_energy: float
    light_indirect_energy: float
    light_volumetric_fog_energy: float
    light_projector: Texture2D
    light_size: float
    light_angular_distance: float
    light_negative: bool
    light_specular: float
    light_bake_mode: int
    light_cull_mask: int
    shadow_enabled: bool
    shadow_bias: float
    shadow_normal_bias: float
    shadow_reverse_cull_face: bool
    shadow_transmittance_bias: float
    shadow_opacity: float
    shadow_blur: float
    distance_fade_enabled: bool
    distance_fade_begin: float
    distance_fade_shadow: float
    distance_fade_length: float
    editor_only: bool


class LightmapGI(TypeInUse(VisualInstance3D)):
    @classmethod
    def new(cls) -> LightmapGI: ...

    # Enums
    class LightmapGI.BakeQuality(Enum):
        BAKE_QUALITY_LOW: int
        BAKE_QUALITY_MEDIUM: int
        BAKE_QUALITY_HIGH: int
        BAKE_QUALITY_ULTRA: int
    class LightmapGI.GenerateProbes(Enum):
        GENERATE_PROBES_DISABLED: int
        GENERATE_PROBES_SUBDIV_4: int
        GENERATE_PROBES_SUBDIV_8: int
        GENERATE_PROBES_SUBDIV_16: int
        GENERATE_PROBES_SUBDIV_32: int
    class LightmapGI.BakeError(Enum):
        BAKE_ERROR_OK: int
        BAKE_ERROR_NO_SCENE_ROOT: int
        BAKE_ERROR_FOREIGN_DATA: int
        BAKE_ERROR_NO_LIGHTMAPPER: int
        BAKE_ERROR_NO_SAVE_PATH: int
        BAKE_ERROR_NO_MESHES: int
        BAKE_ERROR_MESHES_INVALID: int
        BAKE_ERROR_CANT_CREATE_IMAGE: int
        BAKE_ERROR_USER_ABORTED: int
    class LightmapGI.EnvironmentMode(Enum):
        ENVIRONMENT_MODE_DISABLED: int
        ENVIRONMENT_MODE_SCENE: int
        ENVIRONMENT_MODE_CUSTOM_SKY: int
        ENVIRONMENT_MODE_CUSTOM_COLOR: int

    # Methods
    def set_light_data(self, data: LightmapGIData) -> None: ...
    def get_light_data(self) -> LightmapGIData: ...
    def set_bake_quality(self, bake_quality: LightmapGI.BakeQuality) -> None: ...
    def get_bake_quality(self) -> LightmapGI.BakeQuality: ...
    def set_bounces(self, bounces: int) -> None: ...
    def get_bounces(self) -> int: ...
    def set_generate_probes(self, subdivision: LightmapGI.GenerateProbes) -> None: ...
    def get_generate_probes(self) -> LightmapGI.GenerateProbes: ...
    def set_bias(self, bias: float) -> None: ...
    def get_bias(self) -> float: ...
    def set_environment_mode(self, mode: LightmapGI.EnvironmentMode) -> None: ...
    def get_environment_mode(self) -> LightmapGI.EnvironmentMode: ...
    def set_environment_custom_sky(self, sky: Sky) -> None: ...
    def get_environment_custom_sky(self) -> Sky: ...
    def set_environment_custom_color(self, color: Color) -> None: ...
    def get_environment_custom_color(self) -> Color: ...
    def set_environment_custom_energy(self, energy: float) -> None: ...
    def get_environment_custom_energy(self) -> float: ...
    def set_max_texture_size(self, max_texture_size: int) -> None: ...
    def get_max_texture_size(self) -> int: ...
    def set_use_denoiser(self, use_denoiser: bool) -> None: ...
    def is_using_denoiser(self) -> bool: ...
    def set_interior(self, enable: bool) -> None: ...
    def is_interior(self) -> bool: ...
    def set_directional(self, directional: bool) -> None: ...
    def is_directional(self) -> bool: ...
    def set_camera_attributes(self, camera_attributes: CameraAttributes) -> None: ...
    def get_camera_attributes(self) -> CameraAttributes: ...

    # Properties
    quality: int
    bounces: int
    directional: bool
    interior: bool
    use_denoiser: bool
    bias: float
    max_texture_size: int
    environment_mode: int
    environment_custom_sky: Sky
    environment_custom_color: Color
    environment_custom_energy: float
    camera_attributes: CameraAttributesPractical | CameraAttributesPhysical
    generate_probes_subdiv: int
    light_data: LightmapGIData


class LightmapProbe(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> LightmapProbe: ...


class LineEdit(TypeInUse(Control)):
    @classmethod
    def new(cls) -> LineEdit: ...

    # Enums
    class LineEdit.MenuItems(Enum):
        MENU_CUT: int
        MENU_COPY: int
        MENU_PASTE: int
        MENU_CLEAR: int
        MENU_SELECT_ALL: int
        MENU_UNDO: int
        MENU_REDO: int
        MENU_SUBMENU_TEXT_DIR: int
        MENU_DIR_INHERITED: int
        MENU_DIR_AUTO: int
        MENU_DIR_LTR: int
        MENU_DIR_RTL: int
        MENU_DISPLAY_UCC: int
        MENU_SUBMENU_INSERT_UCC: int
        MENU_INSERT_LRM: int
        MENU_INSERT_RLM: int
        MENU_INSERT_LRE: int
        MENU_INSERT_RLE: int
        MENU_INSERT_LRO: int
        MENU_INSERT_RLO: int
        MENU_INSERT_PDF: int
        MENU_INSERT_ALM: int
        MENU_INSERT_LRI: int
        MENU_INSERT_RLI: int
        MENU_INSERT_FSI: int
        MENU_INSERT_PDI: int
        MENU_INSERT_ZWJ: int
        MENU_INSERT_ZWNJ: int
        MENU_INSERT_WJ: int
        MENU_INSERT_SHY: int
        MENU_MAX: int
    class LineEdit.VirtualKeyboardType(Enum):
        KEYBOARD_TYPE_DEFAULT: int
        KEYBOARD_TYPE_MULTILINE: int
        KEYBOARD_TYPE_NUMBER: int
        KEYBOARD_TYPE_NUMBER_DECIMAL: int
        KEYBOARD_TYPE_PHONE: int
        KEYBOARD_TYPE_EMAIL_ADDRESS: int
        KEYBOARD_TYPE_PASSWORD: int
        KEYBOARD_TYPE_URL: int

    # Methods
    def set_horizontal_alignment(self, alignment: HorizontalAlignment) -> None: ...
    def get_horizontal_alignment(self) -> HorizontalAlignment: ...
    def clear(self) -> None: ...
    def select(self, from_: int = 0, to: int = -1) -> None: ...
    def select_all(self) -> None: ...
    def deselect(self) -> None: ...
    def has_selection(self) -> bool: ...
    def get_selected_text(self) -> GDString: ...
    def get_selection_from_column(self) -> int: ...
    def get_selection_to_column(self) -> int: ...
    def set_text(self, text: GDString | str) -> None: ...
    def get_text(self) -> GDString: ...
    def get_draw_control_chars(self) -> bool: ...
    def set_draw_control_chars(self, enable: bool) -> None: ...
    def set_text_direction(self, direction: Control.TextDirection) -> None: ...
    def get_text_direction(self) -> Control.TextDirection: ...
    def set_language(self, language: GDString | str) -> None: ...
    def get_language(self) -> GDString: ...
    def set_structured_text_bidi_override(self, parser: TextServer.StructuredTextParser) -> None: ...
    def get_structured_text_bidi_override(self) -> TextServer.StructuredTextParser: ...
    def set_structured_text_bidi_override_options(self, args: GDArray) -> None: ...
    def get_structured_text_bidi_override_options(self) -> GDArray: ...
    def set_placeholder(self, text: GDString | str) -> None: ...
    def get_placeholder(self) -> GDString: ...
    def set_caret_column(self, position: int) -> None: ...
    def get_caret_column(self) -> int: ...
    def get_scroll_offset(self) -> float: ...
    def set_expand_to_text_length_enabled(self, enabled: bool) -> None: ...
    def is_expand_to_text_length_enabled(self) -> bool: ...
    def set_caret_blink_enabled(self, enabled: bool) -> None: ...
    def is_caret_blink_enabled(self) -> bool: ...
    def set_caret_mid_grapheme_enabled(self, enabled: bool) -> None: ...
    def is_caret_mid_grapheme_enabled(self) -> bool: ...
    def set_caret_force_displayed(self, enabled: bool) -> None: ...
    def is_caret_force_displayed(self) -> bool: ...
    def set_caret_blink_interval(self, interval: float) -> None: ...
    def get_caret_blink_interval(self) -> float: ...
    def set_max_length(self, chars: int) -> None: ...
    def get_max_length(self) -> int: ...
    def insert_text_at_caret(self, text: GDString | str) -> None: ...
    def delete_char_at_caret(self) -> None: ...
    def delete_text(self, from_column: int, to_column: int) -> None: ...
    def set_editable(self, enabled: bool) -> None: ...
    def is_editable(self) -> bool: ...
    def set_secret(self, enabled: bool) -> None: ...
    def is_secret(self) -> bool: ...
    def set_secret_character(self, character: GDString | str) -> None: ...
    def get_secret_character(self) -> GDString: ...
    def menu_option(self, option: int) -> None: ...
    def get_menu(self) -> PopupMenu: ...
    def is_menu_visible(self) -> bool: ...
    def set_context_menu_enabled(self, enable: bool) -> None: ...
    def is_context_menu_enabled(self) -> bool: ...
    def set_virtual_keyboard_enabled(self, enable: bool) -> None: ...
    def is_virtual_keyboard_enabled(self) -> bool: ...
    def set_virtual_keyboard_type(self, type: LineEdit.VirtualKeyboardType) -> None: ...
    def get_virtual_keyboard_type(self) -> LineEdit.VirtualKeyboardType: ...
    def set_clear_button_enabled(self, enable: bool) -> None: ...
    def is_clear_button_enabled(self) -> bool: ...
    def set_shortcut_keys_enabled(self, enable: bool) -> None: ...
    def is_shortcut_keys_enabled(self) -> bool: ...
    def set_middle_mouse_paste_enabled(self, enable: bool) -> None: ...
    def is_middle_mouse_paste_enabled(self) -> bool: ...
    def set_selecting_enabled(self, enable: bool) -> None: ...
    def is_selecting_enabled(self) -> bool: ...
    def set_deselect_on_focus_loss_enabled(self, enable: bool) -> None: ...
    def is_deselect_on_focus_loss_enabled(self) -> bool: ...
    def set_right_icon(self, icon: Texture2D) -> None: ...
    def get_right_icon(self) -> Texture2D: ...
    def set_flat(self, enabled: bool) -> None: ...
    def is_flat(self) -> bool: ...
    def set_select_all_on_focus(self, enabled: bool) -> None: ...
    def is_select_all_on_focus(self) -> bool: ...

    # Signals
    def text_changed(self, new_text: GDString | str) -> None: ...
    def text_change_rejected(self, rejected_substring: GDString | str) -> None: ...
    def text_submitted(self, new_text: GDString | str) -> None: ...

    # Properties
    text: GDString
    placeholder_text: GDString
    alignment: int
    max_length: int
    editable: bool
    secret: bool
    secret_character: GDString
    expand_to_text_length: bool
    context_menu_enabled: bool
    virtual_keyboard_enabled: bool
    virtual_keyboard_type: int
    clear_button_enabled: bool
    shortcut_keys_enabled: bool
    middle_mouse_paste_enabled: bool
    selecting_enabled: bool
    deselect_on_focus_loss_enabled: bool
    right_icon: Texture
    flat: bool
    draw_control_chars: bool
    select_all_on_focus: bool
    caret_blink: bool
    caret_blink_interval: float
    caret_column: int
    caret_force_displayed: bool
    caret_mid_grapheme: bool
    text_direction: int
    language: GDString
    structured_text_bidi_override: int
    structured_text_bidi_override_options: GDArray


class Marker3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> Marker3D: ...

    # Methods
    def set_gizmo_extents(self, extents: float) -> None: ...
    def get_gizmo_extents(self) -> float: ...

    # Properties
    gizmo_extents: float


class MenuBar(TypeInUse(Control)):
    @classmethod
    def new(cls) -> MenuBar: ...

    # Methods
    def set_switch_on_hover(self, enable: bool) -> None: ...
    def is_switch_on_hover(self) -> bool: ...
    def set_disable_shortcuts(self, disabled: bool) -> None: ...
    def set_prefer_global_menu(self, enabled: bool) -> None: ...
    def is_prefer_global_menu(self) -> bool: ...
    def is_native_menu(self) -> bool: ...
    def get_menu_count(self) -> int: ...
    def set_text_direction(self, direction: Control.TextDirection) -> None: ...
    def get_text_direction(self) -> Control.TextDirection: ...
    def set_language(self, language: GDString | str) -> None: ...
    def get_language(self) -> GDString: ...
    def set_flat(self, enabled: bool) -> None: ...
    def is_flat(self) -> bool: ...
    def set_start_index(self, enabled: int) -> None: ...
    def get_start_index(self) -> int: ...
    def set_menu_title(self, menu: int, title: GDString | str) -> None: ...
    def get_menu_title(self, menu: int) -> GDString: ...
    def set_menu_tooltip(self, menu: int, tooltip: GDString | str) -> None: ...
    def get_menu_tooltip(self, menu: int) -> GDString: ...
    def set_menu_disabled(self, menu: int, disabled: bool) -> None: ...
    def is_menu_disabled(self, menu: int) -> bool: ...
    def set_menu_hidden(self, menu: int, hidden: bool) -> None: ...
    def is_menu_hidden(self, menu: int) -> bool: ...
    def get_menu_popup(self, menu: int) -> PopupMenu: ...

    # Properties
    flat: bool
    start_index: int
    switch_on_hover: bool
    prefer_global_menu: bool
    text_direction: int
    language: GDString


class MeshInstance3D(TypeInUse(GeometryInstance3D)):
    @classmethod
    def new(cls) -> MeshInstance3D: ...

    # Methods
    def set_mesh(self, mesh: Mesh) -> None: ...
    def get_mesh(self) -> Mesh: ...
    def set_skeleton_path(self, skeleton_path: NodePath | str) -> None: ...
    def get_skeleton_path(self) -> NodePath: ...
    def set_skin(self, skin: Skin) -> None: ...
    def get_skin(self) -> Skin: ...
    def get_surface_override_material_count(self) -> int: ...
    def set_surface_override_material(self, surface: int, material: Material) -> None: ...
    def get_surface_override_material(self, surface: int) -> Material: ...
    def get_active_material(self, surface: int) -> Material: ...
    def create_trimesh_collision(self) -> None: ...
    def create_convex_collision(self, clean: bool = True, simplify: bool = False) -> None: ...
    def create_multiple_convex_collisions(self, settings: MeshConvexDecompositionSettings = None) -> None: ...
    def get_blend_shape_count(self) -> int: ...
    def find_blend_shape_by_name(self, name: StringName | str) -> int: ...
    def get_blend_shape_value(self, blend_shape_idx: int) -> float: ...
    def set_blend_shape_value(self, blend_shape_idx: int, value: float) -> None: ...
    def create_debug_tangents(self) -> None: ...

    # Properties
    mesh: Mesh
    skin: Skin
    skeleton: NodePath


class MissingNode(TypeInUse(Node)):
    @classmethod
    def new(cls) -> MissingNode: ...

    # Methods
    def set_original_class(self, name: GDString | str) -> None: ...
    def get_original_class(self) -> GDString: ...
    def set_recording_properties(self, enable: bool) -> None: ...
    def is_recording_properties(self) -> bool: ...

    # Properties
    original_class: GDString
    recording_properties: bool


class MultiMeshInstance3D(TypeInUse(GeometryInstance3D)):
    @classmethod
    def new(cls) -> MultiMeshInstance3D: ...

    # Methods
    def set_multimesh(self, multimesh: MultiMesh) -> None: ...
    def get_multimesh(self) -> MultiMesh: ...

    # Properties
    multimesh: MultiMesh


class MultiplayerPeer(TypeInUse(PacketPeer)):

    # Enums
    class MultiplayerPeer.ConnectionStatus(Enum):
        CONNECTION_DISCONNECTED: int
        CONNECTION_CONNECTING: int
        CONNECTION_CONNECTED: int
    class MultiplayerPeer.TransferMode(Enum):
        TRANSFER_MODE_UNRELIABLE: int
        TRANSFER_MODE_UNRELIABLE_ORDERED: int
        TRANSFER_MODE_RELIABLE: int

    # Methods
    def set_transfer_channel(self, channel: int) -> None: ...
    def get_transfer_channel(self) -> int: ...
    def set_transfer_mode(self, mode: MultiplayerPeer.TransferMode) -> None: ...
    def get_transfer_mode(self) -> MultiplayerPeer.TransferMode: ...
    def set_target_peer(self, id: int) -> None: ...
    def get_packet_peer(self) -> int: ...
    def get_packet_channel(self) -> int: ...
    def get_packet_mode(self) -> MultiplayerPeer.TransferMode: ...
    def poll(self) -> None: ...
    def close(self) -> None: ...
    def disconnect_peer(self, peer: int, force: bool = False) -> None: ...
    def get_connection_status(self) -> MultiplayerPeer.ConnectionStatus: ...
    def get_unique_id(self) -> int: ...
    def generate_unique_id(self) -> int: ...
    def set_refuse_new_connections(self, enable: bool) -> None: ...
    def is_refusing_new_connections(self) -> bool: ...
    def is_server_relay_supported(self) -> bool: ...

    # Signals
    def peer_connected(self, id: int) -> None: ...
    def peer_disconnected(self, id: int) -> None: ...

    # Properties
    refuse_new_connections: bool
    transfer_mode: int
    transfer_channel: int

    # Constants
    TARGET_PEER_BROADCAST: int
    TARGET_PEER_SERVER: int


class MultiplayerPeerExtension(TypeInUse(MultiplayerPeer)):
    def __init__(self): ...


class MultiplayerSpawner(TypeInUse(Node)):
    @classmethod
    def new(cls) -> MultiplayerSpawner: ...

    # Methods
    def add_spawnable_scene(self, path: GDString | str) -> None: ...
    def get_spawnable_scene_count(self) -> int: ...
    def get_spawnable_scene(self, index: int) -> GDString: ...
    def clear_spawnable_scenes(self) -> None: ...
    def spawn(self, data: GDAny = None) -> Node: ...
    def get_spawn_path(self) -> NodePath: ...
    def set_spawn_path(self, path: NodePath | str) -> None: ...
    def get_spawn_limit(self) -> int: ...
    def set_spawn_limit(self, limit: int) -> None: ...
    def get_spawn_function(self) -> GDCallable: ...
    def set_spawn_function(self, spawn_function: GDCallable) -> None: ...

    # Signals
    def despawned(self, node: Node) -> None: ...
    def spawned(self, node: Node) -> None: ...

    # Properties
    spawn_path: NodePath
    spawn_limit: int
    spawn_function: GDCallable


class MultiplayerSynchronizer(TypeInUse(Node)):
    @classmethod
    def new(cls) -> MultiplayerSynchronizer: ...

    # Enums
    class MultiplayerSynchronizer.VisibilityUpdateMode(Enum):
        VISIBILITY_PROCESS_IDLE: int
        VISIBILITY_PROCESS_PHYSICS: int
        VISIBILITY_PROCESS_NONE: int

    # Methods
    def set_root_path(self, path: NodePath | str) -> None: ...
    def get_root_path(self) -> NodePath: ...
    def set_replication_interval(self, milliseconds: float) -> None: ...
    def get_replication_interval(self) -> float: ...
    def set_delta_interval(self, milliseconds: float) -> None: ...
    def get_delta_interval(self) -> float: ...
    def set_replication_config(self, config: SceneReplicationConfig) -> None: ...
    def get_replication_config(self) -> SceneReplicationConfig: ...
    def set_visibility_update_mode(self, mode: MultiplayerSynchronizer.VisibilityUpdateMode) -> None: ...
    def get_visibility_update_mode(self) -> MultiplayerSynchronizer.VisibilityUpdateMode: ...
    def update_visibility(self, for_peer: int = 0) -> None: ...
    def set_visibility_public(self, visible: bool) -> None: ...
    def is_visibility_public(self) -> bool: ...
    def add_visibility_filter(self, filter: GDCallable) -> None: ...
    def remove_visibility_filter(self, filter: GDCallable) -> None: ...
    def set_visibility_for(self, peer: int, visible: bool) -> None: ...
    def get_visibility_for(self, peer: int) -> bool: ...

    # Signals
    def synchronized(self) -> None: ...
    def delta_synchronized(self) -> None: ...
    def visibility_changed(self, for_peer: int) -> None: ...

    # Properties
    root_path: NodePath
    replication_interval: float
    delta_interval: float
    replication_config: SceneReplicationConfig
    visibility_update_mode: int
    public_visibility: bool


class NavigationAgent2D(TypeInUse(Node)):
    @classmethod
    def new(cls) -> NavigationAgent2D: ...

    # Methods
    def get_rid(self) -> RID: ...
    def set_avoidance_enabled(self, enabled: bool) -> None: ...
    def get_avoidance_enabled(self) -> bool: ...
    def set_path_desired_distance(self, desired_distance: float) -> None: ...
    def get_path_desired_distance(self) -> float: ...
    def set_target_desired_distance(self, desired_distance: float) -> None: ...
    def get_target_desired_distance(self) -> float: ...
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_neighbor_distance(self, neighbor_distance: float) -> None: ...
    def get_neighbor_distance(self) -> float: ...
    def set_max_neighbors(self, max_neighbors: int) -> None: ...
    def get_max_neighbors(self) -> int: ...
    def set_time_horizon_agents(self, time_horizon: float) -> None: ...
    def get_time_horizon_agents(self) -> float: ...
    def set_time_horizon_obstacles(self, time_horizon: float) -> None: ...
    def get_time_horizon_obstacles(self) -> float: ...
    def set_max_speed(self, max_speed: float) -> None: ...
    def get_max_speed(self) -> float: ...
    def set_path_max_distance(self, max_speed: float) -> None: ...
    def get_path_max_distance(self) -> float: ...
    def set_navigation_layers(self, navigation_layers: int) -> None: ...
    def get_navigation_layers(self) -> int: ...
    def set_navigation_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_navigation_layer_value(self, layer_number: int) -> bool: ...
    def set_pathfinding_algorithm(self, pathfinding_algorithm: NavigationPathQueryParameters2D.PathfindingAlgorithm) -> None: ...
    def get_pathfinding_algorithm(self) -> NavigationPathQueryParameters2D.PathfindingAlgorithm: ...
    def set_path_postprocessing(self, path_postprocessing: NavigationPathQueryParameters2D.PathPostProcessing) -> None: ...
    def get_path_postprocessing(self) -> NavigationPathQueryParameters2D.PathPostProcessing: ...
    def set_path_metadata_flags(self, flags: NavigationPathQueryParameters2D.PathMetadataFlags) -> None: ...
    def get_path_metadata_flags(self) -> NavigationPathQueryParameters2D.PathMetadataFlags: ...
    def set_navigation_map(self, navigation_map: RID) -> None: ...
    def get_navigation_map(self) -> RID: ...
    def set_target_position(self, position: Vector2) -> None: ...
    def get_target_position(self) -> Vector2: ...
    def get_next_path_position(self) -> Vector2: ...
    def set_velocity_forced(self, velocity: Vector2) -> None: ...
    def set_velocity(self, velocity: Vector2) -> None: ...
    def get_velocity(self) -> Vector2: ...
    def distance_to_target(self) -> float: ...
    def get_current_navigation_result(self) -> NavigationPathQueryResult2D: ...
    def get_current_navigation_path(self) -> PackedVector2Array: ...
    def get_current_navigation_path_index(self) -> int: ...
    def is_target_reached(self) -> bool: ...
    def is_target_reachable(self) -> bool: ...
    def is_navigation_finished(self) -> bool: ...
    def get_final_position(self) -> Vector2: ...
    def set_avoidance_layers(self, layers: int) -> None: ...
    def get_avoidance_layers(self) -> int: ...
    def set_avoidance_mask(self, mask: int) -> None: ...
    def get_avoidance_mask(self) -> int: ...
    def set_avoidance_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_avoidance_layer_value(self, layer_number: int) -> bool: ...
    def set_avoidance_mask_value(self, mask_number: int, value: bool) -> None: ...
    def get_avoidance_mask_value(self, mask_number: int) -> bool: ...
    def set_avoidance_priority(self, priority: float) -> None: ...
    def get_avoidance_priority(self) -> float: ...
    def set_debug_enabled(self, enabled: bool) -> None: ...
    def get_debug_enabled(self) -> bool: ...
    def set_debug_use_custom(self, enabled: bool) -> None: ...
    def get_debug_use_custom(self) -> bool: ...
    def set_debug_path_custom_color(self, color: Color) -> None: ...
    def get_debug_path_custom_color(self) -> Color: ...
    def set_debug_path_custom_point_size(self, point_size: float) -> None: ...
    def get_debug_path_custom_point_size(self) -> float: ...
    def set_debug_path_custom_line_width(self, line_width: float) -> None: ...
    def get_debug_path_custom_line_width(self) -> float: ...

    # Signals
    def path_changed(self) -> None: ...
    def target_reached(self) -> None: ...
    def waypoint_reached(self, details: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def link_reached(self, details: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def navigation_finished(self) -> None: ...
    def velocity_computed(self, safe_velocity: Vector2) -> None: ...

    # Properties
    target_position: Vector2
    path_desired_distance: float
    target_desired_distance: float
    path_max_distance: float
    navigation_layers: int
    pathfinding_algorithm: int
    path_postprocessing: int
    path_metadata_flags: int
    avoidance_enabled: bool
    velocity: Vector2
    radius: float
    neighbor_distance: float
    max_neighbors: int
    time_horizon_agents: float
    time_horizon_obstacles: float
    max_speed: float
    avoidance_layers: int
    avoidance_mask: int
    avoidance_priority: float
    debug_enabled: bool
    debug_use_custom: bool
    debug_path_custom_color: Color
    debug_path_custom_point_size: float
    debug_path_custom_line_width: float


class NavigationAgent3D(TypeInUse(Node)):
    @classmethod
    def new(cls) -> NavigationAgent3D: ...

    # Methods
    def get_rid(self) -> RID: ...
    def set_avoidance_enabled(self, enabled: bool) -> None: ...
    def get_avoidance_enabled(self) -> bool: ...
    def set_path_desired_distance(self, desired_distance: float) -> None: ...
    def get_path_desired_distance(self) -> float: ...
    def set_target_desired_distance(self, desired_distance: float) -> None: ...
    def get_target_desired_distance(self) -> float: ...
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...
    def set_path_height_offset(self, path_height_offset: float) -> None: ...
    def get_path_height_offset(self) -> float: ...
    def set_use_3d_avoidance(self, enabled: bool) -> None: ...
    def get_use_3d_avoidance(self) -> bool: ...
    def set_neighbor_distance(self, neighbor_distance: float) -> None: ...
    def get_neighbor_distance(self) -> float: ...
    def set_max_neighbors(self, max_neighbors: int) -> None: ...
    def get_max_neighbors(self) -> int: ...
    def set_time_horizon_agents(self, time_horizon: float) -> None: ...
    def get_time_horizon_agents(self) -> float: ...
    def set_time_horizon_obstacles(self, time_horizon: float) -> None: ...
    def get_time_horizon_obstacles(self) -> float: ...
    def set_max_speed(self, max_speed: float) -> None: ...
    def get_max_speed(self) -> float: ...
    def set_path_max_distance(self, max_speed: float) -> None: ...
    def get_path_max_distance(self) -> float: ...
    def set_navigation_layers(self, navigation_layers: int) -> None: ...
    def get_navigation_layers(self) -> int: ...
    def set_navigation_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_navigation_layer_value(self, layer_number: int) -> bool: ...
    def set_pathfinding_algorithm(self, pathfinding_algorithm: NavigationPathQueryParameters3D.PathfindingAlgorithm) -> None: ...
    def get_pathfinding_algorithm(self) -> NavigationPathQueryParameters3D.PathfindingAlgorithm: ...
    def set_path_postprocessing(self, path_postprocessing: NavigationPathQueryParameters3D.PathPostProcessing) -> None: ...
    def get_path_postprocessing(self) -> NavigationPathQueryParameters3D.PathPostProcessing: ...
    def set_path_metadata_flags(self, flags: NavigationPathQueryParameters3D.PathMetadataFlags) -> None: ...
    def get_path_metadata_flags(self) -> NavigationPathQueryParameters3D.PathMetadataFlags: ...
    def set_navigation_map(self, navigation_map: RID) -> None: ...
    def get_navigation_map(self) -> RID: ...
    def set_target_position(self, position: Vector3) -> None: ...
    def get_target_position(self) -> Vector3: ...
    def get_next_path_position(self) -> Vector3: ...
    def set_velocity_forced(self, velocity: Vector3) -> None: ...
    def set_velocity(self, velocity: Vector3) -> None: ...
    def get_velocity(self) -> Vector3: ...
    def distance_to_target(self) -> float: ...
    def get_current_navigation_result(self) -> NavigationPathQueryResult3D: ...
    def get_current_navigation_path(self) -> PackedVector3Array: ...
    def get_current_navigation_path_index(self) -> int: ...
    def is_target_reached(self) -> bool: ...
    def is_target_reachable(self) -> bool: ...
    def is_navigation_finished(self) -> bool: ...
    def get_final_position(self) -> Vector3: ...
    def set_avoidance_layers(self, layers: int) -> None: ...
    def get_avoidance_layers(self) -> int: ...
    def set_avoidance_mask(self, mask: int) -> None: ...
    def get_avoidance_mask(self) -> int: ...
    def set_avoidance_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_avoidance_layer_value(self, layer_number: int) -> bool: ...
    def set_avoidance_mask_value(self, mask_number: int, value: bool) -> None: ...
    def get_avoidance_mask_value(self, mask_number: int) -> bool: ...
    def set_avoidance_priority(self, priority: float) -> None: ...
    def get_avoidance_priority(self) -> float: ...
    def set_debug_enabled(self, enabled: bool) -> None: ...
    def get_debug_enabled(self) -> bool: ...
    def set_debug_use_custom(self, enabled: bool) -> None: ...
    def get_debug_use_custom(self) -> bool: ...
    def set_debug_path_custom_color(self, color: Color) -> None: ...
    def get_debug_path_custom_color(self) -> Color: ...
    def set_debug_path_custom_point_size(self, point_size: float) -> None: ...
    def get_debug_path_custom_point_size(self) -> float: ...

    # Signals
    def path_changed(self) -> None: ...
    def target_reached(self) -> None: ...
    def waypoint_reached(self, details: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def link_reached(self, details: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def navigation_finished(self) -> None: ...
    def velocity_computed(self, safe_velocity: Vector3) -> None: ...

    # Properties
    target_position: Vector3
    path_desired_distance: float
    target_desired_distance: float
    path_height_offset: float
    path_max_distance: float
    navigation_layers: int
    pathfinding_algorithm: int
    path_postprocessing: int
    path_metadata_flags: int
    avoidance_enabled: bool
    velocity: Vector3
    height: float
    radius: float
    neighbor_distance: float
    max_neighbors: int
    time_horizon_agents: float
    time_horizon_obstacles: float
    max_speed: float
    use_3d_avoidance: bool
    avoidance_layers: int
    avoidance_mask: int
    avoidance_priority: float
    debug_enabled: bool
    debug_use_custom: bool
    debug_path_custom_color: Color
    debug_path_custom_point_size: float


class NavigationLink3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> NavigationLink3D: ...

    # Methods
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_bidirectional(self, bidirectional: bool) -> None: ...
    def is_bidirectional(self) -> bool: ...
    def set_navigation_layers(self, navigation_layers: int) -> None: ...
    def get_navigation_layers(self) -> int: ...
    def set_navigation_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_navigation_layer_value(self, layer_number: int) -> bool: ...
    def set_start_position(self, position: Vector3) -> None: ...
    def get_start_position(self) -> Vector3: ...
    def set_end_position(self, position: Vector3) -> None: ...
    def get_end_position(self) -> Vector3: ...
    def set_global_start_position(self, position: Vector3) -> None: ...
    def get_global_start_position(self) -> Vector3: ...
    def set_global_end_position(self, position: Vector3) -> None: ...
    def get_global_end_position(self) -> Vector3: ...
    def set_enter_cost(self, enter_cost: float) -> None: ...
    def get_enter_cost(self) -> float: ...
    def set_travel_cost(self, travel_cost: float) -> None: ...
    def get_travel_cost(self) -> float: ...

    # Properties
    enabled: bool
    bidirectional: bool
    navigation_layers: int
    start_position: Vector3
    end_position: Vector3
    enter_cost: float
    travel_cost: float


class NavigationObstacle3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> NavigationObstacle3D: ...

    # Methods
    def get_rid(self) -> RID: ...
    def set_avoidance_enabled(self, enabled: bool) -> None: ...
    def get_avoidance_enabled(self) -> bool: ...
    def set_navigation_map(self, navigation_map: RID) -> None: ...
    def get_navigation_map(self) -> RID: ...
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...
    def set_velocity(self, velocity: Vector3) -> None: ...
    def get_velocity(self) -> Vector3: ...
    def set_vertices(self, vertices: PackedVector3Array) -> None: ...
    def get_vertices(self) -> PackedVector3Array: ...
    def set_avoidance_layers(self, layers: int) -> None: ...
    def get_avoidance_layers(self) -> int: ...
    def set_avoidance_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_avoidance_layer_value(self, layer_number: int) -> bool: ...
    def set_use_3d_avoidance(self, enabled: bool) -> None: ...
    def get_use_3d_avoidance(self) -> bool: ...

    # Properties
    avoidance_enabled: bool
    velocity: Vector3
    radius: float
    height: float
    vertices: PackedVector3Array
    avoidance_layers: int
    use_3d_avoidance: bool


class NavigationRegion3D(TypeInUse(Node3D)):
    @classmethod
    def new(cls) -> NavigationRegion3D: ...

    # Methods
    def set_navigation_mesh(self, navigation_mesh: NavigationMesh) -> None: ...
    def get_navigation_mesh(self) -> NavigationMesh: ...
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_use_edge_connections(self, enabled: bool) -> None: ...
    def get_use_edge_connections(self) -> bool: ...
    def set_navigation_layers(self, navigation_layers: int) -> None: ...
    def get_navigation_layers(self) -> int: ...
    def set_navigation_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_navigation_layer_value(self, layer_number: int) -> bool: ...
    def get_region_rid(self) -> RID: ...
    def set_enter_cost(self, enter_cost: float) -> None: ...
    def get_enter_cost(self) -> float: ...
    def set_travel_cost(self, travel_cost: float) -> None: ...
    def get_travel_cost(self) -> float: ...
    def bake_navigation_mesh(self, on_thread: bool = True) -> None: ...

    # Signals
    def navigation_mesh_changed(self) -> None: ...
    def bake_finished(self) -> None: ...

    # Properties
    navigation_mesh: NavigationMesh
    enabled: bool
    use_edge_connections: bool
    navigation_layers: int
    enter_cost: float
    travel_cost: float


class NinePatchRect(TypeInUse(Control)):
    @classmethod
    def new(cls) -> NinePatchRect: ...

    # Enums
    class NinePatchRect.AxisStretchMode(Enum):
        AXIS_STRETCH_MODE_STRETCH: int
        AXIS_STRETCH_MODE_TILE: int
        AXIS_STRETCH_MODE_TILE_FIT: int

    # Methods
    def set_texture(self, texture: Texture2D) -> None: ...
    def get_texture(self) -> Texture2D: ...
    def set_patch_margin(self, margin: Side, value: int) -> None: ...
    def get_patch_margin(self, margin: Side) -> int: ...
    def set_region_rect(self, rect: Rect2) -> None: ...
    def get_region_rect(self) -> Rect2: ...
    def set_draw_center(self, draw_center: bool) -> None: ...
    def is_draw_center_enabled(self) -> bool: ...
    def set_h_axis_stretch_mode(self, mode: NinePatchRect.AxisStretchMode) -> None: ...
    def get_h_axis_stretch_mode(self) -> NinePatchRect.AxisStretchMode: ...
    def set_v_axis_stretch_mode(self, mode: NinePatchRect.AxisStretchMode) -> None: ...
    def get_v_axis_stretch_mode(self) -> NinePatchRect.AxisStretchMode: ...

    # Signals
    def texture_changed(self) -> None: ...

    # Properties
    texture: Texture2D
    draw_center: bool
    region_rect: Rect2
    patch_margin_left: int
    patch_margin_top: int
    patch_margin_right: int
    patch_margin_bottom: int
    axis_stretch_horizontal: int
    axis_stretch_vertical: int


class Node2D(TypeInUse(CanvasItem)):
    @classmethod
    def new(cls) -> Node2D: ...

    # Methods
    def set_position(self, position: Vector2) -> None: ...
    def set_rotation(self, radians: float) -> None: ...
    def set_rotation_degrees(self, degrees: float) -> None: ...
    def set_skew(self, radians: float) -> None: ...
    def set_scale(self, scale: Vector2) -> None: ...
    def get_position(self) -> Vector2: ...
    def get_rotation(self) -> float: ...
    def get_rotation_degrees(self) -> float: ...
    def get_skew(self) -> float: ...
    def get_scale(self) -> Vector2: ...
    def rotate(self, radians: float) -> None: ...
    def move_local_x(self, delta: float, scaled: bool = False) -> None: ...
    def move_local_y(self, delta: float, scaled: bool = False) -> None: ...
    def translate(self, offset: Vector2) -> None: ...
    def global_translate(self, offset: Vector2) -> None: ...
    def apply_scale(self, ratio: Vector2) -> None: ...
    def set_global_position(self, position: Vector2) -> None: ...
    def get_global_position(self) -> Vector2: ...
    def set_global_rotation(self, radians: float) -> None: ...
    def set_global_rotation_degrees(self, degrees: float) -> None: ...
    def get_global_rotation(self) -> float: ...
    def get_global_rotation_degrees(self) -> float: ...
    def set_global_skew(self, radians: float) -> None: ...
    def get_global_skew(self) -> float: ...
    def set_global_scale(self, scale: Vector2) -> None: ...
    def get_global_scale(self) -> Vector2: ...
    def set_transform(self, xform: Transform2D) -> None: ...
    def set_global_transform(self, xform: Transform2D) -> None: ...
    def look_at(self, point: Vector2) -> None: ...
    def get_angle_to(self, point: Vector2) -> float: ...
    def to_local(self, global_point: Vector2) -> Vector2: ...
    def to_global(self, local_point: Vector2) -> Vector2: ...
    def get_relative_transform_to_parent(self, parent: Node) -> Transform2D: ...

    # Properties
    position: Vector2
    rotation: float
    rotation_degrees: float
    scale: Vector2
    skew: float
    transform: Transform2D
    global_position: Vector2
    global_rotation: float
    global_rotation_degrees: float
    global_scale: Vector2
    global_skew: float
    global_transform: Transform2D


class ORMMaterial3D(TypeInUse(BaseMaterial3D)):
    def __init__(self): ...


class OfflineMultiplayerPeer(TypeInUse(MultiplayerPeer)):
    def __init__(self): ...


class OmniLight3D(TypeInUse(Light3D)):
    @classmethod
    def new(cls) -> OmniLight3D: ...

    # Enums
    class OmniLight3D.ShadowMode(Enum):
        SHADOW_DUAL_PARABOLOID: int
        SHADOW_CUBE: int

    # Methods
    def set_shadow_mode(self, mode: OmniLight3D.ShadowMode) -> None: ...
    def get_shadow_mode(self) -> OmniLight3D.ShadowMode: ...

    # Properties
    omni_range: float
    omni_attenuation: float
    omni_shadow_mode: int


class Panel(TypeInUse(Control)):
    @classmethod
    def new(cls) -> Panel: ...


class ParallaxBackground(TypeInUse(CanvasLayer)):
    @classmethod
    def new(cls) -> ParallaxBackground: ...

    # Methods
    def set_scroll_offset(self, offset: Vector2) -> None: ...
    def get_scroll_offset(self) -> Vector2: ...
    def set_scroll_base_offset(self, offset: Vector2) -> None: ...
    def get_scroll_base_offset(self) -> Vector2: ...
    def set_scroll_base_scale(self, scale: Vector2) -> None: ...
    def get_scroll_base_scale(self) -> Vector2: ...
    def set_limit_begin(self, offset: Vector2) -> None: ...
    def get_limit_begin(self) -> Vector2: ...
    def set_limit_end(self, offset: Vector2) -> None: ...
    def get_limit_end(self) -> Vector2: ...
    def set_ignore_camera_zoom(self, ignore: bool) -> None: ...
    def is_ignore_camera_zoom(self) -> bool: ...

    # Properties
    scroll_offset: Vector2
    scroll_base_offset: Vector2
    scroll_base_scale: Vector2
    scroll_limit_begin: Vector2
    scroll_limit_end: Vector2
    scroll_ignore_camera_zoom: bool


class ParallaxLayer(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> ParallaxLayer: ...

    # Methods
    def set_motion_scale(self, scale: Vector2) -> None: ...
    def get_motion_scale(self) -> Vector2: ...
    def set_motion_offset(self, offset: Vector2) -> None: ...
    def get_motion_offset(self) -> Vector2: ...
    def set_mirroring(self, mirror: Vector2) -> None: ...
    def get_mirroring(self) -> Vector2: ...

    # Properties
    motion_scale: Vector2
    motion_offset: Vector2
    motion_mirroring: Vector2


class Path2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> Path2D: ...

    # Methods
    def set_curve(self, curve: Curve2D) -> None: ...
    def get_curve(self) -> Curve2D: ...

    # Properties
    curve: Curve2D


class PathFollow2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> PathFollow2D: ...

    # Methods
    def set_progress(self, progress: float) -> None: ...
    def get_progress(self) -> float: ...
    def set_h_offset(self, h_offset: float) -> None: ...
    def get_h_offset(self) -> float: ...
    def set_v_offset(self, v_offset: float) -> None: ...
    def get_v_offset(self) -> float: ...
    def set_progress_ratio(self, ratio: float) -> None: ...
    def get_progress_ratio(self) -> float: ...
    def set_rotates(self, enabled: bool) -> None: ...
    def is_rotating(self) -> bool: ...
    def set_cubic_interpolation(self, enabled: bool) -> None: ...
    def get_cubic_interpolation(self) -> bool: ...
    def set_loop(self, loop: bool) -> None: ...
    def has_loop(self) -> bool: ...

    # Properties
    progress: float
    progress_ratio: float
    h_offset: float
    v_offset: float
    rotates: bool
    cubic_interp: bool
    loop: bool


class PhysicsBody3D(TypeInUse(CollisionObject3D)):

    # Methods
    def move_and_collide(self, motion: Vector3, test_only: bool = False, safe_margin: float = 0.001, recovery_as_collision: bool = False, max_collisions: int = 1) -> KinematicCollision3D: ...
    def test_move(self, from_: Transform3D, motion: Vector3, collision: KinematicCollision3D = None, safe_margin: float = 0.001, recovery_as_collision: bool = False, max_collisions: int = 1) -> bool: ...
    def set_axis_lock(self, axis: PhysicsServer3D.BodyAxis, lock: bool) -> None: ...
    def get_axis_lock(self, axis: PhysicsServer3D.BodyAxis) -> bool: ...
    def get_collision_exceptions(self) -> GDArray: ...
    def add_collision_exception_with(self, body: Node) -> None: ...
    def remove_collision_exception_with(self, body: Node) -> None: ...

    # Properties
    axis_lock_linear_x: bool
    axis_lock_linear_y: bool
    axis_lock_linear_z: bool
    axis_lock_angular_x: bool
    axis_lock_angular_y: bool
    axis_lock_angular_z: bool


class PinJoint3D(TypeInUse(Joint3D)):
    @classmethod
    def new(cls) -> PinJoint3D: ...

    # Enums
    class PinJoint3D.Param(Enum):
        PARAM_BIAS: int
        PARAM_DAMPING: int
        PARAM_IMPULSE_CLAMP: int

    # Methods
    def set_param(self, param: PinJoint3D.Param, value: float) -> None: ...
    def get_param(self, param: PinJoint3D.Param) -> float: ...


class PlaceholderCubemap(TypeInUse(PlaceholderTextureLayered)):
    def __init__(self): ...


class PlaceholderCubemapArray(TypeInUse(PlaceholderTextureLayered)):
    def __init__(self): ...


class PlaceholderTexture2DArray(TypeInUse(PlaceholderTextureLayered)):
    def __init__(self): ...


class PlaneMesh(TypeInUse(PrimitiveMesh)):
    def __init__(self): ...

    # Enums
    class PlaneMesh.Orientation(Enum):
        FACE_X: int
        FACE_Y: int
        FACE_Z: int

    # Methods
    def set_size(self, size: Vector2) -> None: ...
    def get_size(self) -> Vector2: ...
    def set_subdivide_width(self, subdivide: int) -> None: ...
    def get_subdivide_width(self) -> int: ...
    def set_subdivide_depth(self, subdivide: int) -> None: ...
    def get_subdivide_depth(self) -> int: ...
    def set_center_offset(self, offset: Vector3) -> None: ...
    def get_center_offset(self) -> Vector3: ...
    def set_orientation(self, orientation: PlaneMesh.Orientation) -> None: ...
    def get_orientation(self) -> PlaneMesh.Orientation: ...

    # Properties
    size: Vector2
    subdivide_width: int
    subdivide_depth: int
    center_offset: Vector3
    orientation: int


class PointMesh(TypeInUse(PrimitiveMesh)):
    def __init__(self): ...


class Polygon2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> Polygon2D: ...

    # Methods
    def set_polygon(self, polygon: PackedVector2Array) -> None: ...
    def get_polygon(self) -> PackedVector2Array: ...
    def set_uv(self, uv: PackedVector2Array) -> None: ...
    def get_uv(self) -> PackedVector2Array: ...
    def set_color(self, color: Color) -> None: ...
    def get_color(self) -> Color: ...
    def set_polygons(self, polygons: GDArray) -> None: ...
    def get_polygons(self) -> GDArray: ...
    def set_vertex_colors(self, vertex_colors: PackedColorArray) -> None: ...
    def get_vertex_colors(self) -> PackedColorArray: ...
    def set_texture(self, texture: Texture2D) -> None: ...
    def get_texture(self) -> Texture2D: ...
    def set_texture_offset(self, texture_offset: Vector2) -> None: ...
    def get_texture_offset(self) -> Vector2: ...
    def set_texture_rotation(self, texture_rotation: float) -> None: ...
    def get_texture_rotation(self) -> float: ...
    def set_texture_scale(self, texture_scale: Vector2) -> None: ...
    def get_texture_scale(self) -> Vector2: ...
    def set_invert_enabled(self, invert: bool) -> None: ...
    def get_invert_enabled(self) -> bool: ...
    def set_antialiased(self, antialiased: bool) -> None: ...
    def get_antialiased(self) -> bool: ...
    def set_invert_border(self, invert_border: float) -> None: ...
    def get_invert_border(self) -> float: ...
    def set_offset(self, offset: Vector2) -> None: ...
    def get_offset(self) -> Vector2: ...
    def add_bone(self, path: NodePath | str, weights: PackedFloat32Array) -> None: ...
    def get_bone_count(self) -> int: ...
    def get_bone_path(self, index: int) -> NodePath: ...
    def get_bone_weights(self, index: int) -> PackedFloat32Array: ...
    def erase_bone(self, index: int) -> None: ...
    def clear_bones(self) -> None: ...
    def set_bone_path(self, index: int, path: NodePath | str) -> None: ...
    def set_bone_weights(self, index: int, weights: PackedFloat32Array) -> None: ...
    def set_skeleton(self, skeleton: NodePath | str) -> None: ...
    def get_skeleton(self) -> NodePath: ...
    def set_internal_vertex_count(self, internal_vertex_count: int) -> None: ...
    def get_internal_vertex_count(self) -> int: ...

    # Properties
    color: Color
    offset: Vector2
    antialiased: bool
    texture: Texture2D
    texture_offset: Vector2
    texture_scale: Vector2
    texture_rotation: float
    skeleton: NodePath
    invert_enabled: bool
    invert_border: float
    polygon: PackedVector2Array
    uv: PackedVector2Array
    vertex_colors: PackedColorArray
    polygons: GDArray
    bones: GDArray
    internal_vertex_count: int


class Popup(TypeInUse(Window)):
    @classmethod
    def new(cls) -> Popup: ...

    # Signals
    def popup_hide(self) -> None: ...


class PopupMenu(TypeInUse(Popup)):
    @classmethod
    def new(cls) -> PopupMenu: ...

    # Methods
    def add_item(self, label: GDString | str, id: int = -1, accel: Key = 0) -> None: ...
    def add_icon_item(self, texture: Texture2D, label: GDString | str, id: int = -1, accel: Key = 0) -> None: ...
    def add_check_item(self, label: GDString | str, id: int = -1, accel: Key = 0) -> None: ...
    def add_icon_check_item(self, texture: Texture2D, label: GDString | str, id: int = -1, accel: Key = 0) -> None: ...
    def add_radio_check_item(self, label: GDString | str, id: int = -1, accel: Key = 0) -> None: ...
    def add_icon_radio_check_item(self, texture: Texture2D, label: GDString | str, id: int = -1, accel: Key = 0) -> None: ...
    def add_multistate_item(self, label: GDString | str, max_states: int, default_state: int = 0, id: int = -1, accel: Key = 0) -> None: ...
    def add_shortcut(self, shortcut: Shortcut, id: int = -1, global_: bool = False) -> None: ...
    def add_icon_shortcut(self, texture: Texture2D, shortcut: Shortcut, id: int = -1, global_: bool = False) -> None: ...
    def add_check_shortcut(self, shortcut: Shortcut, id: int = -1, global_: bool = False) -> None: ...
    def add_icon_check_shortcut(self, texture: Texture2D, shortcut: Shortcut, id: int = -1, global_: bool = False) -> None: ...
    def add_radio_check_shortcut(self, shortcut: Shortcut, id: int = -1, global_: bool = False) -> None: ...
    def add_icon_radio_check_shortcut(self, texture: Texture2D, shortcut: Shortcut, id: int = -1, global_: bool = False) -> None: ...
    def add_submenu_item(self, label: GDString | str, submenu: GDString | str, id: int = -1) -> None: ...
    def set_item_text(self, index: int, text: GDString | str) -> None: ...
    def set_item_text_direction(self, index: int, direction: Control.TextDirection) -> None: ...
    def set_item_language(self, index: int, language: GDString | str) -> None: ...
    def set_item_icon(self, index: int, icon: Texture2D) -> None: ...
    def set_item_icon_max_width(self, index: int, width: int) -> None: ...
    def set_item_icon_modulate(self, index: int, modulate: Color) -> None: ...
    def set_item_checked(self, index: int, checked: bool) -> None: ...
    def set_item_id(self, index: int, id: int) -> None: ...
    def set_item_accelerator(self, index: int, accel: Key) -> None: ...
    def set_item_metadata(self, index: int, metadata: GDAny) -> None: ...
    def set_item_disabled(self, index: int, disabled: bool) -> None: ...
    def set_item_submenu(self, index: int, submenu: GDString | str) -> None: ...
    def set_item_as_separator(self, index: int, enable: bool) -> None: ...
    def set_item_as_checkable(self, index: int, enable: bool) -> None: ...
    def set_item_as_radio_checkable(self, index: int, enable: bool) -> None: ...
    def set_item_tooltip(self, index: int, tooltip: GDString | str) -> None: ...
    def set_item_shortcut(self, index: int, shortcut: Shortcut, global_: bool = False) -> None: ...
    def set_item_indent(self, index: int, indent: int) -> None: ...
    def set_item_multistate(self, index: int, state: int) -> None: ...
    def set_item_shortcut_disabled(self, index: int, disabled: bool) -> None: ...
    def toggle_item_checked(self, index: int) -> None: ...
    def toggle_item_multistate(self, index: int) -> None: ...
    def get_item_text(self, index: int) -> GDString: ...
    def get_item_text_direction(self, index: int) -> Control.TextDirection: ...
    def get_item_language(self, index: int) -> GDString: ...
    def get_item_icon(self, index: int) -> Texture2D: ...
    def get_item_icon_max_width(self, index: int) -> int: ...
    def get_item_icon_modulate(self, index: int) -> Color: ...
    def is_item_checked(self, index: int) -> bool: ...
    def get_item_id(self, index: int) -> int: ...
    def get_item_index(self, id: int) -> int: ...
    def get_item_accelerator(self, index: int) -> Key: ...
    def get_item_metadata(self, index: int) -> GDAny: ...
    def is_item_disabled(self, index: int) -> bool: ...
    def get_item_submenu(self, index: int) -> GDString: ...
    def is_item_separator(self, index: int) -> bool: ...
    def is_item_checkable(self, index: int) -> bool: ...
    def is_item_radio_checkable(self, index: int) -> bool: ...
    def is_item_shortcut_disabled(self, index: int) -> bool: ...
    def get_item_tooltip(self, index: int) -> GDString: ...
    def get_item_shortcut(self, index: int) -> Shortcut: ...
    def get_item_indent(self, index: int) -> int: ...
    def set_focused_item(self, index: int) -> None: ...
    def get_focused_item(self) -> int: ...
    def set_item_count(self, count: int) -> None: ...
    def get_item_count(self) -> int: ...
    def scroll_to_item(self, index: int) -> None: ...
    def remove_item(self, index: int) -> None: ...
    def add_separator(self, label: GDString | str = "", id: int = -1) -> None: ...
    def clear(self) -> None: ...
    def set_hide_on_item_selection(self, enable: bool) -> None: ...
    def is_hide_on_item_selection(self) -> bool: ...
    def set_hide_on_checkable_item_selection(self, enable: bool) -> None: ...
    def is_hide_on_checkable_item_selection(self) -> bool: ...
    def set_hide_on_state_item_selection(self, enable: bool) -> None: ...
    def is_hide_on_state_item_selection(self) -> bool: ...
    def set_submenu_popup_delay(self, seconds: float) -> None: ...
    def get_submenu_popup_delay(self) -> float: ...
    def set_allow_search(self, allow: bool) -> None: ...
    def get_allow_search(self) -> bool: ...

    # Signals
    def id_pressed(self, id: int) -> None: ...
    def id_focused(self, id: int) -> None: ...
    def index_pressed(self, index: int) -> None: ...
    def menu_changed(self) -> None: ...

    # Properties
    hide_on_item_selection: bool
    hide_on_checkable_item_selection: bool
    hide_on_state_item_selection: bool
    submenu_popup_delay: float
    allow_search: bool
    item_count: int


class PopupPanel(TypeInUse(Popup)):
    @classmethod
    def new(cls) -> PopupPanel: ...


class QuadMesh(TypeInUse(PlaneMesh)):
    def __init__(self): ...


class Range(TypeInUse(Control)):
    @classmethod
    def new(cls) -> Range: ...

    # Methods
    def get_value(self) -> float: ...
    def get_min(self) -> float: ...
    def get_max(self) -> float: ...
    def get_step(self) -> float: ...
    def get_page(self) -> float: ...
    def get_as_ratio(self) -> float: ...
    def set_value(self, value: float) -> None: ...
    def set_value_no_signal(self, value: float) -> None: ...
    def set_min(self, minimum: float) -> None: ...
    def set_max(self, maximum: float) -> None: ...
    def set_step(self, step: float) -> None: ...
    def set_page(self, pagesize: float) -> None: ...
    def set_as_ratio(self, value: float) -> None: ...
    def set_use_rounded_values(self, enabled: bool) -> None: ...
    def is_using_rounded_values(self) -> bool: ...
    def set_exp_ratio(self, enabled: bool) -> None: ...
    def is_ratio_exp(self) -> bool: ...
    def set_allow_greater(self, allow: bool) -> None: ...
    def is_greater_allowed(self) -> bool: ...
    def set_allow_lesser(self, allow: bool) -> None: ...
    def is_lesser_allowed(self) -> bool: ...
    def share(self, with_: Node) -> None: ...
    def unshare(self) -> None: ...

    # Signals
    def value_changed(self, value: float) -> None: ...
    def changed(self) -> None: ...

    # Properties
    min_value: float
    max_value: float
    step: float
    page: float
    value: float
    ratio: float
    exp_edit: bool
    rounded: bool
    allow_greater: bool
    allow_lesser: bool


class RayCast2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> RayCast2D: ...

    # Methods
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_target_position(self, local_point: Vector2) -> None: ...
    def get_target_position(self) -> Vector2: ...
    def is_colliding(self) -> bool: ...
    def force_raycast_update(self) -> None: ...
    def get_collider(self) -> GDObject: ...
    def get_collider_rid(self) -> RID: ...
    def get_collider_shape(self) -> int: ...
    def get_collision_point(self) -> Vector2: ...
    def get_collision_normal(self) -> Vector2: ...
    def add_exception_rid(self, rid: RID) -> None: ...
    def add_exception(self, node: CollisionObject2D) -> None: ...
    def remove_exception_rid(self, rid: RID) -> None: ...
    def remove_exception(self, node: CollisionObject2D) -> None: ...
    def clear_exceptions(self) -> None: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_exclude_parent_body(self, mask: bool) -> None: ...
    def get_exclude_parent_body(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def set_hit_from_inside(self, enable: bool) -> None: ...
    def is_hit_from_inside_enabled(self) -> bool: ...

    # Properties
    enabled: bool
    exclude_parent: bool
    target_position: Vector2
    collision_mask: int
    hit_from_inside: bool
    collide_with_areas: bool
    collide_with_bodies: bool


class ReferenceRect(TypeInUse(Control)):
    @classmethod
    def new(cls) -> ReferenceRect: ...

    # Methods
    def get_border_color(self) -> Color: ...
    def set_border_color(self, color: Color) -> None: ...
    def get_border_width(self) -> float: ...
    def set_border_width(self, width: float) -> None: ...
    def get_editor_only(self) -> bool: ...
    def set_editor_only(self, enabled: bool) -> None: ...

    # Properties
    border_color: Color
    border_width: float
    editor_only: bool


class ReflectionProbe(TypeInUse(VisualInstance3D)):
    @classmethod
    def new(cls) -> ReflectionProbe: ...

    # Enums
    class ReflectionProbe.UpdateMode(Enum):
        UPDATE_ONCE: int
        UPDATE_ALWAYS: int
    class ReflectionProbe.AmbientMode(Enum):
        AMBIENT_DISABLED: int
        AMBIENT_ENVIRONMENT: int
        AMBIENT_COLOR: int

    # Methods
    def set_intensity(self, intensity: float) -> None: ...
    def get_intensity(self) -> float: ...
    def set_ambient_mode(self, ambient: ReflectionProbe.AmbientMode) -> None: ...
    def get_ambient_mode(self) -> ReflectionProbe.AmbientMode: ...
    def set_ambient_color(self, ambient: Color) -> None: ...
    def get_ambient_color(self) -> Color: ...
    def set_ambient_color_energy(self, ambient_energy: float) -> None: ...
    def get_ambient_color_energy(self) -> float: ...
    def set_max_distance(self, max_distance: float) -> None: ...
    def get_max_distance(self) -> float: ...
    def set_mesh_lod_threshold(self, ratio: float) -> None: ...
    def get_mesh_lod_threshold(self) -> float: ...
    def set_size(self, size: Vector3) -> None: ...
    def get_size(self) -> Vector3: ...
    def set_origin_offset(self, origin_offset: Vector3) -> None: ...
    def get_origin_offset(self) -> Vector3: ...
    def set_as_interior(self, enable: bool) -> None: ...
    def is_set_as_interior(self) -> bool: ...
    def set_enable_box_projection(self, enable: bool) -> None: ...
    def is_box_projection_enabled(self) -> bool: ...
    def set_enable_shadows(self, enable: bool) -> None: ...
    def are_shadows_enabled(self) -> bool: ...
    def set_cull_mask(self, layers: int) -> None: ...
    def get_cull_mask(self) -> int: ...
    def set_update_mode(self, mode: ReflectionProbe.UpdateMode) -> None: ...
    def get_update_mode(self) -> ReflectionProbe.UpdateMode: ...

    # Properties
    update_mode: int
    intensity: float
    max_distance: float
    size: Vector3
    origin_offset: Vector3
    box_projection: bool
    interior: bool
    enable_shadows: bool
    cull_mask: int
    mesh_lod_threshold: float
    ambient_mode: int
    ambient_color: Color
    ambient_color_energy: float


class RemoteTransform2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> RemoteTransform2D: ...

    # Methods
    def set_remote_node(self, path: NodePath | str) -> None: ...
    def get_remote_node(self) -> NodePath: ...
    def force_update_cache(self) -> None: ...
    def set_use_global_coordinates(self, use_global_coordinates: bool) -> None: ...
    def get_use_global_coordinates(self) -> bool: ...
    def set_update_position(self, update_remote_position: bool) -> None: ...
    def get_update_position(self) -> bool: ...
    def set_update_rotation(self, update_remote_rotation: bool) -> None: ...
    def get_update_rotation(self) -> bool: ...
    def set_update_scale(self, update_remote_scale: bool) -> None: ...
    def get_update_scale(self) -> bool: ...

    # Properties
    remote_path: NodePath
    use_global_coordinates: bool
    update_position: bool
    update_rotation: bool
    update_scale: bool


class RichTextLabel(TypeInUse(Control)):
    @classmethod
    def new(cls) -> RichTextLabel: ...

    # Enums
    class RichTextLabel.ListType(Enum):
        LIST_NUMBERS: int
        LIST_LETTERS: int
        LIST_ROMAN: int
        LIST_DOTS: int
    class RichTextLabel.MenuItems(Enum):
        MENU_COPY: int
        MENU_SELECT_ALL: int
        MENU_MAX: int

    # Methods
    def get_parsed_text(self) -> GDString: ...
    def add_text(self, text: GDString | str) -> None: ...
    def set_text(self, text: GDString | str) -> None: ...
    def add_image(self, image: Texture2D, width: int = 0, height: int = 0, color: Color = Color(1, 1, 1, 1), inline_align: InlineAlignment = 5, region: Rect2 = Rect2(0, 0, 0, 0)) -> None: ...
    def newline(self) -> None: ...
    def remove_paragraph(self, paragraph: int) -> bool: ...
    def push_font(self, font: Font, font_size: int) -> None: ...
    def push_font_size(self, font_size: int) -> None: ...
    def push_normal(self) -> None: ...
    def push_bold(self) -> None: ...
    def push_bold_italics(self) -> None: ...
    def push_italics(self) -> None: ...
    def push_mono(self) -> None: ...
    def push_color(self, color: Color) -> None: ...
    def push_outline_size(self, outline_size: int) -> None: ...
    def push_outline_color(self, color: Color) -> None: ...
    def push_paragraph(self, alignment: HorizontalAlignment, base_direction: Control.TextDirection = 0, language: GDString | str = "", st_parser: TextServer.StructuredTextParser = 0, justification_flags: TextServer.JustificationFlag = 163, tab_stops: PackedFloat32Array = PackedFloat32Array()) -> None: ...
    def push_indent(self, level: int) -> None: ...
    def push_list(self, level: int, type: RichTextLabel.ListType, capitalize: bool, bullet: GDString | str = "•") -> None: ...
    def push_meta(self, data: GDAny) -> None: ...
    def push_hint(self, description: GDString | str) -> None: ...
    def push_underline(self) -> None: ...
    def push_strikethrough(self) -> None: ...
    def push_table(self, columns: int, inline_align: InlineAlignment = 0, align_to_row: int = -1) -> None: ...
    def push_dropcap(self, string: GDString | str, font: Font, size: int, dropcap_margins: Rect2 = Rect2(0, 0, 0, 0), color: Color = Color(1, 1, 1, 1), outline_size: int = 0, outline_color: Color = Color(0, 0, 0, 0)) -> None: ...
    def set_table_column_expand(self, column: int, expand: bool, ratio: int) -> None: ...
    def set_cell_row_background_color(self, odd_row_bg: Color, even_row_bg: Color) -> None: ...
    def set_cell_border_color(self, color: Color) -> None: ...
    def set_cell_size_override(self, min_size: Vector2, max_size: Vector2) -> None: ...
    def set_cell_padding(self, padding: Rect2) -> None: ...
    def push_cell(self) -> None: ...
    def push_fgcolor(self, fgcolor: Color) -> None: ...
    def push_bgcolor(self, bgcolor: Color) -> None: ...
    def push_customfx(self, effect: RichTextEffect, env: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def pop(self) -> None: ...
    def clear(self) -> None: ...
    def set_structured_text_bidi_override(self, parser: TextServer.StructuredTextParser) -> None: ...
    def get_structured_text_bidi_override(self) -> TextServer.StructuredTextParser: ...
    def set_structured_text_bidi_override_options(self, args: GDArray) -> None: ...
    def get_structured_text_bidi_override_options(self) -> GDArray: ...
    def set_text_direction(self, direction: Control.TextDirection) -> None: ...
    def get_text_direction(self) -> Control.TextDirection: ...
    def set_language(self, language: GDString | str) -> None: ...
    def get_language(self) -> GDString: ...
    def set_autowrap_mode(self, autowrap_mode: TextServer.AutowrapMode) -> None: ...
    def get_autowrap_mode(self) -> TextServer.AutowrapMode: ...
    def set_meta_underline(self, enable: bool) -> None: ...
    def is_meta_underlined(self) -> bool: ...
    def set_hint_underline(self, enable: bool) -> None: ...
    def is_hint_underlined(self) -> bool: ...
    def set_scroll_active(self, active: bool) -> None: ...
    def is_scroll_active(self) -> bool: ...
    def set_scroll_follow(self, follow: bool) -> None: ...
    def is_scroll_following(self) -> bool: ...
    def get_v_scroll_bar(self) -> VScrollBar: ...
    def scroll_to_line(self, line: int) -> None: ...
    def scroll_to_paragraph(self, paragraph: int) -> None: ...
    def scroll_to_selection(self) -> None: ...
    def set_tab_size(self, spaces: int) -> None: ...
    def get_tab_size(self) -> int: ...
    def set_fit_content(self, enabled: bool) -> None: ...
    def is_fit_content_enabled(self) -> bool: ...
    def set_selection_enabled(self, enabled: bool) -> None: ...
    def is_selection_enabled(self) -> bool: ...
    def set_context_menu_enabled(self, enabled: bool) -> None: ...
    def is_context_menu_enabled(self) -> bool: ...
    def set_shortcut_keys_enabled(self, enabled: bool) -> None: ...
    def is_shortcut_keys_enabled(self) -> bool: ...
    def set_deselect_on_focus_loss_enabled(self, enable: bool) -> None: ...
    def is_deselect_on_focus_loss_enabled(self) -> bool: ...
    def get_selection_from(self) -> int: ...
    def get_selection_to(self) -> int: ...
    def select_all(self) -> None: ...
    def get_selected_text(self) -> GDString: ...
    def deselect(self) -> None: ...
    def parse_bbcode(self, bbcode: GDString | str) -> None: ...
    def append_text(self, bbcode: GDString | str) -> None: ...
    def get_text(self) -> GDString: ...
    def is_ready(self) -> bool: ...
    def set_threaded(self, threaded: bool) -> None: ...
    def is_threaded(self) -> bool: ...
    def set_progress_bar_delay(self, delay_ms: int) -> None: ...
    def get_progress_bar_delay(self) -> int: ...
    def set_visible_characters(self, amount: int) -> None: ...
    def get_visible_characters(self) -> int: ...
    def get_visible_characters_behavior(self) -> TextServer.VisibleCharactersBehavior: ...
    def set_visible_characters_behavior(self, behavior: TextServer.VisibleCharactersBehavior) -> None: ...
    def set_visible_ratio(self, ratio: float) -> None: ...
    def get_visible_ratio(self) -> float: ...
    def get_character_line(self, character: int) -> int: ...
    def get_character_paragraph(self, character: int) -> int: ...
    def get_total_character_count(self) -> int: ...
    def set_use_bbcode(self, enable: bool) -> None: ...
    def is_using_bbcode(self) -> bool: ...
    def get_line_count(self) -> int: ...
    def get_visible_line_count(self) -> int: ...
    def get_paragraph_count(self) -> int: ...
    def get_visible_paragraph_count(self) -> int: ...
    def get_content_height(self) -> int: ...
    def get_content_width(self) -> int: ...
    def get_line_offset(self, line: int) -> float: ...
    def get_paragraph_offset(self, paragraph: int) -> float: ...
    def parse_expressions_for_values(self, expressions: PackedStringArray) -> GDDictionary: ...
    def set_effects(self, effects: GDArray) -> None: ...
    def get_effects(self) -> GDArray: ...
    def install_effect(self, effect: GDAny) -> None: ...
    def get_menu(self) -> PopupMenu: ...
    def is_menu_visible(self) -> bool: ...
    def menu_option(self, option: int) -> None: ...

    # Signals
    def meta_clicked(self, meta: GDAny) -> None: ...
    def meta_hover_started(self, meta: GDAny) -> None: ...
    def meta_hover_ended(self, meta: GDAny) -> None: ...
    def finished(self) -> None: ...

    # Properties
    bbcode_enabled: bool
    text: GDString
    fit_content: bool
    scroll_active: bool
    scroll_following: bool
    autowrap_mode: int
    tab_size: int
    context_menu_enabled: bool
    shortcut_keys_enabled: bool
    custom_effects: GDArray
    meta_underlined: bool
    hint_underlined: bool
    threaded: bool
    progress_bar_delay: int
    selection_enabled: bool
    deselect_on_focus_loss_enabled: bool
    visible_characters: int
    visible_characters_behavior: int
    visible_ratio: float
    text_direction: int
    language: GDString
    structured_text_bidi_override: int
    structured_text_bidi_override_options: GDArray


class RigidBody3D(TypeInUse(PhysicsBody3D)):
    @classmethod
    def new(cls) -> RigidBody3D: ...

    # Enums
    class RigidBody3D.FreezeMode(Enum):
        FREEZE_MODE_STATIC: int
        FREEZE_MODE_KINEMATIC: int
    class RigidBody3D.CenterOfMassMode(Enum):
        CENTER_OF_MASS_MODE_AUTO: int
        CENTER_OF_MASS_MODE_CUSTOM: int
    class RigidBody3D.DampMode(Enum):
        DAMP_MODE_COMBINE: int
        DAMP_MODE_REPLACE: int

    # Methods
    def set_mass(self, mass: float) -> None: ...
    def get_mass(self) -> float: ...
    def set_inertia(self, inertia: Vector3) -> None: ...
    def get_inertia(self) -> Vector3: ...
    def set_center_of_mass_mode(self, mode: RigidBody3D.CenterOfMassMode) -> None: ...
    def get_center_of_mass_mode(self) -> RigidBody3D.CenterOfMassMode: ...
    def set_center_of_mass(self, center_of_mass: Vector3) -> None: ...
    def get_center_of_mass(self) -> Vector3: ...
    def set_physics_material_override(self, physics_material_override: PhysicsMaterial) -> None: ...
    def get_physics_material_override(self) -> PhysicsMaterial: ...
    def set_linear_velocity(self, linear_velocity: Vector3) -> None: ...
    def get_linear_velocity(self) -> Vector3: ...
    def set_angular_velocity(self, angular_velocity: Vector3) -> None: ...
    def get_angular_velocity(self) -> Vector3: ...
    def get_inverse_inertia_tensor(self) -> Basis: ...
    def set_gravity_scale(self, gravity_scale: float) -> None: ...
    def get_gravity_scale(self) -> float: ...
    def set_linear_damp_mode(self, linear_damp_mode: RigidBody3D.DampMode) -> None: ...
    def get_linear_damp_mode(self) -> RigidBody3D.DampMode: ...
    def set_angular_damp_mode(self, angular_damp_mode: RigidBody3D.DampMode) -> None: ...
    def get_angular_damp_mode(self) -> RigidBody3D.DampMode: ...
    def set_linear_damp(self, linear_damp: float) -> None: ...
    def get_linear_damp(self) -> float: ...
    def set_angular_damp(self, angular_damp: float) -> None: ...
    def get_angular_damp(self) -> float: ...
    def set_max_contacts_reported(self, amount: int) -> None: ...
    def get_max_contacts_reported(self) -> int: ...
    def get_contact_count(self) -> int: ...
    def set_use_custom_integrator(self, enable: bool) -> None: ...
    def is_using_custom_integrator(self) -> bool: ...
    def set_contact_monitor(self, enabled: bool) -> None: ...
    def is_contact_monitor_enabled(self) -> bool: ...
    def set_use_continuous_collision_detection(self, enable: bool) -> None: ...
    def is_using_continuous_collision_detection(self) -> bool: ...
    def set_axis_velocity(self, axis_velocity: Vector3) -> None: ...
    def apply_central_impulse(self, impulse: Vector3) -> None: ...
    def apply_impulse(self, impulse: Vector3, position: Vector3 = Vector3(0, 0, 0)) -> None: ...
    def apply_torque_impulse(self, impulse: Vector3) -> None: ...
    def apply_central_force(self, force: Vector3) -> None: ...
    def apply_force(self, force: Vector3, position: Vector3 = Vector3(0, 0, 0)) -> None: ...
    def apply_torque(self, torque: Vector3) -> None: ...
    def add_constant_central_force(self, force: Vector3) -> None: ...
    def add_constant_force(self, force: Vector3, position: Vector3 = Vector3(0, 0, 0)) -> None: ...
    def add_constant_torque(self, torque: Vector3) -> None: ...
    def set_constant_force(self, force: Vector3) -> None: ...
    def get_constant_force(self) -> Vector3: ...
    def set_constant_torque(self, torque: Vector3) -> None: ...
    def get_constant_torque(self) -> Vector3: ...
    def set_sleeping(self, sleeping: bool) -> None: ...
    def is_sleeping(self) -> bool: ...
    def set_can_sleep(self, able_to_sleep: bool) -> None: ...
    def is_able_to_sleep(self) -> bool: ...
    def set_lock_rotation_enabled(self, lock_rotation: bool) -> None: ...
    def is_lock_rotation_enabled(self) -> bool: ...
    def set_freeze_enabled(self, freeze_mode: bool) -> None: ...
    def is_freeze_enabled(self) -> bool: ...
    def set_freeze_mode(self, freeze_mode: RigidBody3D.FreezeMode) -> None: ...
    def get_freeze_mode(self) -> RigidBody3D.FreezeMode: ...
    def get_colliding_bodies(self) -> GDArray: ...

    # Signals
    def body_shape_entered(self, body_rid: RID, body: Node, body_shape_index: int, local_shape_index: int) -> None: ...
    def body_shape_exited(self, body_rid: RID, body: Node, body_shape_index: int, local_shape_index: int) -> None: ...
    def body_entered(self, body: Node) -> None: ...
    def body_exited(self, body: Node) -> None: ...
    def sleeping_state_changed(self) -> None: ...

    # Properties
    mass: float
    inertia: Vector3
    center_of_mass_mode: int
    center_of_mass: Vector3
    physics_material_override: PhysicsMaterial
    gravity_scale: float
    custom_integrator: bool
    continuous_cd: bool
    max_contacts_reported: int
    contact_monitor: bool
    sleeping: bool
    can_sleep: bool
    lock_rotation: bool
    freeze: bool
    freeze_mode: int
    linear_velocity: Vector3
    linear_damp_mode: int
    linear_damp: float
    angular_velocity: Vector3
    angular_damp_mode: int
    angular_damp: float
    constant_force: Vector3
    constant_torque: Vector3


class RootMotionView(TypeInUse(VisualInstance3D)):
    @classmethod
    def new(cls) -> RootMotionView: ...

    # Methods
    def set_animation_path(self, path: NodePath | str) -> None: ...
    def get_animation_path(self) -> NodePath: ...
    def set_color(self, color: Color) -> None: ...
    def get_color(self) -> Color: ...
    def set_cell_size(self, size: float) -> None: ...
    def get_cell_size(self) -> float: ...
    def set_radius(self, size: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_zero_y(self, enable: bool) -> None: ...
    def get_zero_y(self) -> bool: ...

    # Properties
    animation_path: NodePath
    color: Color
    cell_size: float
    radius: float
    zero_y: bool


class ScriptCreateDialog(TypeInUse(ConfirmationDialog)):

    # Methods
    def config(self, inherits: GDString | str, path: GDString | str, built_in_enabled: bool = True, load_enabled: bool = True) -> None: ...

    # Signals
    def script_created(self, script: Script) -> None: ...


class ScrollBar(TypeInUse(Range)):

    # Methods
    def set_custom_step(self, step: float) -> None: ...
    def get_custom_step(self) -> float: ...

    # Signals
    def scrolling(self) -> None: ...

    # Properties
    custom_step: float


class Separator(TypeInUse(Control)):
    pass


class ShapeCast2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> ShapeCast2D: ...

    # Methods
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_shape(self, shape: Shape2D) -> None: ...
    def get_shape(self) -> Shape2D: ...
    def set_target_position(self, local_point: Vector2) -> None: ...
    def get_target_position(self) -> Vector2: ...
    def set_margin(self, margin: float) -> None: ...
    def get_margin(self) -> float: ...
    def set_max_results(self, max_results: int) -> None: ...
    def get_max_results(self) -> int: ...
    def is_colliding(self) -> bool: ...
    def get_collision_count(self) -> int: ...
    def force_shapecast_update(self) -> None: ...
    def get_collider(self, index: int) -> GDObject: ...
    def get_collider_rid(self, index: int) -> RID: ...
    def get_collider_shape(self, index: int) -> int: ...
    def get_collision_point(self, index: int) -> Vector2: ...
    def get_collision_normal(self, index: int) -> Vector2: ...
    def get_closest_collision_safe_fraction(self) -> float: ...
    def get_closest_collision_unsafe_fraction(self) -> float: ...
    def add_exception_rid(self, rid: RID) -> None: ...
    def add_exception(self, node: CollisionObject2D) -> None: ...
    def remove_exception_rid(self, rid: RID) -> None: ...
    def remove_exception(self, node: CollisionObject2D) -> None: ...
    def clear_exceptions(self) -> None: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_exclude_parent_body(self, mask: bool) -> None: ...
    def get_exclude_parent_body(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...

    # Properties
    enabled: bool
    shape: Shape2D
    exclude_parent: bool
    target_position: Vector2
    margin: float
    max_results: int
    collision_mask: int
    collision_result: GDArray
    collide_with_areas: bool
    collide_with_bodies: bool


class Skeleton2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> Skeleton2D: ...

    # Methods
    def get_bone_count(self) -> int: ...
    def get_bone(self, idx: int) -> Bone2D: ...
    def get_skeleton(self) -> RID: ...
    def set_modification_stack(self, modification_stack: SkeletonModificationStack2D) -> None: ...
    def get_modification_stack(self) -> SkeletonModificationStack2D: ...
    def execute_modifications(self, delta: float, execution_mode: int) -> None: ...
    def set_bone_local_pose_override(self, bone_idx: int, override_pose: Transform2D, strength: float, persistent: bool) -> None: ...
    def get_bone_local_pose_override(self, bone_idx: int) -> Transform2D: ...

    # Signals
    def bone_setup_changed(self) -> None: ...


class Slider(TypeInUse(Range)):

    # Methods
    def set_ticks(self, count: int) -> None: ...
    def get_ticks(self) -> int: ...
    def get_ticks_on_borders(self) -> bool: ...
    def set_ticks_on_borders(self, ticks_on_border: bool) -> None: ...
    def set_editable(self, editable: bool) -> None: ...
    def is_editable(self) -> bool: ...
    def set_scrollable(self, scrollable: bool) -> None: ...
    def is_scrollable(self) -> bool: ...

    # Signals
    def drag_started(self) -> None: ...
    def drag_ended(self, value_changed: bool) -> None: ...

    # Properties
    editable: bool
    scrollable: bool
    tick_count: int
    ticks_on_borders: bool


class SliderJoint3D(TypeInUse(Joint3D)):
    @classmethod
    def new(cls) -> SliderJoint3D: ...

    # Enums
    class SliderJoint3D.Param(Enum):
        PARAM_LINEAR_LIMIT_UPPER: int
        PARAM_LINEAR_LIMIT_LOWER: int
        PARAM_LINEAR_LIMIT_SOFTNESS: int
        PARAM_LINEAR_LIMIT_RESTITUTION: int
        PARAM_LINEAR_LIMIT_DAMPING: int
        PARAM_LINEAR_MOTION_SOFTNESS: int
        PARAM_LINEAR_MOTION_RESTITUTION: int
        PARAM_LINEAR_MOTION_DAMPING: int
        PARAM_LINEAR_ORTHOGONAL_SOFTNESS: int
        PARAM_LINEAR_ORTHOGONAL_RESTITUTION: int
        PARAM_LINEAR_ORTHOGONAL_DAMPING: int
        PARAM_ANGULAR_LIMIT_UPPER: int
        PARAM_ANGULAR_LIMIT_LOWER: int
        PARAM_ANGULAR_LIMIT_SOFTNESS: int
        PARAM_ANGULAR_LIMIT_RESTITUTION: int
        PARAM_ANGULAR_LIMIT_DAMPING: int
        PARAM_ANGULAR_MOTION_SOFTNESS: int
        PARAM_ANGULAR_MOTION_RESTITUTION: int
        PARAM_ANGULAR_MOTION_DAMPING: int
        PARAM_ANGULAR_ORTHOGONAL_SOFTNESS: int
        PARAM_ANGULAR_ORTHOGONAL_RESTITUTION: int
        PARAM_ANGULAR_ORTHOGONAL_DAMPING: int
        PARAM_MAX: int

    # Methods
    def set_param(self, param: SliderJoint3D.Param, value: float) -> None: ...
    def get_param(self, param: SliderJoint3D.Param) -> float: ...


class SoftBody3D(TypeInUse(MeshInstance3D)):
    @classmethod
    def new(cls) -> SoftBody3D: ...

    # Enums
    class SoftBody3D.DisableMode(Enum):
        DISABLE_MODE_REMOVE: int
        DISABLE_MODE_KEEP_ACTIVE: int

    # Methods
    def get_physics_rid(self) -> RID: ...
    def set_collision_mask(self, collision_mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_layer(self, collision_layer: int) -> None: ...
    def get_collision_layer(self) -> int: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_collision_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_layer_value(self, layer_number: int) -> bool: ...
    def set_parent_collision_ignore(self, parent_collision_ignore: NodePath | str) -> None: ...
    def get_parent_collision_ignore(self) -> NodePath: ...
    def set_disable_mode(self, mode: SoftBody3D.DisableMode) -> None: ...
    def get_disable_mode(self) -> SoftBody3D.DisableMode: ...
    def get_collision_exceptions(self) -> GDArray: ...
    def add_collision_exception_with(self, body: Node) -> None: ...
    def remove_collision_exception_with(self, body: Node) -> None: ...
    def set_simulation_precision(self, simulation_precision: int) -> None: ...
    def get_simulation_precision(self) -> int: ...
    def set_total_mass(self, mass: float) -> None: ...
    def get_total_mass(self) -> float: ...
    def set_linear_stiffness(self, linear_stiffness: float) -> None: ...
    def get_linear_stiffness(self) -> float: ...
    def set_pressure_coefficient(self, pressure_coefficient: float) -> None: ...
    def get_pressure_coefficient(self) -> float: ...
    def set_damping_coefficient(self, damping_coefficient: float) -> None: ...
    def get_damping_coefficient(self) -> float: ...
    def set_drag_coefficient(self, drag_coefficient: float) -> None: ...
    def get_drag_coefficient(self) -> float: ...
    def get_point_transform(self, point_index: int) -> Vector3: ...
    def set_point_pinned(self, point_index: int, pinned: bool, attachment_path: NodePath | str = NodePath("")) -> None: ...
    def is_point_pinned(self, point_index: int) -> bool: ...
    def set_ray_pickable(self, ray_pickable: bool) -> None: ...
    def is_ray_pickable(self) -> bool: ...

    # Properties
    collision_layer: int
    collision_mask: int
    parent_collision_ignore: NodePath
    simulation_precision: int
    total_mass: float
    linear_stiffness: float
    pressure_coefficient: float
    damping_coefficient: float
    drag_coefficient: float
    ray_pickable: bool
    disable_mode: int


class SpinBox(TypeInUse(Range)):
    @classmethod
    def new(cls) -> SpinBox: ...

    # Methods
    def set_horizontal_alignment(self, alignment: HorizontalAlignment) -> None: ...
    def get_horizontal_alignment(self) -> HorizontalAlignment: ...
    def set_suffix(self, suffix: GDString | str) -> None: ...
    def get_suffix(self) -> GDString: ...
    def set_prefix(self, prefix: GDString | str) -> None: ...
    def get_prefix(self) -> GDString: ...
    def set_editable(self, enabled: bool) -> None: ...
    def set_custom_arrow_step(self, arrow_step: float) -> None: ...
    def get_custom_arrow_step(self) -> float: ...
    def is_editable(self) -> bool: ...
    def set_update_on_text_changed(self, enabled: bool) -> None: ...
    def get_update_on_text_changed(self) -> bool: ...
    def set_select_all_on_focus(self, enabled: bool) -> None: ...
    def is_select_all_on_focus(self) -> bool: ...
    def apply(self) -> None: ...
    def get_line_edit(self) -> LineEdit: ...

    # Properties
    alignment: int
    editable: bool
    update_on_text_changed: bool
    prefix: GDString
    suffix: GDString
    custom_arrow_step: float
    select_all_on_focus: bool


class SpotLight3D(TypeInUse(Light3D)):
    @classmethod
    def new(cls) -> SpotLight3D: ...

    # Properties
    spot_range: float
    spot_attenuation: float
    spot_angle: float
    spot_angle_attenuation: float


class Sprite2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> Sprite2D: ...

    # Methods
    def set_texture(self, texture: Texture2D) -> None: ...
    def get_texture(self) -> Texture2D: ...
    def set_centered(self, centered: bool) -> None: ...
    def is_centered(self) -> bool: ...
    def set_offset(self, offset: Vector2) -> None: ...
    def get_offset(self) -> Vector2: ...
    def set_flip_h(self, flip_h: bool) -> None: ...
    def is_flipped_h(self) -> bool: ...
    def set_flip_v(self, flip_v: bool) -> None: ...
    def is_flipped_v(self) -> bool: ...
    def set_region_enabled(self, enabled: bool) -> None: ...
    def is_region_enabled(self) -> bool: ...
    def is_pixel_opaque(self, pos: Vector2) -> bool: ...
    def set_region_rect(self, rect: Rect2) -> None: ...
    def get_region_rect(self) -> Rect2: ...
    def set_region_filter_clip_enabled(self, enabled: bool) -> None: ...
    def is_region_filter_clip_enabled(self) -> bool: ...
    def set_frame(self, frame: int) -> None: ...
    def get_frame(self) -> int: ...
    def set_frame_coords(self, coords: Vector2i) -> None: ...
    def get_frame_coords(self) -> Vector2i: ...
    def set_vframes(self, vframes: int) -> None: ...
    def get_vframes(self) -> int: ...
    def set_hframes(self, hframes: int) -> None: ...
    def get_hframes(self) -> int: ...
    def get_rect(self) -> Rect2: ...

    # Signals
    def frame_changed(self) -> None: ...
    def texture_changed(self) -> None: ...

    # Properties
    texture: Texture2D
    centered: bool
    offset: Vector2
    flip_h: bool
    flip_v: bool
    hframes: int
    vframes: int
    frame: int
    frame_coords: Vector2i
    region_enabled: bool
    region_rect: Rect2
    region_filter_clip_enabled: bool


class SpriteBase3D(TypeInUse(GeometryInstance3D)):

    # Enums
    class SpriteBase3D.DrawFlags(Enum):
        FLAG_TRANSPARENT: int
        FLAG_SHADED: int
        FLAG_DOUBLE_SIDED: int
        FLAG_DISABLE_DEPTH_TEST: int
        FLAG_FIXED_SIZE: int
        FLAG_MAX: int
    class SpriteBase3D.AlphaCutMode(Enum):
        ALPHA_CUT_DISABLED: int
        ALPHA_CUT_DISCARD: int
        ALPHA_CUT_OPAQUE_PREPASS: int
        ALPHA_CUT_HASH: int

    # Methods
    def set_centered(self, centered: bool) -> None: ...
    def is_centered(self) -> bool: ...
    def set_offset(self, offset: Vector2) -> None: ...
    def get_offset(self) -> Vector2: ...
    def set_flip_h(self, flip_h: bool) -> None: ...
    def is_flipped_h(self) -> bool: ...
    def set_flip_v(self, flip_v: bool) -> None: ...
    def is_flipped_v(self) -> bool: ...
    def set_modulate(self, modulate: Color) -> None: ...
    def get_modulate(self) -> Color: ...
    def set_render_priority(self, priority: int) -> None: ...
    def get_render_priority(self) -> int: ...
    def set_pixel_size(self, pixel_size: float) -> None: ...
    def get_pixel_size(self) -> float: ...
    def set_axis(self, axis: Vector3.Axis) -> None: ...
    def get_axis(self) -> Vector3.Axis: ...
    def set_draw_flag(self, flag: SpriteBase3D.DrawFlags, enabled: bool) -> None: ...
    def get_draw_flag(self, flag: SpriteBase3D.DrawFlags) -> bool: ...
    def set_alpha_cut_mode(self, mode: SpriteBase3D.AlphaCutMode) -> None: ...
    def get_alpha_cut_mode(self) -> SpriteBase3D.AlphaCutMode: ...
    def set_alpha_scissor_threshold(self, threshold: float) -> None: ...
    def get_alpha_scissor_threshold(self) -> float: ...
    def set_alpha_hash_scale(self, threshold: float) -> None: ...
    def get_alpha_hash_scale(self) -> float: ...
    def set_alpha_antialiasing(self, alpha_aa: BaseMaterial3D.AlphaAntiAliasing) -> None: ...
    def get_alpha_antialiasing(self) -> BaseMaterial3D.AlphaAntiAliasing: ...
    def set_alpha_antialiasing_edge(self, edge: float) -> None: ...
    def get_alpha_antialiasing_edge(self) -> float: ...
    def set_billboard_mode(self, mode: BaseMaterial3D.BillboardMode) -> None: ...
    def get_billboard_mode(self) -> BaseMaterial3D.BillboardMode: ...
    def set_texture_filter(self, mode: BaseMaterial3D.TextureFilter) -> None: ...
    def get_texture_filter(self) -> BaseMaterial3D.TextureFilter: ...
    def get_item_rect(self) -> Rect2: ...
    def generate_triangle_mesh(self) -> TriangleMesh: ...

    # Properties
    centered: bool
    offset: Vector2
    flip_h: bool
    flip_v: bool
    modulate: Color
    pixel_size: float
    axis: int
    billboard: int
    transparent: bool
    shaded: bool
    double_sided: bool
    no_depth_test: bool
    fixed_size: bool
    alpha_cut: int
    alpha_scissor_threshold: float
    alpha_hash_scale: float
    alpha_antialiasing_mode: int
    alpha_antialiasing_edge: float
    texture_filter: int
    render_priority: int


class StandardMaterial3D(TypeInUse(BaseMaterial3D)):
    def __init__(self): ...


class StaticBody3D(TypeInUse(PhysicsBody3D)):
    @classmethod
    def new(cls) -> StaticBody3D: ...

    # Methods
    def set_constant_linear_velocity(self, vel: Vector3) -> None: ...
    def set_constant_angular_velocity(self, vel: Vector3) -> None: ...
    def get_constant_linear_velocity(self) -> Vector3: ...
    def get_constant_angular_velocity(self) -> Vector3: ...
    def set_physics_material_override(self, physics_material_override: PhysicsMaterial) -> None: ...
    def get_physics_material_override(self) -> PhysicsMaterial: ...

    # Properties
    physics_material_override: PhysicsMaterial
    constant_linear_velocity: Vector3
    constant_angular_velocity: Vector3


class SubViewport(TypeInUse(Viewport)):
    @classmethod
    def new(cls) -> SubViewport: ...

    # Enums
    class SubViewport.ClearMode(Enum):
        CLEAR_MODE_ALWAYS: int
        CLEAR_MODE_NEVER: int
        CLEAR_MODE_ONCE: int
    class SubViewport.UpdateMode(Enum):
        UPDATE_DISABLED: int
        UPDATE_ONCE: int
        UPDATE_WHEN_VISIBLE: int
        UPDATE_WHEN_PARENT_VISIBLE: int
        UPDATE_ALWAYS: int

    # Methods
    def set_size(self, size: Vector2i) -> None: ...
    def get_size(self) -> Vector2i: ...
    def set_size_2d_override(self, size: Vector2i) -> None: ...
    def get_size_2d_override(self) -> Vector2i: ...
    def set_size_2d_override_stretch(self, enable: bool) -> None: ...
    def is_size_2d_override_stretch_enabled(self) -> bool: ...
    def set_update_mode(self, mode: SubViewport.UpdateMode) -> None: ...
    def get_update_mode(self) -> SubViewport.UpdateMode: ...
    def set_clear_mode(self, mode: SubViewport.ClearMode) -> None: ...
    def get_clear_mode(self) -> SubViewport.ClearMode: ...

    # Properties
    size: Vector2i
    size_2d_override: Vector2i
    size_2d_override_stretch: bool
    render_target_clear_mode: int
    render_target_update_mode: int


class TabBar(TypeInUse(Control)):
    @classmethod
    def new(cls) -> TabBar: ...

    # Enums
    class TabBar.AlignmentMode(Enum):
        ALIGNMENT_LEFT: int
        ALIGNMENT_CENTER: int
        ALIGNMENT_RIGHT: int
        ALIGNMENT_MAX: int
    class TabBar.CloseButtonDisplayPolicy(Enum):
        CLOSE_BUTTON_SHOW_NEVER: int
        CLOSE_BUTTON_SHOW_ACTIVE_ONLY: int
        CLOSE_BUTTON_SHOW_ALWAYS: int
        CLOSE_BUTTON_MAX: int

    # Methods
    def set_tab_count(self, count: int) -> None: ...
    def get_tab_count(self) -> int: ...
    def set_current_tab(self, tab_idx: int) -> None: ...
    def get_current_tab(self) -> int: ...
    def get_previous_tab(self) -> int: ...
    def set_tab_title(self, tab_idx: int, title: GDString | str) -> None: ...
    def get_tab_title(self, tab_idx: int) -> GDString: ...
    def set_tab_text_direction(self, tab_idx: int, direction: Control.TextDirection) -> None: ...
    def get_tab_text_direction(self, tab_idx: int) -> Control.TextDirection: ...
    def set_tab_language(self, tab_idx: int, language: GDString | str) -> None: ...
    def get_tab_language(self, tab_idx: int) -> GDString: ...
    def set_tab_icon(self, tab_idx: int, icon: Texture2D) -> None: ...
    def get_tab_icon(self, tab_idx: int) -> Texture2D: ...
    def set_tab_icon_max_width(self, tab_idx: int, width: int) -> None: ...
    def get_tab_icon_max_width(self, tab_idx: int) -> int: ...
    def set_tab_button_icon(self, tab_idx: int, icon: Texture2D) -> None: ...
    def get_tab_button_icon(self, tab_idx: int) -> Texture2D: ...
    def set_tab_disabled(self, tab_idx: int, disabled: bool) -> None: ...
    def is_tab_disabled(self, tab_idx: int) -> bool: ...
    def set_tab_hidden(self, tab_idx: int, hidden: bool) -> None: ...
    def is_tab_hidden(self, tab_idx: int) -> bool: ...
    def set_tab_metadata(self, tab_idx: int, metadata: GDAny) -> None: ...
    def get_tab_metadata(self, tab_idx: int) -> GDAny: ...
    def remove_tab(self, tab_idx: int) -> None: ...
    def add_tab(self, title: GDString | str = "", icon: Texture2D = None) -> None: ...
    def get_tab_idx_at_point(self, point: Vector2) -> int: ...
    def set_tab_alignment(self, alignment: TabBar.AlignmentMode) -> None: ...
    def get_tab_alignment(self) -> TabBar.AlignmentMode: ...
    def set_clip_tabs(self, clip_tabs: bool) -> None: ...
    def get_clip_tabs(self) -> bool: ...
    def get_tab_offset(self) -> int: ...
    def get_offset_buttons_visible(self) -> bool: ...
    def ensure_tab_visible(self, idx: int) -> None: ...
    def get_tab_rect(self, tab_idx: int) -> Rect2: ...
    def move_tab(self, from_: int, to: int) -> None: ...
    def set_tab_close_display_policy(self, policy: TabBar.CloseButtonDisplayPolicy) -> None: ...
    def get_tab_close_display_policy(self) -> TabBar.CloseButtonDisplayPolicy: ...
    def set_max_tab_width(self, width: int) -> None: ...
    def get_max_tab_width(self) -> int: ...
    def set_scrolling_enabled(self, enabled: bool) -> None: ...
    def get_scrolling_enabled(self) -> bool: ...
    def set_drag_to_rearrange_enabled(self, enabled: bool) -> None: ...
    def get_drag_to_rearrange_enabled(self) -> bool: ...
    def set_tabs_rearrange_group(self, group_id: int) -> None: ...
    def get_tabs_rearrange_group(self) -> int: ...
    def set_scroll_to_selected(self, enabled: bool) -> None: ...
    def get_scroll_to_selected(self) -> bool: ...
    def set_select_with_rmb(self, enabled: bool) -> None: ...
    def get_select_with_rmb(self) -> bool: ...
    def clear_tabs(self) -> None: ...

    # Signals
    def tab_selected(self, tab: int) -> None: ...
    def tab_changed(self, tab: int) -> None: ...
    def tab_clicked(self, tab: int) -> None: ...
    def tab_rmb_clicked(self, tab: int) -> None: ...
    def tab_close_pressed(self, tab: int) -> None: ...
    def tab_button_pressed(self, tab: int) -> None: ...
    def tab_hovered(self, tab: int) -> None: ...
    def active_tab_rearranged(self, idx_to: int) -> None: ...

    # Properties
    current_tab: int
    tab_alignment: int
    clip_tabs: bool
    tab_close_display_policy: int
    max_tab_width: int
    scrolling_enabled: bool
    drag_to_rearrange_enabled: bool
    tabs_rearrange_group: int
    scroll_to_selected: bool
    select_with_rmb: bool
    tab_count: int


class TextEdit(TypeInUse(Control)):
    @classmethod
    def new(cls) -> TextEdit: ...

    # Enums
    class TextEdit.MenuItems(Enum):
        MENU_CUT: int
        MENU_COPY: int
        MENU_PASTE: int
        MENU_CLEAR: int
        MENU_SELECT_ALL: int
        MENU_UNDO: int
        MENU_REDO: int
        MENU_SUBMENU_TEXT_DIR: int
        MENU_DIR_INHERITED: int
        MENU_DIR_AUTO: int
        MENU_DIR_LTR: int
        MENU_DIR_RTL: int
        MENU_DISPLAY_UCC: int
        MENU_SUBMENU_INSERT_UCC: int
        MENU_INSERT_LRM: int
        MENU_INSERT_RLM: int
        MENU_INSERT_LRE: int
        MENU_INSERT_RLE: int
        MENU_INSERT_LRO: int
        MENU_INSERT_RLO: int
        MENU_INSERT_PDF: int
        MENU_INSERT_ALM: int
        MENU_INSERT_LRI: int
        MENU_INSERT_RLI: int
        MENU_INSERT_FSI: int
        MENU_INSERT_PDI: int
        MENU_INSERT_ZWJ: int
        MENU_INSERT_ZWNJ: int
        MENU_INSERT_WJ: int
        MENU_INSERT_SHY: int
        MENU_MAX: int
    class TextEdit.EditAction(Enum):
        ACTION_NONE: int
        ACTION_TYPING: int
        ACTION_BACKSPACE: int
        ACTION_DELETE: int
    class TextEdit.SearchFlags(Enum):
        SEARCH_MATCH_CASE: int
        SEARCH_WHOLE_WORDS: int
        SEARCH_BACKWARDS: int
    class TextEdit.CaretType(Enum):
        CARET_TYPE_LINE: int
        CARET_TYPE_BLOCK: int
    class TextEdit.SelectionMode(Enum):
        SELECTION_MODE_NONE: int
        SELECTION_MODE_SHIFT: int
        SELECTION_MODE_POINTER: int
        SELECTION_MODE_WORD: int
        SELECTION_MODE_LINE: int
    class TextEdit.LineWrappingMode(Enum):
        LINE_WRAPPING_NONE: int
        LINE_WRAPPING_BOUNDARY: int
    class TextEdit.GutterType(Enum):
        GUTTER_TYPE_STRING: int
        GUTTER_TYPE_ICON: int
        GUTTER_TYPE_CUSTOM: int

    # Methods
    def has_ime_text(self) -> bool: ...
    def set_editable(self, enabled: bool) -> None: ...
    def is_editable(self) -> bool: ...
    def set_text_direction(self, direction: Control.TextDirection) -> None: ...
    def get_text_direction(self) -> Control.TextDirection: ...
    def set_language(self, language: GDString | str) -> None: ...
    def get_language(self) -> GDString: ...
    def set_structured_text_bidi_override(self, parser: TextServer.StructuredTextParser) -> None: ...
    def get_structured_text_bidi_override(self) -> TextServer.StructuredTextParser: ...
    def set_structured_text_bidi_override_options(self, args: GDArray) -> None: ...
    def get_structured_text_bidi_override_options(self) -> GDArray: ...
    def set_tab_size(self, size: int) -> None: ...
    def get_tab_size(self) -> int: ...
    def set_overtype_mode_enabled(self, enabled: bool) -> None: ...
    def is_overtype_mode_enabled(self) -> bool: ...
    def set_context_menu_enabled(self, enabled: bool) -> None: ...
    def is_context_menu_enabled(self) -> bool: ...
    def set_shortcut_keys_enabled(self, enabled: bool) -> None: ...
    def is_shortcut_keys_enabled(self) -> bool: ...
    def set_virtual_keyboard_enabled(self, enabled: bool) -> None: ...
    def is_virtual_keyboard_enabled(self) -> bool: ...
    def set_middle_mouse_paste_enabled(self, enabled: bool) -> None: ...
    def is_middle_mouse_paste_enabled(self) -> bool: ...
    def clear(self) -> None: ...
    def set_text(self, text: GDString | str) -> None: ...
    def get_text(self) -> GDString: ...
    def get_line_count(self) -> int: ...
    def set_placeholder(self, text: GDString | str) -> None: ...
    def get_placeholder(self) -> GDString: ...
    def set_line(self, line: int, new_text: GDString | str) -> None: ...
    def get_line(self, line: int) -> GDString: ...
    def get_line_width(self, line: int, wrap_index: int = -1) -> int: ...
    def get_line_height(self) -> int: ...
    def get_indent_level(self, line: int) -> int: ...
    def get_first_non_whitespace_column(self, line: int) -> int: ...
    def swap_lines(self, from_line: int, to_line: int) -> None: ...
    def insert_line_at(self, line: int, text: GDString | str) -> None: ...
    def insert_text_at_caret(self, text: GDString | str, caret_index: int = -1) -> None: ...
    def remove_text(self, from_line: int, from_column: int, to_line: int, to_column: int) -> None: ...
    def get_last_unhidden_line(self) -> int: ...
    def get_next_visible_line_offset_from(self, line: int, visible_amount: int) -> int: ...
    def get_next_visible_line_index_offset_from(self, line: int, wrap_index: int, visible_amount: int) -> Vector2i: ...
    def backspace(self, caret_index: int = -1) -> None: ...
    def cut(self, caret_index: int = -1) -> None: ...
    def copy(self, caret_index: int = -1) -> None: ...
    def paste(self, caret_index: int = -1) -> None: ...
    def paste_primary_clipboard(self, caret_index: int = -1) -> None: ...
    def start_action(self, action: TextEdit.EditAction) -> None: ...
    def end_action(self) -> None: ...
    def begin_complex_operation(self) -> None: ...
    def end_complex_operation(self) -> None: ...
    def has_undo(self) -> bool: ...
    def has_redo(self) -> bool: ...
    def undo(self) -> None: ...
    def redo(self) -> None: ...
    def clear_undo_history(self) -> None: ...
    def tag_saved_version(self) -> None: ...
    def get_version(self) -> int: ...
    def get_saved_version(self) -> int: ...
    def set_search_text(self, search_text: GDString | str) -> None: ...
    def set_search_flags(self, flags: int) -> None: ...
    def search(self, text: GDString | str, flags: int, from_line: int, from_colum: int) -> Vector2i: ...
    def set_tooltip_request_func(self, callback: GDCallable) -> None: ...
    def get_local_mouse_pos(self) -> Vector2: ...
    def get_word_at_pos(self, position: Vector2) -> GDString: ...
    def get_line_column_at_pos(self, position: Vector2i, allow_out_of_bounds: bool = True) -> Vector2i: ...
    def get_pos_at_line_column(self, line: int, column: int) -> Vector2i: ...
    def get_rect_at_line_column(self, line: int, column: int) -> Rect2i: ...
    def get_minimap_line_at_pos(self, position: Vector2i) -> int: ...
    def is_dragging_cursor(self) -> bool: ...
    def is_mouse_over_selection(self, edges: bool, caret_index: int = -1) -> bool: ...
    def set_caret_type(self, type: TextEdit.CaretType) -> None: ...
    def get_caret_type(self) -> TextEdit.CaretType: ...
    def set_caret_blink_enabled(self, enable: bool) -> None: ...
    def is_caret_blink_enabled(self) -> bool: ...
    def set_caret_blink_interval(self, interval: float) -> None: ...
    def get_caret_blink_interval(self) -> float: ...
    def set_draw_caret_when_editable_disabled(self, enable: bool) -> None: ...
    def is_drawing_caret_when_editable_disabled(self) -> bool: ...
    def set_move_caret_on_right_click_enabled(self, enable: bool) -> None: ...
    def is_move_caret_on_right_click_enabled(self) -> bool: ...
    def set_caret_mid_grapheme_enabled(self, enabled: bool) -> None: ...
    def is_caret_mid_grapheme_enabled(self) -> bool: ...
    def set_multiple_carets_enabled(self, enabled: bool) -> None: ...
    def is_multiple_carets_enabled(self) -> bool: ...
    def add_caret(self, line: int, col: int) -> int: ...
    def remove_caret(self, caret: int) -> None: ...
    def remove_secondary_carets(self) -> None: ...
    def merge_overlapping_carets(self) -> None: ...
    def get_caret_count(self) -> int: ...
    def add_caret_at_carets(self, below: bool) -> None: ...
    def get_caret_index_edit_order(self) -> PackedInt32Array: ...
    def adjust_carets_after_edit(self, caret: int, from_line: int, from_col: int, to_line: int, to_col: int) -> None: ...
    def is_caret_visible(self, caret_index: int = 0) -> bool: ...
    def get_caret_draw_pos(self, caret_index: int = 0) -> Vector2: ...
    def set_caret_line(self, line: int, adjust_viewport: bool = True, can_be_hidden: bool = True, wrap_index: int = 0, caret_index: int = 0) -> None: ...
    def get_caret_line(self, caret_index: int = 0) -> int: ...
    def set_caret_column(self, column: int, adjust_viewport: bool = True, caret_index: int = 0) -> None: ...
    def get_caret_column(self, caret_index: int = 0) -> int: ...
    def get_caret_wrap_index(self, caret_index: int = 0) -> int: ...
    def get_word_under_caret(self, caret_index: int = -1) -> GDString: ...
    def set_selecting_enabled(self, enable: bool) -> None: ...
    def is_selecting_enabled(self) -> bool: ...
    def set_deselect_on_focus_loss_enabled(self, enable: bool) -> None: ...
    def is_deselect_on_focus_loss_enabled(self) -> bool: ...
    def set_drag_and_drop_selection_enabled(self, enable: bool) -> None: ...
    def is_drag_and_drop_selection_enabled(self) -> bool: ...
    def set_selection_mode(self, mode: TextEdit.SelectionMode, line: int = -1, column: int = -1, caret_index: int = 0) -> None: ...
    def get_selection_mode(self) -> TextEdit.SelectionMode: ...
    def select_all(self) -> None: ...
    def select_word_under_caret(self, caret_index: int = -1) -> None: ...
    def add_selection_for_next_occurrence(self) -> None: ...
    def select(self, from_line: int, from_column: int, to_line: int, to_column: int, caret_index: int = 0) -> None: ...
    def has_selection(self, caret_index: int = -1) -> bool: ...
    def get_selected_text(self, caret_index: int = -1) -> GDString: ...
    def get_selection_line(self, caret_index: int = 0) -> int: ...
    def get_selection_column(self, caret_index: int = 0) -> int: ...
    def get_selection_from_line(self, caret_index: int = 0) -> int: ...
    def get_selection_from_column(self, caret_index: int = 0) -> int: ...
    def get_selection_to_line(self, caret_index: int = 0) -> int: ...
    def get_selection_to_column(self, caret_index: int = 0) -> int: ...
    def deselect(self, caret_index: int = -1) -> None: ...
    def delete_selection(self, caret_index: int = -1) -> None: ...
    def set_line_wrapping_mode(self, mode: TextEdit.LineWrappingMode) -> None: ...
    def get_line_wrapping_mode(self) -> TextEdit.LineWrappingMode: ...
    def set_autowrap_mode(self, autowrap_mode: TextServer.AutowrapMode) -> None: ...
    def get_autowrap_mode(self) -> TextServer.AutowrapMode: ...
    def is_line_wrapped(self, line: int) -> bool: ...
    def get_line_wrap_count(self, line: int) -> int: ...
    def get_line_wrap_index_at_column(self, line: int, column: int) -> int: ...
    def get_line_wrapped_text(self, line: int) -> PackedStringArray: ...
    def set_smooth_scroll_enabled(self, enable: bool) -> None: ...
    def is_smooth_scroll_enabled(self) -> bool: ...
    def get_v_scroll_bar(self) -> VScrollBar: ...
    def get_h_scroll_bar(self) -> HScrollBar: ...
    def set_v_scroll(self, value: float) -> None: ...
    def get_v_scroll(self) -> float: ...
    def set_h_scroll(self, value: int) -> None: ...
    def get_h_scroll(self) -> int: ...
    def set_scroll_past_end_of_file_enabled(self, enable: bool) -> None: ...
    def is_scroll_past_end_of_file_enabled(self) -> bool: ...
    def set_v_scroll_speed(self, speed: float) -> None: ...
    def get_v_scroll_speed(self) -> float: ...
    def set_fit_content_height_enabled(self, enabled: bool) -> None: ...
    def is_fit_content_height_enabled(self) -> bool: ...
    def get_scroll_pos_for_line(self, line: int, wrap_index: int = 0) -> float: ...
    def set_line_as_first_visible(self, line: int, wrap_index: int = 0) -> None: ...
    def get_first_visible_line(self) -> int: ...
    def set_line_as_center_visible(self, line: int, wrap_index: int = 0) -> None: ...
    def set_line_as_last_visible(self, line: int, wrap_index: int = 0) -> None: ...
    def get_last_full_visible_line(self) -> int: ...
    def get_last_full_visible_line_wrap_index(self) -> int: ...
    def get_visible_line_count(self) -> int: ...
    def get_visible_line_count_in_range(self, from_line: int, to_line: int) -> int: ...
    def get_total_visible_line_count(self) -> int: ...
    def adjust_viewport_to_caret(self, caret_index: int = 0) -> None: ...
    def center_viewport_to_caret(self, caret_index: int = 0) -> None: ...
    def set_draw_minimap(self, enabled: bool) -> None: ...
    def is_drawing_minimap(self) -> bool: ...
    def set_minimap_width(self, width: int) -> None: ...
    def get_minimap_width(self) -> int: ...
    def get_minimap_visible_lines(self) -> int: ...
    def add_gutter(self, at: int = -1) -> None: ...
    def remove_gutter(self, gutter: int) -> None: ...
    def get_gutter_count(self) -> int: ...
    def set_gutter_name(self, gutter: int, name: GDString | str) -> None: ...
    def get_gutter_name(self, gutter: int) -> GDString: ...
    def set_gutter_type(self, gutter: int, type: TextEdit.GutterType) -> None: ...
    def get_gutter_type(self, gutter: int) -> TextEdit.GutterType: ...
    def set_gutter_width(self, gutter: int, width: int) -> None: ...
    def get_gutter_width(self, gutter: int) -> int: ...
    def set_gutter_draw(self, gutter: int, draw: bool) -> None: ...
    def is_gutter_drawn(self, gutter: int) -> bool: ...
    def set_gutter_clickable(self, gutter: int, clickable: bool) -> None: ...
    def is_gutter_clickable(self, gutter: int) -> bool: ...
    def set_gutter_overwritable(self, gutter: int, overwritable: bool) -> None: ...
    def is_gutter_overwritable(self, gutter: int) -> bool: ...
    def merge_gutters(self, from_line: int, to_line: int) -> None: ...
    def set_gutter_custom_draw(self, column: int, draw_callback: GDCallable) -> None: ...
    def get_total_gutter_width(self) -> int: ...
    def set_line_gutter_metadata(self, line: int, gutter: int, metadata: GDAny) -> None: ...
    def get_line_gutter_metadata(self, line: int, gutter: int) -> GDAny: ...
    def set_line_gutter_text(self, line: int, gutter: int, text: GDString | str) -> None: ...
    def get_line_gutter_text(self, line: int, gutter: int) -> GDString: ...
    def set_line_gutter_icon(self, line: int, gutter: int, icon: Texture2D) -> None: ...
    def get_line_gutter_icon(self, line: int, gutter: int) -> Texture2D: ...
    def set_line_gutter_item_color(self, line: int, gutter: int, color: Color) -> None: ...
    def get_line_gutter_item_color(self, line: int, gutter: int) -> Color: ...
    def set_line_gutter_clickable(self, line: int, gutter: int, clickable: bool) -> None: ...
    def is_line_gutter_clickable(self, line: int, gutter: int) -> bool: ...
    def set_line_background_color(self, line: int, color: Color) -> None: ...
    def get_line_background_color(self, line: int) -> Color: ...
    def set_syntax_highlighter(self, syntax_highlighter: SyntaxHighlighter) -> None: ...
    def get_syntax_highlighter(self) -> SyntaxHighlighter: ...
    def set_highlight_current_line(self, enabled: bool) -> None: ...
    def is_highlight_current_line_enabled(self) -> bool: ...
    def set_highlight_all_occurrences(self, enabled: bool) -> None: ...
    def is_highlight_all_occurrences_enabled(self) -> bool: ...
    def get_draw_control_chars(self) -> bool: ...
    def set_draw_control_chars(self, enabled: bool) -> None: ...
    def set_draw_tabs(self, enabled: bool) -> None: ...
    def is_drawing_tabs(self) -> bool: ...
    def set_draw_spaces(self, enabled: bool) -> None: ...
    def is_drawing_spaces(self) -> bool: ...
    def get_menu(self) -> PopupMenu: ...
    def is_menu_visible(self) -> bool: ...
    def menu_option(self, option: int) -> None: ...

    # Signals
    def text_set(self) -> None: ...
    def text_changed(self) -> None: ...
    def lines_edited_from(self, from_line: int, to_line: int) -> None: ...
    def caret_changed(self) -> None: ...
    def gutter_clicked(self, line: int, gutter: int) -> None: ...
    def gutter_added(self) -> None: ...
    def gutter_removed(self) -> None: ...

    # Properties
    text: GDString
    placeholder_text: GDString
    editable: bool
    context_menu_enabled: bool
    shortcut_keys_enabled: bool
    selecting_enabled: bool
    deselect_on_focus_loss_enabled: bool
    drag_and_drop_selection_enabled: bool
    virtual_keyboard_enabled: bool
    middle_mouse_paste_enabled: bool
    wrap_mode: int
    autowrap_mode: int
    highlight_all_occurrences: bool
    highlight_current_line: bool
    draw_control_chars: bool
    draw_tabs: bool
    draw_spaces: bool
    syntax_highlighter: SyntaxHighlighter
    scroll_smooth: bool
    scroll_v_scroll_speed: float
    scroll_past_end_of_file: bool
    scroll_vertical: float
    scroll_horizontal: int
    scroll_fit_content_height: bool
    minimap_draw: bool
    minimap_width: int
    caret_type: int
    caret_blink: bool
    caret_blink_interval: float
    caret_draw_when_editable_disabled: bool
    caret_move_on_right_click: bool
    caret_mid_grapheme: bool
    caret_multiple: bool
    text_direction: int
    language: GDString
    structured_text_bidi_override: int
    structured_text_bidi_override_options: GDArray


class TextureProgressBar(TypeInUse(Range)):
    @classmethod
    def new(cls) -> TextureProgressBar: ...

    # Enums
    class TextureProgressBar.FillMode(Enum):
        FILL_LEFT_TO_RIGHT: int
        FILL_RIGHT_TO_LEFT: int
        FILL_TOP_TO_BOTTOM: int
        FILL_BOTTOM_TO_TOP: int
        FILL_CLOCKWISE: int
        FILL_COUNTER_CLOCKWISE: int
        FILL_BILINEAR_LEFT_AND_RIGHT: int
        FILL_BILINEAR_TOP_AND_BOTTOM: int
        FILL_CLOCKWISE_AND_COUNTER_CLOCKWISE: int

    # Methods
    def set_under_texture(self, tex: Texture2D) -> None: ...
    def get_under_texture(self) -> Texture2D: ...
    def set_progress_texture(self, tex: Texture2D) -> None: ...
    def get_progress_texture(self) -> Texture2D: ...
    def set_over_texture(self, tex: Texture2D) -> None: ...
    def get_over_texture(self) -> Texture2D: ...
    def set_fill_mode(self, mode: int) -> None: ...
    def get_fill_mode(self) -> int: ...
    def set_tint_under(self, tint: Color) -> None: ...
    def get_tint_under(self) -> Color: ...
    def set_tint_progress(self, tint: Color) -> None: ...
    def get_tint_progress(self) -> Color: ...
    def set_tint_over(self, tint: Color) -> None: ...
    def get_tint_over(self) -> Color: ...
    def set_texture_progress_offset(self, offset: Vector2) -> None: ...
    def get_texture_progress_offset(self) -> Vector2: ...
    def set_radial_initial_angle(self, mode: float) -> None: ...
    def get_radial_initial_angle(self) -> float: ...
    def set_radial_center_offset(self, mode: Vector2) -> None: ...
    def get_radial_center_offset(self) -> Vector2: ...
    def set_fill_degrees(self, mode: float) -> None: ...
    def get_fill_degrees(self) -> float: ...
    def set_stretch_margin(self, margin: Side, value: int) -> None: ...
    def get_stretch_margin(self, margin: Side) -> int: ...
    def set_nine_patch_stretch(self, stretch: bool) -> None: ...
    def get_nine_patch_stretch(self) -> bool: ...

    # Properties
    fill_mode: int
    nine_patch_stretch: bool
    stretch_margin_left: int
    stretch_margin_top: int
    stretch_margin_right: int
    stretch_margin_bottom: int
    texture_under: Texture2D
    texture_over: Texture2D
    texture_progress: Texture2D
    texture_progress_offset: Vector2
    tint_under: Color
    tint_over: Color
    tint_progress: Color
    radial_initial_angle: float
    radial_fill_degrees: float
    radial_center_offset: Vector2


class TextureRect(TypeInUse(Control)):
    @classmethod
    def new(cls) -> TextureRect: ...

    # Enums
    class TextureRect.ExpandMode(Enum):
        EXPAND_KEEP_SIZE: int
        EXPAND_IGNORE_SIZE: int
        EXPAND_FIT_WIDTH: int
        EXPAND_FIT_WIDTH_PROPORTIONAL: int
        EXPAND_FIT_HEIGHT: int
        EXPAND_FIT_HEIGHT_PROPORTIONAL: int
    class TextureRect.StretchMode(Enum):
        STRETCH_SCALE: int
        STRETCH_TILE: int
        STRETCH_KEEP: int
        STRETCH_KEEP_CENTERED: int
        STRETCH_KEEP_ASPECT: int
        STRETCH_KEEP_ASPECT_CENTERED: int
        STRETCH_KEEP_ASPECT_COVERED: int

    # Methods
    def set_texture(self, texture: Texture2D) -> None: ...
    def get_texture(self) -> Texture2D: ...
    def set_expand_mode(self, expand_mode: TextureRect.ExpandMode) -> None: ...
    def get_expand_mode(self) -> TextureRect.ExpandMode: ...
    def set_flip_h(self, enable: bool) -> None: ...
    def is_flipped_h(self) -> bool: ...
    def set_flip_v(self, enable: bool) -> None: ...
    def is_flipped_v(self) -> bool: ...
    def set_stretch_mode(self, stretch_mode: TextureRect.StretchMode) -> None: ...
    def get_stretch_mode(self) -> TextureRect.StretchMode: ...

    # Properties
    texture: Texture2D
    expand_mode: int
    stretch_mode: int
    flip_h: bool
    flip_v: bool


class TileMap(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> TileMap: ...

    # Enums
    class TileMap.VisibilityMode(Enum):
        VISIBILITY_MODE_DEFAULT: int
        VISIBILITY_MODE_FORCE_HIDE: int
        VISIBILITY_MODE_FORCE_SHOW: int

    # Methods
    def set_tileset(self, tileset: TileSet) -> None: ...
    def get_tileset(self) -> TileSet: ...
    def set_quadrant_size(self, size: int) -> None: ...
    def get_quadrant_size(self) -> int: ...
    def get_layers_count(self) -> int: ...
    def add_layer(self, to_position: int) -> None: ...
    def move_layer(self, layer: int, to_position: int) -> None: ...
    def remove_layer(self, layer: int) -> None: ...
    def set_layer_name(self, layer: int, name: GDString | str) -> None: ...
    def get_layer_name(self, layer: int) -> GDString: ...
    def set_layer_enabled(self, layer: int, enabled: bool) -> None: ...
    def is_layer_enabled(self, layer: int) -> bool: ...
    def set_layer_modulate(self, layer: int, modulate: Color) -> None: ...
    def get_layer_modulate(self, layer: int) -> Color: ...
    def set_layer_y_sort_enabled(self, layer: int, y_sort_enabled: bool) -> None: ...
    def is_layer_y_sort_enabled(self, layer: int) -> bool: ...
    def set_layer_y_sort_origin(self, layer: int, y_sort_origin: int) -> None: ...
    def get_layer_y_sort_origin(self, layer: int) -> int: ...
    def set_layer_z_index(self, layer: int, z_index: int) -> None: ...
    def get_layer_z_index(self, layer: int) -> int: ...
    def set_collision_animatable(self, enabled: bool) -> None: ...
    def is_collision_animatable(self) -> bool: ...
    def set_collision_visibility_mode(self, collision_visibility_mode: TileMap.VisibilityMode) -> None: ...
    def get_collision_visibility_mode(self) -> TileMap.VisibilityMode: ...
    def set_navigation_visibility_mode(self, navigation_visibility_mode: TileMap.VisibilityMode) -> None: ...
    def get_navigation_visibility_mode(self) -> TileMap.VisibilityMode: ...
    def set_navigation_map(self, layer: int, map: RID) -> None: ...
    def get_navigation_map(self, layer: int) -> RID: ...
    def set_cell(self, layer: int, coords: Vector2i, source_id: int = -1, atlas_coords: Vector2i = Vector2i(-1, -1), alternative_tile: int = 0) -> None: ...
    def erase_cell(self, layer: int, coords: Vector2i) -> None: ...
    def get_cell_source_id(self, layer: int, coords: Vector2i, use_proxies: bool = False) -> int: ...
    def get_cell_atlas_coords(self, layer: int, coords: Vector2i, use_proxies: bool = False) -> Vector2i: ...
    def get_cell_alternative_tile(self, layer: int, coords: Vector2i, use_proxies: bool = False) -> int: ...
    def get_cell_tile_data(self, layer: int, coords: Vector2i, use_proxies: bool = False) -> TileData: ...
    def get_coords_for_body_rid(self, body: RID) -> Vector2i: ...
    def get_layer_for_body_rid(self, body: RID) -> int: ...
    def get_pattern(self, layer: int, coords_array: GDArray) -> TileMapPattern: ...
    def map_pattern(self, position_in_tilemap: Vector2i, coords_in_pattern: Vector2i, pattern: TileMapPattern) -> Vector2i: ...
    def set_pattern(self, layer: int, position: Vector2i, pattern: TileMapPattern) -> None: ...
    def set_cells_terrain_connect(self, layer: int, cells: GDArray, terrain_set: int, terrain: int, ignore_empty_terrains: bool = True) -> None: ...
    def set_cells_terrain_path(self, layer: int, path: GDArray, terrain_set: int, terrain: int, ignore_empty_terrains: bool = True) -> None: ...
    def fix_invalid_tiles(self) -> None: ...
    def clear_layer(self, layer: int) -> None: ...
    def clear(self) -> None: ...
    def force_update(self, layer: int = -1) -> None: ...
    def get_surrounding_cells(self, coords: Vector2i) -> GDArray: ...
    def get_used_cells(self, layer: int) -> GDArray: ...
    def get_used_cells_by_id(self, layer: int, source_id: int = -1, atlas_coords: Vector2i = Vector2i(-1, -1), alternative_tile: int = -1) -> GDArray: ...
    def get_used_rect(self) -> Rect2i: ...
    def map_to_local(self, map_position: Vector2i) -> Vector2: ...
    def local_to_map(self, local_position: Vector2) -> Vector2i: ...
    def get_neighbor_cell(self, coords: Vector2i, neighbor: TileSet.CellNeighbor) -> Vector2i: ...

    # Signals
    def changed(self) -> None: ...

    # Properties
    tile_set: TileSet
    cell_quadrant_size: int
    collision_animatable: bool
    collision_visibility_mode: int
    navigation_visibility_mode: int


class TouchScreenButton(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> TouchScreenButton: ...

    # Enums
    class TouchScreenButton.VisibilityMode(Enum):
        VISIBILITY_ALWAYS: int
        VISIBILITY_TOUCHSCREEN_ONLY: int

    # Methods
    def set_texture_normal(self, texture: Texture2D) -> None: ...
    def get_texture_normal(self) -> Texture2D: ...
    def set_texture_pressed(self, texture: Texture2D) -> None: ...
    def get_texture_pressed(self) -> Texture2D: ...
    def set_bitmask(self, bitmask: BitMap) -> None: ...
    def get_bitmask(self) -> BitMap: ...
    def set_shape(self, shape: Shape2D) -> None: ...
    def get_shape(self) -> Shape2D: ...
    def set_shape_centered(self, bool: bool) -> None: ...
    def is_shape_centered(self) -> bool: ...
    def set_shape_visible(self, bool: bool) -> None: ...
    def is_shape_visible(self) -> bool: ...
    def set_action(self, action: GDString | str) -> None: ...
    def get_action(self) -> GDString: ...
    def set_visibility_mode(self, mode: TouchScreenButton.VisibilityMode) -> None: ...
    def get_visibility_mode(self) -> TouchScreenButton.VisibilityMode: ...
    def set_passby_press(self, enabled: bool) -> None: ...
    def is_passby_press_enabled(self) -> bool: ...
    def is_pressed(self) -> bool: ...

    # Signals
    def pressed(self) -> None: ...
    def released(self) -> None: ...

    # Properties
    texture_normal: Texture2D
    texture_pressed: Texture2D
    bitmask: BitMap
    shape: Shape2D
    shape_centered: bool
    shape_visible: bool
    passby_press: bool
    action: StringName
    visibility_mode: int


class Tree(TypeInUse(Control)):
    @classmethod
    def new(cls) -> Tree: ...

    # Enums
    class Tree.SelectMode(Enum):
        SELECT_SINGLE: int
        SELECT_ROW: int
        SELECT_MULTI: int
    class Tree.DropModeFlags(Enum):
        DROP_MODE_DISABLED: int
        DROP_MODE_ON_ITEM: int
        DROP_MODE_INBETWEEN: int

    # Methods
    def clear(self) -> None: ...
    def create_item(self, parent: TreeItem = None, index: int = -1) -> TreeItem: ...
    def get_root(self) -> TreeItem: ...
    def set_column_custom_minimum_width(self, column: int, min_width: int) -> None: ...
    def set_column_expand(self, column: int, expand: bool) -> None: ...
    def set_column_expand_ratio(self, column: int, ratio: int) -> None: ...
    def set_column_clip_content(self, column: int, enable: bool) -> None: ...
    def is_column_expanding(self, column: int) -> bool: ...
    def is_column_clipping_content(self, column: int) -> bool: ...
    def get_column_expand_ratio(self, column: int) -> int: ...
    def get_column_width(self, column: int) -> int: ...
    def set_hide_root(self, enable: bool) -> None: ...
    def is_root_hidden(self) -> bool: ...
    def get_next_selected(self, from_: TreeItem) -> TreeItem: ...
    def get_selected(self) -> TreeItem: ...
    def set_selected(self, item: TreeItem, column: int) -> None: ...
    def get_selected_column(self) -> int: ...
    def get_pressed_button(self) -> int: ...
    def set_select_mode(self, mode: Tree.SelectMode) -> None: ...
    def get_select_mode(self) -> Tree.SelectMode: ...
    def deselect_all(self) -> None: ...
    def set_columns(self, amount: int) -> None: ...
    def get_columns(self) -> int: ...
    def get_edited(self) -> TreeItem: ...
    def get_edited_column(self) -> int: ...
    def edit_selected(self, force_edit: bool = False) -> bool: ...
    def get_custom_popup_rect(self) -> Rect2: ...
    def get_item_area_rect(self, item: TreeItem, column: int = -1, button_index: int = -1) -> Rect2: ...
    def get_item_at_position(self, position: Vector2) -> TreeItem: ...
    def get_column_at_position(self, position: Vector2) -> int: ...
    def get_drop_section_at_position(self, position: Vector2) -> int: ...
    def get_button_id_at_position(self, position: Vector2) -> int: ...
    def ensure_cursor_is_visible(self) -> None: ...
    def set_column_titles_visible(self, visible: bool) -> None: ...
    def are_column_titles_visible(self) -> bool: ...
    def set_column_title(self, column: int, title: GDString | str) -> None: ...
    def get_column_title(self, column: int) -> GDString: ...
    def set_column_title_alignment(self, column: int, title_alignment: HorizontalAlignment) -> None: ...
    def get_column_title_alignment(self, column: int) -> HorizontalAlignment: ...
    def set_column_title_direction(self, column: int, direction: Control.TextDirection) -> None: ...
    def get_column_title_direction(self, column: int) -> Control.TextDirection: ...
    def set_column_title_language(self, column: int, language: GDString | str) -> None: ...
    def get_column_title_language(self, column: int) -> GDString: ...
    def get_scroll(self) -> Vector2: ...
    def scroll_to_item(self, item: TreeItem, center_on_item: bool = False) -> None: ...
    def set_h_scroll_enabled(self, h_scroll: bool) -> None: ...
    def is_h_scroll_enabled(self) -> bool: ...
    def set_v_scroll_enabled(self, h_scroll: bool) -> None: ...
    def is_v_scroll_enabled(self) -> bool: ...
    def set_hide_folding(self, hide: bool) -> None: ...
    def is_folding_hidden(self) -> bool: ...
    def set_enable_recursive_folding(self, enable: bool) -> None: ...
    def is_recursive_folding_enabled(self) -> bool: ...
    def set_drop_mode_flags(self, flags: int) -> None: ...
    def get_drop_mode_flags(self) -> int: ...
    def set_allow_rmb_select(self, allow: bool) -> None: ...
    def get_allow_rmb_select(self) -> bool: ...
    def set_allow_reselect(self, allow: bool) -> None: ...
    def get_allow_reselect(self) -> bool: ...
    def set_allow_search(self, allow: bool) -> None: ...
    def get_allow_search(self) -> bool: ...

    # Signals
    def item_selected(self) -> None: ...
    def cell_selected(self) -> None: ...
    def multi_selected(self, item: TreeItem, column: int, selected: bool) -> None: ...
    def item_mouse_selected(self, position: Vector2, mouse_button_index: int) -> None: ...
    def empty_clicked(self, position: Vector2, mouse_button_index: int) -> None: ...
    def item_edited(self) -> None: ...
    def custom_item_clicked(self, mouse_button_index: int) -> None: ...
    def item_icon_double_clicked(self) -> None: ...
    def item_collapsed(self, item: TreeItem) -> None: ...
    def check_propagated_to_item(self, item: TreeItem, column: int) -> None: ...
    def button_clicked(self, item: TreeItem, column: int, id: int, mouse_button_index: int) -> None: ...
    def custom_popup_edited(self, arrow_clicked: bool) -> None: ...
    def item_activated(self) -> None: ...
    def column_title_clicked(self, column: int, mouse_button_index: int) -> None: ...
    def nothing_selected(self) -> None: ...

    # Properties
    columns: int
    column_titles_visible: bool
    allow_reselect: bool
    allow_rmb_select: bool
    allow_search: bool
    hide_folding: bool
    enable_recursive_folding: bool
    hide_root: bool
    drop_mode_flags: int
    select_mode: int
    scroll_horizontal_enabled: bool
    scroll_vertical_enabled: bool


class VScrollBar(TypeInUse(ScrollBar)):
    @classmethod
    def new(cls) -> VScrollBar: ...


class VSeparator(TypeInUse(Separator)):
    @classmethod
    def new(cls) -> VSeparator: ...


class VSlider(TypeInUse(Slider)):
    @classmethod
    def new(cls) -> VSlider: ...


class VehicleBody3D(TypeInUse(RigidBody3D)):
    @classmethod
    def new(cls) -> VehicleBody3D: ...

    # Methods
    def set_engine_force(self, engine_force: float) -> None: ...
    def get_engine_force(self) -> float: ...
    def set_brake(self, brake: float) -> None: ...
    def get_brake(self) -> float: ...
    def set_steering(self, steering: float) -> None: ...
    def get_steering(self) -> float: ...

    # Properties
    engine_force: float
    brake: float
    steering: float


class VideoStreamPlayer(TypeInUse(Control)):
    @classmethod
    def new(cls) -> VideoStreamPlayer: ...

    # Methods
    def set_stream(self, stream: VideoStream) -> None: ...
    def get_stream(self) -> VideoStream: ...
    def play(self) -> None: ...
    def stop(self) -> None: ...
    def is_playing(self) -> bool: ...
    def set_paused(self, paused: bool) -> None: ...
    def is_paused(self) -> bool: ...
    def set_volume(self, volume: float) -> None: ...
    def get_volume(self) -> float: ...
    def set_volume_db(self, db: float) -> None: ...
    def get_volume_db(self) -> float: ...
    def set_audio_track(self, track: int) -> None: ...
    def get_audio_track(self) -> int: ...
    def get_stream_name(self) -> GDString: ...
    def set_stream_position(self, position: float) -> None: ...
    def get_stream_position(self) -> float: ...
    def set_autoplay(self, enabled: bool) -> None: ...
    def has_autoplay(self) -> bool: ...
    def set_expand(self, enable: bool) -> None: ...
    def has_expand(self) -> bool: ...
    def set_buffering_msec(self, msec: int) -> None: ...
    def get_buffering_msec(self) -> int: ...
    def set_bus(self, bus: StringName | str) -> None: ...
    def get_bus(self) -> StringName: ...
    def get_video_texture(self) -> Texture2D: ...

    # Signals
    def finished(self) -> None: ...

    # Properties
    audio_track: int
    stream: VideoStream
    volume_db: float
    volume: float
    autoplay: bool
    paused: bool
    expand: bool
    buffering_msec: int
    stream_position: float
    bus: StringName


class VisibleOnScreenNotifier2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> VisibleOnScreenNotifier2D: ...

    # Methods
    def set_rect(self, rect: Rect2) -> None: ...
    def get_rect(self) -> Rect2: ...
    def is_on_screen(self) -> bool: ...

    # Signals
    def screen_entered(self) -> None: ...
    def screen_exited(self) -> None: ...

    # Properties
    rect: Rect2


class VisibleOnScreenNotifier3D(TypeInUse(VisualInstance3D)):
    @classmethod
    def new(cls) -> VisibleOnScreenNotifier3D: ...

    # Methods
    def set_aabb(self, rect: AABB) -> None: ...
    def is_on_screen(self) -> bool: ...

    # Signals
    def screen_entered(self) -> None: ...
    def screen_exited(self) -> None: ...

    # Properties
    aabb: AABB


class VisualShaderNodeExpression(TypeInUse(VisualShaderNodeGroupBase)):
    def __init__(self): ...

    # Methods
    def set_expression(self, expression: GDString | str) -> None: ...
    def get_expression(self) -> GDString: ...

    # Properties
    expression: GDString


class VisualShaderNodeGlobalExpression(TypeInUse(VisualShaderNodeExpression)):
    def __init__(self): ...


class WebRTCMultiplayerPeer(TypeInUse(MultiplayerPeer)):
    def __init__(self): ...

    # Methods
    def create_server(self, channels_config: GDArray = []) -> Error: ...
    def create_client(self, peer_id: int, channels_config: GDArray = []) -> Error: ...
    def create_mesh(self, peer_id: int, channels_config: GDArray = []) -> Error: ...
    def add_peer(self, peer: WebRTCPeerConnection, peer_id: int, unreliable_lifetime: int = 1) -> Error: ...
    def remove_peer(self, peer_id: int) -> None: ...
    def has_peer(self, peer_id: int) -> bool: ...
    def get_peer(self, peer_id: int) -> GDDictionary: ...
    def get_peers(self) -> GDDictionary: ...


class WebSocketMultiplayerPeer(TypeInUse(MultiplayerPeer)):
    def __init__(self): ...

    # Methods
    def create_client(self, url: GDString | str, tls_client_options: TLSOptions = None) -> Error: ...
    def create_server(self, port: int, bind_address: GDString | str = "*", tls_server_options: TLSOptions = None) -> Error: ...
    def get_peer(self, peer_id: int) -> WebSocketPeer: ...
    def get_peer_address(self, id: int) -> GDString: ...
    def get_peer_port(self, id: int) -> int: ...
    def get_supported_protocols(self) -> PackedStringArray: ...
    def set_supported_protocols(self, protocols: PackedStringArray) -> None: ...
    def get_handshake_headers(self) -> PackedStringArray: ...
    def set_handshake_headers(self, protocols: PackedStringArray) -> None: ...
    def get_inbound_buffer_size(self) -> int: ...
    def set_inbound_buffer_size(self, buffer_size: int) -> None: ...
    def get_outbound_buffer_size(self) -> int: ...
    def set_outbound_buffer_size(self, buffer_size: int) -> None: ...
    def get_handshake_timeout(self) -> float: ...
    def set_handshake_timeout(self, timeout: float) -> None: ...
    def set_max_queued_packets(self, max_queued_packets: int) -> None: ...
    def get_max_queued_packets(self) -> int: ...

    # Properties
    supported_protocols: PackedStringArray
    handshake_headers: PackedStringArray
    inbound_buffer_size: int
    outbound_buffer_size: int
    handshake_timeout: float
    max_queued_packets: int


class XRAnchor3D(TypeInUse(XRNode3D)):
    @classmethod
    def new(cls) -> XRAnchor3D: ...

    # Methods
    def get_size(self) -> Vector3: ...
    def get_plane(self) -> Plane: ...


class XRCamera3D(TypeInUse(Camera3D)):
    @classmethod
    def new(cls) -> XRCamera3D: ...


class XRController3D(TypeInUse(XRNode3D)):
    @classmethod
    def new(cls) -> XRController3D: ...

    # Methods
    def is_button_pressed(self, name: StringName | str) -> bool: ...
    def get_input(self, name: StringName | str) -> GDAny: ...
    def get_float(self, name: StringName | str) -> float: ...
    def get_vector2(self, name: StringName | str) -> Vector2: ...
    def get_tracker_hand(self) -> XRPositionalTracker.TrackerHand: ...

    # Signals
    def button_pressed(self, name: GDString | str) -> None: ...
    def button_released(self, name: GDString | str) -> None: ...
    def input_float_changed(self, name: GDString | str, value: float) -> None: ...
    def input_vector2_changed(self, name: GDString | str, value: Vector2) -> None: ...


class AnimatableBody3D(TypeInUse(StaticBody3D)):
    @classmethod
    def new(cls) -> AnimatableBody3D: ...

    # Methods
    def set_sync_to_physics(self, enable: bool) -> None: ...
    def is_sync_to_physics_enabled(self) -> bool: ...

    # Properties
    sync_to_physics: bool


class AnimatedSprite2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> AnimatedSprite2D: ...

    # Methods
    def set_sprite_frames(self, sprite_frames: SpriteFrames) -> None: ...
    def get_sprite_frames(self) -> SpriteFrames: ...
    def set_animation(self, name: StringName | str) -> None: ...
    def get_animation(self) -> StringName: ...
    def set_autoplay(self, name: GDString | str) -> None: ...
    def get_autoplay(self) -> GDString: ...
    def is_playing(self) -> bool: ...
    def play(self, name: StringName | str = "", custom_speed: float = 1.0, from_end: bool = False) -> None: ...
    def play_backwards(self, name: StringName | str = "") -> None: ...
    def pause(self) -> None: ...
    def stop(self) -> None: ...
    def set_centered(self, centered: bool) -> None: ...
    def is_centered(self) -> bool: ...
    def set_offset(self, offset: Vector2) -> None: ...
    def get_offset(self) -> Vector2: ...
    def set_flip_h(self, flip_h: bool) -> None: ...
    def is_flipped_h(self) -> bool: ...
    def set_flip_v(self, flip_v: bool) -> None: ...
    def is_flipped_v(self) -> bool: ...
    def set_frame(self, frame: int) -> None: ...
    def get_frame(self) -> int: ...
    def set_frame_progress(self, progress: float) -> None: ...
    def get_frame_progress(self) -> float: ...
    def set_frame_and_progress(self, frame: int, progress: float) -> None: ...
    def set_speed_scale(self, speed_scale: float) -> None: ...
    def get_speed_scale(self) -> float: ...
    def get_playing_speed(self) -> float: ...

    # Signals
    def sprite_frames_changed(self) -> None: ...
    def animation_changed(self) -> None: ...
    def frame_changed(self) -> None: ...
    def animation_looped(self) -> None: ...
    def animation_finished(self) -> None: ...

    # Properties
    sprite_frames: SpriteFrames
    animation: StringName
    autoplay: StringName
    frame: int
    frame_progress: float
    speed_scale: float
    centered: bool
    offset: Vector2
    flip_h: bool
    flip_v: bool


class AnimatedSprite3D(TypeInUse(SpriteBase3D)):
    @classmethod
    def new(cls) -> AnimatedSprite3D: ...

    # Methods
    def set_sprite_frames(self, sprite_frames: SpriteFrames) -> None: ...
    def get_sprite_frames(self) -> SpriteFrames: ...
    def set_animation(self, name: StringName | str) -> None: ...
    def get_animation(self) -> StringName: ...
    def set_autoplay(self, name: GDString | str) -> None: ...
    def get_autoplay(self) -> GDString: ...
    def is_playing(self) -> bool: ...
    def play(self, name: StringName | str = "", custom_speed: float = 1.0, from_end: bool = False) -> None: ...
    def play_backwards(self, name: StringName | str = "") -> None: ...
    def pause(self) -> None: ...
    def stop(self) -> None: ...
    def set_frame(self, frame: int) -> None: ...
    def get_frame(self) -> int: ...
    def set_frame_progress(self, progress: float) -> None: ...
    def get_frame_progress(self) -> float: ...
    def set_frame_and_progress(self, frame: int, progress: float) -> None: ...
    def set_speed_scale(self, speed_scale: float) -> None: ...
    def get_speed_scale(self) -> float: ...
    def get_playing_speed(self) -> float: ...

    # Signals
    def sprite_frames_changed(self) -> None: ...
    def animation_changed(self) -> None: ...
    def frame_changed(self) -> None: ...
    def animation_looped(self) -> None: ...
    def animation_finished(self) -> None: ...

    # Properties
    sprite_frames: SpriteFrames
    animation: StringName
    autoplay: StringName
    frame: int
    frame_progress: float
    speed_scale: float


class Area3D(TypeInUse(CollisionObject3D)):
    @classmethod
    def new(cls) -> Area3D: ...

    # Enums
    class Area3D.SpaceOverride(Enum):
        SPACE_OVERRIDE_DISABLED: int
        SPACE_OVERRIDE_COMBINE: int
        SPACE_OVERRIDE_COMBINE_REPLACE: int
        SPACE_OVERRIDE_REPLACE: int
        SPACE_OVERRIDE_REPLACE_COMBINE: int

    # Methods
    def set_gravity_space_override_mode(self, space_override_mode: Area3D.SpaceOverride) -> None: ...
    def get_gravity_space_override_mode(self) -> Area3D.SpaceOverride: ...
    def set_gravity_is_point(self, enable: bool) -> None: ...
    def is_gravity_a_point(self) -> bool: ...
    def set_gravity_point_unit_distance(self, distance_scale: float) -> None: ...
    def get_gravity_point_unit_distance(self) -> float: ...
    def set_gravity_point_center(self, center: Vector3) -> None: ...
    def get_gravity_point_center(self) -> Vector3: ...
    def set_gravity_direction(self, direction: Vector3) -> None: ...
    def get_gravity_direction(self) -> Vector3: ...
    def set_gravity(self, gravity: float) -> None: ...
    def get_gravity(self) -> float: ...
    def set_linear_damp_space_override_mode(self, space_override_mode: Area3D.SpaceOverride) -> None: ...
    def get_linear_damp_space_override_mode(self) -> Area3D.SpaceOverride: ...
    def set_angular_damp_space_override_mode(self, space_override_mode: Area3D.SpaceOverride) -> None: ...
    def get_angular_damp_space_override_mode(self) -> Area3D.SpaceOverride: ...
    def set_angular_damp(self, angular_damp: float) -> None: ...
    def get_angular_damp(self) -> float: ...
    def set_linear_damp(self, linear_damp: float) -> None: ...
    def get_linear_damp(self) -> float: ...
    def set_priority(self, priority: int) -> None: ...
    def get_priority(self) -> int: ...
    def set_wind_force_magnitude(self, wind_force_magnitude: float) -> None: ...
    def get_wind_force_magnitude(self) -> float: ...
    def set_wind_attenuation_factor(self, wind_attenuation_factor: float) -> None: ...
    def get_wind_attenuation_factor(self) -> float: ...
    def set_wind_source_path(self, wind_source_path: NodePath | str) -> None: ...
    def get_wind_source_path(self) -> NodePath: ...
    def set_monitorable(self, enable: bool) -> None: ...
    def is_monitorable(self) -> bool: ...
    def set_monitoring(self, enable: bool) -> None: ...
    def is_monitoring(self) -> bool: ...
    def get_overlapping_bodies(self) -> GDArray: ...
    def get_overlapping_areas(self) -> GDArray: ...
    def has_overlapping_bodies(self) -> bool: ...
    def has_overlapping_areas(self) -> bool: ...
    def overlaps_body(self, body: Node) -> bool: ...
    def overlaps_area(self, area: Node) -> bool: ...
    def set_audio_bus_override(self, enable: bool) -> None: ...
    def is_overriding_audio_bus(self) -> bool: ...
    def set_audio_bus_name(self, name: StringName | str) -> None: ...
    def get_audio_bus_name(self) -> StringName: ...
    def set_use_reverb_bus(self, enable: bool) -> None: ...
    def is_using_reverb_bus(self) -> bool: ...
    def set_reverb_bus_name(self, name: StringName | str) -> None: ...
    def get_reverb_bus_name(self) -> StringName: ...
    def set_reverb_amount(self, amount: float) -> None: ...
    def get_reverb_amount(self) -> float: ...
    def set_reverb_uniformity(self, amount: float) -> None: ...
    def get_reverb_uniformity(self) -> float: ...

    # Signals
    def body_shape_entered(self, body_rid: RID, body: Node3D, body_shape_index: int, local_shape_index: int) -> None: ...
    def body_shape_exited(self, body_rid: RID, body: Node3D, body_shape_index: int, local_shape_index: int) -> None: ...
    def body_entered(self, body: Node3D) -> None: ...
    def body_exited(self, body: Node3D) -> None: ...
    def area_shape_entered(self, area_rid: RID, area: Area3D, area_shape_index: int, local_shape_index: int) -> None: ...
    def area_shape_exited(self, area_rid: RID, area: Area3D, area_shape_index: int, local_shape_index: int) -> None: ...
    def area_entered(self, area: Area3D) -> None: ...
    def area_exited(self, area: Area3D) -> None: ...

    # Properties
    monitoring: bool
    monitorable: bool
    priority: int
    gravity_space_override: int
    gravity_point: bool
    gravity_point_unit_distance: float
    gravity_point_center: Vector3
    gravity_direction: Vector3
    gravity: float
    linear_damp_space_override: int
    linear_damp: float
    angular_damp_space_override: int
    angular_damp: float
    wind_force_magnitude: float
    wind_attenuation_factor: float
    wind_source_path: NodePath
    audio_bus_override: bool
    audio_bus_name: StringName
    reverb_bus_enabled: bool
    reverb_bus_name: StringName
    reverb_bus_amount: float
    reverb_bus_uniformity: float


class AudioListener2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> AudioListener2D: ...

    # Methods
    def make_current(self) -> None: ...
    def clear_current(self) -> None: ...
    def is_current(self) -> bool: ...


class AudioStreamPlayer2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> AudioStreamPlayer2D: ...

    # Methods
    def set_stream(self, stream: AudioStream) -> None: ...
    def get_stream(self) -> AudioStream: ...
    def set_volume_db(self, volume_db: float) -> None: ...
    def get_volume_db(self) -> float: ...
    def set_pitch_scale(self, pitch_scale: float) -> None: ...
    def get_pitch_scale(self) -> float: ...
    def play(self, from_position: float = 0.0) -> None: ...
    def seek(self, to_position: float) -> None: ...
    def stop(self) -> None: ...
    def is_playing(self) -> bool: ...
    def get_playback_position(self) -> float: ...
    def set_bus(self, bus: StringName | str) -> None: ...
    def get_bus(self) -> StringName: ...
    def set_autoplay(self, enable: bool) -> None: ...
    def is_autoplay_enabled(self) -> bool: ...
    def set_max_distance(self, pixels: float) -> None: ...
    def get_max_distance(self) -> float: ...
    def set_attenuation(self, curve: float) -> None: ...
    def get_attenuation(self) -> float: ...
    def set_area_mask(self, mask: int) -> None: ...
    def get_area_mask(self) -> int: ...
    def set_stream_paused(self, pause: bool) -> None: ...
    def get_stream_paused(self) -> bool: ...
    def set_max_polyphony(self, max_polyphony: int) -> None: ...
    def get_max_polyphony(self) -> int: ...
    def set_panning_strength(self, panning_strength: float) -> None: ...
    def get_panning_strength(self) -> float: ...
    def has_stream_playback(self) -> bool: ...
    def get_stream_playback(self) -> AudioStreamPlayback: ...

    # Signals
    def finished(self) -> None: ...

    # Properties
    stream: AudioStream
    volume_db: float
    pitch_scale: float
    playing: bool
    autoplay: bool
    stream_paused: bool
    max_distance: float
    attenuation: float
    max_polyphony: int
    panning_strength: float
    bus: StringName
    area_mask: int


class BackBufferCopy(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> BackBufferCopy: ...

    # Enums
    class BackBufferCopy.CopyMode(Enum):
        COPY_MODE_DISABLED: int
        COPY_MODE_RECT: int
        COPY_MODE_VIEWPORT: int

    # Methods
    def set_rect(self, rect: Rect2) -> None: ...
    def get_rect(self) -> Rect2: ...
    def set_copy_mode(self, copy_mode: BackBufferCopy.CopyMode) -> None: ...
    def get_copy_mode(self) -> BackBufferCopy.CopyMode: ...

    # Properties
    copy_mode: int
    rect: Rect2


class BaseButton(TypeInUse(Control)):
    @classmethod
    def new(cls) -> BaseButton: ...

    # Enums
    class BaseButton.DrawMode(Enum):
        DRAW_NORMAL: int
        DRAW_PRESSED: int
        DRAW_HOVER: int
        DRAW_DISABLED: int
        DRAW_HOVER_PRESSED: int
    class BaseButton.ActionMode(Enum):
        ACTION_MODE_BUTTON_PRESS: int
        ACTION_MODE_BUTTON_RELEASE: int

    # Methods
    def set_pressed(self, pressed: bool) -> None: ...
    def is_pressed(self) -> bool: ...
    def set_pressed_no_signal(self, pressed: bool) -> None: ...
    def is_hovered(self) -> bool: ...
    def set_toggle_mode(self, enabled: bool) -> None: ...
    def is_toggle_mode(self) -> bool: ...
    def set_shortcut_in_tooltip(self, enabled: bool) -> None: ...
    def is_shortcut_in_tooltip_enabled(self) -> bool: ...
    def set_disabled(self, disabled: bool) -> None: ...
    def is_disabled(self) -> bool: ...
    def set_action_mode(self, mode: BaseButton.ActionMode) -> None: ...
    def get_action_mode(self) -> BaseButton.ActionMode: ...
    def set_button_mask(self, mask: MouseButtonMask) -> None: ...
    def get_button_mask(self) -> MouseButtonMask: ...
    def get_draw_mode(self) -> BaseButton.DrawMode: ...
    def set_keep_pressed_outside(self, enabled: bool) -> None: ...
    def is_keep_pressed_outside(self) -> bool: ...
    def set_shortcut_feedback(self, enabled: bool) -> None: ...
    def is_shortcut_feedback(self) -> bool: ...
    def set_shortcut(self, shortcut: Shortcut) -> None: ...
    def get_shortcut(self) -> Shortcut: ...
    def set_button_group(self, button_group: ButtonGroup) -> None: ...
    def get_button_group(self) -> ButtonGroup: ...

    # Signals
    def pressed(self) -> None: ...
    def button_up(self) -> None: ...
    def button_down(self) -> None: ...
    def toggled(self, button_pressed: bool) -> None: ...

    # Properties
    disabled: bool
    toggle_mode: bool
    button_pressed: bool
    action_mode: int
    button_mask: int
    keep_pressed_outside: bool
    button_group: ButtonGroup
    shortcut: Shortcut
    shortcut_feedback: bool
    shortcut_in_tooltip: bool


class Bone2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> Bone2D: ...

    # Methods
    def set_rest(self, rest: Transform2D) -> None: ...
    def get_rest(self) -> Transform2D: ...
    def apply_rest(self) -> None: ...
    def get_skeleton_rest(self) -> Transform2D: ...
    def get_index_in_skeleton(self) -> int: ...
    def set_autocalculate_length_and_angle(self, auto_calculate: bool) -> None: ...
    def get_autocalculate_length_and_angle(self) -> bool: ...
    def set_length(self, length: float) -> None: ...
    def get_length(self) -> float: ...
    def set_bone_angle(self, angle: float) -> None: ...
    def get_bone_angle(self) -> float: ...

    # Properties
    rest: Transform2D


class Button(TypeInUse(BaseButton)):
    @classmethod
    def new(cls) -> Button: ...

    # Methods
    def set_text(self, text: GDString | str) -> None: ...
    def get_text(self) -> GDString: ...
    def set_text_overrun_behavior(self, overrun_behavior: TextServer.OverrunBehavior) -> None: ...
    def get_text_overrun_behavior(self) -> TextServer.OverrunBehavior: ...
    def set_text_direction(self, direction: Control.TextDirection) -> None: ...
    def get_text_direction(self) -> Control.TextDirection: ...
    def set_language(self, language: GDString | str) -> None: ...
    def get_language(self) -> GDString: ...
    def set_button_icon(self, texture: Texture2D) -> None: ...
    def get_button_icon(self) -> Texture2D: ...
    def set_flat(self, enabled: bool) -> None: ...
    def is_flat(self) -> bool: ...
    def set_clip_text(self, enabled: bool) -> None: ...
    def get_clip_text(self) -> bool: ...
    def set_text_alignment(self, alignment: HorizontalAlignment) -> None: ...
    def get_text_alignment(self) -> HorizontalAlignment: ...
    def set_icon_alignment(self, icon_alignment: HorizontalAlignment) -> None: ...
    def get_icon_alignment(self) -> HorizontalAlignment: ...
    def set_vertical_icon_alignment(self, vertical_icon_alignment: VerticalAlignment) -> None: ...
    def get_vertical_icon_alignment(self) -> VerticalAlignment: ...
    def set_expand_icon(self, enabled: bool) -> None: ...
    def is_expand_icon(self) -> bool: ...

    # Properties
    text: GDString
    icon: Texture2D
    flat: bool
    alignment: int
    text_overrun_behavior: int
    clip_text: bool
    icon_alignment: int
    vertical_icon_alignment: int
    expand_icon: bool
    text_direction: int
    language: GDString


class CPUParticles2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> CPUParticles2D: ...

    # Enums
    class CPUParticles2D.DrawOrder(Enum):
        DRAW_ORDER_INDEX: int
        DRAW_ORDER_LIFETIME: int
    class CPUParticles2D.Parameter(Enum):
        PARAM_INITIAL_LINEAR_VELOCITY: int
        PARAM_ANGULAR_VELOCITY: int
        PARAM_ORBIT_VELOCITY: int
        PARAM_LINEAR_ACCEL: int
        PARAM_RADIAL_ACCEL: int
        PARAM_TANGENTIAL_ACCEL: int
        PARAM_DAMPING: int
        PARAM_ANGLE: int
        PARAM_SCALE: int
        PARAM_HUE_VARIATION: int
        PARAM_ANIM_SPEED: int
        PARAM_ANIM_OFFSET: int
        PARAM_MAX: int
    class CPUParticles2D.ParticleFlags(Enum):
        PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY: int
        PARTICLE_FLAG_ROTATE_Y: int
        PARTICLE_FLAG_DISABLE_Z: int
        PARTICLE_FLAG_MAX: int
    class CPUParticles2D.EmissionShape(Enum):
        EMISSION_SHAPE_POINT: int
        EMISSION_SHAPE_SPHERE: int
        EMISSION_SHAPE_SPHERE_SURFACE: int
        EMISSION_SHAPE_RECTANGLE: int
        EMISSION_SHAPE_POINTS: int
        EMISSION_SHAPE_DIRECTED_POINTS: int
        EMISSION_SHAPE_MAX: int

    # Methods
    def set_emitting(self, emitting: bool) -> None: ...
    def set_amount(self, amount: int) -> None: ...
    def set_lifetime(self, secs: float) -> None: ...
    def set_one_shot(self, enable: bool) -> None: ...
    def set_pre_process_time(self, secs: float) -> None: ...
    def set_explosiveness_ratio(self, ratio: float) -> None: ...
    def set_randomness_ratio(self, ratio: float) -> None: ...
    def set_lifetime_randomness(self, random: float) -> None: ...
    def set_use_local_coordinates(self, enable: bool) -> None: ...
    def set_fixed_fps(self, fps: int) -> None: ...
    def set_fractional_delta(self, enable: bool) -> None: ...
    def set_speed_scale(self, scale: float) -> None: ...
    def is_emitting(self) -> bool: ...
    def get_amount(self) -> int: ...
    def get_lifetime(self) -> float: ...
    def get_one_shot(self) -> bool: ...
    def get_pre_process_time(self) -> float: ...
    def get_explosiveness_ratio(self) -> float: ...
    def get_randomness_ratio(self) -> float: ...
    def get_lifetime_randomness(self) -> float: ...
    def get_use_local_coordinates(self) -> bool: ...
    def get_fixed_fps(self) -> int: ...
    def get_fractional_delta(self) -> bool: ...
    def get_speed_scale(self) -> float: ...
    def set_draw_order(self, order: CPUParticles2D.DrawOrder) -> None: ...
    def get_draw_order(self) -> CPUParticles2D.DrawOrder: ...
    def set_texture(self, texture: Texture2D) -> None: ...
    def get_texture(self) -> Texture2D: ...
    def restart(self) -> None: ...
    def set_direction(self, direction: Vector2) -> None: ...
    def get_direction(self) -> Vector2: ...
    def set_spread(self, spread: float) -> None: ...
    def get_spread(self) -> float: ...
    def set_param_min(self, param: CPUParticles2D.Parameter, value: float) -> None: ...
    def get_param_min(self, param: CPUParticles2D.Parameter) -> float: ...
    def set_param_max(self, param: CPUParticles2D.Parameter, value: float) -> None: ...
    def get_param_max(self, param: CPUParticles2D.Parameter) -> float: ...
    def set_param_curve(self, param: CPUParticles2D.Parameter, curve: Curve) -> None: ...
    def get_param_curve(self, param: CPUParticles2D.Parameter) -> Curve: ...
    def set_color(self, color: Color) -> None: ...
    def get_color(self) -> Color: ...
    def set_color_ramp(self, ramp: Gradient) -> None: ...
    def get_color_ramp(self) -> Gradient: ...
    def set_color_initial_ramp(self, ramp: Gradient) -> None: ...
    def get_color_initial_ramp(self) -> Gradient: ...
    def set_particle_flag(self, particle_flag: CPUParticles2D.ParticleFlags, enable: bool) -> None: ...
    def get_particle_flag(self, particle_flag: CPUParticles2D.ParticleFlags) -> bool: ...
    def set_emission_shape(self, shape: CPUParticles2D.EmissionShape) -> None: ...
    def get_emission_shape(self) -> CPUParticles2D.EmissionShape: ...
    def set_emission_sphere_radius(self, radius: float) -> None: ...
    def get_emission_sphere_radius(self) -> float: ...
    def set_emission_rect_extents(self, extents: Vector2) -> None: ...
    def get_emission_rect_extents(self) -> Vector2: ...
    def set_emission_points(self, array: PackedVector2Array) -> None: ...
    def get_emission_points(self) -> PackedVector2Array: ...
    def set_emission_normals(self, array: PackedVector2Array) -> None: ...
    def get_emission_normals(self) -> PackedVector2Array: ...
    def set_emission_colors(self, array: PackedColorArray) -> None: ...
    def get_emission_colors(self) -> PackedColorArray: ...
    def get_gravity(self) -> Vector2: ...
    def set_gravity(self, accel_vec: Vector2) -> None: ...
    def get_split_scale(self) -> bool: ...
    def set_split_scale(self, split_scale: bool) -> None: ...
    def get_scale_curve_x(self) -> Curve: ...
    def set_scale_curve_x(self, scale_curve: Curve) -> None: ...
    def get_scale_curve_y(self) -> Curve: ...
    def set_scale_curve_y(self, scale_curve: Curve) -> None: ...
    def convert_from_particles(self, particles: Node) -> None: ...

    # Properties
    emitting: bool
    amount: int
    lifetime: float
    one_shot: bool
    preprocess: float
    speed_scale: float
    explosiveness: float
    randomness: float
    lifetime_randomness: float
    fixed_fps: int
    fract_delta: bool
    local_coords: bool
    draw_order: int
    texture: Texture2D
    emission_shape: int
    emission_sphere_radius: float
    emission_rect_extents: Vector2
    emission_points: PackedVector2Array
    emission_normals: PackedVector2Array
    emission_colors: PackedColorArray
    particle_flag_align_y: bool
    direction: Vector2
    spread: float
    gravity: Vector2
    initial_velocity_min: float
    initial_velocity_max: float
    angular_velocity_min: float
    angular_velocity_max: float
    angular_velocity_curve: Curve
    orbit_velocity_min: float
    orbit_velocity_max: float
    orbit_velocity_curve: Curve
    linear_accel_min: float
    linear_accel_max: float
    linear_accel_curve: Curve
    radial_accel_min: float
    radial_accel_max: float
    radial_accel_curve: Curve
    tangential_accel_min: float
    tangential_accel_max: float
    tangential_accel_curve: Curve
    damping_min: float
    damping_max: float
    damping_curve: Curve
    angle_min: float
    angle_max: float
    angle_curve: Curve
    scale_amount_min: float
    scale_amount_max: float
    scale_amount_curve: Curve
    split_scale: bool
    scale_curve_x: Curve
    scale_curve_y: Curve
    color: Color
    color_ramp: Gradient
    color_initial_ramp: Gradient
    hue_variation_min: float
    hue_variation_max: float
    hue_variation_curve: Curve
    anim_speed_min: float
    anim_speed_max: float
    anim_speed_curve: Curve
    anim_offset_min: float
    anim_offset_max: float
    anim_offset_curve: Curve


class CPUParticles3D(TypeInUse(GeometryInstance3D)):
    @classmethod
    def new(cls) -> CPUParticles3D: ...

    # Enums
    class CPUParticles3D.DrawOrder(Enum):
        DRAW_ORDER_INDEX: int
        DRAW_ORDER_LIFETIME: int
        DRAW_ORDER_VIEW_DEPTH: int
    class CPUParticles3D.Parameter(Enum):
        PARAM_INITIAL_LINEAR_VELOCITY: int
        PARAM_ANGULAR_VELOCITY: int
        PARAM_ORBIT_VELOCITY: int
        PARAM_LINEAR_ACCEL: int
        PARAM_RADIAL_ACCEL: int
        PARAM_TANGENTIAL_ACCEL: int
        PARAM_DAMPING: int
        PARAM_ANGLE: int
        PARAM_SCALE: int
        PARAM_HUE_VARIATION: int
        PARAM_ANIM_SPEED: int
        PARAM_ANIM_OFFSET: int
        PARAM_MAX: int
    class CPUParticles3D.ParticleFlags(Enum):
        PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY: int
        PARTICLE_FLAG_ROTATE_Y: int
        PARTICLE_FLAG_DISABLE_Z: int
        PARTICLE_FLAG_MAX: int
    class CPUParticles3D.EmissionShape(Enum):
        EMISSION_SHAPE_POINT: int
        EMISSION_SHAPE_SPHERE: int
        EMISSION_SHAPE_SPHERE_SURFACE: int
        EMISSION_SHAPE_BOX: int
        EMISSION_SHAPE_POINTS: int
        EMISSION_SHAPE_DIRECTED_POINTS: int
        EMISSION_SHAPE_RING: int
        EMISSION_SHAPE_MAX: int

    # Methods
    def set_emitting(self, emitting: bool) -> None: ...
    def set_amount(self, amount: int) -> None: ...
    def set_lifetime(self, secs: float) -> None: ...
    def set_one_shot(self, enable: bool) -> None: ...
    def set_pre_process_time(self, secs: float) -> None: ...
    def set_explosiveness_ratio(self, ratio: float) -> None: ...
    def set_randomness_ratio(self, ratio: float) -> None: ...
    def set_lifetime_randomness(self, random: float) -> None: ...
    def set_use_local_coordinates(self, enable: bool) -> None: ...
    def set_fixed_fps(self, fps: int) -> None: ...
    def set_fractional_delta(self, enable: bool) -> None: ...
    def set_speed_scale(self, scale: float) -> None: ...
    def is_emitting(self) -> bool: ...
    def get_amount(self) -> int: ...
    def get_lifetime(self) -> float: ...
    def get_one_shot(self) -> bool: ...
    def get_pre_process_time(self) -> float: ...
    def get_explosiveness_ratio(self) -> float: ...
    def get_randomness_ratio(self) -> float: ...
    def get_lifetime_randomness(self) -> float: ...
    def get_use_local_coordinates(self) -> bool: ...
    def get_fixed_fps(self) -> int: ...
    def get_fractional_delta(self) -> bool: ...
    def get_speed_scale(self) -> float: ...
    def set_draw_order(self, order: CPUParticles3D.DrawOrder) -> None: ...
    def get_draw_order(self) -> CPUParticles3D.DrawOrder: ...
    def set_mesh(self, mesh: Mesh) -> None: ...
    def get_mesh(self) -> Mesh: ...
    def restart(self) -> None: ...
    def set_direction(self, direction: Vector3) -> None: ...
    def get_direction(self) -> Vector3: ...
    def set_spread(self, degrees: float) -> None: ...
    def get_spread(self) -> float: ...
    def set_flatness(self, amount: float) -> None: ...
    def get_flatness(self) -> float: ...
    def set_param_min(self, param: CPUParticles3D.Parameter, value: float) -> None: ...
    def get_param_min(self, param: CPUParticles3D.Parameter) -> float: ...
    def set_param_max(self, param: CPUParticles3D.Parameter, value: float) -> None: ...
    def get_param_max(self, param: CPUParticles3D.Parameter) -> float: ...
    def set_param_curve(self, param: CPUParticles3D.Parameter, curve: Curve) -> None: ...
    def get_param_curve(self, param: CPUParticles3D.Parameter) -> Curve: ...
    def set_color(self, color: Color) -> None: ...
    def get_color(self) -> Color: ...
    def set_color_ramp(self, ramp: Gradient) -> None: ...
    def get_color_ramp(self) -> Gradient: ...
    def set_color_initial_ramp(self, ramp: Gradient) -> None: ...
    def get_color_initial_ramp(self) -> Gradient: ...
    def set_particle_flag(self, particle_flag: CPUParticles3D.ParticleFlags, enable: bool) -> None: ...
    def get_particle_flag(self, particle_flag: CPUParticles3D.ParticleFlags) -> bool: ...
    def set_emission_shape(self, shape: CPUParticles3D.EmissionShape) -> None: ...
    def get_emission_shape(self) -> CPUParticles3D.EmissionShape: ...
    def set_emission_sphere_radius(self, radius: float) -> None: ...
    def get_emission_sphere_radius(self) -> float: ...
    def set_emission_box_extents(self, extents: Vector3) -> None: ...
    def get_emission_box_extents(self) -> Vector3: ...
    def set_emission_points(self, array: PackedVector3Array) -> None: ...
    def get_emission_points(self) -> PackedVector3Array: ...
    def set_emission_normals(self, array: PackedVector3Array) -> None: ...
    def get_emission_normals(self) -> PackedVector3Array: ...
    def set_emission_colors(self, array: PackedColorArray) -> None: ...
    def get_emission_colors(self) -> PackedColorArray: ...
    def set_emission_ring_axis(self, axis: Vector3) -> None: ...
    def get_emission_ring_axis(self) -> Vector3: ...
    def set_emission_ring_height(self, height: float) -> None: ...
    def get_emission_ring_height(self) -> float: ...
    def set_emission_ring_radius(self, radius: float) -> None: ...
    def get_emission_ring_radius(self) -> float: ...
    def set_emission_ring_inner_radius(self, inner_radius: float) -> None: ...
    def get_emission_ring_inner_radius(self) -> float: ...
    def get_gravity(self) -> Vector3: ...
    def set_gravity(self, accel_vec: Vector3) -> None: ...
    def get_split_scale(self) -> bool: ...
    def set_split_scale(self, split_scale: bool) -> None: ...
    def get_scale_curve_x(self) -> Curve: ...
    def set_scale_curve_x(self, scale_curve: Curve) -> None: ...
    def get_scale_curve_y(self) -> Curve: ...
    def set_scale_curve_y(self, scale_curve: Curve) -> None: ...
    def get_scale_curve_z(self) -> Curve: ...
    def set_scale_curve_z(self, scale_curve: Curve) -> None: ...
    def convert_from_particles(self, particles: Node) -> None: ...

    # Properties
    emitting: bool
    amount: int
    lifetime: float
    one_shot: bool
    preprocess: float
    speed_scale: float
    explosiveness: float
    randomness: float
    lifetime_randomness: float
    fixed_fps: int
    fract_delta: bool
    local_coords: bool
    draw_order: int
    mesh: Mesh
    emission_shape: int
    emission_sphere_radius: float
    emission_box_extents: Vector3
    emission_points: PackedVector3Array
    emission_normals: PackedVector3Array
    emission_colors: PackedColorArray
    emission_ring_axis: Vector3
    emission_ring_height: float
    emission_ring_radius: float
    emission_ring_inner_radius: float
    particle_flag_align_y: bool
    particle_flag_rotate_y: bool
    particle_flag_disable_z: bool
    direction: Vector3
    spread: float
    flatness: float
    gravity: Vector3
    initial_velocity_min: float
    initial_velocity_max: float
    angular_velocity_min: float
    angular_velocity_max: float
    angular_velocity_curve: Curve
    orbit_velocity_min: float
    orbit_velocity_max: float
    orbit_velocity_curve: Curve
    linear_accel_min: float
    linear_accel_max: float
    linear_accel_curve: Curve
    radial_accel_min: float
    radial_accel_max: float
    radial_accel_curve: Curve
    tangential_accel_min: float
    tangential_accel_max: float
    tangential_accel_curve: Curve
    damping_min: float
    damping_max: float
    damping_curve: Curve
    angle_min: float
    angle_max: float
    angle_curve: Curve
    scale_amount_min: float
    scale_amount_max: float
    scale_amount_curve: Curve
    split_scale: bool
    scale_curve_x: Curve
    scale_curve_y: Curve
    scale_curve_z: Curve
    color: Color
    color_ramp: Gradient
    color_initial_ramp: Gradient
    hue_variation_min: float
    hue_variation_max: float
    hue_variation_curve: Curve
    anim_speed_min: float
    anim_speed_max: float
    anim_speed_curve: Curve
    anim_offset_min: float
    anim_offset_max: float
    anim_offset_curve: Curve


class CSGShape3D(TypeInUse(GeometryInstance3D)):

    # Enums
    class CSGShape3D.Operation(Enum):
        OPERATION_UNION: int
        OPERATION_INTERSECTION: int
        OPERATION_SUBTRACTION: int

    # Methods
    def is_root_shape(self) -> bool: ...
    def set_operation(self, operation: CSGShape3D.Operation) -> None: ...
    def get_operation(self) -> CSGShape3D.Operation: ...
    def set_snap(self, snap: float) -> None: ...
    def get_snap(self) -> float: ...
    def set_use_collision(self, operation: bool) -> None: ...
    def is_using_collision(self) -> bool: ...
    def set_collision_layer(self, layer: int) -> None: ...
    def get_collision_layer(self) -> int: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_collision_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_layer_value(self, layer_number: int) -> bool: ...
    def set_collision_priority(self, priority: float) -> None: ...
    def get_collision_priority(self) -> float: ...
    def set_calculate_tangents(self, enabled: bool) -> None: ...
    def is_calculating_tangents(self) -> bool: ...
    def get_meshes(self) -> GDArray: ...

    # Properties
    operation: int
    snap: float
    calculate_tangents: bool
    use_collision: bool
    collision_layer: int
    collision_mask: int
    collision_priority: float


class Camera2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> Camera2D: ...

    # Enums
    class Camera2D.AnchorMode(Enum):
        ANCHOR_MODE_FIXED_TOP_LEFT: int
        ANCHOR_MODE_DRAG_CENTER: int
    class Camera2D.Camera2DProcessCallback(Enum):
        CAMERA2D_PROCESS_PHYSICS: int
        CAMERA2D_PROCESS_IDLE: int

    # Methods
    def set_offset(self, offset: Vector2) -> None: ...
    def get_offset(self) -> Vector2: ...
    def set_anchor_mode(self, anchor_mode: Camera2D.AnchorMode) -> None: ...
    def get_anchor_mode(self) -> Camera2D.AnchorMode: ...
    def set_ignore_rotation(self, ignore: bool) -> None: ...
    def is_ignoring_rotation(self) -> bool: ...
    def set_process_callback(self, mode: Camera2D.Camera2DProcessCallback) -> None: ...
    def get_process_callback(self) -> Camera2D.Camera2DProcessCallback: ...
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def make_current(self) -> None: ...
    def is_current(self) -> bool: ...
    def set_limit(self, margin: Side, limit: int) -> None: ...
    def get_limit(self, margin: Side) -> int: ...
    def set_limit_smoothing_enabled(self, limit_smoothing_enabled: bool) -> None: ...
    def is_limit_smoothing_enabled(self) -> bool: ...
    def set_drag_vertical_enabled(self, enabled: bool) -> None: ...
    def is_drag_vertical_enabled(self) -> bool: ...
    def set_drag_horizontal_enabled(self, enabled: bool) -> None: ...
    def is_drag_horizontal_enabled(self) -> bool: ...
    def set_drag_vertical_offset(self, offset: float) -> None: ...
    def get_drag_vertical_offset(self) -> float: ...
    def set_drag_horizontal_offset(self, offset: float) -> None: ...
    def get_drag_horizontal_offset(self) -> float: ...
    def set_drag_margin(self, margin: Side, drag_margin: float) -> None: ...
    def get_drag_margin(self, margin: Side) -> float: ...
    def get_target_position(self) -> Vector2: ...
    def get_screen_center_position(self) -> Vector2: ...
    def set_zoom(self, zoom: Vector2) -> None: ...
    def get_zoom(self) -> Vector2: ...
    def set_custom_viewport(self, viewport: Node) -> None: ...
    def get_custom_viewport(self) -> Node: ...
    def set_position_smoothing_speed(self, position_smoothing_speed: float) -> None: ...
    def get_position_smoothing_speed(self) -> float: ...
    def set_position_smoothing_enabled(self, position_smoothing_speed: bool) -> None: ...
    def is_position_smoothing_enabled(self) -> bool: ...
    def set_rotation_smoothing_enabled(self, enabled: bool) -> None: ...
    def is_rotation_smoothing_enabled(self) -> bool: ...
    def set_rotation_smoothing_speed(self, speed: float) -> None: ...
    def get_rotation_smoothing_speed(self) -> float: ...
    def force_update_scroll(self) -> None: ...
    def reset_smoothing(self) -> None: ...
    def align(self) -> None: ...
    def set_screen_drawing_enabled(self, screen_drawing_enabled: bool) -> None: ...
    def is_screen_drawing_enabled(self) -> bool: ...
    def set_limit_drawing_enabled(self, limit_drawing_enabled: bool) -> None: ...
    def is_limit_drawing_enabled(self) -> bool: ...
    def set_margin_drawing_enabled(self, margin_drawing_enabled: bool) -> None: ...
    def is_margin_drawing_enabled(self) -> bool: ...

    # Properties
    offset: Vector2
    anchor_mode: int
    ignore_rotation: bool
    enabled: bool
    zoom: Vector2
    custom_viewport: Viewport
    process_callback: int
    limit_left: int
    limit_top: int
    limit_right: int
    limit_bottom: int
    limit_smoothed: bool
    position_smoothing_enabled: bool
    position_smoothing_speed: float
    rotation_smoothing_enabled: bool
    rotation_smoothing_speed: float
    drag_horizontal_enabled: bool
    drag_vertical_enabled: bool
    drag_horizontal_offset: float
    drag_vertical_offset: float
    drag_left_margin: float
    drag_top_margin: float
    drag_right_margin: float
    drag_bottom_margin: float
    editor_draw_screen: bool
    editor_draw_limits: bool
    editor_draw_drag_margin: bool


class CanvasGroup(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> CanvasGroup: ...

    # Methods
    def set_fit_margin(self, fit_margin: float) -> None: ...
    def get_fit_margin(self) -> float: ...
    def set_clear_margin(self, clear_margin: float) -> None: ...
    def get_clear_margin(self) -> float: ...
    def set_use_mipmaps(self, use_mipmaps: bool) -> None: ...
    def is_using_mipmaps(self) -> bool: ...

    # Properties
    fit_margin: float
    clear_margin: float
    use_mipmaps: bool


class CanvasModulate(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> CanvasModulate: ...

    # Methods
    def set_color(self, color: Color) -> None: ...
    def get_color(self) -> Color: ...

    # Properties
    color: Color


class CharacterBody3D(TypeInUse(PhysicsBody3D)):
    @classmethod
    def new(cls) -> CharacterBody3D: ...

    # Enums
    class CharacterBody3D.MotionMode(Enum):
        MOTION_MODE_GROUNDED: int
        MOTION_MODE_FLOATING: int
    class CharacterBody3D.PlatformOnLeave(Enum):
        PLATFORM_ON_LEAVE_ADD_VELOCITY: int
        PLATFORM_ON_LEAVE_ADD_UPWARD_VELOCITY: int
        PLATFORM_ON_LEAVE_DO_NOTHING: int

    # Methods
    def move_and_slide(self) -> bool: ...
    def apply_floor_snap(self) -> None: ...
    def set_velocity(self, velocity: Vector3) -> None: ...
    def get_velocity(self) -> Vector3: ...
    def set_safe_margin(self, margin: float) -> None: ...
    def get_safe_margin(self) -> float: ...
    def is_floor_stop_on_slope_enabled(self) -> bool: ...
    def set_floor_stop_on_slope_enabled(self, enabled: bool) -> None: ...
    def set_floor_constant_speed_enabled(self, enabled: bool) -> None: ...
    def is_floor_constant_speed_enabled(self) -> bool: ...
    def set_floor_block_on_wall_enabled(self, enabled: bool) -> None: ...
    def is_floor_block_on_wall_enabled(self) -> bool: ...
    def set_slide_on_ceiling_enabled(self, enabled: bool) -> None: ...
    def is_slide_on_ceiling_enabled(self) -> bool: ...
    def set_platform_floor_layers(self, exclude_layer: int) -> None: ...
    def get_platform_floor_layers(self) -> int: ...
    def set_platform_wall_layers(self, exclude_layer: int) -> None: ...
    def get_platform_wall_layers(self) -> int: ...
    def get_max_slides(self) -> int: ...
    def set_max_slides(self, max_slides: int) -> None: ...
    def get_floor_max_angle(self) -> float: ...
    def set_floor_max_angle(self, radians: float) -> None: ...
    def get_floor_snap_length(self) -> float: ...
    def set_floor_snap_length(self, floor_snap_length: float) -> None: ...
    def get_wall_min_slide_angle(self) -> float: ...
    def set_wall_min_slide_angle(self, radians: float) -> None: ...
    def get_up_direction(self) -> Vector3: ...
    def set_up_direction(self, up_direction: Vector3) -> None: ...
    def set_motion_mode(self, mode: CharacterBody3D.MotionMode) -> None: ...
    def get_motion_mode(self) -> CharacterBody3D.MotionMode: ...
    def set_platform_on_leave(self, on_leave_apply_velocity: CharacterBody3D.PlatformOnLeave) -> None: ...
    def get_platform_on_leave(self) -> CharacterBody3D.PlatformOnLeave: ...
    def is_on_floor(self) -> bool: ...
    def is_on_floor_only(self) -> bool: ...
    def is_on_ceiling(self) -> bool: ...
    def is_on_ceiling_only(self) -> bool: ...
    def is_on_wall(self) -> bool: ...
    def is_on_wall_only(self) -> bool: ...
    def get_floor_normal(self) -> Vector3: ...
    def get_wall_normal(self) -> Vector3: ...
    def get_last_motion(self) -> Vector3: ...
    def get_position_delta(self) -> Vector3: ...
    def get_real_velocity(self) -> Vector3: ...
    def get_floor_angle(self, up_direction: Vector3 = Vector3(0, 1, 0)) -> float: ...
    def get_platform_velocity(self) -> Vector3: ...
    def get_platform_angular_velocity(self) -> Vector3: ...
    def get_slide_collision_count(self) -> int: ...
    def get_slide_collision(self, slide_idx: int) -> KinematicCollision3D: ...
    def get_last_slide_collision(self) -> KinematicCollision3D: ...

    # Properties
    motion_mode: int
    up_direction: Vector3
    slide_on_ceiling: bool
    velocity: Vector3
    max_slides: int
    wall_min_slide_angle: float
    floor_stop_on_slope: bool
    floor_constant_speed: bool
    floor_block_on_wall: bool
    floor_max_angle: float
    floor_snap_length: float
    platform_on_leave: int
    platform_floor_layers: int
    platform_wall_layers: int
    safe_margin: float


class CheckBox(TypeInUse(Button)):
    @classmethod
    def new(cls) -> CheckBox: ...


class CheckButton(TypeInUse(Button)):
    @classmethod
    def new(cls) -> CheckButton: ...


class CodeEdit(TypeInUse(TextEdit)):
    @classmethod
    def new(cls) -> CodeEdit: ...

    # Enums
    class CodeEdit.CodeCompletionKind(Enum):
        KIND_CLASS: int
        KIND_FUNCTION: int
        KIND_SIGNAL: int
        KIND_VARIABLE: int
        KIND_MEMBER: int
        KIND_ENUM: int
        KIND_CONSTANT: int
        KIND_NODE_PATH: int
        KIND_FILE_PATH: int
        KIND_PLAIN_TEXT: int
    class CodeEdit.CodeCompletionLocation(Enum):
        LOCATION_LOCAL: int
        LOCATION_PARENT_MASK: int
        LOCATION_OTHER_USER_CODE: int
        LOCATION_OTHER: int

    # Methods
    def set_indent_size(self, size: int) -> None: ...
    def get_indent_size(self) -> int: ...
    def set_indent_using_spaces(self, use_spaces: bool) -> None: ...
    def is_indent_using_spaces(self) -> bool: ...
    def set_auto_indent_enabled(self, enable: bool) -> None: ...
    def is_auto_indent_enabled(self) -> bool: ...
    def set_auto_indent_prefixes(self, prefixes: GDArray) -> None: ...
    def get_auto_indent_prefixes(self) -> GDArray: ...
    def do_indent(self) -> None: ...
    def indent_lines(self) -> None: ...
    def unindent_lines(self) -> None: ...
    def convert_indent(self, from_line: int = -1, to_line: int = -1) -> None: ...
    def set_auto_brace_completion_enabled(self, enable: bool) -> None: ...
    def is_auto_brace_completion_enabled(self) -> bool: ...
    def set_highlight_matching_braces_enabled(self, enable: bool) -> None: ...
    def is_highlight_matching_braces_enabled(self) -> bool: ...
    def add_auto_brace_completion_pair(self, start_key: GDString | str, end_key: GDString | str) -> None: ...
    def set_auto_brace_completion_pairs(self, pairs: GDDictionary | Mapping[IntoGDAny, IntoGDAny]) -> None: ...
    def get_auto_brace_completion_pairs(self) -> GDDictionary: ...
    def has_auto_brace_completion_open_key(self, open_key: GDString | str) -> bool: ...
    def has_auto_brace_completion_close_key(self, close_key: GDString | str) -> bool: ...
    def get_auto_brace_completion_close_key(self, open_key: GDString | str) -> GDString: ...
    def set_draw_breakpoints_gutter(self, enable: bool) -> None: ...
    def is_drawing_breakpoints_gutter(self) -> bool: ...
    def set_draw_bookmarks_gutter(self, enable: bool) -> None: ...
    def is_drawing_bookmarks_gutter(self) -> bool: ...
    def set_draw_executing_lines_gutter(self, enable: bool) -> None: ...
    def is_drawing_executing_lines_gutter(self) -> bool: ...
    def set_line_as_breakpoint(self, line: int, breakpointed: bool) -> None: ...
    def is_line_breakpointed(self, line: int) -> bool: ...
    def clear_breakpointed_lines(self) -> None: ...
    def get_breakpointed_lines(self) -> PackedInt32Array: ...
    def set_line_as_bookmarked(self, line: int, bookmarked: bool) -> None: ...
    def is_line_bookmarked(self, line: int) -> bool: ...
    def clear_bookmarked_lines(self) -> None: ...
    def get_bookmarked_lines(self) -> PackedInt32Array: ...
    def set_line_as_executing(self, line: int, executing: bool) -> None: ...
    def is_line_executing(self, line: int) -> bool: ...
    def clear_executing_lines(self) -> None: ...
    def get_executing_lines(self) -> PackedInt32Array: ...
    def set_draw_line_numbers(self, enable: bool) -> None: ...
    def is_draw_line_numbers_enabled(self) -> bool: ...
    def set_line_numbers_zero_padded(self, enable: bool) -> None: ...
    def is_line_numbers_zero_padded(self) -> bool: ...
    def set_draw_fold_gutter(self, enable: bool) -> None: ...
    def is_drawing_fold_gutter(self) -> bool: ...
    def set_line_folding_enabled(self, enabled: bool) -> None: ...
    def is_line_folding_enabled(self) -> bool: ...
    def can_fold_line(self, line: int) -> bool: ...
    def fold_line(self, line: int) -> None: ...
    def unfold_line(self, line: int) -> None: ...
    def fold_all_lines(self) -> None: ...
    def unfold_all_lines(self) -> None: ...
    def toggle_foldable_line(self, line: int) -> None: ...
    def is_line_folded(self, line: int) -> bool: ...
    def get_folded_lines(self) -> GDArray: ...
    def add_string_delimiter(self, start_key: GDString | str, end_key: GDString | str, line_only: bool = False) -> None: ...
    def remove_string_delimiter(self, start_key: GDString | str) -> None: ...
    def has_string_delimiter(self, start_key: GDString | str) -> bool: ...
    def set_string_delimiters(self, string_delimiters: GDArray) -> None: ...
    def clear_string_delimiters(self) -> None: ...
    def get_string_delimiters(self) -> GDArray: ...
    def is_in_string(self, line: int, column: int = -1) -> int: ...
    def add_comment_delimiter(self, start_key: GDString | str, end_key: GDString | str, line_only: bool = False) -> None: ...
    def remove_comment_delimiter(self, start_key: GDString | str) -> None: ...
    def has_comment_delimiter(self, start_key: GDString | str) -> bool: ...
    def set_comment_delimiters(self, comment_delimiters: GDArray) -> None: ...
    def clear_comment_delimiters(self) -> None: ...
    def get_comment_delimiters(self) -> GDArray: ...
    def is_in_comment(self, line: int, column: int = -1) -> int: ...
    def get_delimiter_start_key(self, delimiter_index: int) -> GDString: ...
    def get_delimiter_end_key(self, delimiter_index: int) -> GDString: ...
    def get_delimiter_start_position(self, line: int, column: int) -> Vector2: ...
    def get_delimiter_end_position(self, line: int, column: int) -> Vector2: ...
    def set_code_hint(self, code_hint: GDString | str) -> None: ...
    def set_code_hint_draw_below(self, draw_below: bool) -> None: ...
    def get_text_for_code_completion(self) -> GDString: ...
    def request_code_completion(self, force: bool = False) -> None: ...
    def add_code_completion_option(self, type: CodeEdit.CodeCompletionKind, display_text: GDString | str, insert_text: GDString | str, text_color: Color = Color(1, 1, 1, 1), icon: Resource = None, value: GDAny = 0, location: int = 1024) -> None: ...
    def update_code_completion_options(self, force: bool) -> None: ...
    def get_code_completion_options(self) -> GDArray: ...
    def get_code_completion_option(self, index: int) -> GDDictionary: ...
    def get_code_completion_selected_index(self) -> int: ...
    def set_code_completion_selected_index(self, index: int) -> None: ...
    def confirm_code_completion(self, replace: bool = False) -> None: ...
    def cancel_code_completion(self) -> None: ...
    def set_code_completion_enabled(self, enable: bool) -> None: ...
    def is_code_completion_enabled(self) -> bool: ...
    def set_code_completion_prefixes(self, prefixes: GDArray) -> None: ...
    def get_code_completion_prefixes(self) -> GDArray: ...
    def set_line_length_guidelines(self, guideline_columns: GDArray) -> None: ...
    def get_line_length_guidelines(self) -> GDArray: ...
    def set_symbol_lookup_on_click_enabled(self, enable: bool) -> None: ...
    def is_symbol_lookup_on_click_enabled(self) -> bool: ...
    def get_text_for_symbol_lookup(self) -> GDString: ...
    def set_symbol_lookup_word_as_valid(self, valid: bool) -> None: ...

    # Signals
    def breakpoint_toggled(self, line: int) -> None: ...
    def code_completion_requested(self) -> None: ...
    def symbol_lookup(self, symbol: GDString | str, line: int, column: int) -> None: ...
    def symbol_validate(self, symbol: GDString | str) -> None: ...

    # Properties
    symbol_lookup_on_click: bool
    line_folding: bool
    line_length_guidelines: PackedInt32Array
    gutters_draw_breakpoints_gutter: bool
    gutters_draw_bookmarks: bool
    gutters_draw_executing_lines: bool
    gutters_draw_line_numbers: bool
    gutters_zero_pad_line_numbers: bool
    gutters_draw_fold_gutter: bool
    delimiter_strings: PackedStringArray
    delimiter_comments: PackedStringArray
    code_completion_enabled: bool
    code_completion_prefixes: PackedStringArray
    indent_size: int
    indent_use_spaces: bool
    indent_automatic: bool
    indent_automatic_prefixes: PackedStringArray
    auto_brace_completion_enabled: bool
    auto_brace_completion_highlight_matching: bool
    auto_brace_completion_pairs: GDDictionary


class CollisionObject2D(TypeInUse(Node2D)):

    # Enums
    class CollisionObject2D.DisableMode(Enum):
        DISABLE_MODE_REMOVE: int
        DISABLE_MODE_MAKE_STATIC: int
        DISABLE_MODE_KEEP_ACTIVE: int

    # Methods
    def get_rid(self) -> RID: ...
    def set_collision_layer(self, layer: int) -> None: ...
    def get_collision_layer(self) -> int: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_layer_value(self, layer_number: int) -> bool: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_collision_priority(self, priority: float) -> None: ...
    def get_collision_priority(self) -> float: ...
    def set_disable_mode(self, mode: CollisionObject2D.DisableMode) -> None: ...
    def get_disable_mode(self) -> CollisionObject2D.DisableMode: ...
    def set_pickable(self, enabled: bool) -> None: ...
    def is_pickable(self) -> bool: ...
    def create_shape_owner(self, owner: GDObject) -> int: ...
    def remove_shape_owner(self, owner_id: int) -> None: ...
    def get_shape_owners(self) -> PackedInt32Array: ...
    def shape_owner_set_transform(self, owner_id: int, transform: Transform2D) -> None: ...
    def shape_owner_get_transform(self, owner_id: int) -> Transform2D: ...
    def shape_owner_get_owner(self, owner_id: int) -> GDObject: ...
    def shape_owner_set_disabled(self, owner_id: int, disabled: bool) -> None: ...
    def is_shape_owner_disabled(self, owner_id: int) -> bool: ...
    def shape_owner_set_one_way_collision(self, owner_id: int, enable: bool) -> None: ...
    def is_shape_owner_one_way_collision_enabled(self, owner_id: int) -> bool: ...
    def shape_owner_set_one_way_collision_margin(self, owner_id: int, margin: float) -> None: ...
    def get_shape_owner_one_way_collision_margin(self, owner_id: int) -> float: ...
    def shape_owner_add_shape(self, owner_id: int, shape: Shape2D) -> None: ...
    def shape_owner_get_shape_count(self, owner_id: int) -> int: ...
    def shape_owner_get_shape(self, owner_id: int, shape_id: int) -> Shape2D: ...
    def shape_owner_get_shape_index(self, owner_id: int, shape_id: int) -> int: ...
    def shape_owner_remove_shape(self, owner_id: int, shape_id: int) -> None: ...
    def shape_owner_clear_shapes(self, owner_id: int) -> None: ...
    def shape_find_owner(self, shape_index: int) -> int: ...

    # Signals
    def input_event(self, viewport: Node, event: InputEvent, shape_idx: int) -> None: ...
    def mouse_entered(self) -> None: ...
    def mouse_exited(self) -> None: ...
    def mouse_shape_entered(self, shape_idx: int) -> None: ...
    def mouse_shape_exited(self, shape_idx: int) -> None: ...

    # Properties
    disable_mode: int
    collision_layer: int
    collision_mask: int
    collision_priority: float
    input_pickable: bool


class CollisionPolygon2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> CollisionPolygon2D: ...

    # Enums
    class CollisionPolygon2D.BuildMode(Enum):
        BUILD_SOLIDS: int
        BUILD_SEGMENTS: int

    # Methods
    def set_polygon(self, polygon: PackedVector2Array) -> None: ...
    def get_polygon(self) -> PackedVector2Array: ...
    def set_build_mode(self, build_mode: CollisionPolygon2D.BuildMode) -> None: ...
    def get_build_mode(self) -> CollisionPolygon2D.BuildMode: ...
    def set_disabled(self, disabled: bool) -> None: ...
    def is_disabled(self) -> bool: ...
    def set_one_way_collision(self, enabled: bool) -> None: ...
    def is_one_way_collision_enabled(self) -> bool: ...
    def set_one_way_collision_margin(self, margin: float) -> None: ...
    def get_one_way_collision_margin(self) -> float: ...

    # Properties
    build_mode: int
    polygon: PackedVector2Array
    disabled: bool
    one_way_collision: bool
    one_way_collision_margin: float


class CollisionShape2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> CollisionShape2D: ...

    # Methods
    def set_shape(self, shape: Shape2D) -> None: ...
    def get_shape(self) -> Shape2D: ...
    def set_disabled(self, disabled: bool) -> None: ...
    def is_disabled(self) -> bool: ...
    def set_one_way_collision(self, enabled: bool) -> None: ...
    def is_one_way_collision_enabled(self) -> bool: ...
    def set_one_way_collision_margin(self, margin: float) -> None: ...
    def get_one_way_collision_margin(self) -> float: ...
    def set_debug_color(self, color: Color) -> None: ...
    def get_debug_color(self) -> Color: ...

    # Properties
    shape: Shape2D
    disabled: bool
    one_way_collision: bool
    one_way_collision_margin: float
    debug_color: Color


class ColorPickerButton(TypeInUse(Button)):
    @classmethod
    def new(cls) -> ColorPickerButton: ...

    # Methods
    def set_pick_color(self, color: Color) -> None: ...
    def get_pick_color(self) -> Color: ...
    def get_picker(self) -> ColorPicker: ...
    def get_popup(self) -> PopupPanel: ...
    def set_edit_alpha(self, show: bool) -> None: ...
    def is_editing_alpha(self) -> bool: ...

    # Signals
    def color_changed(self, color: Color) -> None: ...
    def popup_closed(self) -> None: ...
    def picker_created(self) -> None: ...

    # Properties
    color: Color
    edit_alpha: bool


class ColorRect(TypeInUse(Control)):
    @classmethod
    def new(cls) -> ColorRect: ...

    # Methods
    def set_color(self, color: Color) -> None: ...
    def get_color(self) -> Color: ...

    # Properties
    color: Color


class ConeTwistJoint3D(TypeInUse(Joint3D)):
    @classmethod
    def new(cls) -> ConeTwistJoint3D: ...

    # Enums
    class ConeTwistJoint3D.Param(Enum):
        PARAM_SWING_SPAN: int
        PARAM_TWIST_SPAN: int
        PARAM_BIAS: int
        PARAM_SOFTNESS: int
        PARAM_RELAXATION: int
        PARAM_MAX: int

    # Methods
    def set_param(self, param: ConeTwistJoint3D.Param, value: float) -> None: ...
    def get_param(self, param: ConeTwistJoint3D.Param) -> float: ...

    # Properties
    swing_span: float
    twist_span: float
    bias: float
    softness: float
    relaxation: float


class Container(TypeInUse(Control)):
    @classmethod
    def new(cls) -> Container: ...

    # Methods
    def queue_sort(self) -> None: ...
    def fit_child_in_rect(self, child: Control, rect: Rect2) -> None: ...

    # Signals
    def pre_sort_children(self) -> None: ...
    def sort_children(self) -> None: ...

    # Constants
    NOTIFICATION_PRE_SORT_CHILDREN: int
    NOTIFICATION_SORT_CHILDREN: int


class DirectionalLight3D(TypeInUse(Light3D)):
    @classmethod
    def new(cls) -> DirectionalLight3D: ...

    # Enums
    class DirectionalLight3D.ShadowMode(Enum):
        SHADOW_ORTHOGONAL: int
        SHADOW_PARALLEL_2_SPLITS: int
        SHADOW_PARALLEL_4_SPLITS: int
    class DirectionalLight3D.SkyMode(Enum):
        SKY_MODE_LIGHT_AND_SKY: int
        SKY_MODE_LIGHT_ONLY: int
        SKY_MODE_SKY_ONLY: int

    # Methods
    def set_shadow_mode(self, mode: DirectionalLight3D.ShadowMode) -> None: ...
    def get_shadow_mode(self) -> DirectionalLight3D.ShadowMode: ...
    def set_blend_splits(self, enabled: bool) -> None: ...
    def is_blend_splits_enabled(self) -> bool: ...
    def set_sky_mode(self, mode: DirectionalLight3D.SkyMode) -> None: ...
    def get_sky_mode(self) -> DirectionalLight3D.SkyMode: ...

    # Properties
    directional_shadow_mode: int
    directional_shadow_split_1: float
    directional_shadow_split_2: float
    directional_shadow_split_3: float
    directional_shadow_blend_splits: bool
    directional_shadow_fade_start: float
    directional_shadow_max_distance: float
    directional_shadow_pancake_size: float
    sky_mode: int


class ENetMultiplayerPeer(TypeInUse(MultiplayerPeer)):
    def __init__(self): ...

    # Methods
    def create_server(self, port: int, max_clients: int = 32, max_channels: int = 0, in_bandwidth: int = 0, out_bandwidth: int = 0) -> Error: ...
    def create_client(self, address: GDString | str, port: int, channel_count: int = 0, in_bandwidth: int = 0, out_bandwidth: int = 0, local_port: int = 0) -> Error: ...
    def create_mesh(self, unique_id: int) -> Error: ...
    def add_mesh_peer(self, peer_id: int, host: ENetConnection) -> Error: ...
    def set_bind_ip(self, ip: GDString | str) -> None: ...
    def get_host(self) -> ENetConnection: ...
    def get_peer(self, id: int) -> ENetPacketPeer: ...

    # Properties
    host: ENetConnection


class EditorProperty(TypeInUse(Container)):

    # Methods
    def set_label(self, text: GDString | str) -> None: ...
    def get_label(self) -> GDString: ...
    def set_read_only(self, read_only: bool) -> None: ...
    def is_read_only(self) -> bool: ...
    def set_checkable(self, checkable: bool) -> None: ...
    def is_checkable(self) -> bool: ...
    def set_checked(self, checked: bool) -> None: ...
    def is_checked(self) -> bool: ...
    def set_draw_warning(self, draw_warning: bool) -> None: ...
    def is_draw_warning(self) -> bool: ...
    def set_keying(self, keying: bool) -> None: ...
    def is_keying(self) -> bool: ...
    def set_deletable(self, deletable: bool) -> None: ...
    def is_deletable(self) -> bool: ...
    def get_edited_property(self) -> StringName: ...
    def get_edited_object(self) -> GDObject: ...
    def update_property(self) -> None: ...
    def add_focusable(self, control: Control) -> None: ...
    def set_bottom_editor(self, editor: Control) -> None: ...
    def emit_changed(self, property: StringName | str, value: GDAny, field: StringName | str = "", changing: bool = False) -> None: ...

    # Signals
    def property_changed(self, property: StringName | str, value: GDAny, field: StringName | str, changing: bool) -> None: ...
    def multiple_properties_changed(self, properties: PackedStringArray, value: GDArray) -> None: ...
    def property_keyed(self, property: StringName | str) -> None: ...
    def property_deleted(self, property: StringName | str) -> None: ...
    def property_keyed_with_value(self, property: StringName | str, value: GDAny) -> None: ...
    def property_checked(self, property: StringName | str, checked: bool) -> None: ...
    def property_pinned(self, property: StringName | str, pinned: bool) -> None: ...
    def property_can_revert_changed(self, property: StringName | str, can_revert: bool) -> None: ...
    def resource_selected(self, path: GDString | str, resource: Resource) -> None: ...
    def object_id_selected(self, property: StringName | str, id: int) -> None: ...
    def selected(self, path: GDString | str, focusable_idx: int) -> None: ...

    # Properties
    label: GDString
    read_only: bool
    checkable: bool
    checked: bool
    draw_warning: bool
    keying: bool
    deletable: bool


class EditorSpinSlider(TypeInUse(Range)):

    # Methods
    def set_label(self, label: GDString | str) -> None: ...
    def get_label(self) -> GDString: ...
    def set_suffix(self, suffix: GDString | str) -> None: ...
    def get_suffix(self) -> GDString: ...
    def set_read_only(self, read_only: bool) -> None: ...
    def is_read_only(self) -> bool: ...
    def set_flat(self, flat: bool) -> None: ...
    def is_flat(self) -> bool: ...
    def set_hide_slider(self, hide_slider: bool) -> None: ...
    def is_hiding_slider(self) -> bool: ...

    # Signals
    def grabbed(self) -> None: ...
    def ungrabbed(self) -> None: ...
    def value_focus_entered(self) -> None: ...
    def value_focus_exited(self) -> None: ...

    # Properties
    label: GDString
    suffix: GDString
    read_only: bool
    flat: bool
    hide_slider: bool


class FlowContainer(TypeInUse(Container)):
    @classmethod
    def new(cls) -> FlowContainer: ...

    # Enums
    class FlowContainer.AlignmentMode(Enum):
        ALIGNMENT_BEGIN: int
        ALIGNMENT_CENTER: int
        ALIGNMENT_END: int

    # Methods
    def get_line_count(self) -> int: ...
    def set_alignment(self, alignment: FlowContainer.AlignmentMode) -> None: ...
    def get_alignment(self) -> FlowContainer.AlignmentMode: ...
    def set_vertical(self, vertical: bool) -> None: ...
    def is_vertical(self) -> bool: ...

    # Properties
    alignment: int
    vertical: bool


class GPUParticles2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> GPUParticles2D: ...

    # Enums
    class GPUParticles2D.DrawOrder(Enum):
        DRAW_ORDER_INDEX: int
        DRAW_ORDER_LIFETIME: int
        DRAW_ORDER_REVERSE_LIFETIME: int
    class GPUParticles2D.EmitFlags(Enum):
        EMIT_FLAG_POSITION: int
        EMIT_FLAG_ROTATION_SCALE: int
        EMIT_FLAG_VELOCITY: int
        EMIT_FLAG_COLOR: int
        EMIT_FLAG_CUSTOM: int

    # Methods
    def set_emitting(self, emitting: bool) -> None: ...
    def set_amount(self, amount: int) -> None: ...
    def set_lifetime(self, secs: float) -> None: ...
    def set_one_shot(self, secs: bool) -> None: ...
    def set_pre_process_time(self, secs: float) -> None: ...
    def set_explosiveness_ratio(self, ratio: float) -> None: ...
    def set_randomness_ratio(self, ratio: float) -> None: ...
    def set_visibility_rect(self, visibility_rect: Rect2) -> None: ...
    def set_use_local_coordinates(self, enable: bool) -> None: ...
    def set_fixed_fps(self, fps: int) -> None: ...
    def set_fractional_delta(self, enable: bool) -> None: ...
    def set_interpolate(self, enable: bool) -> None: ...
    def set_process_material(self, material: Material) -> None: ...
    def set_speed_scale(self, scale: float) -> None: ...
    def set_collision_base_size(self, size: float) -> None: ...
    def is_emitting(self) -> bool: ...
    def get_amount(self) -> int: ...
    def get_lifetime(self) -> float: ...
    def get_one_shot(self) -> bool: ...
    def get_pre_process_time(self) -> float: ...
    def get_explosiveness_ratio(self) -> float: ...
    def get_randomness_ratio(self) -> float: ...
    def get_visibility_rect(self) -> Rect2: ...
    def get_use_local_coordinates(self) -> bool: ...
    def get_fixed_fps(self) -> int: ...
    def get_fractional_delta(self) -> bool: ...
    def get_interpolate(self) -> bool: ...
    def get_process_material(self) -> Material: ...
    def get_speed_scale(self) -> float: ...
    def get_collision_base_size(self) -> float: ...
    def set_draw_order(self, order: GPUParticles2D.DrawOrder) -> None: ...
    def get_draw_order(self) -> GPUParticles2D.DrawOrder: ...
    def set_texture(self, texture: Texture2D) -> None: ...
    def get_texture(self) -> Texture2D: ...
    def capture_rect(self) -> Rect2: ...
    def restart(self) -> None: ...
    def set_sub_emitter(self, path: NodePath | str) -> None: ...
    def get_sub_emitter(self) -> NodePath: ...
    def emit_particle(self, xform: Transform2D, velocity: Vector2, color: Color, custom: Color, flags: int) -> None: ...
    def set_trail_enabled(self, enabled: bool) -> None: ...
    def set_trail_lifetime(self, secs: float) -> None: ...
    def is_trail_enabled(self) -> bool: ...
    def get_trail_lifetime(self) -> float: ...
    def set_trail_sections(self, sections: int) -> None: ...
    def get_trail_sections(self) -> int: ...
    def set_trail_section_subdivisions(self, subdivisions: int) -> None: ...
    def get_trail_section_subdivisions(self) -> int: ...

    # Properties
    emitting: bool
    amount: int
    sub_emitter: NodePath
    process_material: ShaderMaterial | ParticleProcessMaterial
    texture: Texture2D
    lifetime: float
    one_shot: bool
    preprocess: float
    speed_scale: float
    explosiveness: float
    randomness: float
    fixed_fps: int
    interpolate: bool
    fract_delta: bool
    collision_base_size: float
    visibility_rect: Rect2
    local_coords: bool
    draw_order: int
    trail_enabled: bool
    trail_lifetime: float
    trail_sections: int
    trail_section_subdivisions: int


class GPUParticles3D(TypeInUse(GeometryInstance3D)):
    @classmethod
    def new(cls) -> GPUParticles3D: ...

    # Enums
    class GPUParticles3D.DrawOrder(Enum):
        DRAW_ORDER_INDEX: int
        DRAW_ORDER_LIFETIME: int
        DRAW_ORDER_REVERSE_LIFETIME: int
        DRAW_ORDER_VIEW_DEPTH: int
    class GPUParticles3D.EmitFlags(Enum):
        EMIT_FLAG_POSITION: int
        EMIT_FLAG_ROTATION_SCALE: int
        EMIT_FLAG_VELOCITY: int
        EMIT_FLAG_COLOR: int
        EMIT_FLAG_CUSTOM: int
    class GPUParticles3D.TransformAlign(Enum):
        TRANSFORM_ALIGN_DISABLED: int
        TRANSFORM_ALIGN_Z_BILLBOARD: int
        TRANSFORM_ALIGN_Y_TO_VELOCITY: int
        TRANSFORM_ALIGN_Z_BILLBOARD_Y_TO_VELOCITY: int

    # Methods
    def set_emitting(self, emitting: bool) -> None: ...
    def set_amount(self, amount: int) -> None: ...
    def set_lifetime(self, secs: float) -> None: ...
    def set_one_shot(self, enable: bool) -> None: ...
    def set_pre_process_time(self, secs: float) -> None: ...
    def set_explosiveness_ratio(self, ratio: float) -> None: ...
    def set_randomness_ratio(self, ratio: float) -> None: ...
    def set_visibility_aabb(self, aabb: AABB) -> None: ...
    def set_use_local_coordinates(self, enable: bool) -> None: ...
    def set_fixed_fps(self, fps: int) -> None: ...
    def set_fractional_delta(self, enable: bool) -> None: ...
    def set_interpolate(self, enable: bool) -> None: ...
    def set_process_material(self, material: Material) -> None: ...
    def set_speed_scale(self, scale: float) -> None: ...
    def set_collision_base_size(self, size: float) -> None: ...
    def is_emitting(self) -> bool: ...
    def get_amount(self) -> int: ...
    def get_lifetime(self) -> float: ...
    def get_one_shot(self) -> bool: ...
    def get_pre_process_time(self) -> float: ...
    def get_explosiveness_ratio(self) -> float: ...
    def get_randomness_ratio(self) -> float: ...
    def get_visibility_aabb(self) -> AABB: ...
    def get_use_local_coordinates(self) -> bool: ...
    def get_fixed_fps(self) -> int: ...
    def get_fractional_delta(self) -> bool: ...
    def get_interpolate(self) -> bool: ...
    def get_process_material(self) -> Material: ...
    def get_speed_scale(self) -> float: ...
    def get_collision_base_size(self) -> float: ...
    def set_draw_order(self, order: GPUParticles3D.DrawOrder) -> None: ...
    def get_draw_order(self) -> GPUParticles3D.DrawOrder: ...
    def set_draw_passes(self, passes: int) -> None: ...
    def set_draw_pass_mesh(self, pass_: int, mesh: Mesh) -> None: ...
    def get_draw_passes(self) -> int: ...
    def get_draw_pass_mesh(self, pass_: int) -> Mesh: ...
    def set_skin(self, skin: Skin) -> None: ...
    def get_skin(self) -> Skin: ...
    def restart(self) -> None: ...
    def capture_aabb(self) -> AABB: ...
    def set_sub_emitter(self, path: NodePath | str) -> None: ...
    def get_sub_emitter(self) -> NodePath: ...
    def emit_particle(self, xform: Transform3D, velocity: Vector3, color: Color, custom: Color, flags: int) -> None: ...
    def set_trail_enabled(self, enabled: bool) -> None: ...
    def set_trail_lifetime(self, secs: float) -> None: ...
    def is_trail_enabled(self) -> bool: ...
    def get_trail_lifetime(self) -> float: ...
    def set_transform_align(self, align: GPUParticles3D.TransformAlign) -> None: ...
    def get_transform_align(self) -> GPUParticles3D.TransformAlign: ...

    # Properties
    emitting: bool
    amount: int
    sub_emitter: NodePath
    lifetime: float
    one_shot: bool
    preprocess: float
    speed_scale: float
    explosiveness: float
    randomness: float
    fixed_fps: int
    interpolate: bool
    fract_delta: bool
    collision_base_size: float
    visibility_aabb: AABB
    local_coords: bool
    draw_order: int
    transform_align: int
    trail_enabled: bool
    trail_lifetime: float
    process_material: ShaderMaterial | ParticleProcessMaterial
    draw_passes: int
    draw_pass_1: Mesh
    draw_pass_2: Mesh
    draw_pass_3: Mesh
    draw_pass_4: Mesh
    draw_skin: Skin

    # Constants
    MAX_DRAW_PASSES: int


class Generic6DOFJoint3D(TypeInUse(Joint3D)):
    @classmethod
    def new(cls) -> Generic6DOFJoint3D: ...

    # Enums
    class Generic6DOFJoint3D.Param(Enum):
        PARAM_LINEAR_LOWER_LIMIT: int
        PARAM_LINEAR_UPPER_LIMIT: int
        PARAM_LINEAR_LIMIT_SOFTNESS: int
        PARAM_LINEAR_RESTITUTION: int
        PARAM_LINEAR_DAMPING: int
        PARAM_LINEAR_MOTOR_TARGET_VELOCITY: int
        PARAM_LINEAR_MOTOR_FORCE_LIMIT: int
        PARAM_LINEAR_SPRING_STIFFNESS: int
        PARAM_LINEAR_SPRING_DAMPING: int
        PARAM_LINEAR_SPRING_EQUILIBRIUM_POINT: int
        PARAM_ANGULAR_LOWER_LIMIT: int
        PARAM_ANGULAR_UPPER_LIMIT: int
        PARAM_ANGULAR_LIMIT_SOFTNESS: int
        PARAM_ANGULAR_DAMPING: int
        PARAM_ANGULAR_RESTITUTION: int
        PARAM_ANGULAR_FORCE_LIMIT: int
        PARAM_ANGULAR_ERP: int
        PARAM_ANGULAR_MOTOR_TARGET_VELOCITY: int
        PARAM_ANGULAR_MOTOR_FORCE_LIMIT: int
        PARAM_ANGULAR_SPRING_STIFFNESS: int
        PARAM_ANGULAR_SPRING_DAMPING: int
        PARAM_ANGULAR_SPRING_EQUILIBRIUM_POINT: int
        PARAM_MAX: int
    class Generic6DOFJoint3D.Flag(Enum):
        FLAG_ENABLE_LINEAR_LIMIT: int
        FLAG_ENABLE_ANGULAR_LIMIT: int
        FLAG_ENABLE_LINEAR_SPRING: int
        FLAG_ENABLE_ANGULAR_SPRING: int
        FLAG_ENABLE_MOTOR: int
        FLAG_ENABLE_LINEAR_MOTOR: int
        FLAG_MAX: int

    # Methods
    def set_param_x(self, param: Generic6DOFJoint3D.Param, value: float) -> None: ...
    def get_param_x(self, param: Generic6DOFJoint3D.Param) -> float: ...
    def set_param_y(self, param: Generic6DOFJoint3D.Param, value: float) -> None: ...
    def get_param_y(self, param: Generic6DOFJoint3D.Param) -> float: ...
    def set_param_z(self, param: Generic6DOFJoint3D.Param, value: float) -> None: ...
    def get_param_z(self, param: Generic6DOFJoint3D.Param) -> float: ...
    def set_flag_x(self, flag: Generic6DOFJoint3D.Flag, value: bool) -> None: ...
    def get_flag_x(self, flag: Generic6DOFJoint3D.Flag) -> bool: ...
    def set_flag_y(self, flag: Generic6DOFJoint3D.Flag, value: bool) -> None: ...
    def get_flag_y(self, flag: Generic6DOFJoint3D.Flag) -> bool: ...
    def set_flag_z(self, flag: Generic6DOFJoint3D.Flag, value: bool) -> None: ...
    def get_flag_z(self, flag: Generic6DOFJoint3D.Flag) -> bool: ...


class GraphNode(TypeInUse(Container)):
    @classmethod
    def new(cls) -> GraphNode: ...

    # Enums
    class GraphNode.Overlay(Enum):
        OVERLAY_DISABLED: int
        OVERLAY_BREAKPOINT: int
        OVERLAY_POSITION: int

    # Methods
    def set_title(self, title: GDString | str) -> None: ...
    def get_title(self) -> GDString: ...
    def set_text_direction(self, direction: Control.TextDirection) -> None: ...
    def get_text_direction(self) -> Control.TextDirection: ...
    def set_language(self, language: GDString | str) -> None: ...
    def get_language(self) -> GDString: ...
    def set_slot(self, slot_index: int, enable_left_port: bool, type_left: int, color_left: Color, enable_right_port: bool, type_right: int, color_right: Color, custom_icon_left: Texture2D = None, custom_icon_right: Texture2D = None, draw_stylebox: bool = True) -> None: ...
    def clear_slot(self, slot_index: int) -> None: ...
    def clear_all_slots(self) -> None: ...
    def set_slot_enabled_left(self, slot_index: int, enable: bool) -> None: ...
    def is_slot_enabled_left(self, slot_index: int) -> bool: ...
    def set_slot_type_left(self, slot_index: int, type: int) -> None: ...
    def get_slot_type_left(self, slot_index: int) -> int: ...
    def set_slot_color_left(self, slot_index: int, color: Color) -> None: ...
    def get_slot_color_left(self, slot_index: int) -> Color: ...
    def set_slot_enabled_right(self, slot_index: int, enable: bool) -> None: ...
    def is_slot_enabled_right(self, slot_index: int) -> bool: ...
    def set_slot_type_right(self, slot_index: int, type: int) -> None: ...
    def get_slot_type_right(self, slot_index: int) -> int: ...
    def set_slot_color_right(self, slot_index: int, color: Color) -> None: ...
    def get_slot_color_right(self, slot_index: int) -> Color: ...
    def is_slot_draw_stylebox(self, slot_index: int) -> bool: ...
    def set_slot_draw_stylebox(self, slot_index: int, enable: bool) -> None: ...
    def set_position_offset(self, offset: Vector2) -> None: ...
    def get_position_offset(self) -> Vector2: ...
    def set_comment(self, comment: bool) -> None: ...
    def is_comment(self) -> bool: ...
    def set_resizable(self, resizable: bool) -> None: ...
    def is_resizable(self) -> bool: ...
    def set_draggable(self, draggable: bool) -> None: ...
    def is_draggable(self) -> bool: ...
    def set_selectable(self, selectable: bool) -> None: ...
    def is_selectable(self) -> bool: ...
    def set_selected(self, selected: bool) -> None: ...
    def is_selected(self) -> bool: ...
    def get_connection_input_count(self) -> int: ...
    def get_connection_input_height(self, port: int) -> int: ...
    def get_connection_input_position(self, port: int) -> Vector2: ...
    def get_connection_input_type(self, port: int) -> int: ...
    def get_connection_input_color(self, port: int) -> Color: ...
    def get_connection_input_slot(self, port: int) -> int: ...
    def get_connection_output_count(self) -> int: ...
    def get_connection_output_height(self, port: int) -> int: ...
    def get_connection_output_position(self, port: int) -> Vector2: ...
    def get_connection_output_type(self, port: int) -> int: ...
    def get_connection_output_color(self, port: int) -> Color: ...
    def get_connection_output_slot(self, port: int) -> int: ...
    def set_show_close_button(self, show: bool) -> None: ...
    def is_close_button_visible(self) -> bool: ...
    def set_overlay(self, overlay: GraphNode.Overlay) -> None: ...
    def get_overlay(self) -> GraphNode.Overlay: ...

    # Signals
    def position_offset_changed(self) -> None: ...
    def node_selected(self) -> None: ...
    def node_deselected(self) -> None: ...
    def slot_updated(self, idx: int) -> None: ...
    def dragged(self, from_: Vector2, to: Vector2) -> None: ...
    def raise_request(self) -> None: ...
    def close_request(self) -> None: ...
    def resize_request(self, new_minsize: Vector2) -> None: ...

    # Properties
    title: GDString
    position_offset: Vector2
    show_close: bool
    resizable: bool
    draggable: bool
    selectable: bool
    selected: bool
    comment: bool
    overlay: int
    text_direction: int
    language: GDString


class GridContainer(TypeInUse(Container)):
    @classmethod
    def new(cls) -> GridContainer: ...

    # Methods
    def set_columns(self, columns: int) -> None: ...
    def get_columns(self) -> int: ...

    # Properties
    columns: int


class HFlowContainer(TypeInUse(FlowContainer)):
    @classmethod
    def new(cls) -> HFlowContainer: ...


class HScrollBar(TypeInUse(ScrollBar)):
    @classmethod
    def new(cls) -> HScrollBar: ...


class HSeparator(TypeInUse(Separator)):
    @classmethod
    def new(cls) -> HSeparator: ...


class HSlider(TypeInUse(Slider)):
    @classmethod
    def new(cls) -> HSlider: ...


class HingeJoint3D(TypeInUse(Joint3D)):
    @classmethod
    def new(cls) -> HingeJoint3D: ...

    # Enums
    class HingeJoint3D.Param(Enum):
        PARAM_BIAS: int
        PARAM_LIMIT_UPPER: int
        PARAM_LIMIT_LOWER: int
        PARAM_LIMIT_BIAS: int
        PARAM_LIMIT_SOFTNESS: int
        PARAM_LIMIT_RELAXATION: int
        PARAM_MOTOR_TARGET_VELOCITY: int
        PARAM_MOTOR_MAX_IMPULSE: int
        PARAM_MAX: int
    class HingeJoint3D.Flag(Enum):
        FLAG_USE_LIMIT: int
        FLAG_ENABLE_MOTOR: int
        FLAG_MAX: int

    # Methods
    def set_param(self, param: HingeJoint3D.Param, value: float) -> None: ...
    def get_param(self, param: HingeJoint3D.Param) -> float: ...
    def set_flag(self, flag: HingeJoint3D.Flag, enabled: bool) -> None: ...
    def get_flag(self, flag: HingeJoint3D.Flag) -> bool: ...


class Joint2D(TypeInUse(Node2D)):

    # Methods
    def set_node_a(self, node: NodePath | str) -> None: ...
    def get_node_a(self) -> NodePath: ...
    def set_node_b(self, node: NodePath | str) -> None: ...
    def get_node_b(self) -> NodePath: ...
    def set_bias(self, bias: float) -> None: ...
    def get_bias(self) -> float: ...
    def set_exclude_nodes_from_collision(self, enable: bool) -> None: ...
    def get_exclude_nodes_from_collision(self) -> bool: ...

    # Properties
    node_a: NodePath
    node_b: NodePath
    bias: float
    disable_collision: bool


class Light2D(TypeInUse(Node2D)):

    # Enums
    class Light2D.ShadowFilter(Enum):
        SHADOW_FILTER_NONE: int
        SHADOW_FILTER_PCF5: int
        SHADOW_FILTER_PCF13: int
    class Light2D.BlendMode(Enum):
        BLEND_MODE_ADD: int
        BLEND_MODE_SUB: int
        BLEND_MODE_MIX: int

    # Methods
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_editor_only(self, editor_only: bool) -> None: ...
    def is_editor_only(self) -> bool: ...
    def set_color(self, color: Color) -> None: ...
    def get_color(self) -> Color: ...
    def set_energy(self, energy: float) -> None: ...
    def get_energy(self) -> float: ...
    def set_z_range_min(self, z: int) -> None: ...
    def get_z_range_min(self) -> int: ...
    def set_z_range_max(self, z: int) -> None: ...
    def get_z_range_max(self) -> int: ...
    def set_layer_range_min(self, layer: int) -> None: ...
    def get_layer_range_min(self) -> int: ...
    def set_layer_range_max(self, layer: int) -> None: ...
    def get_layer_range_max(self) -> int: ...
    def set_item_cull_mask(self, item_cull_mask: int) -> None: ...
    def get_item_cull_mask(self) -> int: ...
    def set_item_shadow_cull_mask(self, item_shadow_cull_mask: int) -> None: ...
    def get_item_shadow_cull_mask(self) -> int: ...
    def set_shadow_enabled(self, enabled: bool) -> None: ...
    def is_shadow_enabled(self) -> bool: ...
    def set_shadow_smooth(self, smooth: float) -> None: ...
    def get_shadow_smooth(self) -> float: ...
    def set_shadow_filter(self, filter: Light2D.ShadowFilter) -> None: ...
    def get_shadow_filter(self) -> Light2D.ShadowFilter: ...
    def set_shadow_color(self, shadow_color: Color) -> None: ...
    def get_shadow_color(self) -> Color: ...
    def set_blend_mode(self, mode: Light2D.BlendMode) -> None: ...
    def get_blend_mode(self) -> Light2D.BlendMode: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...

    # Properties
    enabled: bool
    editor_only: bool
    color: Color
    energy: float
    blend_mode: int
    range_z_min: int
    range_z_max: int
    range_layer_min: int
    range_layer_max: int
    range_item_cull_mask: int
    shadow_enabled: bool
    shadow_color: Color
    shadow_filter: int
    shadow_filter_smooth: float
    shadow_item_cull_mask: int


class LightOccluder2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> LightOccluder2D: ...

    # Methods
    def set_occluder_polygon(self, polygon: OccluderPolygon2D) -> None: ...
    def get_occluder_polygon(self) -> OccluderPolygon2D: ...
    def set_occluder_light_mask(self, mask: int) -> None: ...
    def get_occluder_light_mask(self) -> int: ...
    def set_as_sdf_collision(self, enable: bool) -> None: ...
    def is_set_as_sdf_collision(self) -> bool: ...

    # Properties
    occluder: OccluderPolygon2D
    sdf_collision: bool
    occluder_light_mask: int


class Line2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> Line2D: ...

    # Enums
    class Line2D.LineJointMode(Enum):
        LINE_JOINT_SHARP: int
        LINE_JOINT_BEVEL: int
        LINE_JOINT_ROUND: int
    class Line2D.LineCapMode(Enum):
        LINE_CAP_NONE: int
        LINE_CAP_BOX: int
        LINE_CAP_ROUND: int
    class Line2D.LineTextureMode(Enum):
        LINE_TEXTURE_NONE: int
        LINE_TEXTURE_TILE: int
        LINE_TEXTURE_STRETCH: int

    # Methods
    def set_points(self, points: PackedVector2Array) -> None: ...
    def get_points(self) -> PackedVector2Array: ...
    def set_point_position(self, index: int, position: Vector2) -> None: ...
    def get_point_position(self, index: int) -> Vector2: ...
    def get_point_count(self) -> int: ...
    def add_point(self, position: Vector2, index: int = -1) -> None: ...
    def remove_point(self, index: int) -> None: ...
    def clear_points(self) -> None: ...
    def set_width(self, width: float) -> None: ...
    def get_width(self) -> float: ...
    def set_curve(self, curve: Curve) -> None: ...
    def get_curve(self) -> Curve: ...
    def set_default_color(self, color: Color) -> None: ...
    def get_default_color(self) -> Color: ...
    def set_gradient(self, color: Gradient) -> None: ...
    def get_gradient(self) -> Gradient: ...
    def set_texture(self, texture: Texture2D) -> None: ...
    def get_texture(self) -> Texture2D: ...
    def set_texture_mode(self, mode: Line2D.LineTextureMode) -> None: ...
    def get_texture_mode(self) -> Line2D.LineTextureMode: ...
    def set_joint_mode(self, mode: Line2D.LineJointMode) -> None: ...
    def get_joint_mode(self) -> Line2D.LineJointMode: ...
    def set_begin_cap_mode(self, mode: Line2D.LineCapMode) -> None: ...
    def get_begin_cap_mode(self) -> Line2D.LineCapMode: ...
    def set_end_cap_mode(self, mode: Line2D.LineCapMode) -> None: ...
    def get_end_cap_mode(self) -> Line2D.LineCapMode: ...
    def set_sharp_limit(self, limit: float) -> None: ...
    def get_sharp_limit(self) -> float: ...
    def set_round_precision(self, precision: int) -> None: ...
    def get_round_precision(self) -> int: ...
    def set_antialiased(self, antialiased: bool) -> None: ...
    def get_antialiased(self) -> bool: ...

    # Properties
    points: PackedVector2Array
    width: float
    width_curve: Curve
    default_color: Color
    gradient: Gradient
    texture: Texture2D
    texture_mode: int
    joint_mode: int
    begin_cap_mode: int
    end_cap_mode: int
    sharp_limit: float
    round_precision: int
    antialiased: bool


class LinkButton(TypeInUse(BaseButton)):
    @classmethod
    def new(cls) -> LinkButton: ...

    # Enums
    class LinkButton.UnderlineMode(Enum):
        UNDERLINE_MODE_ALWAYS: int
        UNDERLINE_MODE_ON_HOVER: int
        UNDERLINE_MODE_NEVER: int

    # Methods
    def set_text(self, text: GDString | str) -> None: ...
    def get_text(self) -> GDString: ...
    def set_text_direction(self, direction: Control.TextDirection) -> None: ...
    def get_text_direction(self) -> Control.TextDirection: ...
    def set_language(self, language: GDString | str) -> None: ...
    def get_language(self) -> GDString: ...
    def set_uri(self, uri: GDString | str) -> None: ...
    def get_uri(self) -> GDString: ...
    def set_underline_mode(self, underline_mode: LinkButton.UnderlineMode) -> None: ...
    def get_underline_mode(self) -> LinkButton.UnderlineMode: ...
    def set_structured_text_bidi_override(self, parser: TextServer.StructuredTextParser) -> None: ...
    def get_structured_text_bidi_override(self) -> TextServer.StructuredTextParser: ...
    def set_structured_text_bidi_override_options(self, args: GDArray) -> None: ...
    def get_structured_text_bidi_override_options(self) -> GDArray: ...

    # Properties
    text: GDString
    underline: int
    uri: GDString
    text_direction: int
    language: GDString
    structured_text_bidi_override: int
    structured_text_bidi_override_options: GDArray


class MarginContainer(TypeInUse(Container)):
    @classmethod
    def new(cls) -> MarginContainer: ...


class Marker2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> Marker2D: ...

    # Methods
    def set_gizmo_extents(self, extents: float) -> None: ...
    def get_gizmo_extents(self) -> float: ...

    # Properties
    gizmo_extents: float


class MenuButton(TypeInUse(Button)):
    @classmethod
    def new(cls) -> MenuButton: ...

    # Methods
    def get_popup(self) -> PopupMenu: ...
    def show_popup(self) -> None: ...
    def set_switch_on_hover(self, enable: bool) -> None: ...
    def is_switch_on_hover(self) -> bool: ...
    def set_disable_shortcuts(self, disabled: bool) -> None: ...
    def set_item_count(self, count: int) -> None: ...
    def get_item_count(self) -> int: ...

    # Signals
    def about_to_popup(self) -> None: ...

    # Properties
    switch_on_hover: bool
    item_count: int


class MeshInstance2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> MeshInstance2D: ...

    # Methods
    def set_mesh(self, mesh: Mesh) -> None: ...
    def get_mesh(self) -> Mesh: ...
    def set_texture(self, texture: Texture2D) -> None: ...
    def get_texture(self) -> Texture2D: ...

    # Signals
    def texture_changed(self) -> None: ...

    # Properties
    mesh: Mesh
    texture: Texture2D


class MultiMeshInstance2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> MultiMeshInstance2D: ...

    # Methods
    def set_multimesh(self, multimesh: MultiMesh) -> None: ...
    def get_multimesh(self) -> MultiMesh: ...
    def set_texture(self, texture: Texture2D) -> None: ...
    def get_texture(self) -> Texture2D: ...

    # Signals
    def texture_changed(self) -> None: ...

    # Properties
    multimesh: MultiMesh
    texture: Texture2D


class NavigationLink2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> NavigationLink2D: ...

    # Methods
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_bidirectional(self, bidirectional: bool) -> None: ...
    def is_bidirectional(self) -> bool: ...
    def set_navigation_layers(self, navigation_layers: int) -> None: ...
    def get_navigation_layers(self) -> int: ...
    def set_navigation_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_navigation_layer_value(self, layer_number: int) -> bool: ...
    def set_start_position(self, position: Vector2) -> None: ...
    def get_start_position(self) -> Vector2: ...
    def set_end_position(self, position: Vector2) -> None: ...
    def get_end_position(self) -> Vector2: ...
    def set_global_start_position(self, position: Vector2) -> None: ...
    def get_global_start_position(self) -> Vector2: ...
    def set_global_end_position(self, position: Vector2) -> None: ...
    def get_global_end_position(self) -> Vector2: ...
    def set_enter_cost(self, enter_cost: float) -> None: ...
    def get_enter_cost(self) -> float: ...
    def set_travel_cost(self, travel_cost: float) -> None: ...
    def get_travel_cost(self) -> float: ...

    # Properties
    enabled: bool
    bidirectional: bool
    navigation_layers: int
    start_position: Vector2
    end_position: Vector2
    enter_cost: float
    travel_cost: float


class NavigationObstacle2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> NavigationObstacle2D: ...

    # Methods
    def get_rid(self) -> RID: ...
    def set_avoidance_enabled(self, enabled: bool) -> None: ...
    def get_avoidance_enabled(self) -> bool: ...
    def set_navigation_map(self, navigation_map: RID) -> None: ...
    def get_navigation_map(self) -> RID: ...
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_velocity(self, velocity: Vector2) -> None: ...
    def get_velocity(self) -> Vector2: ...
    def set_vertices(self, vertices: PackedVector2Array) -> None: ...
    def get_vertices(self) -> PackedVector2Array: ...
    def set_avoidance_layers(self, layers: int) -> None: ...
    def get_avoidance_layers(self) -> int: ...
    def set_avoidance_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_avoidance_layer_value(self, layer_number: int) -> bool: ...

    # Properties
    avoidance_enabled: bool
    velocity: Vector2
    radius: float
    vertices: PackedVector2Array
    avoidance_layers: int


class NavigationRegion2D(TypeInUse(Node2D)):
    @classmethod
    def new(cls) -> NavigationRegion2D: ...

    # Methods
    def set_navigation_polygon(self, navigation_polygon: NavigationPolygon) -> None: ...
    def get_navigation_polygon(self) -> NavigationPolygon: ...
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_use_edge_connections(self, enabled: bool) -> None: ...
    def get_use_edge_connections(self) -> bool: ...
    def set_navigation_layers(self, navigation_layers: int) -> None: ...
    def get_navigation_layers(self) -> int: ...
    def set_navigation_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_navigation_layer_value(self, layer_number: int) -> bool: ...
    def set_constrain_avoidance(self, enabled: bool) -> None: ...
    def get_constrain_avoidance(self) -> bool: ...
    def set_avoidance_layers(self, layers: int) -> None: ...
    def get_avoidance_layers(self) -> int: ...
    def set_avoidance_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_avoidance_layer_value(self, layer_number: int) -> bool: ...
    def get_region_rid(self) -> RID: ...
    def set_enter_cost(self, enter_cost: float) -> None: ...
    def get_enter_cost(self) -> float: ...
    def set_travel_cost(self, travel_cost: float) -> None: ...
    def get_travel_cost(self) -> float: ...

    # Properties
    navigation_polygon: NavigationPolygon
    enabled: bool
    use_edge_connections: bool
    navigation_layers: int
    enter_cost: float
    travel_cost: float
    constrain_avoidance: bool
    avoidance_layers: int


class OptionButton(TypeInUse(Button)):
    @classmethod
    def new(cls) -> OptionButton: ...

    # Methods
    def add_item(self, label: GDString | str, id: int = -1) -> None: ...
    def add_icon_item(self, texture: Texture2D, label: GDString | str, id: int = -1) -> None: ...
    def set_item_text(self, idx: int, text: GDString | str) -> None: ...
    def set_item_icon(self, idx: int, texture: Texture2D) -> None: ...
    def set_item_disabled(self, idx: int, disabled: bool) -> None: ...
    def set_item_id(self, idx: int, id: int) -> None: ...
    def set_item_metadata(self, idx: int, metadata: GDAny) -> None: ...
    def set_item_tooltip(self, idx: int, tooltip: GDString | str) -> None: ...
    def get_item_text(self, idx: int) -> GDString: ...
    def get_item_icon(self, idx: int) -> Texture2D: ...
    def get_item_id(self, idx: int) -> int: ...
    def get_item_index(self, id: int) -> int: ...
    def get_item_metadata(self, idx: int) -> GDAny: ...
    def get_item_tooltip(self, idx: int) -> GDString: ...
    def is_item_disabled(self, idx: int) -> bool: ...
    def is_item_separator(self, idx: int) -> bool: ...
    def add_separator(self, text: GDString | str = "") -> None: ...
    def clear(self) -> None: ...
    def select(self, idx: int) -> None: ...
    def get_selected(self) -> int: ...
    def get_selected_id(self) -> int: ...
    def get_selected_metadata(self) -> GDAny: ...
    def remove_item(self, idx: int) -> None: ...
    def get_popup(self) -> PopupMenu: ...
    def show_popup(self) -> None: ...
    def set_item_count(self, count: int) -> None: ...
    def get_item_count(self) -> int: ...
    def has_selectable_items(self) -> bool: ...
    def get_selectable_item(self, from_last: bool = False) -> int: ...
    def set_fit_to_longest_item(self, fit: bool) -> None: ...
    def is_fit_to_longest_item(self) -> bool: ...
    def set_allow_reselect(self, allow: bool) -> None: ...
    def get_allow_reselect(self) -> bool: ...

    # Signals
    def item_selected(self, index: int) -> None: ...
    def item_focused(self, index: int) -> None: ...

    # Properties
    item_count: int
    selected: int
    fit_to_longest_item: bool
    allow_reselect: bool


class PanelContainer(TypeInUse(Container)):
    @classmethod
    def new(cls) -> PanelContainer: ...


class PhysicalBone3D(TypeInUse(PhysicsBody3D)):
    @classmethod
    def new(cls) -> PhysicalBone3D: ...

    # Enums
    class PhysicalBone3D.DampMode(Enum):
        DAMP_MODE_COMBINE: int
        DAMP_MODE_REPLACE: int
    class PhysicalBone3D.JointType(Enum):
        JOINT_TYPE_NONE: int
        JOINT_TYPE_PIN: int
        JOINT_TYPE_CONE: int
        JOINT_TYPE_HINGE: int
        JOINT_TYPE_SLIDER: int
        JOINT_TYPE_6DOF: int

    # Methods
    def apply_central_impulse(self, impulse: Vector3) -> None: ...
    def apply_impulse(self, impulse: Vector3, position: Vector3 = Vector3(0, 0, 0)) -> None: ...
    def set_joint_type(self, joint_type: PhysicalBone3D.JointType) -> None: ...
    def get_joint_type(self) -> PhysicalBone3D.JointType: ...
    def set_joint_offset(self, offset: Transform3D) -> None: ...
    def get_joint_offset(self) -> Transform3D: ...
    def set_joint_rotation(self, euler: Vector3) -> None: ...
    def get_joint_rotation(self) -> Vector3: ...
    def set_body_offset(self, offset: Transform3D) -> None: ...
    def get_body_offset(self) -> Transform3D: ...
    def get_simulate_physics(self) -> bool: ...
    def is_simulating_physics(self) -> bool: ...
    def get_bone_id(self) -> int: ...
    def set_mass(self, mass: float) -> None: ...
    def get_mass(self) -> float: ...
    def set_friction(self, friction: float) -> None: ...
    def get_friction(self) -> float: ...
    def set_bounce(self, bounce: float) -> None: ...
    def get_bounce(self) -> float: ...
    def set_gravity_scale(self, gravity_scale: float) -> None: ...
    def get_gravity_scale(self) -> float: ...
    def set_linear_damp_mode(self, linear_damp_mode: PhysicalBone3D.DampMode) -> None: ...
    def get_linear_damp_mode(self) -> PhysicalBone3D.DampMode: ...
    def set_angular_damp_mode(self, angular_damp_mode: PhysicalBone3D.DampMode) -> None: ...
    def get_angular_damp_mode(self) -> PhysicalBone3D.DampMode: ...
    def set_linear_damp(self, linear_damp: float) -> None: ...
    def get_linear_damp(self) -> float: ...
    def set_angular_damp(self, angular_damp: float) -> None: ...
    def get_angular_damp(self) -> float: ...
    def set_linear_velocity(self, linear_velocity: Vector3) -> None: ...
    def get_linear_velocity(self) -> Vector3: ...
    def set_angular_velocity(self, angular_velocity: Vector3) -> None: ...
    def get_angular_velocity(self) -> Vector3: ...
    def set_use_custom_integrator(self, enable: bool) -> None: ...
    def is_using_custom_integrator(self) -> bool: ...
    def set_can_sleep(self, able_to_sleep: bool) -> None: ...
    def is_able_to_sleep(self) -> bool: ...

    # Properties
    joint_type: int
    joint_offset: Transform3D
    joint_rotation: Vector3
    body_offset: Transform3D
    mass: float
    friction: float
    bounce: float
    gravity_scale: float
    custom_integrator: bool
    linear_damp_mode: int
    linear_damp: float
    angular_damp_mode: int
    angular_damp: float
    linear_velocity: Vector3
    angular_velocity: Vector3
    can_sleep: bool


class PhysicsBody2D(TypeInUse(CollisionObject2D)):

    # Methods
    def move_and_collide(self, motion: Vector2, test_only: bool = False, safe_margin: float = 0.08, recovery_as_collision: bool = False) -> KinematicCollision2D: ...
    def test_move(self, from_: Transform2D, motion: Vector2, collision: KinematicCollision2D = None, safe_margin: float = 0.08, recovery_as_collision: bool = False) -> bool: ...
    def get_collision_exceptions(self) -> GDArray: ...
    def add_collision_exception_with(self, body: Node) -> None: ...
    def remove_collision_exception_with(self, body: Node) -> None: ...


class PinJoint2D(TypeInUse(Joint2D)):
    @classmethod
    def new(cls) -> PinJoint2D: ...

    # Methods
    def set_softness(self, softness: float) -> None: ...
    def get_softness(self) -> float: ...

    # Properties
    softness: float


class PointLight2D(TypeInUse(Light2D)):
    @classmethod
    def new(cls) -> PointLight2D: ...

    # Methods
    def set_texture(self, texture: Texture2D) -> None: ...
    def get_texture(self) -> Texture2D: ...
    def set_texture_offset(self, texture_offset: Vector2) -> None: ...
    def get_texture_offset(self) -> Vector2: ...
    def set_texture_scale(self, texture_scale: float) -> None: ...
    def get_texture_scale(self) -> float: ...

    # Properties
    texture: Texture2D
    offset: Vector2
    texture_scale: float
    height: float


class ProgressBar(TypeInUse(Range)):
    @classmethod
    def new(cls) -> ProgressBar: ...

    # Enums
    class ProgressBar.FillMode(Enum):
        FILL_BEGIN_TO_END: int
        FILL_END_TO_BEGIN: int
        FILL_TOP_TO_BOTTOM: int
        FILL_BOTTOM_TO_TOP: int

    # Methods
    def set_fill_mode(self, mode: int) -> None: ...
    def get_fill_mode(self) -> int: ...
    def set_show_percentage(self, visible: bool) -> None: ...
    def is_percentage_shown(self) -> bool: ...

    # Properties
    fill_mode: int
    show_percentage: bool


class RigidBody2D(TypeInUse(PhysicsBody2D)):
    @classmethod
    def new(cls) -> RigidBody2D: ...

    # Enums
    class RigidBody2D.FreezeMode(Enum):
        FREEZE_MODE_STATIC: int
        FREEZE_MODE_KINEMATIC: int
    class RigidBody2D.CenterOfMassMode(Enum):
        CENTER_OF_MASS_MODE_AUTO: int
        CENTER_OF_MASS_MODE_CUSTOM: int
    class RigidBody2D.DampMode(Enum):
        DAMP_MODE_COMBINE: int
        DAMP_MODE_REPLACE: int
    class RigidBody2D.CCDMode(Enum):
        CCD_MODE_DISABLED: int
        CCD_MODE_CAST_RAY: int
        CCD_MODE_CAST_SHAPE: int

    # Methods
    def set_mass(self, mass: float) -> None: ...
    def get_mass(self) -> float: ...
    def get_inertia(self) -> float: ...
    def set_inertia(self, inertia: float) -> None: ...
    def set_center_of_mass_mode(self, mode: RigidBody2D.CenterOfMassMode) -> None: ...
    def get_center_of_mass_mode(self) -> RigidBody2D.CenterOfMassMode: ...
    def set_center_of_mass(self, center_of_mass: Vector2) -> None: ...
    def get_center_of_mass(self) -> Vector2: ...
    def set_physics_material_override(self, physics_material_override: PhysicsMaterial) -> None: ...
    def get_physics_material_override(self) -> PhysicsMaterial: ...
    def set_gravity_scale(self, gravity_scale: float) -> None: ...
    def get_gravity_scale(self) -> float: ...
    def set_linear_damp_mode(self, linear_damp_mode: RigidBody2D.DampMode) -> None: ...
    def get_linear_damp_mode(self) -> RigidBody2D.DampMode: ...
    def set_angular_damp_mode(self, angular_damp_mode: RigidBody2D.DampMode) -> None: ...
    def get_angular_damp_mode(self) -> RigidBody2D.DampMode: ...
    def set_linear_damp(self, linear_damp: float) -> None: ...
    def get_linear_damp(self) -> float: ...
    def set_angular_damp(self, angular_damp: float) -> None: ...
    def get_angular_damp(self) -> float: ...
    def set_linear_velocity(self, linear_velocity: Vector2) -> None: ...
    def get_linear_velocity(self) -> Vector2: ...
    def set_angular_velocity(self, angular_velocity: float) -> None: ...
    def get_angular_velocity(self) -> float: ...
    def set_max_contacts_reported(self, amount: int) -> None: ...
    def get_max_contacts_reported(self) -> int: ...
    def get_contact_count(self) -> int: ...
    def set_use_custom_integrator(self, enable: bool) -> None: ...
    def is_using_custom_integrator(self) -> bool: ...
    def set_contact_monitor(self, enabled: bool) -> None: ...
    def is_contact_monitor_enabled(self) -> bool: ...
    def set_continuous_collision_detection_mode(self, mode: RigidBody2D.CCDMode) -> None: ...
    def get_continuous_collision_detection_mode(self) -> RigidBody2D.CCDMode: ...
    def set_axis_velocity(self, axis_velocity: Vector2) -> None: ...
    def apply_central_impulse(self, impulse: Vector2 = Vector2(0, 0)) -> None: ...
    def apply_impulse(self, impulse: Vector2, position: Vector2 = Vector2(0, 0)) -> None: ...
    def apply_torque_impulse(self, torque: float) -> None: ...
    def apply_central_force(self, force: Vector2) -> None: ...
    def apply_force(self, force: Vector2, position: Vector2 = Vector2(0, 0)) -> None: ...
    def apply_torque(self, torque: float) -> None: ...
    def add_constant_central_force(self, force: Vector2) -> None: ...
    def add_constant_force(self, force: Vector2, position: Vector2 = Vector2(0, 0)) -> None: ...
    def add_constant_torque(self, torque: float) -> None: ...
    def set_constant_force(self, force: Vector2) -> None: ...
    def get_constant_force(self) -> Vector2: ...
    def set_constant_torque(self, torque: float) -> None: ...
    def get_constant_torque(self) -> float: ...
    def set_sleeping(self, sleeping: bool) -> None: ...
    def is_sleeping(self) -> bool: ...
    def set_can_sleep(self, able_to_sleep: bool) -> None: ...
    def is_able_to_sleep(self) -> bool: ...
    def set_lock_rotation_enabled(self, lock_rotation: bool) -> None: ...
    def is_lock_rotation_enabled(self) -> bool: ...
    def set_freeze_enabled(self, freeze_mode: bool) -> None: ...
    def is_freeze_enabled(self) -> bool: ...
    def set_freeze_mode(self, freeze_mode: RigidBody2D.FreezeMode) -> None: ...
    def get_freeze_mode(self) -> RigidBody2D.FreezeMode: ...
    def get_colliding_bodies(self) -> GDArray: ...

    # Signals
    def body_shape_entered(self, body_rid: RID, body: Node, body_shape_index: int, local_shape_index: int) -> None: ...
    def body_shape_exited(self, body_rid: RID, body: Node, body_shape_index: int, local_shape_index: int) -> None: ...
    def body_entered(self, body: Node) -> None: ...
    def body_exited(self, body: Node) -> None: ...
    def sleeping_state_changed(self) -> None: ...

    # Properties
    mass: float
    inertia: float
    center_of_mass_mode: int
    center_of_mass: Vector2
    physics_material_override: PhysicsMaterial
    gravity_scale: float
    custom_integrator: bool
    continuous_cd: int
    max_contacts_reported: int
    contact_monitor: bool
    sleeping: bool
    can_sleep: bool
    lock_rotation: bool
    freeze: bool
    freeze_mode: int
    linear_velocity: Vector2
    linear_damp_mode: int
    linear_damp: float
    angular_velocity: float
    angular_damp_mode: int
    angular_damp: float
    constant_force: Vector2
    constant_torque: float


class ScriptEditor(TypeInUse(PanelContainer)):

    # Methods
    def get_current_editor(self) -> ScriptEditorBase: ...
    def get_open_script_editors(self) -> GDArray: ...
    def register_syntax_highlighter(self, syntax_highlighter: EditorSyntaxHighlighter) -> None: ...
    def unregister_syntax_highlighter(self, syntax_highlighter: EditorSyntaxHighlighter) -> None: ...
    def goto_line(self, line_number: int) -> None: ...
    def get_current_script(self) -> Script: ...
    def get_open_scripts(self) -> GDArray: ...
    def open_script_create_dialog(self, base_name: GDString | str, base_path: GDString | str) -> None: ...

    # Signals
    def editor_script_changed(self, script: Script) -> None: ...
    def script_close(self, script: Script) -> None: ...


class ScrollContainer(TypeInUse(Container)):
    @classmethod
    def new(cls) -> ScrollContainer: ...

    # Enums
    class ScrollContainer.ScrollMode(Enum):
        SCROLL_MODE_DISABLED: int
        SCROLL_MODE_AUTO: int
        SCROLL_MODE_SHOW_ALWAYS: int
        SCROLL_MODE_SHOW_NEVER: int

    # Methods
    def set_h_scroll(self, value: int) -> None: ...
    def get_h_scroll(self) -> int: ...
    def set_v_scroll(self, value: int) -> None: ...
    def get_v_scroll(self) -> int: ...
    def set_horizontal_custom_step(self, value: float) -> None: ...
    def get_horizontal_custom_step(self) -> float: ...
    def set_vertical_custom_step(self, value: float) -> None: ...
    def get_vertical_custom_step(self) -> float: ...
    def set_horizontal_scroll_mode(self, enable: ScrollContainer.ScrollMode) -> None: ...
    def get_horizontal_scroll_mode(self) -> ScrollContainer.ScrollMode: ...
    def set_vertical_scroll_mode(self, enable: ScrollContainer.ScrollMode) -> None: ...
    def get_vertical_scroll_mode(self) -> ScrollContainer.ScrollMode: ...
    def set_deadzone(self, deadzone: int) -> None: ...
    def get_deadzone(self) -> int: ...
    def set_follow_focus(self, enabled: bool) -> None: ...
    def is_following_focus(self) -> bool: ...
    def get_h_scroll_bar(self) -> HScrollBar: ...
    def get_v_scroll_bar(self) -> VScrollBar: ...
    def ensure_control_visible(self, control: Control) -> None: ...

    # Signals
    def scroll_started(self) -> None: ...
    def scroll_ended(self) -> None: ...

    # Properties
    follow_focus: bool
    scroll_horizontal: int
    scroll_vertical: int
    scroll_horizontal_custom_step: float
    scroll_vertical_custom_step: float
    horizontal_scroll_mode: int
    vertical_scroll_mode: int
    scroll_deadzone: int


class SplitContainer(TypeInUse(Container)):
    @classmethod
    def new(cls) -> SplitContainer: ...

    # Enums
    class SplitContainer.DraggerVisibility(Enum):
        DRAGGER_VISIBLE: int
        DRAGGER_HIDDEN: int
        DRAGGER_HIDDEN_COLLAPSED: int

    # Methods
    def set_split_offset(self, offset: int) -> None: ...
    def get_split_offset(self) -> int: ...
    def clamp_split_offset(self) -> None: ...
    def set_collapsed(self, collapsed: bool) -> None: ...
    def is_collapsed(self) -> bool: ...
    def set_dragger_visibility(self, mode: SplitContainer.DraggerVisibility) -> None: ...
    def get_dragger_visibility(self) -> SplitContainer.DraggerVisibility: ...
    def set_vertical(self, vertical: bool) -> None: ...
    def is_vertical(self) -> bool: ...

    # Signals
    def dragged(self, offset: int) -> None: ...

    # Properties
    split_offset: int
    collapsed: bool
    dragger_visibility: int
    vertical: bool


class Sprite3D(TypeInUse(SpriteBase3D)):
    @classmethod
    def new(cls) -> Sprite3D: ...

    # Methods
    def set_texture(self, texture: Texture2D) -> None: ...
    def get_texture(self) -> Texture2D: ...
    def set_region_enabled(self, enabled: bool) -> None: ...
    def is_region_enabled(self) -> bool: ...
    def set_region_rect(self, rect: Rect2) -> None: ...
    def get_region_rect(self) -> Rect2: ...
    def set_frame(self, frame: int) -> None: ...
    def get_frame(self) -> int: ...
    def set_frame_coords(self, coords: Vector2i) -> None: ...
    def get_frame_coords(self) -> Vector2i: ...
    def set_vframes(self, vframes: int) -> None: ...
    def get_vframes(self) -> int: ...
    def set_hframes(self, hframes: int) -> None: ...
    def get_hframes(self) -> int: ...

    # Signals
    def frame_changed(self) -> None: ...
    def texture_changed(self) -> None: ...

    # Properties
    texture: Texture
    hframes: int
    vframes: int
    frame: int
    frame_coords: Vector2
    region_enabled: bool
    region_rect: Rect2


class StaticBody2D(TypeInUse(PhysicsBody2D)):
    @classmethod
    def new(cls) -> StaticBody2D: ...

    # Methods
    def set_constant_linear_velocity(self, vel: Vector2) -> None: ...
    def set_constant_angular_velocity(self, vel: float) -> None: ...
    def get_constant_linear_velocity(self) -> Vector2: ...
    def get_constant_angular_velocity(self) -> float: ...
    def set_physics_material_override(self, physics_material_override: PhysicsMaterial) -> None: ...
    def get_physics_material_override(self) -> PhysicsMaterial: ...

    # Properties
    physics_material_override: PhysicsMaterial
    constant_linear_velocity: Vector2
    constant_angular_velocity: float


class SubViewportContainer(TypeInUse(Container)):
    @classmethod
    def new(cls) -> SubViewportContainer: ...

    # Methods
    def set_stretch(self, enable: bool) -> None: ...
    def is_stretch_enabled(self) -> bool: ...
    def set_stretch_shrink(self, amount: int) -> None: ...
    def get_stretch_shrink(self) -> int: ...

    # Properties
    stretch: bool
    stretch_shrink: int


class TabContainer(TypeInUse(Container)):
    @classmethod
    def new(cls) -> TabContainer: ...

    # Methods
    def get_tab_count(self) -> int: ...
    def set_current_tab(self, tab_idx: int) -> None: ...
    def get_current_tab(self) -> int: ...
    def get_previous_tab(self) -> int: ...
    def get_current_tab_control(self) -> Control: ...
    def get_tab_control(self, tab_idx: int) -> Control: ...
    def set_tab_alignment(self, alignment: TabBar.AlignmentMode) -> None: ...
    def get_tab_alignment(self) -> TabBar.AlignmentMode: ...
    def set_clip_tabs(self, clip_tabs: bool) -> None: ...
    def get_clip_tabs(self) -> bool: ...
    def set_tabs_visible(self, visible: bool) -> None: ...
    def are_tabs_visible(self) -> bool: ...
    def set_all_tabs_in_front(self, is_front: bool) -> None: ...
    def is_all_tabs_in_front(self) -> bool: ...
    def set_tab_title(self, tab_idx: int, title: GDString | str) -> None: ...
    def get_tab_title(self, tab_idx: int) -> GDString: ...
    def set_tab_icon(self, tab_idx: int, icon: Texture2D) -> None: ...
    def get_tab_icon(self, tab_idx: int) -> Texture2D: ...
    def set_tab_disabled(self, tab_idx: int, disabled: bool) -> None: ...
    def is_tab_disabled(self, tab_idx: int) -> bool: ...
    def set_tab_hidden(self, tab_idx: int, hidden: bool) -> None: ...
    def is_tab_hidden(self, tab_idx: int) -> bool: ...
    def set_tab_metadata(self, tab_idx: int, metadata: GDAny) -> None: ...
    def get_tab_metadata(self, tab_idx: int) -> GDAny: ...
    def set_tab_button_icon(self, tab_idx: int, icon: Texture2D) -> None: ...
    def get_tab_button_icon(self, tab_idx: int) -> Texture2D: ...
    def get_tab_idx_at_point(self, point: Vector2) -> int: ...
    def get_tab_idx_from_control(self, control: Control) -> int: ...
    def set_popup(self, popup: Node) -> None: ...
    def get_popup(self) -> Popup: ...
    def set_drag_to_rearrange_enabled(self, enabled: bool) -> None: ...
    def get_drag_to_rearrange_enabled(self) -> bool: ...
    def set_tabs_rearrange_group(self, group_id: int) -> None: ...
    def get_tabs_rearrange_group(self) -> int: ...
    def set_use_hidden_tabs_for_min_size(self, enabled: bool) -> None: ...
    def get_use_hidden_tabs_for_min_size(self) -> bool: ...

    # Signals
    def active_tab_rearranged(self, idx_to: int) -> None: ...
    def tab_changed(self, tab: int) -> None: ...
    def tab_clicked(self, tab: int) -> None: ...
    def tab_hovered(self, tab: int) -> None: ...
    def tab_selected(self, tab: int) -> None: ...
    def tab_button_pressed(self, tab: int) -> None: ...
    def pre_popup_pressed(self) -> None: ...

    # Properties
    tab_alignment: int
    current_tab: int
    clip_tabs: bool
    tabs_visible: bool
    all_tabs_in_front: bool
    drag_to_rearrange_enabled: bool
    tabs_rearrange_group: int
    use_hidden_tabs_for_min_size: bool


class TextureButton(TypeInUse(BaseButton)):
    @classmethod
    def new(cls) -> TextureButton: ...

    # Enums
    class TextureButton.StretchMode(Enum):
        STRETCH_SCALE: int
        STRETCH_TILE: int
        STRETCH_KEEP: int
        STRETCH_KEEP_CENTERED: int
        STRETCH_KEEP_ASPECT: int
        STRETCH_KEEP_ASPECT_CENTERED: int
        STRETCH_KEEP_ASPECT_COVERED: int

    # Methods
    def set_texture_normal(self, texture: Texture2D) -> None: ...
    def set_texture_pressed(self, texture: Texture2D) -> None: ...
    def set_texture_hover(self, texture: Texture2D) -> None: ...
    def set_texture_disabled(self, texture: Texture2D) -> None: ...
    def set_texture_focused(self, texture: Texture2D) -> None: ...
    def set_click_mask(self, mask: BitMap) -> None: ...
    def set_ignore_texture_size(self, ignore: bool) -> None: ...
    def set_stretch_mode(self, mode: TextureButton.StretchMode) -> None: ...
    def set_flip_h(self, enable: bool) -> None: ...
    def is_flipped_h(self) -> bool: ...
    def set_flip_v(self, enable: bool) -> None: ...
    def is_flipped_v(self) -> bool: ...
    def get_texture_normal(self) -> Texture2D: ...
    def get_texture_pressed(self) -> Texture2D: ...
    def get_texture_hover(self) -> Texture2D: ...
    def get_texture_disabled(self) -> Texture2D: ...
    def get_texture_focused(self) -> Texture2D: ...
    def get_click_mask(self) -> BitMap: ...
    def get_ignore_texture_size(self) -> bool: ...
    def get_stretch_mode(self) -> TextureButton.StretchMode: ...

    # Properties
    texture_normal: Texture2D
    texture_pressed: Texture2D
    texture_hover: Texture2D
    texture_disabled: Texture2D
    texture_focused: Texture2D
    texture_click_mask: BitMap
    ignore_texture_size: bool
    stretch_mode: int
    flip_h: bool
    flip_v: bool


class VFlowContainer(TypeInUse(FlowContainer)):
    @classmethod
    def new(cls) -> VFlowContainer: ...


class VSplitContainer(TypeInUse(SplitContainer)):
    @classmethod
    def new(cls) -> VSplitContainer: ...


class VisibleOnScreenEnabler2D(TypeInUse(VisibleOnScreenNotifier2D)):
    @classmethod
    def new(cls) -> VisibleOnScreenEnabler2D: ...

    # Enums
    class VisibleOnScreenEnabler2D.EnableMode(Enum):
        ENABLE_MODE_INHERIT: int
        ENABLE_MODE_ALWAYS: int
        ENABLE_MODE_WHEN_PAUSED: int

    # Methods
    def set_enable_mode(self, mode: VisibleOnScreenEnabler2D.EnableMode) -> None: ...
    def get_enable_mode(self) -> VisibleOnScreenEnabler2D.EnableMode: ...
    def set_enable_node_path(self, path: NodePath | str) -> None: ...
    def get_enable_node_path(self) -> NodePath: ...

    # Properties
    enable_mode: int
    enable_node_path: NodePath


class VisibleOnScreenEnabler3D(TypeInUse(VisibleOnScreenNotifier3D)):
    @classmethod
    def new(cls) -> VisibleOnScreenEnabler3D: ...

    # Enums
    class VisibleOnScreenEnabler3D.EnableMode(Enum):
        ENABLE_MODE_INHERIT: int
        ENABLE_MODE_ALWAYS: int
        ENABLE_MODE_WHEN_PAUSED: int

    # Methods
    def set_enable_mode(self, mode: VisibleOnScreenEnabler3D.EnableMode) -> None: ...
    def get_enable_mode(self) -> VisibleOnScreenEnabler3D.EnableMode: ...
    def set_enable_node_path(self, path: NodePath | str) -> None: ...
    def get_enable_node_path(self) -> NodePath: ...

    # Properties
    enable_mode: int
    enable_node_path: NodePath


class AnimatableBody2D(TypeInUse(StaticBody2D)):
    @classmethod
    def new(cls) -> AnimatableBody2D: ...

    # Methods
    def set_sync_to_physics(self, enable: bool) -> None: ...
    def is_sync_to_physics_enabled(self) -> bool: ...

    # Properties
    sync_to_physics: bool


class Area2D(TypeInUse(CollisionObject2D)):
    @classmethod
    def new(cls) -> Area2D: ...

    # Enums
    class Area2D.SpaceOverride(Enum):
        SPACE_OVERRIDE_DISABLED: int
        SPACE_OVERRIDE_COMBINE: int
        SPACE_OVERRIDE_COMBINE_REPLACE: int
        SPACE_OVERRIDE_REPLACE: int
        SPACE_OVERRIDE_REPLACE_COMBINE: int

    # Methods
    def set_gravity_space_override_mode(self, space_override_mode: Area2D.SpaceOverride) -> None: ...
    def get_gravity_space_override_mode(self) -> Area2D.SpaceOverride: ...
    def set_gravity_is_point(self, enable: bool) -> None: ...
    def is_gravity_a_point(self) -> bool: ...
    def set_gravity_point_unit_distance(self, distance_scale: float) -> None: ...
    def get_gravity_point_unit_distance(self) -> float: ...
    def set_gravity_point_center(self, center: Vector2) -> None: ...
    def get_gravity_point_center(self) -> Vector2: ...
    def set_gravity_direction(self, direction: Vector2) -> None: ...
    def get_gravity_direction(self) -> Vector2: ...
    def set_gravity(self, gravity: float) -> None: ...
    def get_gravity(self) -> float: ...
    def set_linear_damp_space_override_mode(self, space_override_mode: Area2D.SpaceOverride) -> None: ...
    def get_linear_damp_space_override_mode(self) -> Area2D.SpaceOverride: ...
    def set_angular_damp_space_override_mode(self, space_override_mode: Area2D.SpaceOverride) -> None: ...
    def get_angular_damp_space_override_mode(self) -> Area2D.SpaceOverride: ...
    def set_linear_damp(self, linear_damp: float) -> None: ...
    def get_linear_damp(self) -> float: ...
    def set_angular_damp(self, angular_damp: float) -> None: ...
    def get_angular_damp(self) -> float: ...
    def set_priority(self, priority: int) -> None: ...
    def get_priority(self) -> int: ...
    def set_monitoring(self, enable: bool) -> None: ...
    def is_monitoring(self) -> bool: ...
    def set_monitorable(self, enable: bool) -> None: ...
    def is_monitorable(self) -> bool: ...
    def get_overlapping_bodies(self) -> GDArray: ...
    def get_overlapping_areas(self) -> GDArray: ...
    def has_overlapping_bodies(self) -> bool: ...
    def has_overlapping_areas(self) -> bool: ...
    def overlaps_body(self, body: Node) -> bool: ...
    def overlaps_area(self, area: Node) -> bool: ...
    def set_audio_bus_name(self, name: StringName | str) -> None: ...
    def get_audio_bus_name(self) -> StringName: ...
    def set_audio_bus_override(self, enable: bool) -> None: ...
    def is_overriding_audio_bus(self) -> bool: ...

    # Signals
    def body_shape_entered(self, body_rid: RID, body: Node2D, body_shape_index: int, local_shape_index: int) -> None: ...
    def body_shape_exited(self, body_rid: RID, body: Node2D, body_shape_index: int, local_shape_index: int) -> None: ...
    def body_entered(self, body: Node2D) -> None: ...
    def body_exited(self, body: Node2D) -> None: ...
    def area_shape_entered(self, area_rid: RID, area: Area2D, area_shape_index: int, local_shape_index: int) -> None: ...
    def area_shape_exited(self, area_rid: RID, area: Area2D, area_shape_index: int, local_shape_index: int) -> None: ...
    def area_entered(self, area: Area2D) -> None: ...
    def area_exited(self, area: Area2D) -> None: ...

    # Properties
    monitoring: bool
    monitorable: bool
    priority: int
    gravity_space_override: int
    gravity_point: bool
    gravity_point_unit_distance: float
    gravity_point_center: Vector2
    gravity_direction: Vector2
    gravity: float
    linear_damp_space_override: int
    linear_damp: float
    angular_damp_space_override: int
    angular_damp: float
    audio_bus_override: bool
    audio_bus_name: StringName


class AspectRatioContainer(TypeInUse(Container)):
    @classmethod
    def new(cls) -> AspectRatioContainer: ...

    # Enums
    class AspectRatioContainer.StretchMode(Enum):
        STRETCH_WIDTH_CONTROLS_HEIGHT: int
        STRETCH_HEIGHT_CONTROLS_WIDTH: int
        STRETCH_FIT: int
        STRETCH_COVER: int
    class AspectRatioContainer.AlignmentMode(Enum):
        ALIGNMENT_BEGIN: int
        ALIGNMENT_CENTER: int
        ALIGNMENT_END: int

    # Methods
    def set_ratio(self, ratio: float) -> None: ...
    def get_ratio(self) -> float: ...
    def set_stretch_mode(self, stretch_mode: AspectRatioContainer.StretchMode) -> None: ...
    def get_stretch_mode(self) -> AspectRatioContainer.StretchMode: ...
    def set_alignment_horizontal(self, alignment_horizontal: AspectRatioContainer.AlignmentMode) -> None: ...
    def get_alignment_horizontal(self) -> AspectRatioContainer.AlignmentMode: ...
    def set_alignment_vertical(self, alignment_vertical: AspectRatioContainer.AlignmentMode) -> None: ...
    def get_alignment_vertical(self) -> AspectRatioContainer.AlignmentMode: ...

    # Properties
    ratio: float
    stretch_mode: int
    alignment_horizontal: int
    alignment_vertical: int


class BoxContainer(TypeInUse(Container)):
    @classmethod
    def new(cls) -> BoxContainer: ...

    # Enums
    class BoxContainer.AlignmentMode(Enum):
        ALIGNMENT_BEGIN: int
        ALIGNMENT_CENTER: int
        ALIGNMENT_END: int

    # Methods
    def add_spacer(self, begin: bool) -> Control: ...
    def set_alignment(self, alignment: BoxContainer.AlignmentMode) -> None: ...
    def get_alignment(self) -> BoxContainer.AlignmentMode: ...
    def set_vertical(self, vertical: bool) -> None: ...
    def is_vertical(self) -> bool: ...

    # Properties
    alignment: int
    vertical: bool


class CSGCombiner3D(TypeInUse(CSGShape3D)):
    @classmethod
    def new(cls) -> CSGCombiner3D: ...


class CSGPrimitive3D(TypeInUse(CSGShape3D)):

    # Methods
    def set_flip_faces(self, flip_faces: bool) -> None: ...
    def get_flip_faces(self) -> bool: ...

    # Properties
    flip_faces: bool


class CSGSphere3D(TypeInUse(CSGPrimitive3D)):
    @classmethod
    def new(cls) -> CSGSphere3D: ...

    # Methods
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_radial_segments(self, radial_segments: int) -> None: ...
    def get_radial_segments(self) -> int: ...
    def set_rings(self, rings: int) -> None: ...
    def get_rings(self) -> int: ...
    def set_smooth_faces(self, smooth_faces: bool) -> None: ...
    def get_smooth_faces(self) -> bool: ...
    def set_material(self, material: Material) -> None: ...
    def get_material(self) -> Material: ...

    # Properties
    radius: float
    radial_segments: int
    rings: int
    smooth_faces: bool
    material: BaseMaterial3D | ShaderMaterial


class CSGTorus3D(TypeInUse(CSGPrimitive3D)):
    @classmethod
    def new(cls) -> CSGTorus3D: ...

    # Methods
    def set_inner_radius(self, radius: float) -> None: ...
    def get_inner_radius(self) -> float: ...
    def set_outer_radius(self, radius: float) -> None: ...
    def get_outer_radius(self) -> float: ...
    def set_sides(self, sides: int) -> None: ...
    def get_sides(self) -> int: ...
    def set_ring_sides(self, sides: int) -> None: ...
    def get_ring_sides(self) -> int: ...
    def set_material(self, material: Material) -> None: ...
    def get_material(self) -> Material: ...
    def set_smooth_faces(self, smooth_faces: bool) -> None: ...
    def get_smooth_faces(self) -> bool: ...

    # Properties
    inner_radius: float
    outer_radius: float
    sides: int
    ring_sides: int
    smooth_faces: bool
    material: BaseMaterial3D | ShaderMaterial


class CenterContainer(TypeInUse(Container)):
    @classmethod
    def new(cls) -> CenterContainer: ...

    # Methods
    def set_use_top_left(self, enable: bool) -> None: ...
    def is_using_top_left(self) -> bool: ...

    # Properties
    use_top_left: bool


class CharacterBody2D(TypeInUse(PhysicsBody2D)):
    @classmethod
    def new(cls) -> CharacterBody2D: ...

    # Enums
    class CharacterBody2D.MotionMode(Enum):
        MOTION_MODE_GROUNDED: int
        MOTION_MODE_FLOATING: int
    class CharacterBody2D.PlatformOnLeave(Enum):
        PLATFORM_ON_LEAVE_ADD_VELOCITY: int
        PLATFORM_ON_LEAVE_ADD_UPWARD_VELOCITY: int
        PLATFORM_ON_LEAVE_DO_NOTHING: int

    # Methods
    def move_and_slide(self) -> bool: ...
    def apply_floor_snap(self) -> None: ...
    def set_velocity(self, velocity: Vector2) -> None: ...
    def get_velocity(self) -> Vector2: ...
    def set_safe_margin(self, margin: float) -> None: ...
    def get_safe_margin(self) -> float: ...
    def is_floor_stop_on_slope_enabled(self) -> bool: ...
    def set_floor_stop_on_slope_enabled(self, enabled: bool) -> None: ...
    def set_floor_constant_speed_enabled(self, enabled: bool) -> None: ...
    def is_floor_constant_speed_enabled(self) -> bool: ...
    def set_floor_block_on_wall_enabled(self, enabled: bool) -> None: ...
    def is_floor_block_on_wall_enabled(self) -> bool: ...
    def set_slide_on_ceiling_enabled(self, enabled: bool) -> None: ...
    def is_slide_on_ceiling_enabled(self) -> bool: ...
    def set_platform_floor_layers(self, exclude_layer: int) -> None: ...
    def get_platform_floor_layers(self) -> int: ...
    def set_platform_wall_layers(self, exclude_layer: int) -> None: ...
    def get_platform_wall_layers(self) -> int: ...
    def get_max_slides(self) -> int: ...
    def set_max_slides(self, max_slides: int) -> None: ...
    def get_floor_max_angle(self) -> float: ...
    def set_floor_max_angle(self, radians: float) -> None: ...
    def get_floor_snap_length(self) -> float: ...
    def set_floor_snap_length(self, floor_snap_length: float) -> None: ...
    def get_wall_min_slide_angle(self) -> float: ...
    def set_wall_min_slide_angle(self, radians: float) -> None: ...
    def get_up_direction(self) -> Vector2: ...
    def set_up_direction(self, up_direction: Vector2) -> None: ...
    def set_motion_mode(self, mode: CharacterBody2D.MotionMode) -> None: ...
    def get_motion_mode(self) -> CharacterBody2D.MotionMode: ...
    def set_platform_on_leave(self, on_leave_apply_velocity: CharacterBody2D.PlatformOnLeave) -> None: ...
    def get_platform_on_leave(self) -> CharacterBody2D.PlatformOnLeave: ...
    def is_on_floor(self) -> bool: ...
    def is_on_floor_only(self) -> bool: ...
    def is_on_ceiling(self) -> bool: ...
    def is_on_ceiling_only(self) -> bool: ...
    def is_on_wall(self) -> bool: ...
    def is_on_wall_only(self) -> bool: ...
    def get_floor_normal(self) -> Vector2: ...
    def get_wall_normal(self) -> Vector2: ...
    def get_last_motion(self) -> Vector2: ...
    def get_position_delta(self) -> Vector2: ...
    def get_real_velocity(self) -> Vector2: ...
    def get_floor_angle(self, up_direction: Vector2 = Vector2(0, -1)) -> float: ...
    def get_platform_velocity(self) -> Vector2: ...
    def get_slide_collision_count(self) -> int: ...
    def get_slide_collision(self, slide_idx: int) -> KinematicCollision2D: ...
    def get_last_slide_collision(self) -> KinematicCollision2D: ...

    # Properties
    motion_mode: int
    up_direction: Vector2
    velocity: Vector2
    slide_on_ceiling: bool
    max_slides: int
    wall_min_slide_angle: float
    floor_stop_on_slope: bool
    floor_constant_speed: bool
    floor_block_on_wall: bool
    floor_max_angle: float
    floor_snap_length: float
    platform_on_leave: int
    platform_floor_layers: int
    platform_wall_layers: int
    safe_margin: float


class DampedSpringJoint2D(TypeInUse(Joint2D)):
    @classmethod
    def new(cls) -> DampedSpringJoint2D: ...

    # Methods
    def set_length(self, length: float) -> None: ...
    def get_length(self) -> float: ...
    def set_rest_length(self, rest_length: float) -> None: ...
    def get_rest_length(self) -> float: ...
    def set_stiffness(self, stiffness: float) -> None: ...
    def get_stiffness(self) -> float: ...
    def set_damping(self, damping: float) -> None: ...
    def get_damping(self) -> float: ...

    # Properties
    length: float
    rest_length: float
    stiffness: float
    damping: float


class DirectionalLight2D(TypeInUse(Light2D)):
    @classmethod
    def new(cls) -> DirectionalLight2D: ...

    # Methods
    def set_max_distance(self, pixels: float) -> None: ...
    def get_max_distance(self) -> float: ...

    # Properties
    height: float
    max_distance: float


class EditorInspector(TypeInUse(ScrollContainer)):

    # Methods
    def get_selected_path(self) -> GDString: ...

    # Signals
    def property_selected(self, property: GDString | str) -> None: ...
    def property_keyed(self, property: GDString | str, value: GDAny, advance: bool) -> None: ...
    def property_deleted(self, property: GDString | str) -> None: ...
    def resource_selected(self, resource: Resource, path: GDString | str) -> None: ...
    def object_id_selected(self, id: int) -> None: ...
    def property_edited(self, property: GDString | str) -> None: ...
    def property_toggled(self, property: GDString | str, checked: bool) -> None: ...
    def edited_object_changed(self) -> None: ...
    def restart_requested(self) -> None: ...


class GrooveJoint2D(TypeInUse(Joint2D)):
    @classmethod
    def new(cls) -> GrooveJoint2D: ...

    # Methods
    def set_length(self, length: float) -> None: ...
    def get_length(self) -> float: ...
    def set_initial_offset(self, offset: float) -> None: ...
    def get_initial_offset(self) -> float: ...

    # Properties
    length: float
    initial_offset: float


class HBoxContainer(TypeInUse(BoxContainer)):
    @classmethod
    def new(cls) -> HBoxContainer: ...


class HSplitContainer(TypeInUse(SplitContainer)):
    @classmethod
    def new(cls) -> HSplitContainer: ...


class PhysicalBone2D(TypeInUse(RigidBody2D)):
    @classmethod
    def new(cls) -> PhysicalBone2D: ...

    # Methods
    def get_joint(self) -> Joint2D: ...
    def get_auto_configure_joint(self) -> bool: ...
    def set_auto_configure_joint(self, auto_configure_joint: bool) -> None: ...
    def set_simulate_physics(self, simulate_physics: bool) -> None: ...
    def get_simulate_physics(self) -> bool: ...
    def is_simulating_physics(self) -> bool: ...
    def set_bone2d_nodepath(self, nodepath: NodePath | str) -> None: ...
    def get_bone2d_nodepath(self) -> NodePath: ...
    def set_bone2d_index(self, bone_index: int) -> None: ...
    def get_bone2d_index(self) -> int: ...
    def set_follow_bone_when_simulating(self, follow_bone: bool) -> None: ...
    def get_follow_bone_when_simulating(self) -> bool: ...

    # Properties
    bone2d_nodepath: NodePath
    bone2d_index: int
    auto_configure_joint: bool
    simulate_physics: bool
    follow_bone_when_simulating: bool


class VBoxContainer(TypeInUse(BoxContainer)):
    @classmethod
    def new(cls) -> VBoxContainer: ...


class CSGBox3D(TypeInUse(CSGPrimitive3D)):
    @classmethod
    def new(cls) -> CSGBox3D: ...

    # Methods
    def set_size(self, size: Vector3) -> None: ...
    def get_size(self) -> Vector3: ...
    def set_material(self, material: Material) -> None: ...
    def get_material(self) -> Material: ...

    # Properties
    size: Vector3
    material: BaseMaterial3D | ShaderMaterial


class CSGCylinder3D(TypeInUse(CSGPrimitive3D)):
    @classmethod
    def new(cls) -> CSGCylinder3D: ...

    # Methods
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...
    def set_sides(self, sides: int) -> None: ...
    def get_sides(self) -> int: ...
    def set_cone(self, cone: bool) -> None: ...
    def is_cone(self) -> bool: ...
    def set_material(self, material: Material) -> None: ...
    def get_material(self) -> Material: ...
    def set_smooth_faces(self, smooth_faces: bool) -> None: ...
    def get_smooth_faces(self) -> bool: ...

    # Properties
    radius: float
    height: float
    sides: int
    cone: bool
    smooth_faces: bool
    material: BaseMaterial3D | ShaderMaterial


class CSGMesh3D(TypeInUse(CSGPrimitive3D)):
    @classmethod
    def new(cls) -> CSGMesh3D: ...

    # Methods
    def set_mesh(self, mesh: Mesh) -> None: ...
    def get_mesh(self) -> Mesh: ...
    def set_material(self, material: Material) -> None: ...
    def get_material(self) -> Material: ...

    # Properties
    mesh: Mesh
    material: BaseMaterial3D | ShaderMaterial


class CSGPolygon3D(TypeInUse(CSGPrimitive3D)):
    @classmethod
    def new(cls) -> CSGPolygon3D: ...

    # Enums
    class CSGPolygon3D.Mode(Enum):
        MODE_DEPTH: int
        MODE_SPIN: int
        MODE_PATH: int
    class CSGPolygon3D.PathRotation(Enum):
        PATH_ROTATION_POLYGON: int
        PATH_ROTATION_PATH: int
        PATH_ROTATION_PATH_FOLLOW: int
    class CSGPolygon3D.PathIntervalType(Enum):
        PATH_INTERVAL_DISTANCE: int
        PATH_INTERVAL_SUBDIVIDE: int

    # Methods
    def set_polygon(self, polygon: PackedVector2Array) -> None: ...
    def get_polygon(self) -> PackedVector2Array: ...
    def set_mode(self, mode: CSGPolygon3D.Mode) -> None: ...
    def get_mode(self) -> CSGPolygon3D.Mode: ...
    def set_depth(self, depth: float) -> None: ...
    def get_depth(self) -> float: ...
    def set_spin_degrees(self, degrees: float) -> None: ...
    def get_spin_degrees(self) -> float: ...
    def set_spin_sides(self, spin_sides: int) -> None: ...
    def get_spin_sides(self) -> int: ...
    def set_path_node(self, path: NodePath | str) -> None: ...
    def get_path_node(self) -> NodePath: ...
    def set_path_interval_type(self, interval_type: CSGPolygon3D.PathIntervalType) -> None: ...
    def get_path_interval_type(self) -> CSGPolygon3D.PathIntervalType: ...
    def set_path_interval(self, interval: float) -> None: ...
    def get_path_interval(self) -> float: ...
    def set_path_simplify_angle(self, degrees: float) -> None: ...
    def get_path_simplify_angle(self) -> float: ...
    def set_path_rotation(self, path_rotation: CSGPolygon3D.PathRotation) -> None: ...
    def get_path_rotation(self) -> CSGPolygon3D.PathRotation: ...
    def set_path_local(self, enable: bool) -> None: ...
    def is_path_local(self) -> bool: ...
    def set_path_continuous_u(self, enable: bool) -> None: ...
    def is_path_continuous_u(self) -> bool: ...
    def set_path_u_distance(self, distance: float) -> None: ...
    def get_path_u_distance(self) -> float: ...
    def set_path_joined(self, enable: bool) -> None: ...
    def is_path_joined(self) -> bool: ...
    def set_material(self, material: Material) -> None: ...
    def get_material(self) -> Material: ...
    def set_smooth_faces(self, smooth_faces: bool) -> None: ...
    def get_smooth_faces(self) -> bool: ...

    # Properties
    polygon: PackedVector2Array
    mode: int
    depth: float
    spin_degrees: float
    spin_sides: int
    path_node: NodePath
    path_interval_type: int
    path_interval: float
    path_simplify_angle: float
    path_rotation: int
    path_local: bool
    path_continuous_u: bool
    path_u_distance: float
    path_joined: bool
    smooth_faces: bool
    material: BaseMaterial3D | ShaderMaterial


class ColorPicker(TypeInUse(VBoxContainer)):
    @classmethod
    def new(cls) -> ColorPicker: ...

    # Enums
    class ColorPicker.ColorModeType(Enum):
        MODE_RGB: int
        MODE_HSV: int
        MODE_RAW: int
        MODE_OKHSL: int
    class ColorPicker.PickerShapeType(Enum):
        SHAPE_HSV_RECTANGLE: int
        SHAPE_HSV_WHEEL: int
        SHAPE_VHS_CIRCLE: int
        SHAPE_OKHSL_CIRCLE: int
        SHAPE_NONE: int

    # Methods
    def set_pick_color(self, color: Color) -> None: ...
    def get_pick_color(self) -> Color: ...
    def set_deferred_mode(self, mode: bool) -> None: ...
    def is_deferred_mode(self) -> bool: ...
    def set_color_mode(self, color_mode: ColorPicker.ColorModeType) -> None: ...
    def get_color_mode(self) -> ColorPicker.ColorModeType: ...
    def set_edit_alpha(self, show: bool) -> None: ...
    def is_editing_alpha(self) -> bool: ...
    def set_can_add_swatches(self, enabled: bool) -> None: ...
    def are_swatches_enabled(self) -> bool: ...
    def set_presets_visible(self, visible: bool) -> None: ...
    def are_presets_visible(self) -> bool: ...
    def set_modes_visible(self, visible: bool) -> None: ...
    def are_modes_visible(self) -> bool: ...
    def set_sampler_visible(self, visible: bool) -> None: ...
    def is_sampler_visible(self) -> bool: ...
    def set_sliders_visible(self, visible: bool) -> None: ...
    def are_sliders_visible(self) -> bool: ...
    def set_hex_visible(self, visible: bool) -> None: ...
    def is_hex_visible(self) -> bool: ...
    def add_preset(self, color: Color) -> None: ...
    def erase_preset(self, color: Color) -> None: ...
    def get_presets(self) -> PackedColorArray: ...
    def add_recent_preset(self, color: Color) -> None: ...
    def erase_recent_preset(self, color: Color) -> None: ...
    def get_recent_presets(self) -> PackedColorArray: ...
    def set_picker_shape(self, shape: ColorPicker.PickerShapeType) -> None: ...
    def get_picker_shape(self) -> ColorPicker.PickerShapeType: ...

    # Signals
    def color_changed(self, color: Color) -> None: ...
    def preset_added(self, color: Color) -> None: ...
    def preset_removed(self, color: Color) -> None: ...

    # Properties
    color: Color
    edit_alpha: bool
    color_mode: int
    deferred_mode: bool
    picker_shape: int
    can_add_swatches: bool
    sampler_visible: bool
    color_modes_visible: bool
    sliders_visible: bool
    hex_visible: bool
    presets_visible: bool


class EditorResourcePicker(TypeInUse(HBoxContainer)):

    # Methods
    def set_base_type(self, base_type: GDString | str) -> None: ...
    def get_base_type(self) -> GDString: ...
    def get_allowed_types(self) -> PackedStringArray: ...
    def set_edited_resource(self, resource: Resource) -> None: ...
    def get_edited_resource(self) -> Resource: ...
    def set_toggle_mode(self, enable: bool) -> None: ...
    def is_toggle_mode(self) -> bool: ...
    def set_toggle_pressed(self, pressed: bool) -> None: ...
    def set_editable(self, enable: bool) -> None: ...
    def is_editable(self) -> bool: ...

    # Signals
    def resource_selected(self, resource: Resource, inspect: bool) -> None: ...
    def resource_changed(self, resource: Resource) -> None: ...

    # Properties
    base_type: GDString
    edited_resource: Resource
    editable: bool
    toggle_mode: bool


class EditorScriptPicker(TypeInUse(EditorResourcePicker)):

    # Methods
    def set_script_owner(self, owner_node: Node) -> None: ...
    def get_script_owner(self) -> Node: ...

    # Properties
    script_owner: Node


class FileSystemDock(TypeInUse(VBoxContainer)):

    # Methods
    def navigate_to_path(self, path: GDString | str) -> None: ...
    def add_resource_tooltip_plugin(self, plugin: EditorResourceTooltipPlugin) -> None: ...
    def remove_resource_tooltip_plugin(self, plugin: EditorResourceTooltipPlugin) -> None: ...

    # Signals
    def inherit(self, file: GDString | str) -> None: ...
    def instantiate(self, files: PackedStringArray) -> None: ...
    def resource_removed(self, resource: Resource) -> None: ...
    def file_removed(self, file: GDString | str) -> None: ...
    def folder_removed(self, folder: GDString | str) -> None: ...
    def files_moved(self, old_file: GDString | str, new_file: GDString | str) -> None: ...
    def folder_moved(self, old_folder: GDString | str, new_folder: GDString | str) -> None: ...
    def display_mode_changed(self) -> None: ...


class ScriptEditorBase(TypeInUse(VBoxContainer)):

    # Methods
    def get_base_editor(self) -> Control: ...
    def add_syntax_highlighter(self, highlighter: EditorSyntaxHighlighter) -> None: ...

    # Signals
    def name_changed(self) -> None: ...
    def edited_script_changed(self) -> None: ...
    def request_help(self, topic: GDString | str) -> None: ...
    def request_open_script_at_line(self, script: GDObject, line: int) -> None: ...
    def request_save_history(self) -> None: ...
    def go_to_help(self, what: GDString | str) -> None: ...
    def search_in_files_requested(self, text: GDString | str) -> None: ...
    def replace_in_files_requested(self, text: GDString | str) -> None: ...
    def go_to_method(self, script: GDObject, method: GDString | str) -> None: ...
