//! # D-Bus interface proxy for: `org.freedesktop.UDisks2.NVMe.Namespace`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/freedesktop/UDisks2/block_devices/xxxx' from service 'org.freedesktop.UDisks2' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "org.freedesktop.UDisks2.NVMe.Namespace",
    default_service = "org.freedesktop.UDisks2"
)]
pub trait Namespace {
    /// FormatNamespace method
    fn format_namespace(
        &self,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// EUI64 property
    #[zbus(property, name = "EUI64")]
    fn eui64(&self) -> zbus::Result<String>;

    /// FormatPercentRemaining property
    #[zbus(property)]
    fn format_percent_remaining(&self) -> zbus::Result<i32>;

    /// FormattedLBASize property
    #[zbus(property, name = "FormattedLBASize")]
    fn formatted_lbasize(&self) -> zbus::Result<(u16, u16, u8)>;

    /// LBAFormats property
    #[zbus(property, name = "LBAFormats")]
    fn lbaformats(&self) -> zbus::Result<Vec<(u16, u16, u8)>>;

    /// NGUID property
    #[zbus(property, name = "NGUID")]
    fn nguid(&self) -> zbus::Result<String>;

    /// NSID property
    #[zbus(property, name = "NSID")]
    fn nsid(&self) -> zbus::Result<u32>;

    /// NamespaceCapacity property
    #[zbus(property)]
    fn namespace_capacity(&self) -> zbus::Result<u64>;

    /// NamespaceSize property
    #[zbus(property)]
    fn namespace_size(&self) -> zbus::Result<u64>;

    /// NamespaceUtilization property
    #[zbus(property)]
    fn namespace_utilization(&self) -> zbus::Result<u64>;

    /// UUID property
    #[zbus(property, name = "UUID")]
    fn uuid(&self) -> zbus::Result<String>;

    /// WWN property
    #[zbus(property, name = "WWN")]
    fn wwn(&self) -> zbus::Result<String>;
}
