//! # D-Bus interface proxy for: `org.freedesktop.UDisks2.NVMe.Controller`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/freedesktop/UDisks2/drives/xxxx' from service 'org.freedesktop.UDisks2' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "org.freedesktop.UDisks2.NVMe.Controller",
    default_service = "org.freedesktop.UDisks2"
)]
pub trait Controller {
    /// SanitizeStart method
    fn sanitize_start(
        &self,
        action: &str,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// SmartGetAttributes method
    fn smart_get_attributes(
        &self,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// SmartSelftestAbort method
    fn smart_selftest_abort(
        &self,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// SmartSelftestStart method
    fn smart_selftest_start(
        &self,
        type_: &str,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// SmartUpdate method
    fn smart_update(
        &self,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// ControllerID property
    #[zbus(property, name = "ControllerID")]
    fn controller_id(&self) -> zbus::Result<u16>;

    /// FGUID property
    #[zbus(property, name = "FGUID")]
    fn fguid(&self) -> zbus::Result<String>;

    /// NVMeRevision property
    #[zbus(property, name = "NVMeRevision")]
    fn nvme_revision(&self) -> zbus::Result<String>;

    /// SanitizePercentRemaining property
    #[zbus(property)]
    fn sanitize_percent_remaining(&self) -> zbus::Result<i32>;

    /// SanitizeStatus property
    #[zbus(property)]
    fn sanitize_status(&self) -> zbus::Result<String>;

    /// SmartCriticalWarning property
    #[zbus(property)]
    fn smart_critical_warning(&self) -> zbus::Result<Vec<String>>;

    /// SmartPowerOnHours property
    #[zbus(property)]
    fn smart_power_on_hours(&self) -> zbus::Result<u64>;

    /// SmartSelftestPercentRemaining property
    #[zbus(property)]
    fn smart_selftest_percent_remaining(&self) -> zbus::Result<i32>;

    /// SmartSelftestStatus property
    #[zbus(property)]
    fn smart_selftest_status(&self) -> zbus::Result<String>;

    /// SmartTemperature property
    #[zbus(property)]
    fn smart_temperature(&self) -> zbus::Result<u16>;

    /// SmartUpdated property
    #[zbus(property)]
    fn smart_updated(&self) -> zbus::Result<u64>;

    /// State property
    #[zbus(property)]
    fn state(&self) -> zbus::Result<String>;

    /// SubsystemNQN property
    #[zbus(property, name = "SubsystemNQN")]
    fn subsystem_nqn(&self) -> zbus::Result<Vec<u8>>;

    /// UnallocatedCapacity property
    #[zbus(property)]
    fn unallocated_capacity(&self) -> zbus::Result<u64>;
}
