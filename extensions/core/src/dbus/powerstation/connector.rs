//! # D-Bus interface proxy for: `org.shadowblip.GPU.Card.Connector`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/shadowblip/Performance/GPU/card0/DP/1' from service 'org.shadowblip.PowerStation' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "org.shadowblip.GPU.Card.Connector",
    default_service = "org.shadowblip.PowerStation",
    default_path = "/org/shadowblip/Performance/GPU/card0/DP/1"
)]
pub trait Connector {
    /// DPMS property
    #[zbus(property, name = "DPMS")]
    fn dpms(&self) -> zbus::Result<bool>;

    /// Enabled property
    #[zbus(property)]
    fn enabled(&self) -> zbus::Result<bool>;

    /// Id property
    #[zbus(property)]
    fn id(&self) -> zbus::Result<u32>;

    /// Modes property
    #[zbus(property)]
    fn modes(&self) -> zbus::Result<Vec<String>>;

    /// Name property
    #[zbus(property)]
    fn name(&self) -> zbus::Result<String>;

    /// Path property
    #[zbus(property)]
    fn path(&self) -> zbus::Result<String>;

    /// Status property
    #[zbus(property)]
    fn status(&self) -> zbus::Result<String>;
}
