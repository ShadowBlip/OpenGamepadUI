//! # D-Bus interface proxy for: `org.shadowblip.GPU.Card`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/shadowblip/Performance/GPU/card0' from service 'org.shadowblip.PowerStation' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PeerProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "org.shadowblip.GPU.Card",
    default_service = "org.shadowblip.PowerStation",
    default_path = "/org/shadowblip/Performance/GPU/card0"
)]
pub trait Card {
    /// EnumerateConnectors method
    fn enumerate_connectors(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// Class property
    #[zbus(property)]
    fn class(&self) -> zbus::Result<String>;

    /// ClassId property
    #[zbus(property)]
    fn class_id(&self) -> zbus::Result<String>;

    /// ClockLimitMhzMax property
    #[zbus(property)]
    fn clock_limit_mhz_max(&self) -> zbus::Result<f64>;

    /// ClockLimitMhzMin property
    #[zbus(property)]
    fn clock_limit_mhz_min(&self) -> zbus::Result<f64>;

    /// ClockValueMhzMax property
    #[zbus(property)]
    fn clock_value_mhz_max(&self) -> zbus::Result<f64>;
    #[zbus(property)]
    fn set_clock_value_mhz_max(&self, value: f64) -> zbus::Result<()>;

    /// ClockValueMhzMin property
    #[zbus(property)]
    fn clock_value_mhz_min(&self) -> zbus::Result<f64>;
    #[zbus(property)]
    fn set_clock_value_mhz_min(&self, value: f64) -> zbus::Result<()>;

    /// Device property
    #[zbus(property)]
    fn device(&self) -> zbus::Result<String>;

    /// DeviceId property
    #[zbus(property)]
    fn device_id(&self) -> zbus::Result<String>;

    /// ManualClock property
    #[zbus(property)]
    fn manual_clock(&self) -> zbus::Result<bool>;
    #[zbus(property)]
    fn set_manual_clock(&self, value: bool) -> zbus::Result<()>;

    /// Name property
    #[zbus(property)]
    fn name(&self) -> zbus::Result<String>;

    /// Path property
    #[zbus(property)]
    fn path(&self) -> zbus::Result<String>;

    /// RevisionId property
    #[zbus(property)]
    fn revision_id(&self) -> zbus::Result<String>;

    /// Subdevice property
    #[zbus(property)]
    fn subdevice(&self) -> zbus::Result<String>;

    /// SubdeviceId property
    #[zbus(property)]
    fn subdevice_id(&self) -> zbus::Result<String>;

    /// SubvendorId property
    #[zbus(property)]
    fn subvendor_id(&self) -> zbus::Result<String>;

    /// Vendor property
    #[zbus(property)]
    fn vendor(&self) -> zbus::Result<String>;

    /// VendorId property
    #[zbus(property)]
    fn vendor_id(&self) -> zbus::Result<String>;
}
