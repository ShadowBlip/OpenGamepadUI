//! # D-Bus interface proxy for: `org.bluez.Media1`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/bluez/hci0' from service 'org.bluez' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "org.bluez.Media1",
    default_service = "org.bluez",
    default_path = "/org/bluez/hci0"
)]
trait Media1 {
    /// RegisterApplication method
    fn register_application(
        &self,
        application: &zbus::zvariant::ObjectPath<'_>,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// RegisterEndpoint method
    fn register_endpoint(
        &self,
        endpoint: &zbus::zvariant::ObjectPath<'_>,
        properties: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// RegisterPlayer method
    fn register_player(
        &self,
        player: &zbus::zvariant::ObjectPath<'_>,
        properties: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// UnregisterApplication method
    fn unregister_application(
        &self,
        application: &zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;

    /// UnregisterEndpoint method
    fn unregister_endpoint(&self, endpoint: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// UnregisterPlayer method
    fn unregister_player(&self, player: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// SupportedUUIDs property
    #[zbus(property, name = "SupportedUUIDs")]
    fn supported_uuids(&self) -> zbus::Result<Vec<String>>;
}
